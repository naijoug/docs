import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as s,a as n,f as o}from"./app-bX6ZPxEY.js";const c={},t=o(`<h2 id="内存分配" tabindex="-1"><a class="header-anchor" href="#内存分配" aria-hidden="true">#</a> 内存分配</h2><h3 id="❓一个-objc-对象如何进行内存布局" tabindex="-1"><a class="header-anchor" href="#❓一个-objc-对象如何进行内存布局" aria-hidden="true">#</a> ❓一个 <code>objc</code> 对象如何进行内存布局？</h3><details class="hint-container details"><summary>💡</summary><p>主要分为两大类：实例对象内存和类对象内存布局</p><ul><li>实例对象内存布局：包括 <code>isa</code> 和实例变量。(通过 <code>isa</code> 可以找到类对象)</li><li>类对象内存布局：包括属性列表、方法列表、协议列表。</li></ul></details><h3 id="❓oc-中一个-nsobject-对象-占几个字节" tabindex="-1"><a class="header-anchor" href="#❓oc-中一个-nsobject-对象-占几个字节" aria-hidden="true">#</a> ❓<code>OC</code> 中一个 <code>NSObject</code> 对象，占几个字节？</h3><details class="hint-container details"><summary>💡</summary><p>一个 <code>NSObject</code> 对象应该就是存放这个对象的指针地址。一个指针的大小应该是占用 16 个字节。</p></details><blockquote><p><code>NSObject</code> 结构体里面有什么，大小为什么是 <code>16</code> 字节？</p></blockquote><details class="hint-container details"><summary>💡</summary><p>NSObject是所有Objective-C类的根类，它所提供的基本接口允许对象在Objective-C的运行时环境中执行标准的行为。</p><p>在Objective-C中，NSObject本身只保有一个单一的实例变量，即isa指针。isa指针是一个关联到类对象的指针，使得运行时环境能够知道该对象是属于哪个类并找到对应的实例方法。</p><p>然而，NSObject的大小为16 bytes，并不仅仅是因为这个isa指针。在64位系统中，isa指针的大小为8 bytes，那么剩下的8 bytes是用于什么呢？</p><p>在Objective-C的运行时环境中，为了保证内存分配的对齐，会给每个对象额外分配一些用不到的字节。因此，即使NSObject只有一个8 bytes的isa指针，它的大小也会被对齐到最近的2的次幂，也就是16 bytes。</p><p>对于NSObject的子类，除了NSObject的isa指针外，还会包含其自身定义的实例变量。同样的，子类对象的大小也会被对齐到最近的2的次幂。</p><p>所以，即使NSObject只有一个8 byte的isa指针，但是由于内存对齐的原因，它的大小还是被扩充至16 bytes。</p></details><h3 id="❓oc-中如下类结构-占用几个字节" tabindex="-1"><a class="header-anchor" href="#❓oc-中如下类结构-占用几个字节" aria-hidden="true">#</a> ❓<code>OC</code> 中如下类结构，占用几个字节</h3><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">@interface</span> Todo<span class="token punctuation">:</span> NSObject 
<span class="token punctuation">{</span>
 <span class="token keyword">int</span><span class="token punctuation">:</span> _no<span class="token punctuation">;</span>
 String<span class="token punctuation">:</span> _title<span class="token punctuation">;</span>
 String<span class="token punctuation">:</span> _detail<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">@end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>💡</summary><p>在Objective-C中，<code>NSObject</code>基类本身有一个8字节的<code>isa</code>指针。这是每个Objective-C对象所必含的。以下是分析：</p><ol><li><code>_no</code> 是一个整数，占四个字节（在常见的32位和64位架构上）。</li><li><code>_title</code> 是一个对象指针，采用指针存放，指针在32位架构占四字节，在64位架构中占八字节。</li><li><code>_detail</code> 是另一个对象指针，同样，在32位架构中占四字节，在64位架构中占八字节。</li></ol><p>因此，对于32位架构，整个对象可能占用 (8+4+4+4)=20字节。但通常，由于内存对齐，这个数字会上升到最接近且大于它的2的幂的数，也就是32字节。</p><p>对于64位架构，对象可能占用 (8+4+8+8)=28字节。同样因为内存对齐，这个数字会上升到最接近且大于它的2的幂的数，也就是32字节。</p><p>这里要注意，我所说的是“可能”占用的字节数，因为实际上这取决于Objective-C运行时如何布局这个类的成员。运行时可能会重新排序成员，或者插入填充字节，导致实际占用的空间与我们的预计略有不同。</p><p>如果你需要在代码中确定这个类的实例大小，你可以使用Objective-C的<code>class_getInstanceSize()</code>函数，它会返回一个类的实例在运行时所占用的字节数：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">import</span> <span class="token expression"><span class="token operator">&lt;</span>objc<span class="token operator">/</span>runtime<span class="token punctuation">.</span>h<span class="token operator">&gt;</span></span></span>

<span class="token comment">// ...</span>

<span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;%zd&quot;</span><span class="token punctuation">,</span> <span class="token function">class_getInstanceSize</span><span class="token punctuation">(</span><span class="token punctuation">[</span>Todo class<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="❓c-中如下结构体-占用几个字节" tabindex="-1"><a class="header-anchor" href="#❓c-中如下结构体-占用几个字节" aria-hidden="true">#</a> ❓<code>C</code> 中如下结构体，占用几个字节</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> c<span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
<span class="token punctuation">}</span> foo<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>💡</summary><p>这个结构体的大小实际上取决于你的编译器是如何处理结构的内存对齐。不过在大多数情况下：<code>char</code>类型占用1个字节，<code>int</code>类型占用4个字节。</p><p>在C语言中，结构体会按照其最大的成员进行对齐。在这个例子中，最大的成员是<code>int</code>变量<code>i</code>，它占用4个字节。因此，结构体对齐后的大小为4的倍数。</p><p>但是，我们还要考虑到内存对齐的问题。因此，<code>char</code>和<code>int</code>之间可能会插入一些填充字节，以确保<code>int</code>变量<code>i</code>的地址是4的倍数（也就是4字节对齐）。这样，<code>char c</code>后面就会有3个字节的padding。</p><p>因此，<code>struct Foo</code>在大多数平台上的大小通常为8个字节：1个字节用于<code>char c</code>，然后是3个填充字节，最后是4个字节用于<code>int i</code>。</p><p>需要注意的是，这是在大多数系统中的常见情况，实际的结构体大小可能因编译器、架构和平台的不同而有所不同。</p><p>您可以通过以下C代码检查结构体的大小：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">struct</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> c<span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;sizeof(struct Foo) = %lu\\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Foo</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="❓结构体的字节对齐和-oc-对象的字节对齐" tabindex="-1"><a class="header-anchor" href="#❓结构体的字节对齐和-oc-对象的字节对齐" aria-hidden="true">#</a> ❓结构体的字节对齐和 <code>OC</code> 对象的字节对齐</h3><details class="hint-container details"><summary>💡</summary><p>在C语言中，字节对齐是一种优化手段，可以使得CPU访问数据更快。字节对齐的主要方法就是在适当的位置插入一些无用的填充字节，使得数据的内存地址满足一定的对齐要求。</p><p>而结构体的对齐规则是这样的：首先，结构体的总大小必须是所有成员中所需对齐字节数最大的整数倍。其次，每个结构体成员相对于结构体首地址的偏移量也必须是该成员所需对齐字节数的整数倍。因此，编译器可能会在结构体的成员间或者末尾插入一些对齐填充。</p><p>在Objective-C中，每个对象都至少包含一个isa指针，用于连接该对象与其所属的类。类的实例变量布局是由Objective-C的运行时系统动态生成的，运行时系统将在类的实例变量之间插入必要的填充字节，以确保实例变量的对齐要求。总的来说，Objective-C的对象与C的结构体在内存分布上是类似的，都需要尽可能满足CPU的对齐需求以提高访问效率。</p><p>对于Objective-C类的实例，您可以使用Objective-C运行时函数class_getInstanceSize来获取类的实例大小。这个大小已经包含了由于对齐需求而插入的填充字节。</p></details><h3 id="❓uiimage-使用-imagenamed-生成的对象什么时候被释放" tabindex="-1"><a class="header-anchor" href="#❓uiimage-使用-imagenamed-生成的对象什么时候被释放" aria-hidden="true">#</a> ❓<code>UIImage</code> 使用 <code>imageNamed</code> 生成的对象什么时候被释放</h3><details class="hint-container details"><summary>💡</summary><p><code>+[UIImage imageNamed:]</code> 是一个用于从应用的主bundle中加载图像的便捷方法。它在第一次加载图像后，会将图像缓存起来，以便随后的同名加载能更快。</p><p>在iOS4.0及以后的版本中，该缓存被设计成当接收到系统内存警告(low-memory warnings)时自动进行清理。这意味着，一旦你通过<code>imageNamed:</code>加载图像，该图像对象可能会常驻内存直到收到内存警告或者程序退出。</p><p>如果你的应用需要频繁改变图像，或者加载大量的大图像，显然这个设定会导致大量的内存消耗。在这种情况下，你可能需要考虑使用另一个方法<code>+[UIImage imageWithContentsOfFile:]</code>，这个方法会在每次调用时加载图像，但不会进行缓存。包括了处理加载后立即使用和释放掉的大图像，或者定制自己的缓存策略。</p><p>注意，以上的描述假定你是在非ARC（Automatic Reference Counting）环境下Operation，如果在ARC环境下，当图像对象的所有强引用消失后，ARC会立即回收这个对象，而不需要等待内存警告。但是由<code>imageNamed:</code>保存的缓存仍然如上文所述的工作。</p></details><h3 id="❓如何使用-uiimageview-显示一个超大图片-并且支持缩放功能" tabindex="-1"><a class="header-anchor" href="#❓如何使用-uiimageview-显示一个超大图片-并且支持缩放功能" aria-hidden="true">#</a> ❓如何使用 <code>UIImageView</code> 显示一个超大图片，并且支持缩放功能</h3><details class="hint-container details"><summary>💡</summary><p>由于 <code>UIImageView</code> 通过 <code>UIImage</code> 加载图片，是一次性将图片加载到内存，超大图片会引发内存不足的的问题。所以这个时候不能一次全部加载，需要使用分治思想，将图片像素点分块加载，只加载可视区域像素点。使用 <code>Tile Rendering</code> 的解决方案，类似家庭装修贴地砖的方式，先将图片像素按照一定的大小分割成 <code>Tile</code>，然后根据图片显示区域渲染。<code>CATiledLayer</code> 是一种适用于处理大量数据的渲染的 layer，适合处理这种情况。</p><p>缩放功能可以通过将 <code>UIImageView</code> 嵌套在 <code>UIScrollView</code> 里面，根据缩放的代理回调，进行 <code>Tile</code> 的重新绘制。</p></details><h3 id="❓c-中-placement-new-特性-在-oc-中可以使用吗" tabindex="-1"><a class="header-anchor" href="#❓c-中-placement-new-特性-在-oc-中可以使用吗" aria-hidden="true">#</a> ❓<code>C++</code> 中 <code>placement new</code> 特性，在 <code>OC</code> 中可以使用吗</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>placement new</code> : 是一种可以已分配内存的位置直接构造对象的特性，而这个已分配内存可以栈区也可以是堆区。</p></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// 栈内存</span>
<span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Foo<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
Foo<span class="token operator">*</span> foo <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token function">Foo</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 堆内存</span>
<span class="token keyword">char</span><span class="token operator">*</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Foo<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
Foo<span class="token operator">*</span> foo <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token function">Foo</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>OC</code> 是不具备这个特性，但是可以借助 <code>C</code> 语言分配内存。</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// OC 常规方案</span>
Foo<span class="token operator">*</span> foo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>Foo alloc<span class="token punctuation">]</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 使用 C 分配内存</span>
Foo<span class="token operator">*</span> foo <span class="token operator">=</span> <span class="token punctuation">(</span>Foo<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Foo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>foo <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>foo init<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="❓malloc-的指针两次-free-产生的异常与访问-freed-指针有可能产生的异常有什么区别" tabindex="-1"><a class="header-anchor" href="#❓malloc-的指针两次-free-产生的异常与访问-freed-指针有可能产生的异常有什么区别" aria-hidden="true">#</a> ❓<code>malloc</code> 的指针两次 <code>free</code> 产生的异常与访问 <code>freed</code> 指针有可能产生的异常有什么区别</h3><details class="hint-container details"><summary>💡</summary><p>尝试释放同一个内存块两次（double-free）和访问已经释放的内存块（dangling pointer）是两种不同的内存错误，他们都可能会导致程序异常，但产生问题的原因和表现形式有所不同。</p><p>当你使用<code>malloc</code>分配一块内存后，会得到一个指向这块内存的指针。当你用<code>free</code>释放这块内存后，这个指针就变成了dangling（悬空）状态，也就是说它已经不再指向一个有效的内存块了。尽管这个指针的值没有改变，但是如果你再次使用这个指针，例如读取或写入它指向的内存，就会出现未定义的行为，可能会导致程序崩溃、数据损坏或者其他不可预测的效果。</p><p>另一方面，如果你尝试多次释放同一个指针，即执行double free，那么也会导致未定义的行为。操作系统的内存管理器通常会对分配和释放的内存块进行跟踪，并在一个内存块被释放后把它标记为可重用的状态。当你第二次尝试释放这个内存块时，内存管理器可能会认为这是一个错误，因为它没有记录说这块内存被分配过。这可能会导致程序崩溃，或者产生其他不可预测的效果。</p><p>因此，避免double free和使用dangling pointer是编程中的重要原则。</p><p>总的来说，两次释放同一个指针（double free）和访问已经被释放的指针（dangling pointer）都会导致未定义的行为，具体的表现形式可能包括程序崩溃、数据损坏、安全漏洞等等，它们都应该被尽可能避免。</p></details><blockquote><p>为什么访问 <code>freed</code> 指针不一定产生异常</p></blockquote><details class="hint-container details"><summary>💡</summary><p>在C语言中，当你使用 <code>free</code> 函数释放一块内存后，该内存区域并没有被立即销毁或更改，在内存管理的视角下，它只是被标记为了“可用”状态。因此，如果你马上访问一个 <code>freed</code> 的指针，你可能能够读取到原来的数据，程序不会立即产生运行时错误。</p><p>但这并不表示这样做是安全的或正确的。因为一旦内存被释放，系统就可能在任何时刻把这块内存重新分配给其他代码使用。如果在那之后你试图通过原来的指针访问内存，你可能访问到的是别的代码刚刚写入的数据，或者令程序崩溃的无效内存地址。更糟糕的是，这样做可能会导致一些难以调试和预料的问题，比如数据损毁和随机的程序行为。</p><p>因此，尽管访问已经释放的指针不一定能导致程序立即崩溃，但你应该始终避免这样做，并确保在释放内存后不再使用任何指向那块内存的指针。一种常用的做法是在 <code>free</code> 一个指针后，立即把这个指针设置为 <code>NULL</code>。这样做可以避免你无意间多次释放同一块内存，或者使用悬垂指针。</p></details><hr><h2 id="内存管理" tabindex="-1"><a class="header-anchor" href="#内存管理" aria-hidden="true">#</a> 内存管理</h2><h3 id="❓arc-是为了解决什么问题诞生的" tabindex="-1"><a class="header-anchor" href="#❓arc-是为了解决什么问题诞生的" aria-hidden="true">#</a> ❓<code>ARC</code> 是为了解决什么问题诞生的</h3><details class="hint-container details"><summary>💡</summary><p><code>ARC</code>（自动引用计数）是为了解决内存管理中的问题而诞生的，特别是在Objective-C编程中。</p><p>在没有ARC之前，Objective-C开发者需要手动管理内存。这涉及到在适当的地方使用<code>retain</code>和<code>release</code>以及<code>autorelease</code>来控制对象的内存生命周期。如果不正确地使用这些方法，就很容易造成内存泄漏（未释放的但无法被访问的内存）或者由于释放太早或重复释放导致的程序崩溃。</p><p>ARC的引入极大地简化了这个过程。开发者不再需要手动调用<code>retain</code>，<code>release</code>，和<code>autorelease</code>。相反，编译器自动在适当的位置插入这些调用，从而可以更准确地管理内存。</p><p>通过使用ARC，开发者可以将更多的精力放在程序的实现上，而不是内存管理。这降低了出现内存管理错误的可能性，并能让开发者编写出更清晰、更简洁的代码。同时，由于编译器可以优化内存管理代码，使用ARC还可以带来性能的提升。</p><p>总结起来，ARC是为了解决手动内存管理中的困难和误解，让开发者更专注于程序的逻辑，提高代码的健壮性和效率，从而诞生的。</p></details><h3 id="❓arc-下哪些情况会造成内存泄漏" tabindex="-1"><a class="header-anchor" href="#❓arc-下哪些情况会造成内存泄漏" aria-hidden="true">#</a> ❓<code>ARC</code> 下哪些情况会造成内存泄漏</h3><details class="hint-container details"><summary>💡</summary><p>即使在使用ARC的情况下，也还是可能会出现内存泄漏。这通常发生在以下几种情况：</p><ol><li><p>强引用循环（Retain Cycles）：当两个对象互相强引用时，会导致这两个对象都无法释放。这是ARC下最常见的内存泄漏情形。例如，一个父对象强引用一个子对象，而这个子对象又强引用这个父对象，就形成了一个strong reference cycle。为了避免这种情况，我们通常会将其中一个引用设置为weak。</p></li><li><p>Block捕获self：如果一个Block捕获了self，并且这个Block被self强引用，那么也会形成强引用循环，导致内存泄漏。</p></li><li><p>未正确使用GCD或者NSTimer：如果你创建了一个循环引用的GCD队列，或者创建了一个repeats的NSTimer并且没有正确地在适当的时候停止和释放它，就可能会引起内存泄漏。</p></li><li><p>Core Foundation对象未正确桥接：在ARC中，Core Foundation对象和Cocoa对象之间的内存管理是不同步的。如果你有一个Core Foundation对象，并且没有正确地将它桥接转化为Cocoa对象，那么当这个Core Foundation对象不再需要时，必须显式地调用CFRelease来释放它。</p></li><li><p>委托（delegate）对象未设置为weak：通常来说，委托对象应该被设置为weak，以避免发生强引用循环。但是有些老的API并不支持weak，如果你不手动断开delegate，也可能会导致内存泄漏。</p></li></ol><p>在调试过程中，我们可以使用Xcode的Memory Graph Debugger和Leaks工具来帮助找到内存泄漏的地方，然后进行相应的修复。</p></details><h3 id="❓arc-的实现原理" tabindex="-1"><a class="header-anchor" href="#❓arc-的实现原理" aria-hidden="true">#</a> ❓<code>ARC</code> 的实现原理</h3><details class="hint-container details"><summary>💡</summary><p>ARC（Automatic Reference Counting）或自动引用计数是Objective-C和Swift中用于自动管理内存的机制。下面是其基础实现原理：</p><p>在ARC底层，每个对象都有一个关联的引用计数，每当一个新的引用被创建到这个对象时（比如通过赋值操作），这个计数就会加一，每当一个引用被移除时（比如出了作用域或被赋值为别的对象），这个计数就会减一。只有当这个计数变为0，即没有任何引用指向这个对象时，这个对象的内存才会被回收。</p><p>ARC是编译器级别的特性，它在编译阶段将对引用计数进行适当的操作。比如：</p><ol><li><p>在每个对象创建（alloc/init）时，编译器会自动插入对应的引用计数增加操作（retain）。</p></li><li><p>若对象引用出了作用域，或者被赋值为别的对象，编译器会自动插入对应的引用计数减少操作（release）。</p></li><li><p>对象的所有权可以用__strong（默认）， __weak， __unsafe_unretained，__autoreleasing这四种关键字来修饰，以指示编译器如何管理该对象的生命周期。</p></li></ol><p>ARC有效地使开发者免于手动管理内存引用计数的繁琐工作，大大提升了编程效率和程序质量。它根据代码的语义在适当的位置自动插入retain和release，从而减少内存泄漏和野指针的概率。同时，由于其是编译期而非运行期操作，所以相比较传统的垃圾回收机制（如Java的GC），它又能保持很好的性能。</p></details><h3 id="❓arc-对-retain-release-做了哪些优化" tabindex="-1"><a class="header-anchor" href="#❓arc-对-retain-release-做了哪些优化" aria-hidden="true">#</a> ❓<code>ARC</code> 对 <code>retain &amp; release</code> 做了哪些优化</h3><details class="hint-container details"><summary>💡</summary><p>ARC (Automatic Reference Counting) 在处理对象引用计数相关的 retain 和 release 操作上进行了一些优化：</p><ol><li><p>Autorelease Pool Optimization：这是一种优化autorelease对象的技术。当autorelease对象被加入到autoreleasepool中时，不再需要对其调用release。因此，相比简单地使用retain / release，可以避免频繁增加和减少引用计数，提高性能。</p></li><li><p>Zeroing Weak References：在ARC中，当对象被释放时，所有指向该对象的weak引用会被自动置为nil。这避免了在对象被释放后，还有指针引用这块已经无效的内存，防止了野指针问题的产生。</p></li><li><p>Eliminating Retain Cycles：ARC通过weak引用、unsafe_unretained特性和__bridge变量来防止引用循环而导致的内存泄漏。</p></li><li><p>Compaction：按需移动对象，降低内存消耗。</p></li><li><p>不必要的retain和release操作消除：在编译时, 编译器会自动分析并删除不必要的 retain 或者 release 操作，减少了CPU的运算压力，极大提高了性能。</p></li><li><p>运行时优化：当然了，对于一些成对的retain / release序列，LLVM编译器会自动进行优化，以尽可能减少其运行时开销。</p></li></ol></details><h3 id="❓arc-环境下如何用-c-标准库容器来管理-oc-对象" tabindex="-1"><a class="header-anchor" href="#❓arc-环境下如何用-c-标准库容器来管理-oc-对象" aria-hidden="true">#</a> ❓<code>ARC</code> 环境下如何用 <code>C++</code> 标准库容器来管理 <code>OC</code> 对象</h3><details class="hint-container details"><summary>💡</summary><p>在ARC环境中，Objective-C对象和C++对象的内存管理是不同步的。在C++标准库容器（如std::vector, std::map等）中直接存放Objective-C对象，是不被允许的。因为C++在删除和替换元素时，并不会按照Objective-C的规则来增加和减少引用计数。所以，想要在C++容器中保存Objective-C对象，需要进行一些额外的处理。</p><p>一种常见的方法是，将Objective-C对象封装在<code>std::shared_ptr</code>或<code>std::unique_ptr</code>中，然后在这些智能指针中使用自定义的 <code>Deleter</code> 来增加和减少引用计数。</p><p>例如，你可以这样定义一个<code>shared_ptr</code>来保存Objective-C对象：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">ObjcDeleter</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>id obj<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        <span class="token function">CFBridgingRelease</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__bridge CFTypeRef<span class="token punctuation">)</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 创建一个包含Objective-C对象的shared_ptr</span>
std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>id<span class="token operator">&gt;</span> <span class="token function">ptr</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__bridge id<span class="token punctuation">)</span><span class="token function">CFBridgingRetain</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">ObjcDeleter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 使用这样的shared_ptr，就可以在 C++的标准库容器中管理Objective-C对象了</span>
std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span> std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>id<span class="token operator">&gt;</span> <span class="token operator">&gt;</span> vec<span class="token punctuation">;</span>
vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，使用这种方式时，要确保Objective-C对象不会在被封装到智能指针以前被释放，所以需要使用<code>CFBridgingRetain</code>来增加引用计数。同时，在自定义的Deleter中，也需要使用<code>CFBridgingRelease</code>来减少引用计数。</p><p>然而，因为C++与Objective-C的运行时环境是不同的，所以在C++代码中直接操作Objective-C对象仍存在一定的风险。在编写这种混合代码时需要特别小心，并尽量减少C++和Objective-C代码之间的交互。</p></details><h3 id="❓oc-中的-dealloc-的实现机制" tabindex="-1"><a class="header-anchor" href="#❓oc-中的-dealloc-的实现机制" aria-hidden="true">#</a> ❓<code>OC</code> 中的 <code>dealloc</code> 的实现机制</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>dealloc</code> 方法是在对象被销毁的时候自动调用的方法，是内存管理的一部分。</p></blockquote><ul><li><p>在 <code>非ARC</code> 环境下，当一个对象的引用计数为 0 时，会自动调用这个对象的 <code>dealloc</code> 方法进行对象的销毁和清理操作。</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>dealloc <span class="token punctuation">{</span>
    <span class="token comment">// 释放持有的对象和资源</span>
    <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>property release<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>someObject release<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// 调用父类的 dealloc，沿着类的继承链向上调用</span>
    <span class="token punctuation">[</span><span class="token keyword">super</span> dealloc<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在 <code>ARC</code> 环境下，内存管理是由编译器自动处理的，一般不需要手动调用或者重写 <code>dealloc</code> 方法，除非你需要在对象销毁的时候做一些非内存管理的清理工作。<code>dealloc</code> 方法也不用调用 <code>[super dealloc]</code> ，编译器会自动插入这条语句。</p></li></ul></details><h3 id="❓arc-下为什么不允许我们调用-super-dealloc" tabindex="-1"><a class="header-anchor" href="#❓arc-下为什么不允许我们调用-super-dealloc" aria-hidden="true">#</a> ❓<code>ARC</code> 下为什么不允许我们调用 <code>[super dealloc]</code></h3><details class="hint-container details"><summary>💡</summary><p>在 ARC（Automatic Reference Counting）环境下，对于内存的管理，包括 retain，release，autorelease，以及在 dealloc 方法中手动调用 [super dealloc]，全部被系统自动管理。</p><p>在 ARC 下，当对象的引用计数变为0时（没有任何强引用指向它），系统会自动调用这个对象的 dealloc 方法，并在这个方法完成后自动调用 [super dealloc]。</p><p>如果开发者手动调用了 [super dealloc]，会导致 [super dealloc] 被调用两次，第二次调用时，对象的内存可能已经被释放，会导致内存访问错误或者其它不可预知的问题。因此，ARC 并不允许我们手动调用 [super dealloc]，它会在编译阶段给出错误提示。这也是为了减少开发者的心智负担，让开发者专注于业务逻辑，而不是内存管理。</p><p>因此，在编写 dealloc 方法时，只需要专注于释放那些非内存资源，如文件描述符、数据库连接、观察者等，而不需要（也不能）对实例变量调用 release 或者 autorelease，也不能显式调用 [super dealloc]。</p></details><h3 id="❓swift-统一类型的变量可选值与非可选值内存有什么区别" tabindex="-1"><a class="header-anchor" href="#❓swift-统一类型的变量可选值与非可选值内存有什么区别" aria-hidden="true">#</a> ❓<code>Swift</code> 统一类型的变量可选值与非可选值内存有什么区别</h3><details class="hint-container details"><summary>💡</summary><p>在Swift中，可选值（Optional）实际上是一个枚举类型。其定义如下：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">enum</span> <span class="token class-name">Optional</span><span class="token operator">&lt;</span><span class="token class-name">Wrapped</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token keyword">none</span>
    <span class="token keyword">case</span> <span class="token keyword">some</span><span class="token punctuation">(</span><span class="token class-name">Wrapped</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以在Swift中的一个可选值，其实就是一个有两种状态的枚举：一个是none，表示没有值，另一个是some，表示有值。当然，该值的类型为泛型 <code>Wrapped</code>。</p><p>因此，可选值在内存上比非可选值多了一层枚举的信息，一般情况下，多出的这一层需要一些额外的内存来存储枚举的状态（none或some）。具体多出多少内存，取决于特定的枚举类型和编译器的优化。</p><p>在可选值为none的状态下，也就是nil的情况下，可选值因为没有需要存储的值，所以在内存中一般只需要存储枚举的状态。</p><p>需要注意的是，虽然可选值在内存上可能会比非可选值多占用一些资源，但在实际开发过程中，这并不会成为一个性能瓶颈。相反，可选类型的引入大大增强了代码的安全性和可读性，可以避免很多因插值类型错误而导致的运行时错误。</p></details><h3 id="❓swift-内存管理中的-pwt、vwt" tabindex="-1"><a class="header-anchor" href="#❓swift-内存管理中的-pwt、vwt" aria-hidden="true">#</a> ❓<code>Swift</code> 内存管理中的 <code>pwt</code>、<code>vwt</code></h3><details class="hint-container details"><summary>💡</summary><p>pwt 和 vwt 是 Swift 的底层实现上文中的概念，分别是 PropertyWitnessTable 和 ValueWitnessTable 的简写。</p><ol><li><p>pwt（Property Witness Table）：属性见证表 属性见证表包含了属性的一些基础信息和操作函数，如 destroy、initialize、get等。Pwt 在 Swift 中为协议扩展以及泛型编程提供了可能。</p></li><li><p>vwt（Value Witness Table）：值见证表 值见证表是一个结构体的元信息的集合。它包含了描述对象如何复制、销毁的函数指针，以及对象的大小和对齐方式等信息。每个 Swift 可取值类型，比如 struct，enum，tuple 等，都有对应的值见证表。当需要进行一些内存操作时，如复制、销毁、移动内存等，便会调用它们对应的 Value Witness Table 中的函数来进行操作。</p></li></ol><p>这些表在编译时就会生成，并附着在每个类型的元数据上。在运行时，当类型需要对自身的属性或者值进行操作时，就会调用这些表中的函数。它们是 Swift 在泛型和协议上面做到类型安全和抽象的关键所在。</p></details><hr><h2 id="weak" tabindex="-1"><a class="header-anchor" href="#weak" aria-hidden="true">#</a> weak</h2><h3 id="❓weak-是怎么实现的-有没有性能问题" tabindex="-1"><a class="header-anchor" href="#❓weak-是怎么实现的-有没有性能问题" aria-hidden="true">#</a> ❓<code>weak</code> 是怎么实现的，有没有性能问题</h3><details class="hint-container details"><summary>💡</summary><p><code>weak</code> 是 Objective-C 和 Swift 中提供的一个用来防止循环引用的关键字。当你声明一个对象为 <code>weak</code>，系统会自动将其引用计数置为 0，并且当这个对象被回收的时候，所有指向它的 <code>weak</code> 指针都会被自动置为 <code>nil</code>。</p><p><code>weak</code> 的实现是在运行时通过一种叫做“弱引用表”的东西来维护的。这个弱引用表以哈希表的方式组织，将被 <code>weak</code> 关键字修饰的对象的地址作为键，所有指向它的 <code>weak</code> 指针组成的数组作为值。当一个被 <code>weak</code> 修饰的对象即将被回收的时候，运行时系统会查找弱引用表，找到所有指向它的 <code>weak</code> 指针，并将这些 <code>weak</code> 指针都置为 <code>nil</code>。</p><p>至于性能问题，由于弱引用表是以哈希表组织的，所以在查找和插入操作上效率是比较高的，一般情况下可以认为是常数时间复杂度。并且，因为弱引用表处于运行时系统内部，一般不会对应用造成明显的性能影响。然而，相比直接访问一个强引用，访问一个 <code>weak</code> 引用会有一些性能开销，因为系统需要查找弱引用表，确认这个引用是否已经被置为 <code>nil</code>。因此，在设计数据结构时，应权衡使用 <code>weak</code> 的必要性和性能的要求。</p></details><h3 id="❓weak-的实现原理-sidetable-的结构是什么样" tabindex="-1"><a class="header-anchor" href="#❓weak-的实现原理-sidetable-的结构是什么样" aria-hidden="true">#</a> ❓<code>weak</code> 的实现原理，<code>SideTable</code> 的结构是什么样</h3><details class="hint-container details"><summary>💡</summary><p>在 Objective-C 中，<code>weak</code> 是指弱引用，它允许一个对象指向另一个对象，而不持有这个对象。当被引用的对象被销毁时，这个弱引用会自动置为 nil。</p><p><code>weak</code> 的实现主要是通过 <code>SideTable</code> 结构来实现的。一个 <code>SideTable</code> 实际上是由一个 <code>spinlock_t</code> 表示的自旋锁和一个 <code>weak_table_t</code> 结构的 <code>weak_table</code> 组成的。而一个 <code>weak_table</code> 结构实际上就是一组键值对，键是被引用的对象，值是这个对象的所有弱引用列表。</p><p>当你声明一个 <code>__weak</code> 类型的变量时，运行时系统会把这个弱引用添加到对应的 <code>weak_table</code> 中。当一个对象被销毁时，运行时系统会在 <code>weak_table</code> 找到这个对象的所有弱引用，然后遍历这个列表，把列表中所有的弱引用都置为 nil。最后，运行时系统会在 <code>weak_table</code> 中移除这个对象的所有键值对。</p><p>这就是 <code>weak</code> 的实现原理以及 <code>SideTable</code> 的结构。通过这种方式，<code>weak</code> 可以确保即使被引用的对象被销毁，持有这个对象的弱引用也不会变成悬浮指针，从而避免了野指针的问题。</p></details><h3 id="❓如果让你实现属性的-weak-如何实现" tabindex="-1"><a class="header-anchor" href="#❓如果让你实现属性的-weak-如何实现" aria-hidden="true">#</a> ❓如果让你实现属性的 <code>weak</code>，如何实现</h3><details class="hint-container details"><summary>💡</summary><p>要实现属性的 <code>weak</code>，我们可以使用 <code>objc_storeWeak</code> 和 <code>objc_loadWeak</code> 这两个函数来实现。</p><ul><li>当设置一个 weak 属性值的时候，我们需要调用 <code>objc_storeWeak</code> 函数：</li></ul><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>id tmpObj <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>NSObject alloc<span class="token punctuation">]</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">objc_storeWeak</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token operator">-&gt;</span>_tmpObj<span class="token punctuation">,</span> tmpObj<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>当读取一个 weak 属性的值的时候，我们需要调用 <code>objc_loadWeak</code> 函数：</li></ul><div class="language-objective-c line-numbers-mode" data-ext="objective-c"><pre class="language-objective-c"><code>id tmpObj = objc_loadWeak(&amp;self-&gt;_tmpObj);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这两个函数内部利用了 <code>SideTable</code> 结构来维护 weak 属性引用的对象。<code>objc_storeWeak</code> 函数会把这个对象加入到 SideTable ，并且当这个对象被销毁的时候，会自动将所有指向该对象的 weak 引用设置为 nil。<code>objc_loadWeak</code> 函数则是直接从 SideTable 中取出 weak 属性引用的对象。</p><p>总的来说，如果需要自己实现属性的 <code>weak</code> ，可以通过 <code>objc_storeWeak</code> 和 <code>objc_loadWeak</code> 这两个函数来实现。当然，Objective-C 已经为我们提供了 <code>weak</code> 属性修饰符，可以方便的使用弱引用，基本上不需要我们自己去实现。</p></details><h3 id="❓iboutlet-连出来的视图属性为什么可以被设置成-weak" tabindex="-1"><a class="header-anchor" href="#❓iboutlet-连出来的视图属性为什么可以被设置成-weak" aria-hidden="true">#</a> ❓<code>IBOutlet</code> 连出来的视图属性为什么可以被设置成 <code>weak</code></h3><details class="hint-container details"><summary>💡</summary><p>当使用Storyboard或者Xib加载一个视图或者视图控制器的时候，runtime会将文件中的所有顶层对象(other than File&#39;s Owner)添加到一个特有的数组<code>_topLevelObjectsToKeepAliveFromStoryboard</code> 中，这个数组的生命周期与文件的Owner相同。数组对这些对象进行了强引用，所以这个时候无论我们如何声明IBOutlet属性(weak还是strong) ，这些对象都不会被释放。</p><p>当然，对于那些已被添加到view hierarchy的视图对象，我们可以将IBOutlet属性声明为weak，因为这些内部视图对象被父视图进行了强引用。虽然<code>_topLevelObjectsToKeepAliveFromStoryboard</code>引用了它们，但在视图控制器被销毁时，这个数组也会被销毁，所以并不会影响到内部视图对象的释放。</p></details><h3 id="❓swift-中-weak-和-unowned-的区别" tabindex="-1"><a class="header-anchor" href="#❓swift-中-weak-和-unowned-的区别" aria-hidden="true">#</a> ❓<code>Swift</code> 中 <code>weak</code> 和 <code>unowned</code> 的区别</h3><details class="hint-container details"><summary>💡</summary><p>在 Swift 中，<code>weak</code> 和 <code>unowned</code> 都被用作防止引用计数的循环引用，但他们的用法和行为略有不同。</p><ul><li><p><code>weak</code>：<code>weak</code> 表示“弱引用”，一个弱引用不会增加对象的引用计数。当你尝试访问一个 <code>weak</code> 引用的对象时，如果该对象还存在，那么你就可以访问它；如果对象已经被销毁了，那么你得到的就是 nil。因此， <code>weak</code> 引用的变量一般总是被定义为可选类型。</p></li><li><p><code>unowned</code>：<code>unowned</code> 表示“无主引用”，一个无主引用也不会增加对象的引用计数。不过与 <code>weak</code> 不同，你使用 <code>unowned</code> 时，你需要确定引用的对象一定存在。也就是说，当你尝试访问一个 <code>unowned</code> 引用的对象时，这个对象绝对不会是 nil。因此，<code>unowned</code> 引用的变量通常是非可选类型。如果你试图访问一个 <code>unowned</code> 引用的对象，但是该对象已经被销毁，程序会发生运行时错误。</p></li></ul><p>简要总结就是：<code>weak</code> 用于可能会变为 nil 的情况，并且它会自动处理变为 nil 的情况；<code>unowned</code> 用于永远不会变为 nil 的情况，但是如果变为 nil 了就会发生运行时错误。 所以一定要小心使用 <code>unowned</code>，只有在我们确定在所有使用该变量的地方，它都不会为 nil，才应该使用 <code>unowned</code>。</p></details><hr><h2 id="自动释放池" tabindex="-1"><a class="header-anchor" href="#自动释放池" aria-hidden="true">#</a> 自动释放池</h2><h3 id="❓-autorelease-nsstring-s-和-nsstring-s-有什么区别" tabindex="-1"><a class="header-anchor" href="#❓-autorelease-nsstring-s-和-nsstring-s-有什么区别" aria-hidden="true">#</a> ❓<code>@autorelease { NSString s; }</code> 和 <code>NSString s;</code> 有什么区别</h3><details class="hint-container details"><summary>💡</summary><p>这个问题可能有一个小的误解。在Objective-C中，<code>@autoreleasepool</code>关键字实际上用于声明一个自动释放池的范围。自动释放池是一种内存管理工具，被用来将一段临时创建并且可能自动释放的对象集中起来，并在合适的时机统一回收对象所占用的内存。编译器会自动在 @autoreleasepool 引入的范围内插入<code>NSAutoreleasePool</code>的 push 和 pop，它与显示创建的<code>NSAutoreleasePool</code>使用起来是等价的。</p><p>在自动释放池内，被标记为 autorelease 的对象在执行作用域结束时并不会被立刻回收，而是会在自动释放池 drain 时一起被回收。</p><p>所以你的问题应该是对比下面两段代码：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">@</span>autoreleasepool <span class="token punctuation">{</span>
    NSString <span class="token operator">*</span>s <span class="token operator">=</span> <span class="token punctuation">[</span>NSString new<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>NSString <span class="token operator">*</span>s <span class="token operator">=</span> <span class="token punctuation">[</span>NSString new<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在第一段代码中，由于是在 @autoreleasepool 的作用域内创建的 NSString，实际上不需要手动释放；NSString 在 @autoreleasepool 结束后会自动被释放掉，也就是说，结束大括号后，<code>s</code>所指向的内存已经被释放，此时再去访问<code>s</code>将会产生未定义的行为。</p><p>在第二段代码中，<code>NSString *s = [NSString new];</code>在创建完对象后，这个对象会立刻被释放，引用计数会减1。这就是Objective-C的内存管理规则。如果<code>s</code>在之后的代码中没有被正常的释放，会引发内存泄漏问题。所以我们需要如果不再使用<code>s</code>，需要显示调用 <code>[s release]</code> 来将其释放。</p><p>需要注意的是，使用ARC（Automatic Reference Counting）时，内存的管理将会自动化，编译器会在适当的地方自动插入 release 或者 autorelease，所以我们不用人为的去管理内存。在ARC环境下，<code>[NSString new]</code> 对象不需要手动释放，ARC会自动在适当时机释放对象。</p></details><h3 id="❓说说你对-autorelease-的理解" tabindex="-1"><a class="header-anchor" href="#❓说说你对-autorelease-的理解" aria-hidden="true">#</a> ❓说说你对 <code>autorelease</code> 的理解</h3><details class="hint-container details"><summary>💡</summary><p>在Objective-C的内存管理中，<code>autorelease</code> 是一个非常重要的概念。它通常用于表明，虽然现在有一个对象，但是在将来的某个时间点，我希望这个对象被释放。这用在如下两种场景。</p><p>其一，当我们不能立即释放一个对象，而又需要减少该对象的引用计数时，通常会使用 <code>autorelease</code>。例如，在一个函数内部，我们创建了一个对象并返回，那么我们就不能直接使用 <code>release</code> 来释放这个对象，因为释放后调用者将得不到这个对象。于是，我们使用 <code>autorelease</code> 来表明这个对象暂时无法释放，但是在未来某个时间点，这个对象需要被释放。</p><p>其二，当我们面临一个循环创建并且释放大量临时对象的情况，我们也可以使用一个新的 <code>autorelease pool</code> 来对这个过程进行优化。例如，在循环中，我们每次都会创建一个新的临时对象，并且在循环结束后，这个对象就没有作用了。如果我们在每次循环结束后都调用 <code>release</code> 来释放这个临时对象，那么将会有大量的CPU时间被用于处理这个过程。为了对这个过程进行优化，我们可以创建一个新的 <code>autorelease pool</code>，并使这个循环在这个 <code>autorelease pool</code> 内部进行。这样，在循环结束后，我们只需要一次性地释放这个 <code>autorelease pool</code>，那么这个 <code>autorelease pool</code> 中的所有临时对象都将被一次性地释放，从而极大地提升了程序的性能。</p><p>值得注意的是，在ARC（Automatic Reference Counting）下，我们不再需要手动调用 <code>autorelease</code>，编译器会在适当的地方自动插入。</p></details><h3 id="❓一个局部变量是什么时候释放的-autorelease-什么时候释放" tabindex="-1"><a class="header-anchor" href="#❓一个局部变量是什么时候释放的-autorelease-什么时候释放" aria-hidden="true">#</a> ❓一个局部变量是什么时候释放的，<code>autorelease</code> 什么时候释放</h3><details class="hint-container details"><summary>💡</summary><p>局部变量在其作用域（一般来说就是包含该变量声明的代码块或方法）结束时会被释放。如果该局部变量是一个指向对象的指针，该指针所指向的对象的释放时机将根据引用计数规则和内存管理策略决定。</p><p>对于<code>autorelease</code>来说，当对象调用autorelease方法后，该对象会被放入到最近的autorelease pool中，并且引用计数不变。在执行到autoreleasepool的结束（也就是<code>@autoreleasepool</code> 后的大括号<code>}</code>处）时，自动释放池中的每个对象都会接收到release消息，从而使得对象的引用计数减一。当对象的引用计数变为0的时候，对象就会被系统销毁。</p><p>需要注意的是，autorelease pool可以嵌套使用。系统在主线程的Runloop迭代时，也会对autorelease pool进行处理，释放其中保存的对象。所以一般来说，autorelease对象会在当前的runloop迭代结束后被释放。如果当前线程是一个没有开启runloop的子线程，那么autorelease对象可能会等到线程结束后被释放，这取决于autoreleasepool的范围。</p><p>同时，如果程序使用了自动引用计数（ARC），autorelease的调用时机和释放时机将由编译器自动处理。</p></details><h3 id="❓不手动指定-autoreleasepool-一个-autorealese-对象在什么时刻释放" tabindex="-1"><a class="header-anchor" href="#❓不手动指定-autoreleasepool-一个-autorealese-对象在什么时刻释放" aria-hidden="true">#</a> ❓不手动指定 <code>autoreleasepool</code>，一个 <code>autorealese</code> 对象在什么时刻释放</h3><details class="hint-container details"><summary>💡</summary><p>Swift和带有ARC(自动引用计数)的Objective-C中，即便不手动指定<code>autoreleasepool</code>，编译器也会在适当的地方自动创建它 。</p><p>在主线程中，RunLoop每次运行的时候，都会自动添加一个autoreleasepool，RunLoop运行一次即进入一次事件循环，在事件循环开始时创建一个新的autoreleasepool，结束时释放当前autoreleasepool。autorelease对象会在此时被释放。</p><p>在子线程或者GCD中，如果没有手动创建autoreleasepool，当线程结束或者任务执行结束退出时，自动生成的autorelease pool会被释放，autorelease对象会在此时被释放。需要注意的是，长时间运行的任务或者循环中如果创建了大量的autorelease对象，最好手动添加autoreleasepool，防止内存飙升。</p><p>也就是说，在没有手动创建<code>autoreleasepool</code>的情况下，autorelease对象的释放时机是由所处的线程和任务决定的。在主线程中与一个RunLoop周期（事件循环）相关，在非主线程中与线程或者任务的声明周期相关。</p></details><h3 id="❓手动创建的-autoreleasepool-一个-autorealese-对象在什么时刻释放" tabindex="-1"><a class="header-anchor" href="#❓手动创建的-autoreleasepool-一个-autorealese-对象在什么时刻释放" aria-hidden="true">#</a> ❓手动创建的 <code>autoreleasepool</code>，一个 <code>autorealese</code> 对象在什么时刻释放</h3><details class="hint-container details"><summary>💡</summary><p>手动创建的<code>autoreleasepool</code>，在该自动释放池结束的地方(<code>}</code>)，<code>autorelease</code>对象会被释放。如代码所示：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">@</span>autoreleasepool <span class="token punctuation">{</span>
    MyClass <span class="token operator">*</span>myObject <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span>MyClass alloc<span class="token punctuation">]</span> init<span class="token punctuation">]</span> autorelease<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中， <code>myObject</code>会在autoreleasepool的“结束位置”（即<code>}</code>处）收到一次<code>release</code>消息，此时它的引用计数会减1，如果它的引用计数变成0，那么它将被立即释放。</p><p>当然，这个<code>myObject</code>的释放时机会受到其他引用计数操作的影响，例如其他地方如果对<code>myObject</code>进行了<code>retain</code>操作，那么在autoreleasepool结束时，就算这个对象接收到autorelease消息，也不会被立即释放，而是要等到所有对它的引用都释放完成后再释放。</p><p>总结一下，<code>autorelease</code>对象在手动创建的<code>autoreleasepool</code>结束位置处接收到<code>release</code>消息并减少引用计数，如果此时对象的引用计数变为0，那么对象将被立即释放。</p></details><h3 id="❓子线程中需要加-autoreleasepool-吗" tabindex="-1"><a class="header-anchor" href="#❓子线程中需要加-autoreleasepool-吗" aria-hidden="true">#</a> ❓子线程中需要加 <code>autoreleasepool</code> 吗</h3><details class="hint-container details"><summary>💡</summary><p>在子线程中，我们也需要考虑加上<code>autoreleasepool</code>。</p><p>在主线程中，iOS框架已经默认添加了一个自动释放池，因此大部分情况下，你不需要手动添加<code>autoreleasepool</code>。每当RunLoop的一个循环迭代结束时，系统会自动释放该池中的所有对象。</p><p>但是在子线程中，情况就不同了。因为子线程默认是不会开启RunLoop的，所以系统也不会在子线程中添加自动释放池，如果你在子线程中创建了大量的autorelease对象，那么这些对象将不会被释放，这会导致内存泄露和内存暴涨的问题。所以，在子线程中，如果我们需要创建autorelease对象，我们就应该添加一个<code>autoreleasepool</code>。</p><p>例如，下面的代码将在子线程中创建一个自动释放池：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token punctuation">[</span>NSThread detachNewThreadSelector<span class="token punctuation">:</span><span class="token keyword">@selector</span><span class="token punctuation">(</span>doSomething<span class="token punctuation">)</span> toTarget<span class="token punctuation">:</span><span class="token keyword">self</span> withObject<span class="token punctuation">:</span>nil<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>doSomething <span class="token punctuation">{</span>
    <span class="token operator">@</span>autoreleasepool <span class="token punctuation">{</span>
        <span class="token comment">// 在这里创建autorelease对象</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有一种情况需要考虑使用<code>autoreleasepool</code>，那就是在一个循环中大量创建autorelease对象的情况，尽管这个循环可能在主线程中。因为这些对象会在RunLoop的一个循环迭代结束时才会被释放，如果你一次创建了大量的对象，可能会导致内存峰值过高。此时，你也可以考虑添加一个<code>autoreleasepool</code>，让这些对象在不需要的时候及时被释放掉。</p></details><h3 id="❓子线程中的-autorelease-变量什么时候释放" tabindex="-1"><a class="header-anchor" href="#❓子线程中的-autorelease-变量什么时候释放" aria-hidden="true">#</a> ❓子线程中的 <code>autorelease</code> 变量什么时候释放</h3><details class="hint-container details"><summary>💡</summary><p>在Objective-C中，如果子线程运行的代码块或者函数在<code>@autoreleasepool{}</code>代码块中，那么所有的<code>autorelease</code>变量会在这个<code>@autoreleasepool{}</code>代码块结束的地方被释放。</p><p>举个例子，如下面的代码：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token punctuation">[</span>NSThread detachNewThreadSelector<span class="token punctuation">:</span><span class="token keyword">@selector</span><span class="token punctuation">(</span>myThread<span class="token punctuation">)</span> toTarget<span class="token punctuation">:</span><span class="token keyword">self</span> withObject<span class="token punctuation">:</span>nil<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>myThread <span class="token punctuation">{</span>
    <span class="token operator">@</span>autoreleasepool <span class="token punctuation">{</span>
        NSString <span class="token operator">*</span>string <span class="token operator">=</span> <span class="token punctuation">[</span>NSString stringWithFormat<span class="token punctuation">:</span><span class="token string">@&quot;Hello, world&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;%@&quot;</span><span class="token punctuation">,</span> string<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>string</code>对象在<code>@autoreleasepool</code>的结束位置会被释放。</p><p>但如果你在子线程的代码块或者函数中没有使用<code>@autoreleasepool</code>代码块，那么关于<code>autorelease</code>对象的内存管理就有些不同。在这种情况下，<code>autorelease</code>对象在子线程结束后被释放，而不是立即在<code>autorelease</code>调用后被释放。但是这有可能会导致内存峰值的提升，因为所有的<code>autorelease</code>对象会积累在内存中直到线程结束。</p><p>需要注意的一点是，通常来讲，我们在子线程中创建对象时，应该手动创建一个<code>@autoreleasepool</code>代码块，以便及时地释放掉那些<code>autorelease</code>对象，避免内存的无谓增长。</p></details><h3 id="❓什么情况下需要手动创建-autoreleasepool" tabindex="-1"><a class="header-anchor" href="#❓什么情况下需要手动创建-autoreleasepool" aria-hidden="true">#</a> ❓什么情况下需要手动创建 <code>autoreleasepool</code></h3><details class="hint-container details"><summary>💡</summary><ul><li><p>大量的对象在短时间内被创建和销毁，且会占用大量内存。在这种情况下，及时地回收内存非常重要。由于 <code>ARC</code>（自动引用计数）机制在一次 <code>RunLoop</code> 循环结束后才进行垃圾回收，所以如果不使用 <code>autoreleasepool</code>，那么在一次 <code>RunLoop</code> 循环期间创建的所有对象都不会被立刻释放，这可能会导致内存峰值的显著增加。使用 <code>autoreleasepool</code> 可以在代码块结束时立即释放这些对象，从而有效地降低内存峰值。</p></li><li><p>在子线程或者自定义的线程中运行的代码。默认情况下，只有主线程的 <code>RunLoop</code> 会自动创建 <code>autoreleasepool</code>，其他的线程需要我们手动创建。</p></li></ul><p>下面是一个使用 <code>autoreleasepool</code> 的例子：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">for</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">1000000</span> <span class="token punctuation">{</span>
  autoreleasepool <span class="token punctuation">{</span>
      <span class="token comment">// 这里面的代码在每次 loop 结束时，会自动释放掉使用了 autorelease 的所有对象</span>
      <span class="token keyword">let</span> image <span class="token operator">=</span> <span class="token class-name">UIImage</span><span class="token punctuation">(</span>named<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;huge_image.png&quot;</span></span><span class="token punctuation">)</span>
      <span class="token function">print</span><span class="token punctuation">(</span>image<span class="token operator">?</span><span class="token punctuation">.</span>size <span class="token operator">??</span> <span class="token string-literal"><span class="token string">&quot;No image found&quot;</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，每一次循环，都会创建一个新的autorelease对象Image。这可能会消耗大量内存。使用<code>autoreleasepool</code>则可以保证在每次循环结束时，Image对象都能够被立即回收，从而有效控制内存使用。</p></details><h3 id="❓以下代码存在什么问题" tabindex="-1"><a class="header-anchor" href="#❓以下代码存在什么问题" aria-hidden="true">#</a> ❓以下代码存在什么问题</h3><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">@</span>autoreleasepool <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> INT_MAX<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Test <span class="token operator">*</span>test <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>Test alloc<span class="token punctuation">]</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>💡</summary><p>申请对象时，在 <code>ARC</code> 编译期间，会添加 <code>autorelease</code>，将申请的对象加入到自动释放池中。如果在一个自动释放池申请大量对象，那么对象的释放都需要等到这个这个自动释放所在的 <code>RunLoop</code> 休眠或结束时才能释放，申请大量对象时会造成内存泄漏。这种情况下，需要将 <code>@autoreleasepool</code> 加入到 <code>for</code> 循环里面。</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> INT_MAX<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token operator">@</span>autoreleasepool <span class="token punctuation">{</span>
      Test <span class="token operator">*</span>test <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>Test alloc<span class="token punctuation">]</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><blockquote><p>❓^ 如果将 <code>for</code> 循环改为 <code>enumerateObjectsUsingBlock</code> 会不会有问题？</p></blockquote><details class="hint-container details"><summary>💡</summary><p>不会有问题，这是因为枚举器方法实现时，已经将 <code>block</code> 嵌套在 <code>@autoreleasepool</code> 中。</p></details><h3 id="❓runloop-与-autoreleasepool-的关系" tabindex="-1"><a class="header-anchor" href="#❓runloop-与-autoreleasepool-的关系" aria-hidden="true">#</a> ❓<code>Runloop</code> 与 <code>autoreleasepool</code> 的关系？</h3><details class="hint-container details"><summary>💡</summary><p>RunLoop与autoreleasepool在iOS中有非常密切的关系，他们在一起工作以管理和调度任务，以及管理对象的生命周期。</p><p>RunLoop在iOS应用中主要负责的是调度和管理系统的事件处理，包括输入事件、绘图事件、计时器事件等。RunLoop在每次处理事件的循环迭代中，都会配合autoreleasepool来管理那些在这个循环迭代中创建的autorelease对象。</p><p>autoreleasepool则是用来自动管理那些autorelease对象的内存的。当你在代码中创建一个autorelease对象时，这个对象会被添加到当前的autoreleasepool中。当RunLoop的一个事件循环迭代结束时，对应的autoreleasepool也就会被销毁，autoreleasepool在销毁的同时，会向其中的所有autorelease对象发送一次release消息，这样，那些autorelease对象就有机会被正确地释放掉。</p><p>总的来说，RunLoop和autoreleasepool一起工作，保证了iOS应用能够高效稳定地运行，并且能够正确地管理内存。RunLoop负责调度事件处理，而autoreleasepool负责管理autorelease对象的生命周期，二者相辅相成。</p></details><h3 id="❓autoreleasepool-的底层实现" tabindex="-1"><a class="header-anchor" href="#❓autoreleasepool-的底层实现" aria-hidden="true">#</a> ❓<code>autoreleasepool</code> 的底层实现？</h3><details class="hint-container details"><summary>💡</summary><p><code>@autoreleasepool</code>在底层实现上是一个C++的类<code>AutoreleasePoolPage</code>，他负责管理对象的<code>Autorelease</code>操作。</p><p>以下是其工作原理和主要流程：</p><ol><li><p>当第一次使用<code>autorelease</code>函数的时候，会调用<code>AutoreleasePoolPage</code>的<code>push()</code>方法，它在当前线程上创建一个新的<code>AutoreleasePoolPage</code>对象，作为管理<code>autorelease</code>的容器，并将当前的<code>autorelease</code>对象添加进去。</p></li><li><p><code>AutoreleasePoolPage</code>维护了一个指针<code>next</code>，该指针指向下一个需要处理的<code>autorelease</code>对象。在使用<code>autorelease</code>的时候，会将当前对象添加到<code>next</code>所指向的位置，并将<code>next</code>后移。</p></li><li><p>这个<code>AutoreleasePoolPage</code>容器操作起来像一个栈，<code>autorelease</code>的对象会被紧凑地压入栈顶（即<code>next</code>指针的位置）。<code>@autoreleasepool{}</code>的<code>{</code>和<code>}</code>分别对应栈的<code>push</code>和<code>pop</code>操作。</p></li><li><p>当运行到<code>@autoreleasepool{}</code>的<code>}</code>时，会调用<code>pop()</code>方法，将栈顶到当前<code>AutoreleasePoolPage</code>中“水位线”（记住哪些对象是在这个自动释放池创建的）之间的所有对象发送<code>release</code>消息，这样这些对象就会被释放掉。</p></li><li><p><code>AutoreleasePoolPage</code>容器是以双向链表形式组织起来的，因此可以通过指针很快找到前一个和后一个<code>AutoreleasePoolPage</code>。</p></li><li><p>如果线程结束，那么会调用清理函数<code>AutoreleasePoolPage::cleanup()</code>, 释放所有页以及其中的对象。</p></li></ol><p>整个过程其核心就是通过<code>AutoreleasePoolPage</code>这个数据结构来操作和管理<code>autorelease</code>对象，从而实现了<code>autorelease</code>对象的内存管理。</p></details><hr><h2 id="内存分析" tabindex="-1"><a class="header-anchor" href="#内存分析" aria-hidden="true">#</a> 内存分析</h2><h3 id="❓内存泄漏可能会出现的几种原因" tabindex="-1"><a class="header-anchor" href="#❓内存泄漏可能会出现的几种原因" aria-hidden="true">#</a> ❓内存泄漏可能会出现的几种原因</h3><details class="hint-container details"><summary>💡</summary><p>内存泄漏可能由以下几种原因导致：</p><ol><li><p>循环引用（Retain Cycle）：当两个对象相互持有对方的强引用时，就会形成一个引用循环，导致这两个对象无法被释放。如：在Block中强引用了self，而self又持有了Block。如果在这种情况不进行处理的话，这两个对象就都无法被正常释放。</p></li><li><p>未释放的全局变量和静态变量：全局变量和静态变量在程序的整个运行周期内都不会被释放，如果这些全局或静态变量持有其他对象，而没有正确地将他们设置为nil，他们也不会被释放，从而造成内存泄漏。</p></li><li><p>未手动释放malloc/new出来的内存：用malloc和new方法申请的内存空间，系统不会自动回收，需要我们手动去释放。</p></li><li><p>后台线程持续运行：后台线程虽然不可见，但是如果他们在执行长时间运行的、或者循环的任务，那么在他们完成任务之前，他们占用的内存是无法被释放的。</p></li><li><p>Delegate和Notification未正确释放：Delegate没有使用weak修饰或者在对象释放的时候未能正确地设置为nil，Notification在对象释放的时候未能正确地移除。</p></li><li><p>NSTimer或CADisplayLink对象未正确释放：计时器或链接对象如果没有正确地无效化和释放，那么他们所引用的目标对象也会被一直持有，而无法释放。</p></li></ol><p>上述就是一些导致内存泄漏的常见原因，理解这些原因有助于我们在编码过程中避免内存泄漏的发生，以及在遇到内存泄漏时可以更快地定位问题。</p></details><blockquote><p>❓非 <code>OC</code> 对象如何处理</p></blockquote><details class="hint-container details"><summary>💡</summary><p>非OC对象，例如由C函数如malloc、calloc、realloc等分配的内存，一般需要使用C函数free进行释放。Objective-C中对此类内存的管理通常遵循“谁分配，谁负责释放”的原则。</p><p>如果是在Objective-C++中，使用new创建的对象需要使用delete进行销毁，使用new[]创建的对象数组则使用delete[]销毁。</p><p>如果是创建了Core Foundation对象（这些对象没有加入到autorelease pool），那么需要调用相应的CFRelease函数来进行释放。</p><p>对于使用了GCD的dispatch queue, dispatch source等，需要使用相应的dispatch_release函数进行释放。</p><p>总而言之，对于非OC对象，需要根据创建时使用的函数，调用相应的释放函数进行处理，否则将可能导致内存泄漏。</p></details><blockquote><p>❓如果常用框架出现内存泄漏如何处理</p></blockquote><details class="hint-container details"><summary>💡</summary><p>如果使用的框架出现内存泄漏，有以下几种可能的处理方法：</p><ol><li><p>验证是否真的存在内存泄漏：首先，确认下这个内存泄漏的情况是否是由于框架引起的，还是你的代码引起的，可以尝试在没有使用该框架的情况下运行相应的代码，看是否还会出现内存泄漏。</p></li><li><p>查阅框架的文档和示例：可能是使用的方式不对或没有按照正确的流程使用，导致了内存泄漏。所以，推荐查阅一下官方文档和示例代码，检查和对比自己的使用方式。</p></li><li><p>查找修复后的版本：如果框架本身存在内存泄漏，且是开源的，可以查找一下在Github或者其他开源社区的版本中，是否存在已经修复了这个问题的版本。</p></li><li><p>提交问题报告：如果框架是开源的，你确定这是一个bug并且在最新的版本中仍未被修复，可以在该项目的Github仓库或者对应的问题跟踪系统中提交一个问题报告。</p></li><li><p>自己修复：如果你自己具备足够的能力，并且对框架是开源的，那么你也可以尝试自己修复这个问题，并提交Pull request，甚至可以发布一个新的版本。</p></li><li><p>寻找替代方案：如果该框架有严重的内存泄露问题，且没有及时的修复，那么最好的办法可能就是寻找一个替代的框架，或者自己实现相关的功能。</p></li></ol><p>以上就是在发现使用的框架出现内存泄漏时的一些处理方式，可以根据实际情况选择适合自己的方案。</p></details><h3 id="❓app-内存是如何分析的" tabindex="-1"><a class="header-anchor" href="#❓app-内存是如何分析的" aria-hidden="true">#</a> ❓app 内存是如何分析的？</h3><details class="hint-container details"><summary>💡</summary><p>在 iOS 中，我们可以通过以下几种工具进行应用的内存分析：</p><ol><li><p>Xcode 的 Instruments 工具：Instruments 是 Xcode 内置的应用性能测试工具，它集成了多种测试模板，比如内存泄露、性能分析、能耗分析等。通过 Allocations 和 Leaks 模板，我们可以获取到应用的内存分配和泄露情况，例如分配的对象类型、对象数量、对象大小、引用关系等。</p></li><li><p>Xcode 的 Debug Memory Graph 功能：在调试时，可以使用 Xcode 的 Debug Memory Graph 功能获取应用当前所有对象的内存占用情况，包括对象类型、内存地址、引用关系等。这对查找内存泄露和分析内存占用非常有帮助。</p></li><li><p>使用第三方库：比如 Facebook 的 <code>FBRetainCycleDetector</code>，可以自动检测应用中的循环引用情况。</p></li></ol><p>对于内存的分析，主要关注以下几点：</p><ol><li><p>内存泄露：对象没有被正确地释放，导致内存泄露。</p></li><li><p>内存暴涨：经常创建大量临时对象，或者同时创建了大量大对象，这可能会导致内存暴涨。</p></li><li><p>内存持续上升：长时间使用应用，内存占用稳步上升，说明可能存在未被释放的内存。</p></li><li><p>内存布局：包括代码段、数据段、堆、栈以及静态全局变量。</p></li></ol><p>分析以上数据并结合代码逻辑，我们可以找出可能的内存优化点，或者定位内存泄漏的位置，以达到优化内存使用的目的。</p></details><h3 id="❓leak-工具使用" tabindex="-1"><a class="header-anchor" href="#❓leak-工具使用" aria-hidden="true">#</a> ❓<code>leak</code> 工具使用</h3><details class="hint-container details"><summary>💡</summary><p><code>Leak</code>是一个命令行工具，用于检测iOS或MacOS应用程序中的内存泄漏问题。它隶属于Xcode工具集。</p><p><code>leaks</code>可以检测出你的应用中哪些内存被分配了出去，但是没有被释放。基本的使用方法如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>leaks <span class="token punctuation">[</span>options<span class="token punctuation">]</span> process_id
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中，<code>process_id</code> 是你应用程序的进程ID。</p><p><code>leaks</code> 各选项含义：</p><ul><li><code>-nocontext</code>: 不打印泄漏数据</li><li><code>-noptr</code>: 在泄漏报告中，不打印指向泄漏数据的指针</li><li><code>-traceTree</code>: 打印所有内存泄漏的根源</li><li><code>-outputGraph</code>: 创建一个图形显示内存泄漏</li><li><code>-exclude</code>: 排除特定模块的泄漏报告</li></ul><p>使用<code>leaks</code>工具可以帮助开发人员定位并解决内存泄漏的问题。在开发过程中，应在代码的编写、调试、测试等阶段使用各种内存检测工具，以防止内存泄露问题。</p></details>`,96);function p(l,i){return a(),s("div",null,[n(" more "),t])}const u=e(c,[["render",p],["__file","0x11.memory.html.vue"]]);export{u as default};
