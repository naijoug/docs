import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o,c as t,a as r,b as e,f as c}from"./app-_Wf1jCxn.js";const d={},n=e("blockquote",null,[e("p",null,"05 - 位操作 (8)")],-1),i=c(`<h2 id="_5-1-插入" tabindex="-1"><a class="header-anchor" href="#_5-1-插入" aria-hidden="true">#</a> 5.1 插入</h2><blockquote><p>给定两个 32 位的整数 N 和 M，以及标识比特位置的 i 与 j。编写一个方法，将 M 插入 N，使得 M 从 N 的第 j 位开始，到第 i 位结束。假设从 j 位到 i 位足以容纳 M，也即若 M=10011，那么 j 和 i 之间至少可容纳 5 个位。例如，不可能出现 j = 3 和 i = 2 的情况，因为第 3 位和第 2 位之间放不下 M。</p></blockquote><pre><code>示例：
    输入: N = 10000000000, M = 10011, i = 2, j = 6
    输出: N = 10001001100
</code></pre><h2 id="_5-2-二进制数转字符串" tabindex="-1"><a class="header-anchor" href="#_5-2-二进制数转字符串" aria-hidden="true">#</a> 5.2 二进制数转字符串</h2><blockquote><p>给定一个介于 0 和 1 之间的实数(如 0.72)，类型为 double，打印它的二进制表示。如果该数字无法精确地用32位以内的二进制表示，则打印 &quot;ERROR&quot;。</p></blockquote><h2 id="_5-3-翻转数位" tabindex="-1"><a class="header-anchor" href="#_5-3-翻转数位" aria-hidden="true">#</a> 5.3 翻转数位</h2><blockquote><p>给定一个整数，你可以将一个数位从0变为1。请编写一个程序，找出你能够获得的最长的一串1的长度。</p></blockquote><pre><code>示例：
    输入：1775（或者：11011101111）
    输出：8
</code></pre><h2 id="_5-4-下一个数" tabindex="-1"><a class="header-anchor" href="#_5-4-下一个数" aria-hidden="true">#</a> 5.4 下一个数</h2><blockquote><p>给定一个正整数，找出与其二进制表达式中1的个数相同且大小最接近的那两个数（一个略大，一个略小）。</p></blockquote><h2 id="_5-5-调试" tabindex="-1"><a class="header-anchor" href="#_5-5-调试" aria-hidden="true">#</a> 5.5 调试</h2><blockquote><p>解释代码((n &amp; (n-1))==0)的具体含义。</p></blockquote><h2 id="_5-6-整数转化" tabindex="-1"><a class="header-anchor" href="#_5-6-整数转化" aria-hidden="true">#</a> 5.6 整数转化</h2><blockquote><p>编写一个函数，确定需要改变几个位，才能将整数 A 转成整数 B。</p></blockquote><pre><code>示例：
    输入：29 (或者：11101), 15 (或者：01111)
    输出：2
</code></pre><h2 id="_5-7-配对交换" tabindex="-1"><a class="header-anchor" href="#_5-7-配对交换" aria-hidden="true">#</a> 5.7 配对交换</h2><blockquote><p>编写程序，交换某个整数的奇数位和偶数位，尽量使用较少的指令（也就是说，位0与位1交换，位2与位3交换，以此类推）。</p></blockquote><h2 id="_5-8-绘制直线" tabindex="-1"><a class="header-anchor" href="#_5-8-绘制直线" aria-hidden="true">#</a> 5.8 绘制直线</h2><blockquote><p>有个单色屏幕存储在一个一维字节数组中，使得8个连续像素可以存放在一个字节里。屏幕宽度为w，且w可被8整除（即一个字节不会分布在两行上），屏幕高度可由数组长度及屏幕宽度推算得出。请实现一个函数，绘制从点(x1,y)到点(x2,y)的水平线。该方法的签名应形似于 <code>drawLine(byte[] screen, int width, int x1, int x2, int y)</code>。</p></blockquote>`,19);function h(l,u){return o(),t("div",null,[n,r(" more "),i])}const b=a(d,[["render",h],["__file","0x05.bit.html.vue"]]);export{b as default};
