import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as c,c as p,a as i,b as n,e as s,d as e,f as l}from"./app-U2dvIeUo.js";const u={},d=n("h2",{id:"reference",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reference","aria-hidden":"true"},"#"),s(" reference")],-1),r={href:"https://stackoverflow.com/questions/10522928/run-repeating-nstimer-with-gcd",target:"_blank",rel:"noopener noreferrer"},k={href:"https://juejin.im/post/5acaea17f265da239a601a01#heading-17",target:"_blank",rel:"noopener noreferrer"},m={href:"https://blog.ibireme.com/2016/01/16/spinlock_is_unsafe_in_ios/",target:"_blank",rel:"noopener noreferrer"},v=l(`<hr><h2 id="nsmachport" tabindex="-1"><a class="header-anchor" href="#nsmachport" aria-hidden="true">#</a> NSMachPort</h2><h3 id="❓nsmachport-是什么" tabindex="-1"><a class="header-anchor" href="#❓nsmachport-是什么" aria-hidden="true">#</a> ❓<code>NSMachPort</code> 是什么</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>NSMachPort</code> 是一种用于进程间通信（<code>IPC</code>）的机制。 <code>NSMachPort</code> 封装了 <code>Mach</code>（操作系统的低级内核）端口的操作，并将其整合到基础库的 <code>Runloop</code> 机制中，使得对 <code>Mach</code> 端口的操作能方便地进行。</p></blockquote><p><code>NSMachPort</code> 是 <code>NSPort</code> 的子类，实现了发消息和接收消息的功能。<code>NSPort</code> 对象代表一种 <code>IPC</code> 机制，它可以管理一块内存，用来存储消息。</p><p>可以使用 <code>NSMachPort</code> 对象在程序的不同线程之间或跨过不同的程序进行通信。实例化一个 <code>NSMachPort</code> 对象后，可以将这个对象加入到一个 <code>RunLoop</code> 中，然后再通过这个 <code>RunLoop</code> 来进行消息的发送和接收。在接收到消息后，<code>RunLoop</code> 会将处理动作切换到与这个 <code>port</code> 关联的线程上来。</p></details><h3 id="❓mach-是什么" tabindex="-1"><a class="header-anchor" href="#❓mach-是什么" aria-hidden="true">#</a> ❓<code>Mach</code> 是什么</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>Mach</code> 是一种用于实现操作系统的微内核，并且是包括 <code>iOS</code> 和 <code>macOS</code> 在内的很多现代操作系统的重要组成部分。<code>Mach</code> 内核和其他的一些服务（如文件系统等）一起，被包裹在一个叫做 <code>XNU</code> 的大一点的内核中。</p></blockquote><p><code>Mach</code> 提供了一些基础的、低级别的功能，包括线程管理，虚拟内存管理和进程间通信 (<code>IPC</code>)。它有助于把这些底层任务从其他的，更高级的系统服务中进行分离，使得操作系统的结构更加清晰。</p><p>尤其是在进程间通信方面，<code>Mach</code> 使用了一种叫做 <code>Mach Port</code> 的机制来实现线程或者进程之间的通信。<code>Mach Port</code> 强大到可以处理大量的并行处理任务，并且可以把消息从一个进程发送到另一个进程，或者在同一个进程内的不同线程间进行发送。</p></details><hr><h2 id="线程" tabindex="-1"><a class="header-anchor" href="#线程" aria-hidden="true">#</a> 线程</h2><h3 id="❓ios-中的常用线程相关类型有哪些" tabindex="-1"><a class="header-anchor" href="#❓ios-中的常用线程相关类型有哪些" aria-hidden="true">#</a> ❓<code>iOS</code> 中的常用线程相关类型有哪些</h3><details class="hint-container details"><summary>💡</summary><ul><li><p><code>NSThread</code>: 最基础的线程使用方式，<code>Cocoa</code> 提供了对象化的线程 <code>NSThread</code>，可以直接操作线程，如创建、启动、休眠等。<code>Swift</code> 中对应 <code>Thread</code>。</p></li><li><p><code>GCD</code> (Grand Central Dispatch): <code>Apple</code> 开发的一个多核编程的并行运行任务解决方案。它主要用于优化应用以支持多核处理器以及其他对称多处理系统。<code>GCD</code> 提供了一种简单易用且功能强大的方式来管理多线程操作。</p></li><li><p><code>NSOperation</code>: 是 <code>GCD</code> 的面向对象封装，相比 <code>GCD</code> 能做更细粒度的控制，比如，添加操作依赖，设定操作优先级，取消操作等等。<code>NSOperationQueue</code> 提供了一个队列，来按照添加进去的顺序来启动 <code>NSOperation</code>，当然也可以设置并发数和优先级。</p></li></ul></details><h3 id="线程安全" tabindex="-1"><a class="header-anchor" href="#线程安全" aria-hidden="true">#</a> 线程安全</h3><h4 id="❓atomic-线程安全吗" tabindex="-1"><a class="header-anchor" href="#❓atomic-线程安全吗" aria-hidden="true">#</a> ❓<code>atomic</code> 线程安全吗</h4><details class="hint-container details"><summary>💡</summary><p><code>atomic</code> 属性只保证属性 <code>setter</code> 和 <code>getter</code> 的原子操作，以防止数据被多个线程同时写入或者在写入过程中被另一个线程读取。然而，这并不能完全保证线程安全。</p><blockquote><p>假设有两个线程 A 和 B，它们都尝试更新同一个数值。线程 A 读取该数值，然后在 A 执行写入操作之前，线程 B 也读取了该数值，并且写回了一个新的值。然后线程 A 继续它的写入操作，这样就覆盖了线程 B 的操作。这就是所谓的&quot;竞态条件&quot;，在这种情况下，<code>atomic</code>属性并不能保证线程安全。</p></blockquote><p>虽然 <code>atomic</code> 属性可以保证单独的 <code>getter</code> 或 <code>setter</code> 操作是线程安全的，但是它不能保证一个操作序列（例如先读取，然后根据读取的值做计算，然后写回新的值）是作为一个整体的线程安全。</p><p>如果需要一个线程安全的操作，应使用 <code>mutex</code>（互斥锁）或者其它的线程同步技术。可以使用 <code>DispatchQueue</code>、<code>NSLock</code>、<code>NSOperationQueue</code> 或者用 <code>GCD</code>（<code>Grand Central Dispatch</code>）等方式来处理线程同步。</p></details><h4 id="❓nsmutablearray-线程安全吗" tabindex="-1"><a class="header-anchor" href="#❓nsmutablearray-线程安全吗" aria-hidden="true">#</a> ❓<code>NSMutableArray</code> 线程安全吗</h4><details class="hint-container details"><summary>💡</summary><blockquote><p>线程安全：是多线程编程中的一个关键问题。当数据可以被多个线程安全地并行存取时，该数据就是线程安全的。反之，如果数据的一致性不可预测或者发生错误，那么它就不是线程安全的。</p></blockquote><p><code>NSMutableArray</code> 是非线程安全的。内部封装了一个动态扩容的数组，并且提供了一组添加、删除和修改数组元素的方法。这些方法在同时被多个线程调用的情况下可能会导致数据的一致性问题。</p><pre><code>示例：

线程A 调用了 addObject：方法，试图向数组中添加一个元素。
同时，线程B也调用了addObject：方法，试图向数组中添加一个元素。

场景一：
两个方法的执行是交替进行的，那么就可能出现 线程A 先将元素添加到数组中，然后数组扩容。
线程B 也将元素添加到同一位置，然后再次触发数组的扩容。
结果就会导致数据的不一致性，因为两个元素被添加到了同一个位置。

场景二：
线程A 在添加元素的同时，线程B 可能在删除元素。
如果 线程A 已经完成了添加元素，这时 线程B 删除了刚刚已经添加的元素，这样也会引发数据的一致性问题。
</code></pre></details><h4 id="❓uikit-线程安全吗" tabindex="-1"><a class="header-anchor" href="#❓uikit-线程安全吗" aria-hidden="true">#</a> ❓<code>UIKit</code> 线程安全吗</h4><details class="hint-container details"><summary>💡</summary><p><code>UIKit</code> 不是线程安全的。</p><p>一般来说，<code>UIKit</code> 的类应该只在主线程上使用。尽管有一些 <code>UIKit</code> 的方法被文档明确指出可以在后台线程中调用，但这是很少见的，而且这些方法在文档中都有明确的注明。</p><p>主要原因是因为 <code>UIKit</code> 的设计并不包括在多线程环境下保护数据的机制。如果在多个线程中同时修改 <code>UIKit</code> 的对象，比如视图的属性或者数据源，这可能导致数据冲突或者其他未定义的行为。为了避免这个问题，在 <code>iOS</code> 应用开发中通常的做法是在主线程中执行所有的 <code>UI</code> 操作。这就是需要在主线程更新 <code>UI</code> 的原因。</p><p>如果需要在后台线程完成一些长时间运行的操作，比如网络请求或者大数据计算，然后需要更新 <code>UI</code>，应该在操作完成后把 <code>UI</code> 更新的操作放回主线程中执行。在 <code>Swift</code> 中，可以使用<code>DispatchQueue.main.async { /* 更新 UI */ }</code>将 <code>UI</code> 更新的操作放回主线程。</p></details><h3 id="主线程" tabindex="-1"><a class="header-anchor" href="#主线程" aria-hidden="true">#</a> 主线程</h3><h4 id="❓为什么只在主线程刷新-ui" tabindex="-1"><a class="header-anchor" href="#❓为什么只在主线程刷新-ui" aria-hidden="true">#</a> ❓为什么只在主线程刷新 <code>UI</code></h4><details class="hint-container details"><summary>💡</summary><ul><li><p>线程安全：<code>UIKit</code> 并不保证线程安全，同时在多个线程操作 <code>UI</code> 可能会导致无法预期的结果，比如 <code>UI</code> 状态的不一致，甚至可能导致崩溃。</p></li><li><p>性能考虑：渲染 <code>UI</code> 是一个相对重的操作，如果在多个线程中操作，经常需要进行上下文切换，消耗的 <code>CPU</code> 资源将会增多，而且可能出现画面撕裂等现象。</p></li><li><p>用户体验：主线程也被称为 <code>UI</code> 线程，它主要负责和用户的交互，响应用户的触摸事件等。如果必须在主线程上进行 <code>UI</code> 操作，那么无论后台线程的运行状态如何，都不会影响到 <code>UI</code> 的响应性，这样可以保证良好的用户体验。</p></li></ul></details><h4 id="❓为什么只有主线程的-runloop-是开启的" tabindex="-1"><a class="header-anchor" href="#❓为什么只有主线程的-runloop-是开启的" aria-hidden="true">#</a> ❓为什么只有主线程的 <code>Runloop</code> 是开启的</h4><details class="hint-container details"><summary>💡</summary><p><code>Runloop</code> 是负责处理应用中各种事件的机制，例如屏幕触摸，定时器事件，网络数据返回等。<code>RunLoop</code> 使得线程可以等待接收事件而不占用 <code>CPU</code> 时间。当没有事件处理时，线程进入睡眠状态，当新的事件到来时线程被唤醒处理事件。</p><p>因为所有的 <code>UI</code> 更新、用户交互等事件都在主线程的 <code>Runloop</code> 中处理，这也是苹果设计的要求。</p><p>对于其他子线程，<code>RunLoop</code> 是默认不开启的。因为开启 <code>RunLoop</code> 会有一些资源损耗，如果子线程不需要处理像定时器、网络请求等事件，那么就没有必要开启 <code>RunLoop</code>。</p><p>但如果你确实需要在子线程中处理事件，比如长期待命的线程，那么可以手动开启 <code>RunLoop</code>。例如在开发中，可能会在子线程中使用 <code>NSURLConnection</code>，那么我们就需要手动开启这个线程的 <code>RunLoop</code>，因为 <code>NSURLConnection</code> 需要使用 <code>RunLoop</code> 来处理网络返回事件。</p></details><h3 id="魔术数字" tabindex="-1"><a class="header-anchor" href="#魔术数字" aria-hidden="true">#</a> 魔术数字</h3><h4 id="❓0x8badf00d-是什么" tabindex="-1"><a class="header-anchor" href="#❓0x8badf00d-是什么" aria-hidden="true">#</a> ❓<code>0x8BADF00D</code> 是什么</h4><details class="hint-container details"><summary>💡</summary><blockquote><p><code>0x8BADF00D</code> (&quot;ate bad food&quot;) 是一个由苹果公司定义的“魔术数字”错误代码。在应用程序长时间占用主线程导致系统看门狗引发的应用程序终止时使用。</p></blockquote><p>在 <code>iOS</code> 开发中应尽量避免在主线程上执行任何可能耗时的任务，比如网络请求、大量计算等等。这是因为这些任务会阻塞主线程，因此影响用户界面的响应。如果执行这些任务的时间过长，就可能会收到 <code>0x8badf00d</code> 错误，表示应用程序因响应超时而被系统终止。</p><p>一般的解决方案是使用 <code>GCD</code>(Grand Central Dispatch) 或 <code>NSOperation</code> 将耗时操作放在后台线程执行，避免阻塞主线程。</p></details><h4 id="❓0xdead10cc、0xbad22222、oxdeadfa11" tabindex="-1"><a class="header-anchor" href="#❓0xdead10cc、0xbad22222、oxdeadfa11" aria-hidden="true">#</a> ❓<code>0xdead10cc</code>、<code>0xbad22222</code>、<code>oxdeadfa11</code></h4><details class="hint-container details"><summary>💡</summary><p>这些是在苹果平台上用作特殊错误标识的“魔法数字”。</p><ul><li><p><code>0xdead10cc</code>: 是 <code>iOS</code>中用来表示应用程序因为在后台持有系统资源而被系统终止的情况。特别指应用程序在进入后台后仍然持有了一个文件锁（file lock）。</p></li><li><p><code>0xbad22222</code>: 这个值在内核中用来表示一个损坏的线程状态（corrupt thread state）。</p></li><li><p><code>0xdeadfa11</code>: 在 <code>iOS</code> 中当用户强制退出应用程序（例如通过任务栏滑动关闭应用）时，系统会用这个魔法数字标识。&quot;deadfall&quot; 类似于“dead fail”的发音，表示应用死掉或者失败了。</p></li></ul></details><hr><h2 id="线程同步" tabindex="-1"><a class="header-anchor" href="#线程同步" aria-hidden="true">#</a> 线程同步</h2><h3 id="❓ios-中线程同步策略有哪些" tabindex="-1"><a class="header-anchor" href="#❓ios-中线程同步策略有哪些" aria-hidden="true">#</a> ❓<code>iOS</code> 中线程同步策略有哪些</h3><details class="hint-container details"><summary>💡</summary><ul><li><p>互斥锁（Mutex）：互斥锁可以保证同一时间只有一个线程访问一段代码或者共享资源。</p><blockquote><p>在 <code>Objective-C</code> 中 <code>@synchronized</code> 关键字可以用来创建一个互斥锁。在 <code>Swift</code> 中，可以使用使用 <code>DispatchSemaphore</code> 或 <code>NSLock</code>。</p></blockquote></li><li><p>条件锁（Condition）：条件锁是一种特殊类型的锁，它不仅能防止多个线程同时访问一个区块，而且只有在满足一定的前置条件时才会允许访问。</p><blockquote><p>可以使用 <code>NSCondition</code> 或 <code>NSConditionLock</code> 类来创建条件锁。</p></blockquote></li><li><p>自旋锁（Spinlock）：自旋锁和互斥锁类似，它们都用于保护共享资源的访问。但是当一个线程无法立即获得锁时，它会一直在循环中等待，直到获得锁为止。</p><blockquote><p>通常用于等待时间非常短的情况。</p></blockquote></li><li><p>读写锁：读写锁被设计为解决多读单写问题。即，多个线程可以同时读取，但写入必须独占。这样减少了阻塞，提高了并行性。</p></li><li><p>信号量（Semaphore）：信号量是一种更为一般化的线程同步机制。可以允许多个线程访问共享资源，但是必须限制同时访问的线程数量。</p></li><li><p><code>GCD</code> 串行队列（<code>Serial Dispatch Queue</code>）：保证所有任务都在一个指定的队列中按照添加的顺序一个接一个地执行，因此提供了一种简单的方法来进行同步。</p></li></ul></details><h3 id="线程锁" tabindex="-1"><a class="header-anchor" href="#线程锁" aria-hidden="true">#</a> 线程锁</h3><h4 id="❓oc-中的锁有哪些" tabindex="-1"><a class="header-anchor" href="#❓oc-中的锁有哪些" aria-hidden="true">#</a> ❓<code>OC</code> 中的锁有哪些</h4><details class="hint-container details"><summary>💡</summary><p><code>OC</code>中有多种方式来实现线程同步，也就是&quot;锁&quot;的概念。</p><ul><li><p><code>NSLock</code>：最基本的锁，使用起来非常直观和简单。只需要在操作前加锁，操作后解锁即可。</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>NSLock <span class="token operator">*</span>lock <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>NSLock alloc<span class="token punctuation">]</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>lock lock<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// Access shared resource here.</span>
<span class="token punctuation">[</span>lock unlock<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>@synchronized</code>：线程同步关键字，用于自动加锁和解锁。放在需要保护线程安全的代码前面即可。</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">@</span><span class="token function">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Access shared resource here.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>NSCondition</code>：条件锁，当某条件满足时加锁，否则一直等待。</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>NSCondition <span class="token operator">*</span>condition <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>NSCondition alloc<span class="token punctuation">]</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>condition lock<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token comment">/* 如果条件不满足 */</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>condition wait<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// Access shared resource here.</span>
<span class="token punctuation">[</span>condition unlock<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>NSRecursiveLock</code>：递归锁，允许同一个线程多次加锁，不会造成死锁。</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>NSRecursiveLock <span class="token operator">*</span>rLock <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>NSRecursiveLock alloc<span class="token punctuation">]</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>rLock lock<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// Access shared resource here.</span>
<span class="token punctuation">[</span>rLock unlock<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>dispatch_semaphore_t</code>：信号量，是 <code>GCD</code> 中的一种方式，通过控制信号量的数量来进行线程的并发控制。</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>dispatch_semaphore_t semaphore <span class="token operator">=</span> <span class="token function">dispatch_semaphore_create</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">dispatch_semaphore_wait</span><span class="token punctuation">(</span>semaphore<span class="token punctuation">,</span> DISPATCH_TIME_FOREVER<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Access shared resource here.</span>
<span class="token function">dispatch_semaphore_signal</span><span class="token punctuation">(</span>semaphore<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>Mutex</code>：互斥锁</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>pthread_mutex_t mutex<span class="token punctuation">;</span>
<span class="token function">pthread_mutex_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Access shared resource here.</span>
<span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>OSSpinLock</code>：自旋锁，如果由于竞争资源不可用而无法立即获得锁，它会一直在用户态自旋（忙等），直到锁变为可用为止。</p><blockquote><p>由于它在用户态就可以自旋，不用像其他锁那样进入内核态进行线程调度，所以速度非常快。但是自旋锁由于永不阻塞，一直占用 <code>CPU</code>，所以在资源竞争严重的情况下效率会很低。注意，<code>OSSpinLock</code> 在 <code>iOS10.0</code> 后已经不再安全，推荐使用 <code>os_unfair_lock</code>。</p></blockquote><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>pthread_spinlock_t spinlock<span class="token punctuation">;</span>
<span class="token function">pthread_spin_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>spinlock<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">pthread_spin_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>spinlock<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Access shared resource here.</span>
<span class="token function">pthread_spin_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>spinlock<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>os_unfair_lock</code>：<code>OSSpinLock</code> 的替代品，安全性更好，推荐用于低延迟和高并发的场景。</p></li></ul></details><h4 id="❓swift-中的锁有哪些" tabindex="-1"><a class="header-anchor" href="#❓swift-中的锁有哪些" aria-hidden="true">#</a> ❓<code>swift</code> 中的锁有哪些</h4><details class="hint-container details"><summary>💡</summary><ul><li><p><code>Dispatch Semaphore</code> 信号量：当信号量的值 <code>&lt;=0</code> 时，会阻塞线程, <code>&gt;0</code> 时, 会使信号量的值减1，然后执行后续的代码。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> semaphore <span class="token operator">=</span> <span class="token class-name">DispatchSemaphore</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span>
semaphore<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// Do something</span>
semaphore<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>NSLock</code>: 它是对 <code>mutex</code> 的一次简单的封装，更加面向对象，用起来更加简单。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> lock <span class="token operator">=</span> <span class="token class-name">NSLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// Do something</span>
lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>NSRecursiveLock</code>：允许同一线程多次加锁，而不会引起死锁。递归锁会跟踪解锁和加锁的数目，只有这两个数目相同时，锁才会被真正释放掉。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> recursiveLock <span class="token operator">=</span> <span class="token class-name">NSRecursiveLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
recursiveLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// Do something</span>
recursiveLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>Mutex</code> (PTHREAD_MUTEX_NORMAL)：可以实现锁的快速检查，如果同步对象已经上锁，这个函数会立刻返回，线程不会进入睡眠状态。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">var</span> mutex <span class="token operator">=</span> <span class="token function">pthread_mutex_t</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span>
<span class="token comment">// Do something</span>
<span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>Spin Lock</code>：忙等锁，会一直占用 <code>CPU</code> 的资源，直到获取到锁为止。自旋锁只应使用在保证线程不会被大量阻塞的场景，比如内核的数据结构或者实时线程编程。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">var</span> unfairLock <span class="token operator">=</span> <span class="token function">os_unfair_lock_s</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">os_unfair_lock_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unfairLock<span class="token punctuation">)</span>
<span class="token comment">// Do something</span>
<span class="token function">os_unfair_lock_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unfairLock<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>总结：</p><ul><li><code>Dispatch Semaphore</code> 信号量、<code>NSLock</code>、<code>NSRecursiveLock</code>都是通过 <code>Foundation</code> 框架提供的 <code>API</code> 来实现的；</li><li><code>Mutex</code> 锁是通过 <code>pthread</code> 库中的 <code>mutex</code> 提供的；</li><li><code>SpinLock</code> 是通过 <code>os</code> 库中的 <code>os_unfair_lock</code> 来实现的。</li></ul><p>在实际开发中，使用哪种锁取决于具体需求：</p><ul><li>如果需要抢占式的锁，并且不能容忍线程冻结，<code>NSLock</code>可能会是一个不错的选择。</li><li>对于需要快速检查的情况，<code>mutex</code> 可能会更合适。</li><li>如果只是需要一个简单的方法来保护一段代码，然后<code>Dispatch Semaphore</code>也许就可以满足需求。</li></ul></details><h4 id="❓自旋锁-vs-互斥锁" tabindex="-1"><a class="header-anchor" href="#❓自旋锁-vs-互斥锁" aria-hidden="true">#</a> ❓自旋锁 vs 互斥锁</h4><details class="hint-container details"><summary>💡</summary><p>两者区别：在于当锁无法获取的时候，它们处理方式的不同。</p><ul><li><p>自旋锁（<code>SpinLock</code>）：</p><p>当一个线程尝试获取一个已经被占用的自旋锁时，它会持续地查询（<code>spin</code>，故名<code>自旋锁</code>）锁的状态以尝试获取锁的所有权。换句话说，线程会在用户态忙等，直到锁被释放。因此，自旋锁是非阻塞的。</p><p>这种方式对 <code>CPU</code> 是极其消耗资源的，但是当锁持有的时间非常短时（例如，只是简单地读取或修改一小块数据），自旋锁会比互斥锁有更高的性能，因为线程无需在互斥锁的排队、阻塞和唤醒等操作中花费时间。</p></li><li><p>互斥锁（<code>Mutex</code>）：</p><p>互斥锁和自旋锁的最大区别在于，当一个线程试图获取一个已经被占用的互斥锁时，该线程会被阻塞并进入睡眠状态。直到持有锁的线程释放锁，本线程才会被唤醒并获得锁来继续执行。</p><p>这样显然会比自旋锁在无法获得锁时更节省 <code>CPU</code> 资源，不过获取锁与释放锁涉及到的线程切换对系统来说也是有一定开销的。然而，对于执行时间较长的代码块（例如 <code>IO</code> 任务等），使用互斥锁通常会是更好的选择。</p></li></ul><p>适用场景：</p><ul><li>自旋锁适用于锁保护的临界区很小且确定时间短的情况。</li><li>互斥锁更合适耗时长的操作加锁，如果临界区包含 <code>IO</code>、耗时操作或者包含其他形式的锁的话，使用自旋锁反而会因为“忙等”浪费过多 <code>CPU</code> 时间。</li></ul></details><blockquote><p>用 <code>C/C++/OC</code> 实现自旋锁或互斥锁</p></blockquote><details class="hint-container details"><summary>💡</summary><p>实现互斥锁，可以使用原子操作或内存屏障来达成目的。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;atomic&gt;</span></span>

<span class="token comment">// 使用 \`C++11\` 实现的自旋锁的简单版本</span>
<span class="token keyword">class</span> <span class="token class-name">SpinLock</span> <span class="token punctuation">{</span>
    <span class="token comment">// std::atomic_flag : C++ 中的原子布尔型标志</span>
    std<span class="token double-colon punctuation">::</span>atomic_flag locked <span class="token operator">=</span> ATOMIC_FLAG_INIT <span class="token punctuation">;</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token comment">// std::memory_order_acquire &amp; std::memory_order_release</span>
    <span class="token comment">// 内存序，以确保在多线程环境下的正确性。</span>
    <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>locked<span class="token punctuation">.</span><span class="token function">test_and_set</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>memory_order_acquire<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        locked<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>memory_order_release<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><hr><h2 id="线程通信" tabindex="-1"><a class="header-anchor" href="#线程通信" aria-hidden="true">#</a> 线程通信</h2><h3 id="❓ios-中线程间如何通信" tabindex="-1"><a class="header-anchor" href="#❓ios-中线程间如何通信" aria-hidden="true">#</a> ❓<code>iOS</code> 中线程间如何通信</h3><details class="hint-container details"><summary>💡</summary><ul><li><p><code>NSThread</code></p><blockquote><p><code>NSThread</code> 类提供了一些方法来实现线程间通信，例如 <code>performSelector:onThread:withObject:waitUntilDone:</code>。</p></blockquote><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// 在子线程中执行耗时操作</span>
NSThread <span class="token operator">*</span>thread <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>NSThread alloc<span class="token punctuation">]</span> initWithBlock<span class="token punctuation">:</span><span class="token operator">^</span><span class="token punctuation">{</span>
    <span class="token comment">// 耗时操作...</span>
    <span class="token comment">// 回到主线程更新 UI</span>
    <span class="token punctuation">[</span><span class="token keyword">self</span> performSelectorOnMainThread<span class="token punctuation">:</span><span class="token keyword">@selector</span><span class="token punctuation">(</span>updateUI<span class="token punctuation">)</span> withObject<span class="token punctuation">:</span>nil waitUntilDone<span class="token punctuation">:</span>YES<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>thread start<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>GCD</code> （Grand Central Dispatch）</p><blockquote><p>使用 <code>dispatch_get_main_queue</code> 或 <code>dispatch_get_global_queue</code> 获取对应的队列，在对应的队列中使用 <code>dispatch_async</code> 或 <code>dispatch_sync</code> 去执行特定的任务。</p></blockquote></li></ul><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// 在子线程中执行耗时操作</span>
<span class="token function">dispatch_async</span><span class="token punctuation">(</span><span class="token function">dispatch_get_global_queue</span><span class="token punctuation">(</span>DISPATCH_QUEUE_PRIORITY_DEFAULT<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">^</span><span class="token punctuation">{</span>
    <span class="token comment">// 耗时操作...</span>
    <span class="token comment">// 回到主线程更新 UI</span>
    <span class="token function">dispatch_async</span><span class="token punctuation">(</span><span class="token function">dispatch_get_main_queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">^</span><span class="token punctuation">{</span>
        <span class="token comment">// 更新 UI...</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>NSOperationQueue</code><blockquote><p>可以创建并使用子线程对应的 <code>NSOperationQueue</code>，再使用 <code>addOperationWithBlock:</code> 方法或者通过 <code>NSInvocationOperation</code>、<code>NSBlockOperation</code> 添加操作。</p></blockquote></li></ul><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// 在子线程中执行耗时操作</span>
<span class="token punctuation">[</span><span class="token punctuation">[</span>NSOperationQueue new<span class="token punctuation">]</span> addOperationWithBlock<span class="token punctuation">:</span><span class="token operator">^</span><span class="token punctuation">{</span>
    <span class="token comment">// 耗时操作...</span>
    <span class="token comment">// 回到主线程更新 UI</span>
    <span class="token punctuation">[</span><span class="token punctuation">[</span>NSOperationQueue mainQueue<span class="token punctuation">]</span> addOperationWithBlock<span class="token punctuation">:</span><span class="token operator">^</span><span class="token punctuation">{</span>
        <span class="token comment">// 更新 UI...</span>
    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="❓执行一个-nsthread-任务-如何在执行过程中终止该线程" tabindex="-1"><a class="header-anchor" href="#❓执行一个-nsthread-任务-如何在执行过程中终止该线程" aria-hidden="true">#</a> ❓执行一个 <code>NSThread</code> 任务, 如何在执行过程中终止该线程</h3><details class="hint-container details"><summary>💡</summary><p>可以通过 <code>NSThread</code> 类的 <code>cancel</code> 方法来发出线程取消的请求。</p><p>注意：<code>cancel</code> 方法并不会强制终止线程的执行，它只是将 <code>NSThread</code> 对象的 <code>cancelled</code> 属性设置为 <code>YES</code>，开发者需要在代码中定期检查这个属性来决定是否需要停止执行线程。</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>NSThread <span class="token operator">*</span>thread <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>NSThread alloc<span class="token punctuation">]</span> initWithBlock<span class="token punctuation">:</span><span class="token operator">^</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>NSThread currentThread<span class="token punctuation">]</span> isCancelled<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token punctuation">[</span>NSThread exit<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 处理其他任务...</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>thread start<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 在其他地方，你可以通过下述代码来发送线程取消的请求</span>
<span class="token punctuation">[</span>thread cancel<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用 <code>exit</code> 方法会立即停止线程的执行，并且不会触发 <code>@finally</code> 块。你需要确保在调用 <code>exit</code> 之前已经正确地清理了所有资源，否则可能会引发资源泄露等问题。同时，由于线程被终止后无法被再次启动，需要在线程被终止后重新创建线程来执行任务。</p></details><h3 id="❓如何终止正在运行的工作线程" tabindex="-1"><a class="header-anchor" href="#❓如何终止正在运行的工作线程" aria-hidden="true">#</a> ❓如何终止正在运行的工作线程</h3><details class="hint-container details"><summary>💡</summary><ul><li><p><code>NSThread</code></p><blockquote><p>可以调用 <code>cancel</code> 方法来标记线程为取消状态，然后在代码中检查线程是否被标记为取消，如果是，则停止执行。</p></blockquote><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>NSThread <span class="token operator">*</span>thread <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>NSThread alloc<span class="token punctuation">]</span> initWithBlock<span class="token punctuation">:</span><span class="token operator">^</span><span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">[</span>NSThread currentThread<span class="token punctuation">]</span> isCancelled<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 执行线程任务...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>thread start<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 结束线程</span>
<span class="token punctuation">[</span>thread cancel<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>GCD</code></p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// 使用GCD创建的线程</span>
__block BOOL needToCancel <span class="token operator">=</span> NO<span class="token punctuation">;</span>
<span class="token function">dispatch_async</span><span class="token punctuation">(</span><span class="token function">dispatch_get_global_queue</span><span class="token punctuation">(</span>DISPATCH_QUEUE_PRIORITY_DEFAULT<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">^</span><span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>needToCancel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 执行线程任务...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 结束线程</span>
needToCancel <span class="token operator">=</span> YES<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></details><h3 id="❓开启一条线程的方法-线程可以取消吗" tabindex="-1"><a class="header-anchor" href="#❓开启一条线程的方法-线程可以取消吗" aria-hidden="true">#</a> ❓开启一条线程的方法，线程可以取消吗</h3><details class="hint-container details"><summary>💡</summary><ul><li><p><code>NSThread</code>:</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token comment">// 创建并启动 NSThread</span>
<span class="token keyword">let</span> thread <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>target<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">,</span> selector<span class="token punctuation">:</span> <span class="token other-directive property">#selector</span><span class="token punctuation">(</span>threadMethod<span class="token punctuation">)</span><span class="token punctuation">,</span> object<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span>
thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 请求取消执行</span>
thread<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 在 NSThread 中执行的方法</span>
<span class="token attribute atrule">@objc</span> <span class="token keyword">func</span> <span class="token function-definition function">threadMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token operator">!</span><span class="token class-name">Thread</span><span class="token punctuation">.</span>current<span class="token punctuation">.</span>isCancelled <span class="token punctuation">{</span>
        <span class="token comment">// 你的代码...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>GCD</code>（创建线程，无法取消）:</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token comment">// 创建并启动 GCD 线程</span>
<span class="token class-name">DispatchQueue</span><span class="token punctuation">.</span><span class="token function">global</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">async</span> <span class="token punctuation">{</span>
    <span class="token comment">// 你的代码...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>NSOperation</code>:</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token comment">// 创建并启动 NSOperation</span>
<span class="token keyword">let</span> operation <span class="token operator">=</span> <span class="token class-name">BlockOperation</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token operator">!</span>operation<span class="token punctuation">.</span>isCancelled <span class="token punctuation">{</span>
        <span class="token comment">// 你的代码...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> operationQueue <span class="token operator">=</span> <span class="token class-name">OperationQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
operationQueue<span class="token punctuation">.</span><span class="token function">addOperation</span><span class="token punctuation">(</span>operation<span class="token punctuation">)</span>
<span class="token comment">// 请求取消执行</span>
operation<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>pthread（创建线程，无法取消）:</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">import</span> <span class="token class-name">Darwin</span>

<span class="token keyword">var</span> thread<span class="token punctuation">:</span> pthread_t<span class="token operator">?</span>
<span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>thread<span class="token punctuation">,</span> <span class="token nil constant">nil</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> pointer <span class="token keyword">in</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;execute in pthread&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token nil constant">nil</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></details><hr><h2 id="gcd" tabindex="-1"><a class="header-anchor" href="#gcd" aria-hidden="true">#</a> GCD</h2><blockquote><p><code>GCD (Grand Central Dispatch)</code> 是 <code>Apple</code> 开发的一个多核编程的解决方案。它主要是通过向指定的队列（<code>Dispatch Queue</code>）中添加要执行的任务（任务 = 工作项 = 代码块）来进行工作的。<code>GCD</code> 的目标是为了最大化利用处理器的多核，同时最小化线程创建和管理的开销。</p></blockquote><h3 id="❓gcd-执行原理" tabindex="-1"><a class="header-anchor" href="#❓gcd-执行原理" aria-hidden="true">#</a> ❓<code>GCD</code> 执行原理</h3><details class="hint-container details"><summary>💡</summary><ul><li>任务：执行操作的最小单元，只能插入到队列中。它是一个虚拟函数，不能直接访问属性或方法。</li><li>队列（<code>Dispatch Queue</code>）：用于存放任务的先进先出（<code>FIFO</code>）类型的线程安全的数据结构。</li></ul><p><code>GCD</code> 为每个处理器的核心在系统内存中维护一个线程池，当向 <code>DispatchQueue</code> 添加任务时，系统会自动将任务分发到这些线程中运行，以实现任务的并发执行。</p><p><code>DispatchQueue</code> 存在两种类型：<code>Serial Dispatch Queue</code>（串行队列）和 <code>Concurrent Dispatch Queue</code>（并行队列）。每个任务添加到串行队列中会按照添加到队列中的顺序依次执行，而添加到并行队列中的任务则会被调度在多个线程中并发执行。</p><p><code>GCD</code> 主要有四个特点：</p><ul><li>可用于多核的并行运算</li><li>自动利用更多的 <code>CPU</code> 内核</li><li>自动管理线程的生命周期（线程的创建，调度和销毁）</li><li>具有线程同步的功能</li></ul></details><h3 id="❓gcd-背后的线程模型是什么" tabindex="-1"><a class="header-anchor" href="#❓gcd-背后的线程模型是什么" aria-hidden="true">#</a> ❓<code>GCD</code> 背后的线程模型是什么</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>GCD</code>(Grand Central Dispatch) 在底层是基于 <code>C</code> 语言实现的，采用了基于<strong>事件驱动</strong>的线程模型。</p></blockquote><p>当 <code>GCD</code> 接收到一个异步任务后，它会将这个任务放在合适的 <code>Dispatch Queue</code> （调度队列）中。每个 <code>Dispatch Queue</code> 都关联着一个线程，当 <code>Queue</code> 中的任务被调度并处于 <code>ready</code> 状态时，<code>GCD</code> 就会从线程池中选取一个可用线程来执行这个任务。如果线程池中没有可用线程，这时 <code>GCD</code> 会创建一个新的线程。</p><p>线程池中的线程是复用的，一个任务执行完成后，这个线程回到线程池中，可以被其他任务继续使用。线程池中的线程数量是有上限的，这个上限根据系统资源情况来动态调整。</p><p><code>GCD</code> 的主要目标是为了最大限度地提升系统的整体性能，它会自动管理和调度任务，以实现对系统资源的合理利用。具体来说，<code>GCD</code> 的任务调度算法会根据 <code>CPU</code> 的使用情况、<code>I/O</code> 状态、电源情况等因素进行动态调整，以降低系统的能耗，提高应用的响应速度。</p><p><code>GCD</code> 也提供了 <code>Dispatch Group、Dispatch Barriers、Dispatch Semaphores</code> 等机制，让开发者能够更灵活地控制任务的执行顺序和同步问题。</p></details><h3 id="队列" tabindex="-1"><a class="header-anchor" href="#队列" aria-hidden="true">#</a> 队列</h3><h4 id="❓gcd-的队列-dispatch-queue-t-分哪两种类型-默认提供哪些队列" tabindex="-1"><a class="header-anchor" href="#❓gcd-的队列-dispatch-queue-t-分哪两种类型-默认提供哪些队列" aria-hidden="true">#</a> ❓<code>GCD</code> 的队列（<code>dispatch_queue_t</code>）分哪两种类型，默认提供哪些队列</h4><details class="hint-container details"><summary>💡</summary><p>队列类型：</p><ul><li><code>Serial Dispatch Queue</code>: 串行队列，任务会按照添加到队列中的顺序一个接一个地执行。也就是说，队列中的任务是串行的，下一个任务总是等待前一个任务完成后才开始执行。</li><li><code>Concurrent Dispatch Queue</code>: 并行队列，任务不需要等待，可以同时（并发地）执行。不过具体能够同时执行的任务数取决于系统的资源状况。</li></ul><p>系统默认提供的队列：</p><ul><li><code>Main Dispatch Queue</code>: 主队列，它是一个串行队列，用于在主线程上执行任务。因为所有的 UI 操作都必须在主线程上执行，所以经常会把 UI 更新的任务放在主队列中。</li><li><code>Global Dispatch Queue</code>: 全局队列，它实际上是四个并行队列，用于在后台执行任务。四个全局并行队列分别对应着四种不同的优先级：高、默认、低和后台（即非常低）。</li></ul></details><h4 id="❓dispatchqos-的作用" tabindex="-1"><a class="header-anchor" href="#❓dispatchqos-的作用" aria-hidden="true">#</a> ❓<code>DispatchQoS</code> 的作用</h4><details class="hint-container details"><summary>💡</summary><blockquote><p><code>DispatchQoS</code>（全称 <code>Dispatch Quality of Service</code>，即服务质量）是 <code>Swift</code> 中的一个枚举类型，它用于表示一个 <code>DispatchQueue</code>（调度队列）中任务的优先级。</p></blockquote><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token comment">// 创建 DispatchQueue 时，通过设置 DispatchQoS 来调整任务的优先级</span>
<span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token class-name">DispatchQueue</span><span class="token punctuation">(</span>label<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;com.example.queue&quot;</span></span><span class="token punctuation">,</span> qos<span class="token punctuation">:</span> <span class="token punctuation">.</span>userInteractive<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>DispatchQoS</code> 优先级：</p><ul><li><p><code>userInteractive</code>：和用户交互的任务。这些任务通常需要立即执行，用以提供良好的用户体验。</p><blockquote><p>例如，滑动操作、动画显示等。</p></blockquote></li><li><p><code>userInitiated</code>：用户启动的，需要立即结果的任务。</p><blockquote><p>例如，加载用户界面、读取文件等。</p></blockquote></li><li><p><code>default</code>：在没有特殊需求或优先级的时候，大多数任务都可以使用这个级别。</p></li><li><p><code>utility</code>：不需要立刻完成且耗时的任务。</p><blockquote><p>例如，下载、同步数据等。</p></blockquote></li><li><p><code>background</code>：几乎不影响用户的任务。</p><blockquote><p>例如，清理磁盘、备份数据等。</p></blockquote></li><li><p><code>unspecified</code>：未指定的 <code>QoS</code> 类型。</p></li></ul></details><h4 id="❓gcd-主线程-主队列的关系" tabindex="-1"><a class="header-anchor" href="#❓gcd-主线程-主队列的关系" aria-hidden="true">#</a> ❓<code>GCD</code> 主线程 &amp; 主队列的关系</h4><details class="hint-container details"><summary>💡</summary><blockquote><p>主队列是运行在主线程的一个特殊的串行队列，主队列中的任务都会在主线程上执行。因为所有相关的 <code>UI</code> 操作和用户交互必须在主线程上进行，所以经常会将这些工作放在主队列中进行。</p></blockquote><p>主线程和主队列的关系：</p><ul><li>主队列中的任务运行在主线程上。</li><li>添加到主队列的任务会在下一次 <code>RunLoop</code> 迭代时自动执行。</li><li>可以使用 <code>dispatch_async</code> 将一个任务放到主队列，这样不管当前是在哪一个线程，这个任务都会在主线程上执行。</li></ul></details><h4 id="❓线程和队列的关系-一个线程是否可能存在于两个队列" tabindex="-1"><a class="header-anchor" href="#❓线程和队列的关系-一个线程是否可能存在于两个队列" aria-hidden="true">#</a> ❓线程和队列的关系，一个线程是否可能存在于两个队列</h4><details class="hint-container details"><summary>💡</summary><p>线程和队列在程序执行上的关系，可以简单理解为队列（<code>Queue</code>）是用来管理线程（<code>Thread</code>）的一种数据结构，可以控制线程的执行顺序。</p><p>对于 Grand Central Dispatch（<code>GCD</code>）来说，队列中的任务可在同一个线程或者在不同的线程中执行，这取决于队列的类型和系统的调度。由系统负责管理线程，开发者只需要关注在哪个队列中执行任务即可。</p><p>如果说的是任务（<code>Task</code>），那么一个任务是可以添加到多个队列中，每个队列中的任务将会被一个线程取出执行。但是一个线程不能同时存在于两个队列中，线程执行完当前队列中的任务后，会根据系统的调度决定去执行哪个队列中的任务。</p></details><h4 id="❓队列一定会创建线程吗-队列是否可以无限制创建" tabindex="-1"><a class="header-anchor" href="#❓队列一定会创建线程吗-队列是否可以无限制创建" aria-hidden="true">#</a> ❓队列一定会创建线程吗，队列是否可以无限制创建</h4><details class="hint-container details"><summary>💡</summary><p>不是所有队列都会创建新的线程。队列只是对执行的任务进行管理的一种数据结构，具体执行任务的是线程。在 Grand Central Dispatch（<code>GCD</code>）中，串行队列通常只会在一个线程（主线程或其他线程）上执行任务，而并行队列会根据系统资源动态创建多个线程来并发执行任务。</p><p><code>GCD</code> 会对线程进行智能管理，根据系统的负载情况和资源情况动态地创建或复用线程。当并行队列的任务多于同时可执行的线程数时，队列中的部分任务会等待线程可用后才会执行。</p><p>理论上，队列的数量并没有硬性限制，可以创建任意多个队列。然而由于队列占用内存，计算机资源（比如内存、<code>CPU</code> 时间片）是有限的，如果创建大量的队列可能会导致内存不足，性能下降，甚至程序崩溃。</p></details><h4 id="❓dispatch-get-current-queue-为什么被废弃" tabindex="-1"><a class="header-anchor" href="#❓dispatch-get-current-queue-为什么被废弃" aria-hidden="true">#</a> ❓<code>dispatch_get_current_queue</code> 为什么被废弃</h4><details class="hint-container details"><summary>💡</summary><p>它在复杂并发环境下容易引发问题和错误。</p><ul><li><p>它的结果在不同的调度环境下可能是不准确的。任务可以在多个队列之间迁移，因此在调用 <code>dispatch_get_current_queue</code> 的时候，返回的队列可能并不是真正想要的队列。</p></li><li><p>开发者可能会滥用 <code>dispatch_get_current_queue</code> 进行一些同步（<code>sync</code>）调用导致死锁，这样使用是非常危险的。</p><blockquote><p>例如，调用者可能尝试找出当前执行的队列，并在当前执行的队列上同步调度一个新的任务。它可能导致死锁，因为新任务在当前任务完成之前无法开始。</p></blockquote></li></ul></details><h3 id="常用函数" tabindex="-1"><a class="header-anchor" href="#常用函数" aria-hidden="true">#</a> 常用函数</h3><h4 id="❓gcd-的一些常用的函数" tabindex="-1"><a class="header-anchor" href="#❓gcd-的一些常用的函数" aria-hidden="true">#</a> ❓<code>GCD</code> 的一些常用的函数</h4><details class="hint-container details"><summary>💡</summary><ul><li><p><code>dispatch_queue_create</code>: 创建一个新的 <code>dispatch</code> 队列。</p></li><li><p><code>dispatch_get_main_queue</code>: 获取主队列，因为 <code>UI</code> 操作应在主线程执行，所以通常会将 <code>UI</code> 操作放在主队列中执行。</p></li><li><p><code>dispatch_async</code>: 异步添加任务到指定的队列中。此函数立即返回，不会等待任务执行完毕。</p></li><li><p><code>dispatch_sync</code>: 同步添加任务到指定的队列。此函数直到任务结束才返回。需要避免在主线程调用，否则可能阻塞主线程造成 <code>UI</code> 卡顿。</p></li><li><p><code>dispatch_after</code>: 在指定时间后将任务添加到队列中。</p></li><li><p><code>dispatch_once</code>: 确保某个任务在应用的生命周期内只被执行一次。经常用于单例的实现。</p></li><li><p><code>dispatch_group_enter, dispatch_group_leave, dispatch_group_notify</code>: 这些函数用于管理一组任务。可以等待一组任务全部完成后再执行接下来的操作，或者接收一组任务完成的通知。</p></li><li><p><code>dispatch_suspend, dispatch_resume</code>: 分别用于暂停和恢复队列。可以用来控制任务的执行。</p></li></ul></details><h4 id="❓dispatch-once-实现原理" tabindex="-1"><a class="header-anchor" href="#❓dispatch-once-实现原理" aria-hidden="true">#</a> ❓<code>dispatch_once</code> 实现原理</h4><details class="hint-container details"><summary>💡</summary><blockquote><p><code>dispatch_once</code> 是一个 <code>GCD</code> 提供的执行一次且仅一次的函数，通常用于单例的初始化。<code>dispatch_once</code> 拥有线程安全性，即使在多线程的环境下，也可以保证被封装的代码只会被执行一次，不会出现重入问题。</p></blockquote><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">static</span> dispatch_once_t onceToken<span class="token punctuation">;</span>
<span class="token function">dispatch_once</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>onceToken<span class="token punctuation">,</span> <span class="token operator">^</span><span class="token punctuation">{</span>
    <span class="token comment">// 这段代码在应用的生命周期中只会被执行一次</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现原理：</p><ul><li><p><code>dispatch_once</code> 使用 <code>OSAtomicCompareAndSwapLong</code> 确保初始化代码只执行一次。这个函数会原子性地比较前两个参数，如果相等，则将第三个参数的值赋给第一个参数，并返回 <code>true</code>；否则直接返回 <code>false</code>。这里利用这个原子操作，只有第一个到达 <code>dispatch_once</code> 的线程能够将 <code>pred</code> 从 0 变为非 0。</p></li><li><p><code>dispatch_once</code> 的实现中还使用了一个信号量（<code>semaphore</code>）来保证即使在多线程的环境下，初始化代码也只会执行一次，可以保证线程安全。</p></li></ul></details><h4 id="❓dispatch-barrier-async-的作用是什么" tabindex="-1"><a class="header-anchor" href="#❓dispatch-barrier-async-的作用是什么" aria-hidden="true">#</a> ❓<code>dispatch_barrier_async</code> 的作用是什么</h4><details class="hint-container details"><summary>💡</summary><blockquote><p><code>dispatch_barrier_async</code>: 用于在并发队列上创建一个屏障，阻止队列中正在执行的任务和还没有开始的任务同时进行。</p></blockquote><p><code>dispatch_barrier_async</code> 提交的任务会等待在它之前提交到队列的任务全部完成后才开始执行，同时，它又会阻塞队列，等待自己的任务执行完成后，才会开始执行在它之后提交的任务。在这个过程中，<code>dispatch_barrier_async</code> 提交的任务会拥有整个队列，它不需要担心自己的操作会与队列上的其他任务发生冲突。</p><p><code>dispatch_barrier_async</code> 只对自己创建的并发队列有效。对于系统提供的全局并发队列和主队列（实质是串行队列）<code>dispatch_barrier_async</code> 会像普通的 <code>dispatch_async</code> 一样，不具有 &quot;屏障&quot; 的特性。</p><p>这个函数常见的用法是在并发读取数据的时候进行数据的写入操作，或者是对数据的原子操作。</p><p>🌰 假如有多个线程在并发地从一个数组中读取数据，同时又需要在某个时刻向这个数组中写入数据，为了防止数据冲突，可以使用 <code>dispatch_barrier_async</code> 进行写操作，这样在写入数据时就不会有其他线程在读取数据。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token comment">// 初始化一个并发队列</span>
<span class="token keyword">let</span> concurrentQueue <span class="token operator">=</span> <span class="token class-name">DispatchQueue</span><span class="token punctuation">(</span>label<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;concurrent.queue&quot;</span></span><span class="token punctuation">,</span> attributes<span class="token punctuation">:</span> <span class="token punctuation">.</span>concurrent<span class="token punctuation">)</span>
<span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token class-name">NSMutableArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 读操作</span>
concurrentQueue<span class="token punctuation">.</span><span class="token keyword">async</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;读取数据：</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">array</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 写操作</span>
concurrentQueue<span class="token punctuation">.</span><span class="token keyword">async</span><span class="token punctuation">(</span>flags<span class="token punctuation">:</span> <span class="token punctuation">.</span>barrier<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    array<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;new data&quot;</span></span><span class="token punctuation">)</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;写入数据：new data&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h4 id="❓dispatch-barrier-sync-与-dispatch-group-t-的区别" tabindex="-1"><a class="header-anchor" href="#❓dispatch-barrier-sync-与-dispatch-group-t-的区别" aria-hidden="true">#</a> ❓<code>dispatch_barrier_sync</code> 与 <code>dispatch_group_t</code> 的区别</h4><details class="hint-container details"><summary>💡</summary><ul><li><p><code>dispatch_barrier_sync</code>主要用于在并发队列上设置一个“屏障”，阻止队列中正在执行的任务和还没有开始的任务同时进行。屏障任务会等待在它之前提交到队列的任务全部完成后才开始执行，同时它又会阻塞队列，并在自己执行完成后才会让队列中的其他任务开始执行。</p></li><li><p><code>dispatch_group_t</code> 主要是用于管理和同步一组任务，可以让你在一组任务都完成以后得到通知或者等待这组任务都完成。你可以对这组任务设置完成的回调，也可以选择阻塞当前线程等待这组任务都完成。</p></li></ul><p>两者的区别：<code>dispatch_barrier_sync</code> 是用于在并发队列中创建特殊的串行执行点，而 <code>dispatch_group_t</code> 是用来同步一组任务，等待它们全部完成。</p></details><h4 id="❓dispatch-barrier-sync-的功能用-dispatch-group-t-如何实现" tabindex="-1"><a class="header-anchor" href="#❓dispatch-barrier-sync-的功能用-dispatch-group-t-如何实现" aria-hidden="true">#</a> ❓<code>dispatch_barrier_sync</code> 的功能用 <code>dispatch_group_t</code> 如何实现</h4><details class="hint-container details"><summary>💡</summary><p><code>dispatch_group_t</code> 实现 <code>dispatch_barrier_sync</code> 的功能需要结合 <code>dispatch_semaphore_t</code> 来使用。因为 <code>dispatch_barrier_sync</code> 有一个特性，就是会阻塞当前线程来实现同步的效果，而 <code>dispatch_group_t</code> 本身是没有这个功能的。所以需要用到 <code>dispatch_semaphore_t</code> 来实现阻塞效果。</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>dispatch_queue_t concurrentQueue <span class="token operator">=</span> <span class="token function">dispatch_queue_create</span><span class="token punctuation">(</span><span class="token string">&quot;concurrent.queue&quot;</span><span class="token punctuation">,</span> DISPATCH_QUEUE_CONCURRENT<span class="token punctuation">)</span><span class="token punctuation">;</span>
dispatch_semaphore_t sema <span class="token operator">=</span> <span class="token function">dispatch_semaphore_create</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
dispatch_group_t group <span class="token operator">=</span> <span class="token function">dispatch_group_create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">dispatch_group_enter</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">dispatch_async</span><span class="token punctuation">(</span>concurrentQueue<span class="token punctuation">,</span> <span class="token operator">^</span><span class="token punctuation">{</span>
    <span class="token comment">// 第一个任务</span>
    <span class="token function">dispatch_group_leave</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">dispatch_group_enter</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">dispatch_async</span><span class="token punctuation">(</span>concurrentQueue<span class="token punctuation">,</span> <span class="token operator">^</span><span class="token punctuation">{</span>
    <span class="token comment">// 第二个任务</span>
    <span class="token function">dispatch_group_leave</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">dispatch_group_notify</span><span class="token punctuation">(</span>group<span class="token punctuation">,</span> concurrentQueue<span class="token punctuation">,</span> <span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">dispatch_async</span><span class="token punctuation">(</span>concurrentQueue<span class="token punctuation">,</span> <span class="token operator">^</span><span class="token punctuation">{</span>
        <span class="token comment">// 屏障任务。这个任务会等前面的任务都执行完再执行</span>
        <span class="token function">dispatch_semaphore_signal</span><span class="token punctuation">(</span>sema<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 任务完成，发送信号</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">dispatch_semaphore_wait</span><span class="token punctuation">(</span>sema<span class="token punctuation">,</span> DISPATCH_TIME_FOREVER<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 等待信号，实现阻塞效果</span>
<span class="token comment">// 屏障任务执行完毕</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="实际应用" tabindex="-1"><a class="header-anchor" href="#实际应用" aria-hidden="true">#</a> 实际应用</h3><h4 id="❓如何用-gcd-同步若干个异步调用" tabindex="-1"><a class="header-anchor" href="#❓如何用-gcd-同步若干个异步调用" aria-hidden="true">#</a> ❓如何用 <code>GCD</code> 同步若干个异步调用</h4><details class="hint-container details"><summary>💡</summary><p>通过 <code>dispatch_group_t</code>（调度组）来实现多个异步调用的同步。</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// 创建一个调度组</span>
dispatch_group_t group <span class="token operator">=</span> <span class="token function">dispatch_group_create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 在异步回调执行前调用 dispatch_group_enter 将任务添加到调度组</span>
<span class="token function">dispatch_group_enter</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">dispatch_async</span><span class="token punctuation">(</span><span class="token function">dispatch_get_global_queue</span><span class="token punctuation">(</span>DISPATCH_QUEUE_PRIORITY_DEFAULT<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">^</span><span class="token punctuation">{</span>
    <span class="token comment">// 做一些异步操作...</span>
    
    <span class="token comment">// 执行完后调用 dispatch_group_leave 将任务从调度组移除</span>
    <span class="token function">dispatch_group_leave</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">dispatch_group_enter</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">dispatch_async</span><span class="token punctuation">(</span><span class="token function">dispatch_get_global_queue</span><span class="token punctuation">(</span>DISPATCH_QUEUE_PRIORITY_DEFAULT<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">^</span><span class="token punctuation">{</span>
    <span class="token comment">// 做一些异步操作...</span>
    <span class="token function">dispatch_group_leave</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 监听调度组任务都已完成</span>
<span class="token function">dispatch_group_notify</span><span class="token punctuation">(</span>group<span class="token punctuation">,</span> <span class="token function">dispatch_get_main_queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">^</span><span class="token punctuation">{</span>
    <span class="token comment">// 当 group 中的所有任务都执行完毕后，会执行这个 block</span>
    <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;All tasks are finished.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h4 id="❓gcd-什么情况下会发生的死锁现象" tabindex="-1"><a class="header-anchor" href="#❓gcd-什么情况下会发生的死锁现象" aria-hidden="true">#</a> ❓<code>GCD</code> 什么情况下会发生的死锁现象</h4><details class="hint-container details"><summary>💡</summary><p>在使用 Grand Central Dispatch（<code>GCD</code>）进行多线程编程时，死锁通常发生在当前线程同步派发（<code>sync</code>）一个 <code>block</code> 到当前线程的队列中，此时系统会等待该任务完成，但是这个任务却正在等待当前线程空闲，从而形成了一个循环等待，进入死锁状态。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token comment">// 主队列，异步派发一个任务，然后在这个任务中同步派发一个任务到主队列</span>
<span class="token class-name">DispatchQueue</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token keyword">async</span> <span class="token punctuation">{</span>
    <span class="token class-name">DispatchQueue</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span>sync <span class="token punctuation">{</span>
        <span class="token comment">// do something</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 串行队列，同步派发一个任务，然后在这个任务中又同步派发一个任务到这个串行队列</span>
<span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token class-name">DispatchQueue</span><span class="token punctuation">(</span>label<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;my.queue&quot;</span></span><span class="token punctuation">)</span>
queue<span class="token punctuation">.</span>sync <span class="token punctuation">{</span>
    queue<span class="token punctuation">.</span>sync <span class="token punctuation">{</span>
        <span class="token comment">// do something</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 并行队列，异步地启动了任务 1。然后，在任务 1 的执行过程中，试图同步地启动任务 2</span>
<span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token class-name">DispatchQueue</span><span class="token punctuation">(</span>label<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;my.queue&quot;</span></span><span class="token punctuation">,</span> attributes<span class="token punctuation">:</span> <span class="token punctuation">.</span>concurrent<span class="token punctuation">)</span>
queue<span class="token punctuation">.</span><span class="token keyword">async</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Task 1 started&quot;</span></span><span class="token punctuation">)</span>
    queue<span class="token punctuation">.</span>sync <span class="token punctuation">{</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Task 2 started&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Task 1 finished&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h4 id="❓gcd-已经调用能不能取消" tabindex="-1"><a class="header-anchor" href="#❓gcd-已经调用能不能取消" aria-hidden="true">#</a> ❓<code>GCD</code> 已经调用能不能取消</h4><details class="hint-container details"><summary>💡</summary><p><code>GCD</code> 中的任务（<code>Block</code>）已经开始执行，就无法取消。<code>GCD</code> 的 <code>API</code> 并未提供主动取消 <code>Block</code> 执行的功能。</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// 使用标记符实现类似“取消”执行的效果</span>
__block BOOL taskShouldExit <span class="token operator">=</span> NO<span class="token punctuation">;</span>
<span class="token function">dispatch_async</span><span class="token punctuation">(</span>myQueue<span class="token punctuation">,</span> <span class="token operator">^</span><span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>taskShouldExit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 你的任务代码</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><hr><h2 id="nsoperation" tabindex="-1"><a class="header-anchor" href="#nsoperation" aria-hidden="true">#</a> NSOperation</h2><h3 id="❓了解-nsoperation-与-nsoperationqueue-吗" tabindex="-1"><a class="header-anchor" href="#❓了解-nsoperation-与-nsoperationqueue-吗" aria-hidden="true">#</a> ❓了解 <code>NSOperation</code> 与 <code>NSOperationQueue</code> 吗</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>NSOperation</code> 和 <code>NSOperationQueue</code> 是基于 <code>GCD</code> 进行了面向对象的封装，提供了更多的控制和管理任务的功能。</p></blockquote><ul><li><p><code>NSOperation</code> 表示一个单一的任务。</p><blockquote><p>可以通过继承 <code>NSOperation</code> 并实现其主方法来定义自己的操作，也可以使用 <code>NSInvocationOperation</code> 和 <code>NSBlockOperation</code> 来创建操作。</p></blockquote></li><li><p><code>NSOperationQueue</code> 是一个操作队列，是 <code>NSOperation</code> 的执行者。</p><blockquote><p>可以把 <code>NSOperation</code> 对象添加到 <code>NSOperationQueue</code> 中，队列会自动调度并执行里面的操作。</p></blockquote></li></ul><p>优点：</p><ul><li><p>支持任务之间的依赖关系。</p><blockquote><p>可以通过 <code>addDependency:</code> 方法来定义操作之间的依赖关系。队列会确保一个操作在其所有依赖的操作都已经完成之后才开始执行。</p></blockquote></li><li><p>允许取消操作。</p><blockquote><p><code>NSOperation</code> 提供了 <code>cancel</code> 方法，可以取消未执行的操作。这是 <code>GCD</code> 无法做到的。</p></blockquote></li><li><p>支持优先级。</p><blockquote><p>可以通过 <code>queuePriority</code> 属性来设定操作的优先级。队列会优先调度优先级高的操作。</p></blockquote></li><li><p>支持 <code>KVO</code>。</p><blockquote><p>可以观察 <code>NSOperation</code> 的 <code>isExecuting</code>、<code>isFinished</code> 等属性，以获取操作的执行状态。</p></blockquote></li><li><p>可以限制最大并发数量。</p><blockquote><p>通过 <code>NSOperationQueue</code> 的 <code>maxConcurrentOperationCount</code> 属性，可以设定队列中同时执行的操作的最大数量。</p></blockquote></li></ul></details><h3 id="❓有哪些场景是-nsoperation-比-gcd-更容易实现的" tabindex="-1"><a class="header-anchor" href="#❓有哪些场景是-nsoperation-比-gcd-更容易实现的" aria-hidden="true">#</a> ❓有哪些场景是 <code>NSOperation</code> 比 <code>GCD</code> 更容易实现的</h3><details class="hint-container details"><summary>💡</summary><ul><li><strong>操作依赖</strong>：<code>NSOperation</code> 可以设置依赖，比如操作 A 和操作 B，可以设置操作 B 依赖于操作 A，这样操作 A 执行完毕后，操作 B 才会执行。这在 <code>GCD</code> 中不容易实现。</li></ul><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> operationA <span class="token operator">=</span> <span class="token class-name">BlockOperation</span> <span class="token punctuation">{</span> <span class="token comment">/* Your task A here */</span> <span class="token punctuation">}</span>
<span class="token keyword">let</span> operationB <span class="token operator">=</span> <span class="token class-name">BlockOperation</span> <span class="token punctuation">{</span> <span class="token comment">/* Your task B here */</span> <span class="token punctuation">}</span>
operationB<span class="token punctuation">.</span><span class="token function">addDependency</span><span class="token punctuation">(</span>operationA<span class="token punctuation">)</span>
<span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token class-name">OperationQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
queue<span class="token punctuation">.</span><span class="token function">addOperation</span><span class="token punctuation">(</span>operationA<span class="token punctuation">)</span>
queue<span class="token punctuation">.</span><span class="token function">addOperation</span><span class="token punctuation">(</span>operationB<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>操作取消</strong>：<code>NSOperation</code> 可以在操作执行过程中被取消。如果有多个操作并行或串行执行，且在某些条件下需要提前结束某些还未执行的操作，那么使用 <code>NSOperation</code> 就很容易处理。</li></ul><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> operation <span class="token operator">=</span> <span class="token class-name">BlockOperation</span> <span class="token punctuation">{</span> <span class="token comment">/* Your task here */</span> <span class="token punctuation">}</span>
<span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token class-name">OperationQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
queue<span class="token punctuation">.</span><span class="token function">addOperation</span><span class="token punctuation">(</span>operation<span class="token punctuation">)</span>
operation<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><strong>操作状态控制</strong>：<code>NSOperation</code> 允许你更加精细地控制和查询操作的状态（例如是否正在执行，是否已经完成等）。这在 <code>GCD</code> 中不容易实现。</p></li><li><p><strong>操作优先级</strong>：<code>NSOperation</code> 可以设置优先级，这可以用于控制多个操作的执行顺序。这在 <code>GCD</code> 中不容易实现。</p></li><li><p><strong>重复执行/延迟执行操作</strong>：<code>NSOperation</code> 可以通过 <code>NSOperationQueue</code> 的 <code>maxConcurrentOperationCount</code> 属性来控制同时执行的操作数，而 <code>GCD</code> 则需要手动管理。<code>NSOperation</code> 也可以通过设置 <code>start</code> 方法的调用时机来实现延迟执行。</p></li></ul></details><h3 id="❓nsoperationqueue-中的-maxconcurrentoperationcount-默认值" tabindex="-1"><a class="header-anchor" href="#❓nsoperationqueue-中的-maxconcurrentoperationcount-默认值" aria-hidden="true">#</a> ❓<code>NSOperationQueue</code> 中的 <code>maxConcurrentOperationCount</code> 默认值</h3><details class="hint-container details"><summary>💡</summary><p>默认值是 <code>NSOperationQueueDefaultMaxConcurrentOperationCount</code>，其值为 <code>-1</code>。</p><ul><li><p><code>NSOperationQueueDefaultMaxConcurrentOperationCount</code>，表示该队列以并发方式运行所有可以运行的操作。具体可以运行的操作数会取决于系统条件。</p></li><li><p><code>maxConcurrentOperationCount</code> 的值大于 <code>1</code>，则队列可以并发地运行多个操作，具体数量不会超过设置的值。</p></li><li><p><code>maxConcurrentOperationCount</code> 的值为 <code>1</code>，队列会变成一个串行队列。注意这时并不具备串行队列的特性，比如不保证所有任务是在同一个线程中执行。</p></li></ul><p>并发操作和串行操作的主要区别在于：并发操作可能同时在其他线程上运行，而串行操作总是在一个特定的线程（可能不总是相同的线程）上按序运行，不会并发执行。</p></details><h3 id="❓nsoperation-是如何终止-取消任务的" tabindex="-1"><a class="header-anchor" href="#❓nsoperation-是如何终止-取消任务的" aria-hidden="true">#</a> ❓<code>NSOperation</code> 是如何终止/取消任务的</h3><details class="hint-container details"><summary>💡</summary><p><code>cancel</code> 方法，可以将操作标记为取消。然而，需要注意的是，这并不会立即停止已经在执行的操作，也不会从队列中移除已经被标记为取消的操作。</p><p>取消一个操作主要有两个作用：</p><ul><li><p>它会设置操作的 <code>isCancelled</code> 属性为 <code>YES</code>。可以在操作的执行代码中检查这个属性的值，如果发现已经被取消，就可以尽快终止执行代码。</p></li><li><p>如果操作还在队列中等待执行，并且还没有被开始执行，那么在操作被取消后，它就永远不会开始执行了。</p></li></ul><p>终止/取消一个 <code>NSOperation</code> 需要主动去查询 <code>isCancelled</code> 属性并根据这个属性的值决定是否提前退出执行代码。这就要求执行代码需要定期检查这个属性的值。如果操作的任务很快就可以完成，可能不需要检查。但对于可能运行时间较长的任务，最好在操作代码中定期检查 <code>isCancelled</code> 属性，这样在操作被取消时，可以尽快响应。</p></details><h3 id="❓nsoperation-启动的两种方式-start-和-main-的区别" tabindex="-1"><a class="header-anchor" href="#❓nsoperation-启动的两种方式-start-和-main-的区别" aria-hidden="true">#</a> ❓<code>NSOperation</code> 启动的两种方式(<code>start</code> 和 <code>main</code>)的区别</h3><details class="hint-container details"><summary>💡</summary><ul><li><p><code>start</code> 方法是用来开始执行 <code>operation</code> 的。</p><blockquote><p>当调用一个 <code>operation</code> 的 <code>start</code> 方法时，<code>operation</code> 会根据它的 <code>isReady</code> 属性来决定是否立即执行任务，或者把任务放到等待队列。</p></blockquote><ul><li>如果 <code>isReady == true</code>（依赖的其他 <code>operations</code> 都已经完成）。<code>start</code> 会调用 <code>main</code> 方法来执行实际的任务。通常不需要（也不应该）手动调用 <code>start</code> 方法，而是应该把 <code>operation</code> 对象添加到 <code>operation queue</code> 中，让 <code>queue</code> 来管理 <code>operation</code> 的生命周期。</li><li>如果 <code>isReady == false</code>（表示 <code>operation</code> 还有其他的 <code>dependencies</code> 没有完成），那么该 <code>operation</code> 将不能立即开始。</li></ul></li><li><p><code>main</code> 方法是需要在自定义的 <code>NSOperation</code> 子类中实现的方法，用来指定 <code>operation</code> 的实际工作内容。也就是说，在 <code>main</code> 方法中定义 <code>operation</code> 对象所要完成的任务。当 <code>start</code> 方法被调用，且 <code>operation</code> 对象已经准备好运行时，会自动调用 <code>main</code> 方法。</p></li></ul></details><h3 id="❓有自定义过-nsoperation-吗" tabindex="-1"><a class="header-anchor" href="#❓有自定义过-nsoperation-吗" aria-hidden="true">#</a> ❓有自定义过 <code>NSOperation</code> 吗</h3><details class="hint-container details"><summary>💡</summary><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">class</span> <span class="token class-name">CustomOperation</span><span class="token punctuation">:</span> <span class="token class-name">Operation</span> <span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \`operation\` 的取消状态，如果已取消，立即返回并结束执行。</span>
        <span class="token keyword">if</span> isCancelled <span class="token punctuation">{</span>
            <span class="token keyword">return</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// Put the task code here.</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Task starts&quot;</span></span><span class="token punctuation">)</span>

        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>forTimeInterval<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span>
        
        <span class="token keyword">if</span> isCancelled <span class="token punctuation">{</span>
            <span class="token keyword">return</span>
        <span class="token punctuation">}</span>
        
        <span class="token comment">// Task is finished.</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Task finished&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 创建这个自定义操作的实例，并将其添加到操作队列</span>
<span class="token keyword">let</span> operation <span class="token operator">=</span> <span class="token class-name">CustomOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> operationQueue <span class="token operator">=</span> <span class="token class-name">OperationQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

operationQueue<span class="token punctuation">.</span><span class="token function">addOperation</span><span class="token punctuation">(</span>operation<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你也可以使用 <code>addDependency(_:)</code> 设置 operation 之间的依赖关系，或者使用 <code>queuePriority</code> 和 <code>qualityOfService</code> 设置 operation 的优先级和服务质量等等。</p><p>这样，当操作被添加到操作队列后，队列会自动开始执行操作。如果 operation 没有依赖其他操作且操作队列没有暂停，则操作会立即开始。而一旦 operation 开始执行，<code>NSOperationQueue</code> 会调用 operation 的 <code>start</code> 方法，从而调用 <code>main</code> 方法，执行你在 <code>main</code> 方法中定义的任务。</p></details><hr><h2 id="线程设计" tabindex="-1"><a class="header-anchor" href="#线程设计" aria-hidden="true">#</a> 线程设计</h2><h3 id="❓如果让你来实现属性的-atomic-如何实现" tabindex="-1"><a class="header-anchor" href="#❓如果让你来实现属性的-atomic-如何实现" aria-hidden="true">#</a> ❓如果让你来实现属性的 <code>atomic</code>，如何实现</h3><details class="hint-container details"><summary>💡</summary><p>可以使用互斥锁，对读写操作进行保护，来防止不同线程中的读写操作相互干扰。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Atomic</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 定义 \`DispatchQueue\` 是一个串行队列，所以这个操作是互斥的</span>
    <span class="token keyword">private</span> <span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token class-name">DispatchQueue</span><span class="token punctuation">(</span>label<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;queue.atomic.lock&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">var</span> value<span class="token punctuation">:</span> <span class="token class-name">T</span>
    <span class="token keyword">public</span> <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> value<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value
    <span class="token punctuation">}</span>
    <span class="token comment">// get set 中进行加锁保护</span>
    <span class="token keyword">public</span> <span class="token keyword">var</span> atomicValue<span class="token punctuation">:</span> <span class="token class-name">T</span> <span class="token punctuation">{</span>
        <span class="token keyword">set</span> <span class="token punctuation">{</span>
            queue<span class="token punctuation">.</span>sync <span class="token punctuation">{</span>
                value <span class="token operator">=</span> newValue
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">get</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> queue<span class="token punctuation">.</span>sync <span class="token punctuation">{</span>
                value
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="❓如何实现一个线程安全的-nsmutablearray" tabindex="-1"><a class="header-anchor" href="#❓如何实现一个线程安全的-nsmutablearray" aria-hidden="true">#</a> ❓如何实现一个线程安全的 <code>NSMutableArray</code></h3><details class="hint-container details"><summary>💡</summary><ul><li><p>使用 <code>@synchronized</code></p><blockquote><p><code>@synchronized</code> 会使用给定的对象作为锁，在同一时间只会有一个线程可以获取到这个锁并执行其中的代码。其他尝试获取这个锁的线程会被阻塞，直到锁被释放。</p></blockquote><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">@implementation</span> ThreadSafeMutableArray <span class="token punctuation">{</span>
    NSMutableArray <span class="token operator">*</span>_array<span class="token punctuation">;</span>
    NSObject <span class="token operator">*</span>_lock<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token operator">-</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span>init <span class="token punctuation">{</span>
    <span class="token keyword">self</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">super</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        _array <span class="token operator">=</span> <span class="token punctuation">[</span>NSMutableArray array<span class="token punctuation">]</span><span class="token punctuation">;</span>
        _lock <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>NSObject alloc<span class="token punctuation">]</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">self</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token operator">-</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span>objectAtIndex<span class="token punctuation">:</span><span class="token punctuation">(</span>NSUInteger<span class="token punctuation">)</span>index <span class="token punctuation">{</span>
    id obj <span class="token operator">=</span> nil<span class="token punctuation">;</span>
    <span class="token operator">@</span><span class="token function">synchronized</span><span class="token punctuation">(</span>_lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        obj <span class="token operator">=</span> <span class="token punctuation">[</span>_array objectAtIndex<span class="token punctuation">:</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>addObject<span class="token punctuation">:</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>anObject <span class="token punctuation">{</span>
    <span class="token operator">@</span><span class="token function">synchronized</span><span class="token punctuation">(</span>_lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">[</span>_array addObject<span class="token punctuation">:</span>anObject<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">@end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>GCD</code> 的串行队列</p><blockquote><p>在这个队列上执行的任务会一次执行一个，所以可以确保对 <code>_array</code> 的操作是线程安全的，即使有多个线程都在使用这个对象。</p></blockquote><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">@implementation</span> ThreadSafeMutableArray
<span class="token punctuation">{</span>
    NSMutableArray <span class="token operator">*</span>_array<span class="token punctuation">;</span>
    dispatch_queue_t _queue<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token operator">-</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span>init <span class="token punctuation">{</span>
    <span class="token keyword">self</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">super</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        _array <span class="token operator">=</span> <span class="token punctuation">[</span>NSMutableArray array<span class="token punctuation">]</span><span class="token punctuation">;</span>
        _queue <span class="token operator">=</span> <span class="token function">dispatch_queue_create</span><span class="token punctuation">(</span><span class="token string">&quot;com.example.ThreadSafeMutableArray&quot;</span><span class="token punctuation">,</span> DISPATCH_QUEUE_SERIAL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">self</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token operator">-</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span>objectAtIndex<span class="token punctuation">:</span><span class="token punctuation">(</span>NSUInteger<span class="token punctuation">)</span>index <span class="token punctuation">{</span>
    __block id obj<span class="token punctuation">;</span>
    <span class="token function">dispatch_sync</span><span class="token punctuation">(</span>_queue<span class="token punctuation">,</span> <span class="token operator">^</span><span class="token punctuation">{</span>
        obj <span class="token operator">=</span> <span class="token punctuation">[</span>_array objectAtIndex<span class="token punctuation">:</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>addObject<span class="token punctuation">:</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>anObject <span class="token punctuation">{</span>
    <span class="token function">dispatch_sync</span><span class="token punctuation">(</span>_queue<span class="token punctuation">,</span> <span class="token operator">^</span><span class="token punctuation">{</span>
        <span class="token punctuation">[</span>_array addObject<span class="token punctuation">:</span>anObject<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">@end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>无论是使用 <code>@synchronized</code> 还是使用 <code>GCD</code> 的串行队列，都会带来一定的性能开销。所以在一些对性能非常敏感的环境中，可能需要使用更低级的 <code>API</code>，如 <code>pthread_mutex_t</code> 或 <code>os_unfair_lock</code>，来实现线程安全，或者尽量避免在多个线程中共享数据。</p></li></ul><p>注意：<code>NSArray</code> 和 <code>NSMutableArray</code> 的一些方法可能会产生意外的并发问题。</p><blockquote><p>例如，如果在一个线程中访问一个 <code>NSMutableArray</code> 的元素，同时在另一个线程中修改这个数组，那么即使代码是线程安全的，也可能会引发异常。这是因为 <code>NSMutableArray</code> 内部的实现可能并非线程安全。只能在同一时间对数组进行读取或者写入操作，不能同时进行两者。所以，在使用 <code>NSMutableArray</code> 时，需要确保所有访问和修改都是串行的，才能确保线程安全。</p></blockquote></details><h3 id="❓ios-中如何创建一个常驻线程" tabindex="-1"><a class="header-anchor" href="#❓ios-中如何创建一个常驻线程" aria-hidden="true">#</a> ❓<code>iOS</code> 中如何创建一个常驻线程</h3><details class="hint-container details"><summary>💡</summary><p>创建一个常驻线程，也就是这个线程并不会在任务执行完后就立即退出，而是能够等待新的任务的加入并执行。这在处理一些持久的、周期性的或者需要在特定线程中执行的任务非常有用。</p><p>核心点在于创建线程时，启动 <code>RunLoop</code>，但是 <code>RunLoop</code> 如果在没有任何事件源时会退出，所以需要添加一个 <code>port</code> 事件让 <code>RunLoop</code> 一直运行。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token comment">/// 守护线程</span>
<span class="token keyword">class</span> <span class="token class-name">DaemonThread</span><span class="token punctuation">:</span> <span class="token class-name">NSObject</span> <span class="token punctuation">{</span>
  <span class="token comment">// 创建的守护线程，并开启一个Runloop</span>
  <span class="token keyword">private</span> <span class="token keyword">lazy</span> <span class="token keyword">var</span> thread <span class="token operator">=</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>
      <span class="token comment">// 添加了一个 port 事件源到 RunLoop 中防止它因为没有事件源立即退出</span>
      <span class="token class-name">RunLoop</span><span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Port</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> forMode<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">)</span>
      <span class="token comment">// 启动 RunLoop</span>
      <span class="token class-name">RunLoop</span><span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">override</span> <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token comment">// 启动线程</span>
      thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">/// 在守护进程执行任务</span>
  <span class="token keyword">func</span> <span class="token function-definition function">execute</span><span class="token punctuation">(</span>task<span class="token punctuation">:</span> <span class="token attribute atrule">@escaping</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">perform</span><span class="token punctuation">(</span><span class="token other-directive property">#selector</span><span class="token punctuation">(</span><span class="token function">runTask</span><span class="token punctuation">(</span><span class="token omit keyword">_</span><span class="token punctuation">:</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> on<span class="token punctuation">:</span> thread<span class="token punctuation">,</span> with<span class="token punctuation">:</span> task<span class="token punctuation">,</span> waitUntilDone<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">/// 停止守护线程</span>
  <span class="token keyword">func</span> <span class="token function-definition function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">perform</span><span class="token punctuation">(</span><span class="token other-directive property">#selector</span><span class="token punctuation">(</span>clear<span class="token punctuation">)</span><span class="token punctuation">,</span> on<span class="token punctuation">:</span> thread<span class="token punctuation">,</span> with<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">,</span> waitUntilDone<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  
  <span class="token comment">/// 清理资源 : 停止 RunLoop、退出线程</span>
  <span class="token attribute atrule">@objc</span> <span class="token keyword">private</span> <span class="token keyword">func</span> <span class="token function-definition function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">CFRunLoopStop</span><span class="token punctuation">(</span><span class="token class-name">CFRunLoopGetCurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">/// 执行任务</span>
  <span class="token attribute atrule">@objc</span> <span class="token keyword">private</span> <span class="token keyword">func</span> <span class="token function-definition function">runTask</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> task<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">task</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="❓ios-下如何实现指定线程数目的线程池" tabindex="-1"><a class="header-anchor" href="#❓ios-下如何实现指定线程数目的线程池" aria-hidden="true">#</a> ❓<code>iOS</code> 下如何实现指定线程数目的线程池</h3><details class="hint-container details"><summary>💡</summary><p>可以使用 <code>NSOperationQueue</code> 来实现线程池：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> operationQueue <span class="token operator">=</span> <span class="token class-name">OperationQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
operationQueue<span class="token punctuation">.</span>maxConcurrentOperationCount <span class="token operator">=</span> <span class="token number">5</span>  <span class="token comment">// 指定线程池中的线程数为5</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">10</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> operation <span class="token operator">=</span> <span class="token class-name">BlockOperation</span> <span class="token punctuation">{</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Task </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> is executing in thread: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token class-name">Thread</span><span class="token punctuation">.</span>current</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    operationQueue<span class="token punctuation">.</span><span class="token function">addOperation</span><span class="token punctuation">(</span>operation<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：队列本质上并没有真正创建线程，而是通过 <code>GCD</code> 来调度任务的执行，背后真正处理并发的可能是线程也可能是更底层的机制。</p></details><h3 id="❓有-a、b、c、d-4个异步请求-如何判断-a、b、c、d-都完成执行" tabindex="-1"><a class="header-anchor" href="#❓有-a、b、c、d-4个异步请求-如何判断-a、b、c、d-都完成执行" aria-hidden="true">#</a> ❓有 <code>a、b、c、d</code> 4个异步请求，如何判断 <code>a、b、c、d</code> 都完成执行</h3><details class="hint-container details"><summary>💡</summary><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>dispatch_group_t group <span class="token operator">=</span> <span class="token function">dispatch_group_create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
dispatch_queue_t queue <span class="token operator">=</span> <span class="token function">dispatch_queue_create</span><span class="token punctuation">(</span><span class="token string">&quot;my.queue&quot;</span><span class="token punctuation">,</span> DISPATCH_QUEUE_SERIAL<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">dispatch_group_async</span><span class="token punctuation">(</span>group<span class="token punctuation">,</span> queue<span class="token punctuation">,</span> <span class="token operator">^</span><span class="token punctuation">{</span>
    <span class="token comment">// 执行异步请求A...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">dispatch_group_async</span><span class="token punctuation">(</span>group<span class="token punctuation">,</span> queue<span class="token punctuation">,</span> <span class="token operator">^</span><span class="token punctuation">{</span>
    <span class="token comment">// 执行异步请求B...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">dispatch_group_async</span><span class="token punctuation">(</span>group<span class="token punctuation">,</span> queue<span class="token punctuation">,</span> <span class="token operator">^</span><span class="token punctuation">{</span>
    <span class="token comment">// 执行异步请求C...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">dispatch_group_async</span><span class="token punctuation">(</span>group<span class="token punctuation">,</span> queue<span class="token punctuation">,</span> <span class="token operator">^</span><span class="token punctuation">{</span>
    <span class="token comment">// 执行异步请求D...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">dispatch_group_notify</span><span class="token punctuation">(</span>group<span class="token punctuation">,</span> <span class="token function">dispatch_get_main_queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">^</span><span class="token punctuation">{</span>
    <span class="token comment">// 在这里处理A、B、C、D全部完成后的逻辑...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><blockquote><p>❓如果需要 <code>a、b、c、d</code> 顺序执行，该如何实现</p></blockquote><details class="hint-container details"><summary>💡</summary><p>通过<code>NSOperation</code>的<code>dependencies</code>属性来控制操作之间的依赖关系，使得他们按顺序执行。当所有操作都完成执行后，再添加一个新的操作到队列，这个操作就相当于“全部完成”的回调。</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>NSOperationQueue <span class="token operator">*</span>queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>NSOperationQueue alloc<span class="token punctuation">]</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span>

NSBlockOperation <span class="token operator">*</span>operationA <span class="token operator">=</span> <span class="token punctuation">[</span>NSBlockOperation blockOperationWithBlock<span class="token punctuation">:</span><span class="token operator">^</span><span class="token punctuation">{</span>
    <span class="token comment">// 执行异步请求A...</span>
<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
NSBlockOperation <span class="token operator">*</span>operationB <span class="token operator">=</span> <span class="token punctuation">[</span>NSBlockOperation blockOperationWithBlock<span class="token punctuation">:</span><span class="token operator">^</span><span class="token punctuation">{</span>
    <span class="token comment">// 执行异步请求B...</span>
<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>operationB addDependency<span class="token punctuation">:</span>operationA<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// B依赖A</span>

NSBlockOperation <span class="token operator">*</span>operationC <span class="token operator">=</span> <span class="token punctuation">[</span>NSBlockOperation blockOperationWithBlock<span class="token punctuation">:</span><span class="token operator">^</span><span class="token punctuation">{</span>
    <span class="token comment">// 执行异步请求C...</span>
<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>operationC addDependency<span class="token punctuation">:</span>operationB<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// C依赖B</span>

NSBlockOperation <span class="token operator">*</span>operationD <span class="token operator">=</span> <span class="token punctuation">[</span>NSBlockOperation blockOperationWithBlock<span class="token punctuation">:</span><span class="token operator">^</span><span class="token punctuation">{</span>
    <span class="token comment">// 执行异步请求D...</span>
<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>operationD addDependency<span class="token punctuation">:</span>operationC<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// D依赖C</span>

<span class="token punctuation">[</span>queue addOperations<span class="token punctuation">:</span><span class="token operator">@</span><span class="token punctuation">[</span>operationA<span class="token punctuation">,</span> operationB<span class="token punctuation">,</span> operationC<span class="token punctuation">,</span> operationD<span class="token punctuation">]</span> waitUntilFinished<span class="token punctuation">:</span>NO<span class="token punctuation">]</span><span class="token punctuation">;</span>

NSBlockOperation <span class="token operator">*</span>finishOperation <span class="token operator">=</span> <span class="token punctuation">[</span>NSBlockOperation blockOperationWithBlock<span class="token punctuation">:</span><span class="token operator">^</span><span class="token punctuation">{</span>
    <span class="token comment">// 在这里处理A、B、C、D全部完成后的逻辑...</span>
<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>finishOperation addDependency<span class="token punctuation">:</span>operationD<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token punctuation">[</span>queue addOperation<span class="token punctuation">:</span>finishOperation<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="❓现在有-20-个异步请求需要发送-要求将同一时刻的并发请求数量控制在-3-个以内-如何实现" tabindex="-1"><a class="header-anchor" href="#❓现在有-20-个异步请求需要发送-要求将同一时刻的并发请求数量控制在-3-个以内-如何实现" aria-hidden="true">#</a> ❓现在有 20 个异步请求需要发送，要求将同一时刻的并发请求数量控制在 3 个以内，如何实现</h3><details class="hint-container details"><summary>💡</summary><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token comment">// 通过信号量控制同时进行的任务数</span>
<span class="token keyword">let</span> semaphore <span class="token operator">=</span> <span class="token class-name">DispatchSemaphore</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token comment">// 用于所有请求完成之后的通知</span>
<span class="token keyword">let</span> group <span class="token operator">=</span> <span class="token class-name">DispatchGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">let</span> urls<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token constant">URL</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span> <span class="token comment">// 20 个 URL</span>

<span class="token keyword">for</span> url <span class="token keyword">in</span> urls <span class="token punctuation">{</span>
    group<span class="token punctuation">.</span><span class="token function">enter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    semaphore<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token class-name">URLSession</span><span class="token punctuation">.</span>shared<span class="token punctuation">.</span><span class="token function">dataTask</span><span class="token punctuation">(</span>with<span class="token punctuation">:</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span> response<span class="token punctuation">,</span> error<span class="token punctuation">)</span> <span class="token keyword">in</span>
        <span class="token comment">// 在这里处理请求结果</span>
       semaphore<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
       group<span class="token punctuation">.</span><span class="token function">leave</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

group<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span>queue<span class="token punctuation">:</span> <span class="token punctuation">.</span>main<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;所有请求都已经完成！&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="❓下面这段伪代码存在什么问题-如何改进" tabindex="-1"><a class="header-anchor" href="#❓下面这段伪代码存在什么问题-如何改进" aria-hidden="true">#</a> ❓下面这段伪代码存在什么问题，如何改进</h3><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    NSUInteger threadCount <span class="token operator">=</span> <span class="token punctuation">[</span>NSProcessInfo processInfo<span class="token punctuation">]</span><span class="token punctuation">.</span>activeProcessorCount<span class="token punctuation">;</span>
    NSCondition <span class="token operator">*</span>cond <span class="token operator">=</span> <span class="token punctuation">[</span>NSCondition new<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> threadCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">[</span>NSThread detachNewThreadWithBlock<span class="token punctuation">:</span><span class="token operator">^</span><span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>YES<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token punctuation">[</span>cond lock<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token comment">/* Queue is empty */</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token punctuation">[</span>cond wait<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// Dequeue an item.</span>
                <span class="token punctuation">[</span>cond unlock<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token comment">// Handle the item.</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>YES<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Enqueue something when it comes.</span>
        <span class="token punctuation">[</span>cond broadcast<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>💡</summary><p>这段代码中创建了一些线程，它们持续地等待一个条件变量（<code>NSCondition</code>）并在接收到信号后从队列中取出项进行处理。同时在主线程中，会在新的项加入队列后发送广播来唤醒这些线程。</p><ul><li><p>问题一：线程过多。</p><p>虽然这里使用了等于 <code>CPU</code> 核心数的线程数，但是在实际应用中并不推荐创建过多的线程。线程的创建和上下文切换存在一定的开销，过多的线程可能导致这些开销增大，而且线程过多可能会导致系统资源耗尽。</p><p>如果可能的话，通常更多地使用任务队列和线程池来实现并发控制，利用有限的线程处理更多的任务。可以使用 <code>NSOperationQueue</code> 或 Grand Central Dispatch (<code>GCD</code>) 来代替直接创建线程。这两者都提供了线程池的机制，能有效地复用线程。</p></li><li><p>问题二：可能存在的死锁。</p><p>在这段代码中，线程在等待条件变量的过程中一直持有锁，如果在此期间主线程试图添加新的项到队列中并发送广播，可能需要获取同样的锁，这就可能导致死锁。在添加新的项到队列中以及在从队列中取出项时，都应该在互斥锁的保护之下。</p></li><li><p>问题三：线程的生命周期控制。</p><p>会一直在后台创建和运行线程，而且没有提供退出机制。这可能会在应用的整个生命周期中占用大量的系统资源。你应该提供一种机制来在适当的时候终止这些线程。</p></li></ul><p>总结：可以考虑使用 <code>NSOperationQueue</code> 或 <code>GCD</code> 来替代直接创建线程，并有效管理锁和条件变量以避免死锁，同时提供一种机制来控制线程的生命周期。</p></details>`,121);function b(h,g){const a=o("ExternalLinkIcon");return c(),p("div",null,[i(" more "),d,n("ul",null,[n("li",null,[n("a",r,[s("Run repeating NSTimer with GCD?"),e(a)])]),n("li",null,[n("a",k,[s("2018-04-09 iOS Swift GCD 开发教程"),e(a)])]),n("li",null,[n("a",m,[s("2016-01-16 不再安全的 OSSpinLock"),e(a)])])]),v])}const _=t(u,[["render",b],["__file","0x10.thread.html.vue"]]);export{_ as default};
