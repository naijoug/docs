import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as e,o as p,c,a as u,b as n,e as s,d as t,f as i}from"./app-kOnXt4BK.js";const l={},r=n("h2",{id:"reference",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reference","aria-hidden":"true"},"#"),s(" reference")],-1),d={href:"http://opensource.apple.com/source/CF/CF-1151.16/",target:"_blank",rel:"noopener noreferrer"},k={href:"http://blog.ibireme.com/2015/05/18/runloop/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/ming1016/study/wiki/CFRunLoop",target:"_blank",rel:"noopener noreferrer"},h=n("hr",null,null,-1),b={href:"https://juejin.cn/post/6850418117169840135",target:"_blank",rel:"noopener noreferrer"},v={href:"https://juejin.cn/post/7082739417370066974",target:"_blank",rel:"noopener noreferrer"},_={href:"https://juejin.cn/post/7081932582576717831",target:"_blank",rel:"noopener noreferrer"},f=i(`<h2 id="uiapplicationmain" tabindex="-1"><a class="header-anchor" href="#uiapplicationmain" aria-hidden="true">#</a> UIApplicationMain</h2><blockquote><p><code>iOS</code> 程序启动的入口 <code>main</code> 函数中的 <code>UIApplicationMain</code> 就是启动了一个 <code>RunLoop</code></p></blockquote><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// 通过以下代码，“end main” 不会打印。可以测试出，UIApplicationMain一直没有返回值。</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">@</span>autoreleasepool <span class="token punctuation">{</span>
        <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;start main&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">UIApplicationMain</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> nil<span class="token punctuation">,</span> <span class="token function">NSStringFromClass</span><span class="token punctuation">(</span><span class="token punctuation">[</span>AppDelegate class<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;end main&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
        
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="runloop" tabindex="-1"><a class="header-anchor" href="#runloop" aria-hidden="true">#</a> RunLoop</h2><table><thead><tr><th>framework</th><th>API</th></tr></thead><tbody><tr><td>Foundation</td><td>NSRunLoop</td></tr><tr><td>CoreFoundation</td><td>CFRunLoopRef</td></tr></tbody></table><ul><li><p>核心类</p><table><thead><tr><th>核心类</th><th>说明</th></tr></thead><tbody><tr><td><code>CFRunLoopRef</code></td><td>RunLoop 对象，一个 Loop 包含多个 Mode</td></tr><tr><td><code>CFRunLoopMode</code></td><td>RunLoop 运行模式</td></tr><tr><td><code>CFRunLoopSourceRef</code></td><td>事件源 (输入源)</td></tr><tr><td><code>CFRunLoopTimerRef</code></td><td>基于时间的触发器（如 : NSTimer）</td></tr><tr><td><code>CFRunLoopObserverRef</code></td><td>RunLoop 的观察者，能够监听 RunLoop 的状态改变</td></tr></tbody></table></li><li><p>CFRunLoopMode</p><blockquote><p>每个 Mode 包含若干个 <code>Source/Timer/Observer</code> 切换 Mode，需要退出 Loop，再重新创建另一个 Mode 的 Loop</p></blockquote><table><thead><tr><th>RunLoopMode (运行模式)</th><th>说明</th></tr></thead><tbody><tr><td><code>kCFRunLoopDefaultMode</code></td><td>App 的默认 Mode，通常主线程是在这个Mode下运行</td></tr><tr><td><code>UITrackingRunLoopMode</code></td><td>界面跟踪 Mode，用于 ScrollView 追踪触摸滑动，保证界面滑动时不受其他 Mode 影响</td></tr><tr><td><code>UIInitializationRunLoopMode</code></td><td>在刚启动 App 时第进入的第一个 Mode，启动完成后就不再使用</td></tr><tr><td><code>GSEventReceiveRunLoopMode</code></td><td>接受系统事件的内部 Mode，通常用不到</td></tr><tr><td><code>kCFRunLoopCommonModes</code></td><td>这是一个占位用的 Mode，不是一种真正的 Mode。被标记为 common modes 模式 kCFRunLoopDefaultMode UITrackingRunLoopMode 两种模式。</td></tr></tbody></table></li><li><p>CFRunLoopSourceRef</p><table><thead><tr><th>RunLoopSource (输入源)</th><th>说明</th></tr></thead><tbody><tr><td><code>Source0</code></td><td>非基于 Port 的</td></tr><tr><td><code>Source1</code></td><td>基于 Port 的</td></tr></tbody></table></li><li><p>CFRunLoopActivity</p><table><thead><tr><th>RunLoopActivity (观察者活动状态)</th><th>说明</th></tr></thead><tbody><tr><td><code>kCFRunLoopEntry</code></td><td>即将进入 Loop</td></tr><tr><td><code>kCFRunLoopBeforeTimers</code></td><td>即将处理 Timer</td></tr><tr><td><code>kCFRunLoopBeforeSources</code></td><td>即将处理 Source</td></tr><tr><td><code>kCFRunLoopBeforeWaiting</code></td><td>即将进入休眠</td></tr><tr><td><code>kCFRunLoopAfterWaiting</code></td><td>刚从休眠中唤醒</td></tr><tr><td><code>kCFRunLoopExit</code></td><td>即将推出 Loop</td></tr><tr><td><code>kCFRunLoopAllActivities</code></td><td></td></tr></tbody></table></li></ul><h2 id="runloop-thread" tabindex="-1"><a class="header-anchor" href="#runloop-thread" aria-hidden="true">#</a> RunLoop &amp; Thread</h2><ul><li>RunLoop 和线程一一对应。</li><li>主线程默认会创建一个 Loop 并启动。</li><li>其它线程 Loop 默认不会启动，需要我们手动启动。</li><li>存储在全局字典中 (<code>key: 线程 ; value: Loop</code>)</li></ul><h2 id="nstimer" tabindex="-1"><a class="header-anchor" href="#nstimer" aria-hidden="true">#</a> NSTimer</h2><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// 实现一个精准的 NSTimer ?</span>
<span class="token comment">// 方案一：将 NSTimer 加到 RunLoop 的 Common 模式中</span>
<span class="token keyword">self</span><span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token punctuation">[</span>NSTimer timerWithTimeInterval<span class="token punctuation">:</span><span class="token number">1.0</span> target<span class="token punctuation">:</span><span class="token keyword">self</span> selector<span class="token punctuation">:</span><span class="token keyword">@selector</span><span class="token punctuation">(</span>showTime<span class="token punctuation">)</span> userInfo<span class="token punctuation">:</span>nil repeats<span class="token punctuation">:</span>YES<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span><span class="token punctuation">[</span>NSRunLoop currentRunLoop<span class="token punctuation">]</span> addTimer<span class="token punctuation">:</span><span class="token keyword">self</span><span class="token punctuation">.</span>timer forMode<span class="token punctuation">:</span>NSRunLoopCommonModes<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 方案二：在子线程中使用 NSTimer</span>
NSThread <span class="token operator">*</span>thread <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>NSThread alloc<span class="token punctuation">]</span> initWithTarget<span class="token punctuation">:</span><span class="token keyword">self</span> selector<span class="token punctuation">:</span><span class="token keyword">@selector</span><span class="token punctuation">(</span>newThread<span class="token punctuation">)</span> object<span class="token punctuation">:</span>nil<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>thread start<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>newThread <span class="token punctuation">{</span>
    <span class="token operator">@</span>autoreleasepool <span class="token punctuation">{</span>
        <span class="token punctuation">[</span>NSTimer scheduledTimerWithTimeInterval<span class="token punctuation">:</span><span class="token number">1.0</span> target<span class="token punctuation">:</span><span class="token keyword">self</span> selector<span class="token punctuation">:</span><span class="token keyword">@selector</span><span class="token punctuation">(</span>showTime<span class="token punctuation">)</span> userInfo<span class="token punctuation">:</span>nil repeats<span class="token punctuation">:</span>YES<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">[</span><span class="token punctuation">[</span>NSRunLoop currentRunLoop<span class="token punctuation">]</span> run<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 启动子线程的 RunLoop</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 方案三：GCD 实现</span>
<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>gcdTimer<span class="token punctuation">{</span>
dispatch_queue_t queue <span class="token operator">=</span> <span class="token function">dispatch_get_global_queue</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">self</span><span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token function">dispatch_source_create</span><span class="token punctuation">(</span>DISPATCH_SOURCE_TYPE_TIMER<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
dispatch_time_t start <span class="token operator">=</span> <span class="token function">dispatch_time</span><span class="token punctuation">(</span>DISPATCH_TIME_NOW<span class="token punctuation">,</span> <span class="token punctuation">(</span>int64_t<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">*</span> NSEC_PER_SEC<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
uint64_t interval <span class="token operator">=</span> <span class="token punctuation">(</span>uint64_t<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">*</span> NSEC_PER_SEC<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">dispatch_source_set_timer</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>timer<span class="token punctuation">,</span> start<span class="token punctuation">,</span> interval<span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">dispatch_source_set_event_handler</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>timer<span class="token punctuation">,</span> <span class="token operator">^</span><span class="token punctuation">{</span>
    <span class="token function">dispatch_async</span><span class="token punctuation">(</span><span class="token function">dispatch_get_global_queue</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">^</span><span class="token punctuation">{</span>
        <span class="token comment">// do something</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">dispatch_resume</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10);function R(L,g){const a=e("ExternalLinkIcon");return p(),c("div",null,[u("more "),r,n("ul",null,[n("li",null,[n("a",d,[s("CFRunLoopRef 开源代码"),t(a)])]),n("li",null,[n("a",k,[s("2015-05-18 深入理解RunLoop - 郭曜源"),t(a)])]),n("li",null,[n("a",m,[s("2015-03-20 CFRunLoop - 戴铭"),t(a)])])]),h,n("ul",null,[n("li",null,[n("a",b,[s("2020-07-15 秒杀面试官的RunLoop底层原理"),t(a)])]),n("li",null,[n("a",v,[s("2022-04-04 由点入面吃透RunLoop"),t(a)])]),n("li",null,[n("a",_,[s("2022-04-02 当面试官问Runloop时，想听到的答案是什么？"),t(a)])])]),f])}const y=o(l,[["render",R],["__file","index.html.vue"]]);export{y as default};
