import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o,c,a,f as r}from"./app-YVf6zcZH.js";const d={},t=r('<h2 id="fp-functional-programming-函数式编程" tabindex="-1"><a class="header-anchor" href="#fp-functional-programming-函数式编程" aria-hidden="true">#</a> <code>FP (Functional Programming)</code> - “函数式编程”</h2><blockquote><p>关键字 : <code>不可变状态</code>、<code>副作用</code>、<code>一等公民</code>、<code>高阶函数</code>、<code>偏函数</code>、<code>纯函数</code></p></blockquote><p>一等公民 : 函数式编程中，函数与其它变量或者对象是等价的，可以作为函数的参数或者返回值(高阶函数) 偏函数 : 函数的返回值是一个函数 纯函数 : 没有副作用的函数，相同的参数输出结果都是相同的，也就是不可变状态。</p><p>引用透明 : 纯函数具有这个特性，对于引用透明编译器会进行缓存参数和结果的优化处理。</p><blockquote><p>核心操作 : <code>map</code>、<code>fliter</code>、<code>reduce</code></p></blockquote><h2 id="rp-reactive-programming-响应式编程" tabindex="-1"><a class="header-anchor" href="#rp-reactive-programming-响应式编程" aria-hidden="true">#</a> <code>RP (Reactive Programming)</code> - “响应式编程”</h2><ul><li><code>Proactive</code> : 异步编程里面的主动轮询</li><li><code>Reactive</code> : 异步编程里面的被动接受反馈(回调)</li></ul>',7);function i(n,m){return o(),c("div",null,[a(" more "),t])}const s=e(d,[["render",i],["__file","paradigm.html.vue"]]);export{s as default};
