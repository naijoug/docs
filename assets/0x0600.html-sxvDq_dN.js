import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as l,c as i,a as p,b as n,e as s,d as e,f as c}from"./app-_KbMDiSB.js";const r={},u=n("h2",{id:"_0645",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0645","aria-hidden":"true"},"#"),s(" 0645")],-1),d=n("p",null,"// #region 0645",-1),h={href:"https://leetcode.cn/problems/set-mismatch",target:"_blank",rel:"noopener noreferrer"},_=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),k=n("p",null,"// #endregion 0645",-1),m=n("h2",{id:"_0648",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0648","aria-hidden":"true"},"#"),s(" 0648")],-1),b=n("p",null,"// #region 0648",-1),f={href:"https://leetcode.cn/problems/replace-words",target:"_blank",rel:"noopener noreferrer"},v=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),g=n("p",null,"// #endregion 0648",-1),y=n("h2",{id:"_0651",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0651","aria-hidden":"true"},"#"),s(" 0651")],-1),x=n("p",null,"// #region 0651",-1),w={href:"https://leetcode.cn/problems/4-keys-keyboard",target:"_blank",rel:"noopener noreferrer"},N=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),V=n("p",null,"// #endregion 0651",-1),A=n("h2",{id:"_0652",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0652","aria-hidden":"true"},"#"),s(" 0652")],-1),I=n("p",null,"// #region 0652",-1),P={href:"https://leetcode.cn/problems/find-duplicate-subtrees",target:"_blank",rel:"noopener noreferrer"},S=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),j=n("p",null,"// #endregion 0652",-1),q=n("h2",{id:"_0654",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0654","aria-hidden":"true"},"#"),s(" 0654")],-1),B=n("p",null,"// #region 0654",-1),E={href:"https://leetcode.cn/problems/maximum-binary-tree",target:"_blank",rel:"noopener noreferrer"},C=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),L=n("p",null,"// #endregion 0654",-1),T=n("h2",{id:"_0659",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0659","aria-hidden":"true"},"#"),s(" 0659")],-1),z=n("p",null,"// #region 0659",-1),D={href:"https://leetcode.cn/problems/split-array-into-consecutive-subsequences",target:"_blank",rel:"noopener noreferrer"},F=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),G=n("p",null,"// #endregion 0659",-1),H=n("h2",{id:"_0677",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0677","aria-hidden":"true"},"#"),s(" 0677")],-1),J=n("p",null,"// #region 0677",-1),K={href:"https://leetcode.cn/problems/map-sum-pairs",target:"_blank",rel:"noopener noreferrer"},M=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),O=n("p",null,"// #endregion 0677",-1),Q=n("h2",{id:"_0680",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0680","aria-hidden":"true"},"#"),s(" 0680")],-1),R=n("p",null,"// #region 0680",-1),U={href:"https://leetcode.cn/problems/valid-palindrome-ii",target:"_blank",rel:"noopener noreferrer"},W=n("blockquote",null,[n("p",null,"给定一个字符串，判断改字符(在最多可以删除一个字符的情况下)是否可以成为回文串。")],-1),X=c(`<details class="hint-container details"><summary>💡</summary><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">validPalindrome</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> right <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span> left <span class="token operator">&lt;</span> right <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token operator">!=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 当遇到不匹配时，分别跳过左边字符和右边字符对剩下范围的字符串继续判断是否为回文串</span>
                <span class="token keyword">return</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            left <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            right <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 判断一个字符串在指定左右索引范围字符是否为回文串</span>
    <span class="token keyword">boolean</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span> left <span class="token operator">&lt;</span> right <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token operator">!=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            left <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            right <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>// #endregion 0680</p><h2 id="_0694" tabindex="-1"><a class="header-anchor" href="#_0694" aria-hidden="true">#</a> 0694</h2><p>// #region 0694</p>`,4),Y={href:"https://leetcode.cn/problems/number-of-distinct-islands",target:"_blank",rel:"noopener noreferrer"},Z=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),$=n("p",null,"// #endregion 0694",-1),nn=n("h2",{id:"_0695",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0695","aria-hidden":"true"},"#"),s(" 0695")],-1),sn=n("p",null,"// #region 0695",-1),an={href:"https://leetcode.cn/problems/max-area-of-island",target:"_blank",rel:"noopener noreferrer"},en=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),tn=n("p",null,"// #endregion 0695",-1),on=n("h2",{id:"_0698",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0698","aria-hidden":"true"},"#"),s(" 0698")],-1),ln=n("p",null,"// #region 0698",-1),pn={href:"https://leetcode.cn/problems/partition-to-k-equal-sum-subsets",target:"_blank",rel:"noopener noreferrer"},cn=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),rn=n("p",null,"// #endregion 0698",-1);function un(dn,hn){const a=o("ExternalLinkIcon");return l(),i("div",null,[p(" more "),u,d,n("ul",null,[n("li",null,[n("a",h,[s("🟢 645 - 错误的集合"),e(a)])])]),_,k,m,b,n("ul",null,[n("li",null,[n("a",f,[s("🟠 648 - 单词替换"),e(a)])])]),v,g,y,x,n("ul",null,[n("li",null,[n("a",w,[s("🟠 651 - 4键键盘"),e(a)])])]),N,V,A,I,n("ul",null,[n("li",null,[n("a",P,[s("🟠 652 - 寻找重复的子树"),e(a)])])]),S,j,q,B,n("ul",null,[n("li",null,[n("a",E,[s("🟠 654 - 最大二叉树"),e(a)])])]),C,L,T,z,n("ul",null,[n("li",null,[n("a",D,[s("🟠 659 - 分割数组为连续子序列"),e(a)])])]),F,G,H,J,n("ul",null,[n("li",null,[n("a",K,[s("🟠 677 - 键值映射"),e(a)])])]),M,O,Q,R,n("ul",null,[n("li",null,[n("a",U,[s("🟢 680 - 验证回文串 II"),e(a)]),W])]),X,n("ul",null,[n("li",null,[n("a",Y,[s("🟠 694 - 不同岛屿的数量"),e(a)])])]),Z,$,nn,sn,n("ul",null,[n("li",null,[n("a",an,[s("🟠 695 - 岛屿的最大面积"),e(a)])])]),en,tn,on,ln,n("ul",null,[n("li",null,[n("a",pn,[s("🟠 698 - 划分为k个相等的子集"),e(a)])])]),cn,rn])}const mn=t(r,[["render",un],["__file","0x0600.html.vue"]]);export{mn as default};
