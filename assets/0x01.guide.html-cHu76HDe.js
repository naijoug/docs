import{_ as p}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as c,c as l,b as n,e as s,d as t,f as a}from"./app-KB7Ct32Q.js";const i={},r=a(`<h2 id="virtual-environment-虚拟环境" tabindex="-1"><a class="header-anchor" href="#virtual-environment-虚拟环境" aria-hidden="true">#</a> <code>Virtual Environment</code> - “虚拟环境”</h2><h3 id="venv" tabindex="-1"><a class="header-anchor" href="#venv" aria-hidden="true">#</a> <code>venv</code></h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># venv (Python 3.3)</span>
$ python <span class="token parameter variable">-m</span> venv .env <span class="token comment"># 创建虚拟环境</span>
$ <span class="token builtin class-name">source</span> .env/bin/activate <span class="token comment"># 激活虚拟空间</span>
$ deactivate <span class="token comment"># 关闭虚拟空间</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pyenv" tabindex="-1"><a class="header-anchor" href="#pyenv" aria-hidden="true">#</a> <code>pyenv</code></h3>`,4),u={href:"https://github.com/pyenv/pyenv",target:"_blank",rel:"noopener noreferrer"},d=a(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ brew <span class="token function">install</span> pyenv    <span class="token comment"># 安装 pyenv</span>
$ pyenv versions        <span class="token comment"># 查看 python 版本</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pipenv" tabindex="-1"><a class="header-anchor" href="#pipenv" aria-hidden="true">#</a> <code>pipenv</code></h3>`,2),k={href:"https://github.com/pypa/pipenv",target:"_blank",rel:"noopener noreferrer"},v=a(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ pipenv <span class="token parameter variable">--python</span> <span class="token number">3.10</span>      <span class="token comment"># 设置项目使用 python 版本</span>
$ pipenv <span class="token function">install</span> <span class="token operator">&lt;</span>package<span class="token operator">&gt;</span>  <span class="token comment"># 安装依赖包</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="virtualenv" tabindex="-1"><a class="header-anchor" href="#virtualenv" aria-hidden="true">#</a> <code>virtualenv</code></h3>`,2),m={href:"https://github.com/pypa/virtualenv",target:"_blank",rel:"noopener noreferrer"},b=a(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ pip <span class="token function">install</span> virtualenv        <span class="token comment"># 安装 virtualenv</span>
$ virtualenv test_env                       <span class="token comment"># 在当前目录建立一个 python 虚拟环境</span>
$ virtualenv --no-site-packages test_env    <span class="token comment"># 不复制系统 python 环境的第三方包</span>
$ virtualenv <span class="token parameter variable">-p</span> /usr/bin/python2.7 test_env <span class="token comment"># 指定 python 版本</span>
$ <span class="token builtin class-name">source</span> test_env/bin/activate  <span class="token comment"># 激活虚拟空间</span>
$ deactivate                    <span class="token comment"># 关闭虚拟空间</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="anaconda" tabindex="-1"><a class="header-anchor" href="#anaconda" aria-hidden="true">#</a> <code>Anaconda</code></h3>`,2),h={href:"https://www.anaconda.com",target:"_blank",rel:"noopener noreferrer"},g=a(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># conda</span>
$ conda <span class="token parameter variable">-V</span>          <span class="token comment"># conda版本</span>
$ conda list        <span class="token comment"># 查看当前环境安装包</span>
$ conda list <span class="token parameter variable">-n</span> <span class="token function">env</span> <span class="token comment"># 指定环境安装包</span>
$ conda info        <span class="token comment"># 查看conda信息</span>
<span class="token comment"># 查看已创建虚拟环境</span>
$ conda info <span class="token parameter variable">-e</span>
$ conda <span class="token function">env</span> list    
<span class="token comment"># 创建</span>
$ conda create <span class="token parameter variable">--name</span> <span class="token variable">$ENVIRONMENT_NAME</span> <span class="token punctuation">[</span>package<span class="token punctuation">]</span>
$ conda create <span class="token parameter variable">-n</span> py3 <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">3</span> <span class="token comment"># 创建python3环境</span>
$ conda create <span class="token parameter variable">-n</span> py2 <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">2</span> <span class="token comment"># 创建python2环境</span>
$ conda create <span class="token parameter variable">--name</span> python34 <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">3.4</span>   <span class="token comment"># 创建指定版本环境</span>
<span class="token comment"># 激活</span>
$ <span class="token builtin class-name">source</span> activate py3
<span class="token comment"># 关闭</span>
$ <span class="token builtin class-name">source</span> deactivate
<span class="token comment"># 包</span>
$ conda search <span class="token punctuation">[</span>package<span class="token punctuation">]</span>            <span class="token comment"># 搜索包</span>
$ conda <span class="token function">install</span> <span class="token parameter variable">-n</span> <span class="token function">env</span> <span class="token punctuation">[</span>package<span class="token punctuation">]</span>    <span class="token comment"># 安装包</span>
$ conda update <span class="token parameter variable">-n</span> <span class="token function">env</span> <span class="token punctuation">[</span>package<span class="token punctuation">]</span>     <span class="token comment"># 更新包        </span>
$ conda remove <span class="token parameter variable">--name</span> <span class="token function">env</span> <span class="token punctuation">[</span>package<span class="token punctuation">]</span> <span class="token comment"># 删除包</span>
<span class="token comment"># 删除虚拟环境</span>
$ conda remove <span class="token parameter variable">-n</span> <span class="token function">env</span> <span class="token parameter variable">--all</span>
$ conda <span class="token function">env</span> remove <span class="token parameter variable">-n</span> <span class="token function">env</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="command" tabindex="-1"><a class="header-anchor" href="#command" aria-hidden="true">#</a> command</h2><blockquote><p><code>Interactive Mode</code> - “交互模式”</p></blockquote><ul><li><code>&gt;&gt;&gt;</code> : 主提示符(primary prompt)</li><li><code>...</code> : 从属提示符，输入多行结构时出现从属提示符</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="main-vs-main" tabindex="-1"><a class="header-anchor" href="#main-vs-main" aria-hidden="true">#</a> <code>main</code> vs <code>__main__</code></h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#!/usr/bin/python3      # 大部分 .py 文件不必使用 Shebang，main 文件应该使用</span>
<span class="token comment"># Shebang : 一个由井号和叹号构成的字符串行(#!)，用于帮助内核找到 Python 解释器</span>

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># TODO</span>
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span> <span class="token comment"># 作用 : 当作为模块被导入时，主程序不会被执行</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数据类型一览" tabindex="-1"><a class="header-anchor" href="#数据类型一览" aria-hidden="true">#</a> 数据类型一览</h2><table><thead><tr><th>类型</th><th>说明</th><th>定义</th></tr></thead></table><h3 id="str-bytes" tabindex="-1"><a class="header-anchor" href="#str-bytes" aria-hidden="true">#</a> <code>str</code> &amp; <code>bytes</code></h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>s <span class="token operator">=</span> <span class="token string">&#39;test&#39;</span>
b <span class="token operator">=</span> <span class="token string">b&#39;test&#39;</span>
<span class="token comment"># str -&gt; bytes</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># bytes -&gt; str</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="conditional-expression-条件表达式" tabindex="-1"><a class="header-anchor" href="#conditional-expression-条件表达式" aria-hidden="true">#</a> <code>Conditional Expression</code> - “条件表达式”</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span>
   
<span class="token comment"># 1.常规</span>
<span class="token keyword">if</span> a<span class="token operator">&gt;</span>b<span class="token punctuation">:</span>
  c <span class="token operator">=</span> a
<span class="token keyword">else</span><span class="token punctuation">:</span>
  c <span class="token operator">=</span> b
   
<span class="token comment"># 2.表达式</span>
c <span class="token operator">=</span> a <span class="token keyword">if</span> a<span class="token operator">&gt;</span>b <span class="token keyword">else</span> b <span class="token comment"># 先执行中间的if，如果返回True，就是左边，False是右边。</span>
   
<span class="token comment"># 3.二维列表</span>
c <span class="token operator">=</span> <span class="token punctuation">[</span>b<span class="token punctuation">,</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token operator">&gt;</span>b<span class="token punctuation">]</span>  <span class="token comment"># 实际是[b,a][False]，因为False被转换为0，所以是[1,2][0]，也就是[1]</span>
                <span class="token comment"># False返回第一个，True 返回第一个。</span>
   
<span class="token comment"># 4</span>
c <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">&gt;</span>b <span class="token keyword">and</span> <span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token keyword">or</span> <span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token comment"># 这个比较好玩，False and [1] or [2]，因为and的优先级高于or，先算and</span>
<span class="token comment"># False和[1] and之后还是False，和[2]or之后却成了[2]</span>
<span class="token comment"># True 和[1] and之后是[1]，[1]和[2]or结果是[1]</span>
<span class="token comment"># 也就是False和True在和别人做boolean运算的时候，根据and还是or，F和T在前在后有不一样的数据转换规则。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h3><ul><li><p>默认参数</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 默认参数</span>
<span class="token keyword">def</span> <span class="token function">test1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c
test1<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token comment"># 10 + 1 + 2 = 13</span>
<span class="token comment"># 默认参数的值等于定义域的值</span>
i <span class="token operator">=</span> <span class="token number">10</span>
<span class="token keyword">def</span> <span class="token function">test2</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> c <span class="token operator">=</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c
i <span class="token operator">=</span> <span class="token number">20</span>
test2<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>   <span class="token comment"># 10 + 1 + 10 = 21</span>
<span class="token comment"># 默认参数为可变对象时，需要注意。</span>
<span class="token keyword">def</span> <span class="token function">test3</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> L <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    L<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">)</span>
    <span class="token keyword">return</span> L
test3<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>   <span class="token comment"># [13]</span>
test3<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>   <span class="token comment"># [13, 13]</span>
test3<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>   <span class="token comment"># [13, 13, 13]</span>
<span class="token comment"># 解决方案: 函数内对可变对象进行初始化</span>
<span class="token keyword">def</span> <span class="token function">test4</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> L <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> L <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        L <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    L<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">)</span>
    <span class="token keyword">return</span> L
test4<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>   <span class="token comment"># [13]</span>
test4<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>   <span class="token comment"># [13]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>任意参数</p><ul><li><code>*name</code> : 不常用，传递的参数被包装成一个元组，在其后面的参数必须是关键字参数</li><li><code>**name</code> : 必须作为最后一个参数，包含剩余所有的关键字参数</li></ul></li></ul>`,15);function y(f,_){const e=o("ExternalLinkIcon");return c(),l("div",null,[r,n("blockquote",null,[n("p",null,[n("a",u,[s("pyenv"),t(e)]),s(" : Simple Python version management")])]),d,n("blockquote",null,[n("p",null,[n("a",k,[s("pipenv"),t(e)]),s(" : Python Development Workflow for Humans.")])]),v,n("blockquote",null,[n("p",null,[n("a",m,[s("virtualenv"),t(e)]),s(" : Virtual Python Environment builder")])]),b,n("blockquote",null,[n("p",null,[n("a",h,[s("Anaconda"),t(e)]),s(" : Data science technology for a better world.")])]),g])}const w=p(i,[["render",y],["__file","0x01.guide.html.vue"]]);export{w as default};
