import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,a as e,f as p}from"./app-NVknrtE1.js";const t={},o=p(`<h2 id="递归的本质" tabindex="-1"><a class="header-anchor" href="#递归的本质" aria-hidden="true">#</a> 递归的本质</h2><p>中文名“递归”这两个字很好的诠释了其核心操作“递 + 归”。</p><p>递的过程就是一层一层地调用递归函数，归的过程就是触发到边界条件之后进行每一层的递归函数返回，这一去一来的过程就是递归。</p><p>递归的本质是借助于系统的内存管理系统提供的栈实现，递的过程中会将该层函数调用的临时变量进行入栈操作，归的过程会将保存的临时变量进行出栈操作，并进行改层函数最终结果计算返回。</p><h2 id="递归问题" tabindex="-1"><a class="header-anchor" href="#递归问题" aria-hidden="true">#</a> 递归问题</h2><blockquote><p>递归求解的三要素</p></blockquote><ul><li>求解问题可以分解问子问题</li><li>求解问题与子问题具有相同的求解思路</li><li>存在递归终止条件</li></ul><blockquote><p>递归的弊端</p></blockquote><ul><li>递归层数较深，会照成堆栈溢出</li><li>递归过程中会存在重复计算</li><li>空间复杂度高，函数调用耗时</li></ul><blockquote><p>尾递归</p></blockquote><p>尾递归是在进行递归代码编写时，将递归的调用操作作为函数的最后一个操作直接。 这个时候依赖编译器的“尾调用优化”(Tail Call Optimization) 会将递归代码优化为迭代代码。编译的优化的关键在于函数的最后一步就是递归调用，这个时候就不需要新开辟栈，直接将控制器和调用交个调用函数。</p><p>尾递归的优化是编译器的特性，如果编程语言的编译器不支持“尾调用优化”，那么尾递归写法和常规递归也就没有区别了。</p><p>尾递归的写法其实是一种自底向上的一种写法，使用的迭代的思维，需要将子问题的求解结果，从边界情况一直向上传递。从代码理解成面来讲，如果想要使用尾递归优化，还不如直接将递归代码转化为迭代代码清晰。并且尾递归的优化依赖编程语言的编译器，并不一定是百分百有效。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token comment">// 斐波纳契 : 0,1,1,2,3,5,8</span>
<span class="token comment">//  f(n) = f(n-1) + fn(n-2)</span>
<span class="token keyword">func</span> <span class="token function-definition function">fib</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> n<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span>
    <span class="token keyword">guard</span> n <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> n <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">f</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 尾递归优化</span>
<span class="token keyword">func</span> <span class="token function-definition function">fibTail</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> n<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">,</span> current<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> next<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span>
    <span class="token keyword">guard</span> n <span class="token operator">!=</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> current <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">fibTail</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> current<span class="token punctuation">:</span> next<span class="token punctuation">,</span> next<span class="token punctuation">:</span> current <span class="token operator">+</span> next<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 迭代</span>
<span class="token keyword">func</span> <span class="token function-definition function">fibTraverse</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> n<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span>
    <span class="token keyword">guard</span> n <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> n <span class="token punctuation">}</span>
    <span class="token keyword">var</span> pre <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">var</span> current <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">for</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span> <span class="token number">2</span><span class="token operator">...</span>n <span class="token punctuation">{</span>
         <span class="token keyword">let</span> next <span class="token operator">=</span> pre <span class="token operator">+</span> current
         pre <span class="token operator">=</span> current
         current <span class="token operator">=</span> next
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> current
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14);function c(l,i){return s(),a("div",null,[e(" more "),o])}const k=n(t,[["render",c],["__file","recursion.html.vue"]]);export{k as default};
