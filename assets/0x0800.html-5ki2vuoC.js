import{_ as r}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as c,o as u,c as d,a as p,b as n,e as s,d as e,w as t}from"./app-6WnngIFp.js";const k={},_=n("h2",{id:"_0800",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0800","aria-hidden":"true"},"#"),s(" 0800")],-1),h=n("p",null,"// #region 0800",-1),m={href:"https://leetcode.cn/problems/similar-rgb-color",target:"_blank",rel:"noopener noreferrer"},b=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),v=n("p",null,"// #endregion 0800",-1),f=n("h2",{id:"_0810-✅",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0810-✅","aria-hidden":"true"},"#"),s(" 0810 ✅")],-1),g=n("p",null,"// #region 0810",-1),x={href:"https://leetcode.cn/problems/chalkboard-xor-game",target:"_blank",rel:"noopener noreferrer"},w={class:"hint-container details"},y=n("summary",null,"💡",-1),N=n("p",null,"【思路】博弈论",-1),L=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Solution"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"boolean"),s(),n("span",{class:"token function"},"xorGame"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(" nums"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// 偶数，必胜"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("nums"),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},"%"),s(),n("span",{class:"token number"},"2"),s(),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token comment"},"// 异或结果为零，必胜"),s(`
        `),n("span",{class:"token keyword"},"int"),s(" xor "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" num "),n("span",{class:"token operator"},":"),s(" nums"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            xor `),n("span",{class:"token operator"},"^="),s(" num"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"return"),s(" xor "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),j=n("p",null,"// #endregion 0810",-1),A=n("h2",{id:"_0828",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0828","aria-hidden":"true"},"#"),s(" 0828")],-1),C=n("p",null,"// #region 0828",-1),I={href:"https://leetcode.cn/problems/count-unique-characters-of-all-substrings-of-a-given-string",target:"_blank",rel:"noopener noreferrer"},B=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),S=n("p",null,"// #endregion 0828",-1),V=n("h2",{id:"_0855",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0855","aria-hidden":"true"},"#"),s(" 0855")],-1),q=n("p",null,"// #region 0855",-1),E={href:"https://leetcode.cn/problems/exam-room",target:"_blank",rel:"noopener noreferrer"},G=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),T=n("p",null,"// #endregion 0855",-1),D=n("h2",{id:"_0870",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0870","aria-hidden":"true"},"#"),s(" 0870")],-1),R=n("p",null,"// #region 0870",-1),z={href:"https://leetcode.cn/problems/advantage-shuffle",target:"_blank",rel:"noopener noreferrer"},F=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),H=n("p",null,"// #endregion 0870",-1),J=n("h2",{id:"_0875",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0875","aria-hidden":"true"},"#"),s(" 0875")],-1),K=n("p",null,"// #region 0875",-1),M={href:"https://leetcode.cn/problems/koko-eating-bananas",target:"_blank",rel:"noopener noreferrer"},O=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),P=n("p",null,"// #endregion 0875",-1),Q=n("h2",{id:"_0876-✅",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0876-✅","aria-hidden":"true"},"#"),s(" 0876 ✅")],-1),U=n("p",null,"// #region 0876",-1),W={href:"https://leetcode.cn/problems/middle-of-the-linked-list/",target:"_blank",rel:"noopener noreferrer"},X=n("blockquote",null,[n("p",null,"给定一个单链表，返回链表的中间节点。")],-1),Y={class:"hint-container details"},Z=n("summary",null,"💡",-1),$=n("p",null,"【思路】使用快慢指针，快指针每次走两步，慢指针每次走一步。当快指针走完时",-1),nn=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token doc-comment comment"},[s(`/**
 * Definition for singly-linked list.
 * public class ListNode `),n("span",{class:"token punctuation"},"{"),s(`
 *     int val;
 *     ListNode next;
 *     ListNode() `),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),s(`
 *     ListNode(int val) `),n("span",{class:"token punctuation"},"{"),s(" this.val = val; "),n("span",{class:"token punctuation"},"}"),s(`
 *     ListNode(int val, ListNode next) `),n("span",{class:"token punctuation"},"{"),s(" this.val = val; this.next = next; "),n("span",{class:"token punctuation"},"}"),s(`
 * `),n("span",{class:"token punctuation"},"}"),s(`
 */`)]),s(`
`),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Solution"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"ListNode"),s(),n("span",{class:"token function"},"middleNode"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"ListNode"),s(" head"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token class-name"},"ListNode"),s(" fast "),n("span",{class:"token operator"},"="),s(" head"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token class-name"},"ListNode"),s(" slow "),n("span",{class:"token operator"},"="),s(" head"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token comment"},"// 需要校验 fast.next 为空，表明已经是最后一个节点"),s(`
        `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s(" fast "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"null"),s(),n("span",{class:"token operator"},"&&"),s(" fast"),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"null"),s(),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token comment"},"// fast 未走到最后，fast 走两步，slow 走一步"),s(`
            fast `),n("span",{class:"token operator"},"="),s(" fast"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
            slow `),n("span",{class:"token operator"},"="),s(" slow"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"return"),s(" slow"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),sn=n("div",{class:"language-swift line-numbers-mode","data-ext":"swift"},[n("pre",{class:"language-swift"},[n("code",null,[n("span",{class:"token comment"},`/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init() { self.val = 0; self.next = nil; }
 *     public init(_ val: Int) { self.val = val; self.next = nil; }
 *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }
 * }
 */`),s(`
`),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Solution"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"func"),s(),n("span",{class:"token function-definition function"},"middleNode"),n("span",{class:"token punctuation"},"("),n("span",{class:"token omit keyword"},"_"),s(" head"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"->"),s(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"var"),s(" p "),n("span",{class:"token operator"},"="),s(` head
        `),n("span",{class:"token keyword"},"var"),s(" mid "),n("span",{class:"token operator"},"="),s(` head
        `),n("span",{class:"token keyword"},"while"),s(" p"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token nil constant"},"nil"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token comment"},"// swift 的可选类型，简化了 p 指针边界条件的判断"),s(`
            p `),n("span",{class:"token operator"},"="),s(" p"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),s(`next
            mid `),n("span",{class:"token operator"},"="),s(" mid"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),s(`next
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"return"),s(` mid
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),en=n("p",null,"// #endregion 0876",-1),an=n("h2",{id:"_0877-✅",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0877-✅","aria-hidden":"true"},"#"),s(" 0877 ✅")],-1),tn=n("p",null,"// #region 0877",-1),ln={href:"https://leetcode.cn/problems/stone-game",target:"_blank",rel:"noopener noreferrer"},on=n("blockquote",null,[n("p",null,"石头的总数为奇数，被分成偶数份，每次只能从分好数组的左边或者右边拿取。给定分割后的偶数数组，判断先手是否能获胜？")],-1),cn={class:"hint-container details"},rn=n("summary",null,"💡",-1),un=n("p",null,"【思路】先手必胜！先手者可以控制对手只能拿奇数或者偶数索引下的石头，先手只需要计算好是奇数索引下的石头多还是偶数索引下的石头多，先手只要拿数更多即可必胜。",-1),dn=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Solution"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"boolean"),s(),n("span",{class:"token function"},"stoneGame"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(" piles"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 先手必胜"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),pn=n("p",null,"// #endregion 0877",-1),kn=n("h2",{id:"_0886",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0886","aria-hidden":"true"},"#"),s(" 0886")],-1),_n=n("p",null,"// #region 0886",-1),hn={href:"https://leetcode.cn/problems/possible-bipartition",target:"_blank",rel:"noopener noreferrer"},mn=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),bn=n("p",null,"// #endregion 0886",-1),vn=n("h2",{id:"_0887",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0887","aria-hidden":"true"},"#"),s(" 0887")],-1),fn=n("p",null,"// #region 0887",-1),gn={href:"https://leetcode.cn/problems/super-egg-drop",target:"_blank",rel:"noopener noreferrer"},xn=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),wn=n("p",null,"// #endregion 0887",-1),yn=n("h2",{id:"_0889",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0889","aria-hidden":"true"},"#"),s(" 0889")],-1),Nn=n("p",null,"// #region 0889",-1),Ln={href:"https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-postorder-traversal",target:"_blank",rel:"noopener noreferrer"},jn=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),An=n("p",null,"// #endregion 0889",-1);function Cn(In,Bn){const a=c("ExternalLinkIcon"),i=c("CodeTabs");return u(),d("div",null,[p(" more "),_,h,n("ul",null,[n("li",null,[n("a",m,[s("🟢 800 - 相似 RGB 颜色"),e(a)])])]),b,v,f,g,n("ul",null,[n("li",null,[n("a",x,[s("🔴 810 - 黑板异或游戏"),e(a)])])]),n("details",w,[y,N,e(i,{id:"36",data:[{id:"java"}]},{title0:t(({value:l,isActive:o})=>[s("java")]),tab0:t(({value:l,isActive:o})=>[L]),_:1})]),j,A,C,n("ul",null,[n("li",null,[n("a",I,[s("🔴 828 - 统计子串中的唯一字符"),e(a)])])]),B,S,V,q,n("ul",null,[n("li",null,[n("a",E,[s("🟠 855 - 考场就座"),e(a)])])]),G,T,D,R,n("ul",null,[n("li",null,[n("a",z,[s("🟠 870 - 优势洗牌"),e(a)])])]),F,H,J,K,n("ul",null,[n("li",null,[n("a",M,[s("🟠 875 - 爱吃香蕉的珂珂"),e(a)])])]),O,P,Q,U,n("ul",null,[n("li",null,[n("a",W,[s("🟢 876 链表的中间节点"),e(a)]),X])]),n("details",Y,[Z,$,e(i,{id:"139",data:[{id:"java"},{id:"swift"}]},{title0:t(({value:l,isActive:o})=>[s("java")]),title1:t(({value:l,isActive:o})=>[s("swift")]),tab0:t(({value:l,isActive:o})=>[nn]),tab1:t(({value:l,isActive:o})=>[sn]),_:1})]),en,an,tn,n("ul",null,[n("li",null,[n("a",ln,[s("🟠 877 - 石子游戏"),e(a)]),on])]),n("details",cn,[rn,un,e(i,{id:"173",data:[{id:"java"}]},{title0:t(({value:l,isActive:o})=>[s("java")]),tab0:t(({value:l,isActive:o})=>[dn]),_:1})]),pn,kn,_n,n("ul",null,[n("li",null,[n("a",hn,[s("🟠 886 - 可能的二分法"),e(a)])])]),mn,bn,vn,fn,n("ul",null,[n("li",null,[n("a",gn,[s("🔴 887 - 鸡蛋掉落"),e(a)])])]),xn,wn,yn,Nn,n("ul",null,[n("li",null,[n("a",Ln,[s("🟠 889 - 根据前序和后序遍历构造二叉树"),e(a)])])]),jn,An])}const qn=r(k,[["render",Cn],["__file","0x0800.html.vue"]]);export{qn as default};
