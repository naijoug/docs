import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as i,o as c,c as l,a as p,b as n,e as s,d as a,f as t}from"./app-XiL9qv-c.js";const r={},d=n("blockquote",null,[n("p",null,[n("code",null,"method"),s(" - “方法”")])],-1),u=n("h2",{id:"看源码",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#看源码","aria-hidden":"true"},"#"),s(" 看源码")],-1),m=n("h3",{id:"sel",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#sel","aria-hidden":"true"},"#"),s(" SEL")],-1),b={href:"https://github.com/apple-oss-distributions/objc4/blob/objc4-876/runtime/objc-runtime-new.h#L190",target:"_blank",rel:"noopener noreferrer"},h=t(`<div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// objc-runtime-new.h#L190</span>
<span class="token keyword">typedef</span> uintptr_t SEL<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="method-t" tabindex="-1"><a class="header-anchor" href="#method-t" aria-hidden="true">#</a> method_t</h3>`,2),k={href:"https://github.com/apple-oss-distributions/objc4/blob/objc4-876/runtime/objc-runtime-new.h#L891",target:"_blank",rel:"noopener noreferrer"},v=t(`<div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// objc-runtime-new.h#L891</span>
<span class="token keyword">struct</span> method_t <span class="token punctuation">{</span> <span class="token comment">// 方法结构体定义</span>
    <span class="token function">method_t</span><span class="token punctuation">(</span><span class="token keyword">const</span> method_t <span class="token operator">&amp;</span>other<span class="token punctuation">)</span> <span class="token operator">=</span> delete<span class="token punctuation">;</span>
    <span class="token comment">// The representation of a &quot;big&quot; method. This is the traditional representation of three pointers storing the selector, types and implementation.</span>
    <span class="token keyword">struct</span> big <span class="token punctuation">{</span> <span class="token comment">// 大型方法，传统的表示法</span>
        SEL name<span class="token punctuation">;</span>
        <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>types<span class="token punctuation">;</span>
        MethodListIMP imp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// A &quot;big&quot; method, but name is signed. Used for method lists created at runtime.</span>
    <span class="token keyword">struct</span> bigSigned <span class="token punctuation">{</span> <span class="token comment">// 名字被签名的大型方法，用于在运行时创建方法列表</span>
        SEL __ptrauth_objc_sel name<span class="token punctuation">;</span>
        <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> ptrauth_method_list_types types<span class="token punctuation">;</span>
        MethodListIMP imp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// 方法类型</span>
    <span class="token keyword">enum</span> class Kind <span class="token punctuation">{</span>
        <span class="token comment">// Note: method_invoke detects small methods by detecting 1 in the low bit. Any change to that will require a corresponding change to method_invoke.</span>
        <span class="token comment">// 提示：method_invoke 通过检测低位的 1 来检测是否是小型方法。如果修改这个枚举 method_invoke 也需要相应修改。</span>
        big <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> 
        <span class="token comment">// \`small\` encompasses both small and small direct methods. We distinguish those cases by doing a range check against the shared cache.</span>
        small <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 包括小型方法和直接访问小型方法。我们通过检查共享缓存区的一个范围来区分这些情况。</span>
        bigSigned <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
private<span class="token punctuation">:</span>
    <span class="token keyword">static</span> <span class="token keyword">const</span> uintptr_t kindMask <span class="token operator">=</span> <span class="token number">0x3</span><span class="token punctuation">;</span> <span class="token comment">// 方法类型掩码</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="method-list-t" tabindex="-1"><a class="header-anchor" href="#method-list-t" aria-hidden="true">#</a> method_list_t</h3>`,2),_={href:"https://github.com/apple-oss-distributions/objc4/blob/objc4-876/runtime/objc-runtime-new.h#L1279",target:"_blank",rel:"noopener noreferrer"},g=t(`<div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// objc-runtime-new.h#L1279</span>
<span class="token keyword">struct</span> method_list_t <span class="token punctuation">:</span> entsize_list_tt<span class="token operator">&lt;</span>method_t<span class="token punctuation">,</span> method_list_t<span class="token punctuation">,</span> <span class="token number">0xffff0003</span><span class="token punctuation">,</span> method_t<span class="token punctuation">:</span><span class="token punctuation">:</span>pointer_modifier<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="objc-super2" tabindex="-1"><a class="header-anchor" href="#objc-super2" aria-hidden="true">#</a> objc_super2</h3>`,2),f={href:"https://github.com/apple-oss-distributions/objc4/blob/objc4-876/runtime/objc-runtime-new.h#L2828",target:"_blank",rel:"noopener noreferrer"},j=t(`<div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// objc-runtime-new.h#L2828</span>
<span class="token keyword">struct</span> objc_super2 <span class="token punctuation">{</span>
    id receiver<span class="token punctuation">;</span>
    Class current_class<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="message-ref-t" tabindex="-1"><a class="header-anchor" href="#message-ref-t" aria-hidden="true">#</a> message_ref_t</h3>`,2),w={href:"https://github.com/apple-oss-distributions/objc4/blob/objc4-876/runtime/objc-runtime-new.h#L2833",target:"_blank",rel:"noopener noreferrer"},y=t(`<div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// objc-runtime-new.h#L2833</span>
<span class="token keyword">struct</span> message_ref_t <span class="token punctuation">{</span>
    IMP imp<span class="token punctuation">;</span>
    SEL sel<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="写总结" tabindex="-1"><a class="header-anchor" href="#写总结" aria-hidden="true">#</a> 写总结</h2>`,2);function x(L,q){const e=i("ExternalLinkIcon");return c(),l("div",null,[d,p(" more "),u,m,n("blockquote",null,[n("p",null,[n("a",b,[s("👉🏻"),a(e)])])]),h,n("blockquote",null,[n("p",null,[n("a",k,[s("👉🏻"),a(e)])])]),v,n("blockquote",null,[n("p",null,[n("a",_,[s("👉🏻"),a(e)])])]),g,n("blockquote",null,[n("p",null,[n("a",f,[s("👉🏻"),a(e)])])]),j,n("blockquote",null,[n("p",null,[n("a",w,[s("👉🏻"),a(e)])])]),y])}const M=o(r,[["render",x],["__file","method.html.vue"]]);export{M as default};
