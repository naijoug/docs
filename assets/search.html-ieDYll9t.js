import{_ as r}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as l,c as i,a as c,b as e,e as a,d as s,f as t}from"./app-MGW3UszY.js";const d={},u=t('<h2 id="搜索算法" tabindex="-1"><a class="header-anchor" href="#搜索算法" aria-hidden="true">#</a> 搜索算法</h2><table><thead><tr><th>算法</th><th>说明</th></tr></thead><tbody><tr><td>Binary Search</td><td>二分搜索</td></tr><tr><td>Breadth-first search (BFS)</td><td>广度优先搜索</td></tr><tr><td>Depth-first search (DFS)</td><td>深度优先搜索</td></tr></tbody></table><h2 id="顺序搜素" tabindex="-1"><a class="header-anchor" href="#顺序搜素" aria-hidden="true">#</a> 顺序搜素</h2><details class="hint-container details"><summary>💡</summary></details><h2 id="binary-search-二分搜索" tabindex="-1"><a class="header-anchor" href="#binary-search-二分搜索" aria-hidden="true">#</a> <code>Binary Search</code> - “二分搜索”</h2><p>二分搜索的前提条件是有序的数组，依赖数组的有序性。每次通过搜素区间的中间元素判断大小，从而缩小一半的搜索范围，搜索的范围成指数级别缩小。</p>',6),p={href:"https://leetcode.cn/problems/binary-search",target:"_blank",rel:"noopener noreferrer"},h=e("blockquote",null,[e("p",null,"给定一个升序数组和一个目标值，如果目标值在数组中返回目标值索引，如果不存在返回 -1。")],-1),m=t(`<details class="hint-container details"><summary>💡</summary><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details>`,1),_={href:"https://leetcode.cn/problems/search-insert-position",target:"_blank",rel:"noopener noreferrer"},b=e("blockquote",null,[e("p",null,"给定一个升序数组和一个目标值，如果目标值在数组中存在返回目标值索引，如果不存在返回插入位置索引。")],-1),k=e("details",{class:"hint-container details"},[e("summary",null,"💡")],-1),v={href:"https://leetcode.cn/problems/first-bad-version",target:"_blank",rel:"noopener noreferrer"},f=e("blockquote",null,[e("p",null,[a("软件已经发行版本号 [1, 2, 3, ..., n]，通过函数 "),e("code",null,"bool isBadVersion(version)"),a(" 可以判断该版本是否发生该错误，现在需要查找到第一个发生该错误的版本。")])],-1),y=e("details",{class:"hint-container details"},[e("summary",null,"💡")],-1),g={href:"https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array",target:"_blank",rel:"noopener noreferrer"},x=e("blockquote",null,[e("p",null,"给定一个非递减数组和一个目标值，查找该目标值在数组中的开始位置和结束位置，如果存在则返回 [start, end]，如果不存在返回 [-1, -1]。")],-1),B=t(`<details class="hint-container details"><summary>💡</summary><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">searchRange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="binary-search-tree-二叉搜索树" tabindex="-1"><a class="header-anchor" href="#binary-search-tree-二叉搜索树" aria-hidden="true">#</a> <code>Binary Search Tree</code> - “二叉搜索树”</h2>`,2);function S(j,C){const n=o("ExternalLinkIcon");return l(),i("div",null,[c(" more "),u,e("ul",null,[e("li",null,[e("a",p,[a("LeetCode 704"),s(n)]),h])]),m,e("ul",null,[e("li",null,[a("变形版 "),e("a",_,[a("LeetCode 35"),s(n)]),b])]),k,e("ul",null,[e("li",null,[a("升级版 "),e("a",v,[a("LeetCode 278 : 第一个错误的版本"),s(n)]),f])]),y,e("ul",null,[e("li",null,[a("进阶版 "),e("a",g,[a("LeetCode 34 : 在排序数组中查找元素的第一个和最后一个位置"),s(n)]),x])]),B])}const w=r(d,[["render",S],["__file","search.html.vue"]]);export{w as default};
