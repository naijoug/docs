import{_ as u}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o as r,c as k,a as o,b as s,e as n,d as e,w as c,f as t}from"./app-g9d4Q3j1.js";const m="/docs/assets/objc-class-diagram-0JRmvx1z.jpg",b="/docs/assets/objc-superclass-eWcnfwH-.png",h={},v=s("blockquote",null,[s("p",null,"Runtime: 运行时")],-1),_=s("h2",{id:"reference",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#reference","aria-hidden":"true"},"#"),n(" reference")],-1),g={href:"https://juejin.cn/post/6844904052778598408",target:"_blank",rel:"noopener noreferrer"},y={href:"https://www.jianshu.com/p/30de582dbeb7",target:"_blank",rel:"noopener noreferrer"},w=s("a",{href:"%E2%9C%85"},null,-1),j={href:"https://www.jianshu.com/p/1bf78e1b3594",target:"_blank",rel:"noopener noreferrer"},f=s("blockquote",null,[s("p",null,"作者的 Slogan : 汇编是检验一切语法糖的唯一标准")],-1),S={href:"https://shannonchenchn.github.io/2018/03/16/objc-runtime-learning-notes/",target:"_blank",rel:"noopener noreferrer"},O={href:"http://yulingtianxia.com/blog/2014/11/05/objective-c-runtime/",target:"_blank",rel:"noopener noreferrer"},C={href:"http://yulingtianxia.com/blog/2016/06/15/Objective-C-Message-Sending-and-Forwarding/",target:"_blank",rel:"noopener noreferrer"},q={href:"https://blog.ibireme.com/2013/11/26/objective-c-messaging/",target:"_blank",rel:"noopener noreferrer"},z=s("a",{href:""},null,-1),x={href:"https://minilv.github.io/2018/07/01/ias-class-metaClass/",target:"_blank",rel:"noopener noreferrer"},M=s("a",{href:""},null,-1),A={href:"https://halfrost.com/objc_runtime_isa_class",target:"_blank",rel:"noopener noreferrer"},N=s("a",{href:""},null,-1),I={href:"https://juejin.cn/post/6844904074630922254",target:"_blank",rel:"noopener noreferrer"},T=s("blockquote",null,[s("p",null,[n("作者先通过 "),s("code",null,"Google"),n(" 查询到了 "),s("code",null,"metaclass"),n(" 源于 "),s("code",null,"SmallTalk"),n(" 语言。 👉🏻 进一步源码中去研究 "),s("code",null,"objc_msgSend"),n(" 为什么需要 "),s("code",null,"metaclass")])],-1),P=s("a",{href:""},null,-1),L={href:"https://www.leewong.cn/2018/05/02/why-metaclass",target:"_blank",rel:"noopener noreferrer"},E=s("a",{href:"%E2%9C%85"},null,-1),V={href:"https://nemocdz.github.io/post/why-is-metaclass-in-objective-c/",target:"_blank",rel:"noopener noreferrer"},B=t("<blockquote><p>作者从自己遇到的一个面试题出发，按照第一性原理进行问题推导。 👉🏻 首先去研究了 <code>OC</code> 中的源码，梳理了 <code>isa</code>、<code>MetaClass</code> 关系。 👉🏻 在搜索 <code>MetaClass</code> 的过程，发现了 <code>Python</code> 中也有这个设计。进而了解到是源于 <code>Smalltalk</code> 的设计，而 <code>OC</code> 就是借鉴的 <code>Smalltalk</code> 的设计思想。 👉🏻 进一步思考如果没有 <code>MetaClass</code> 是否可行。在宏观成面思考了面向对象的两种设计思想，以 <code>C++</code> (借鉴 <code>Simula</code>)为代表的 “类的划分”，还有以 <code>OC</code> (借鉴 <code>Smalltalk</code>)为代表的 “消息传递”。</p></blockquote>",1),W=t('<hr><h2 id="对象模型" tabindex="-1"><a class="header-anchor" href="#对象模型" aria-hidden="true">#</a> 对象模型</h2><h3 id="❓oc-的对象模型" tabindex="-1"><a class="header-anchor" href="#❓oc-的对象模型" aria-hidden="true">#</a> ❓<code>OC</code> 的对象模型</h3><details class="hint-container details"><summary>💡</summary><blockquote><p>Objective-C 类图</p></blockquote><figure><img src="'+m+`" alt="objc-class-diagram" tabindex="0" loading="lazy"><figcaption>objc-class-diagram</figcaption></figure><ul><li><p>实例对象（<code>Instance Object</code>）：实例对象是根据某个类创建出来的一个实例。</p><blockquote><p>每个实例对象包含了一组实例变量 (<code>Instance Variables</code> 或 <code>iVars</code>)，这些实例变量是定义在它的类和祖先类里的。</p></blockquote><ul><li>每个实例对象还有一个 <code>isa</code> 指针，指向它的类对象</li></ul></li><li><p>类对象（<code>Class Object</code>）：类对象代表了一个特定的类。</p><blockquote><p>它包含了一组实例方法 (<code>Instance Methods</code>)，在它的任何实例对象被发送消息时，这些方法会被调用。类对象也包含了一组实例变量的声明（但是并不包含实例变量的值，这些值保存在实例对象里）。</p></blockquote><p>类对象包含两个指针：</p><ul><li><code>isa</code> 指针指向它的元类对象</li><li><code>superclass</code> 指针指向它的父类对象。</li></ul></li><li><p>元类对象（<code>MetaClass Object</code>）：元类对象代表了类对象。</p><blockquote><p>元类对象包含了一组类方法 (<code>Class Method</code>)，当给类发送消息（不是给类的实例发送消息）时，这些方法会被调用。</p></blockquote><p>元类对象包含两个指针：</p><ul><li><code>isa</code> 指针指向根元类对象</li><li><code>superclass</code> 指针指向它的&quot;父元类&quot;</li></ul></li><li><p>根类对象 (<code>Root Class Object</code>)：根类对象是所有类对象的父类。</p><p>根类对象的包含两个指针：</p><ul><li><code>isa</code> 指针指向自身，形成闭环。</li><li><code>superclass</code> 指针指向 <code>nil</code>。</li></ul></li><li><p>根元类对象（<code>Root MetaClass Object</code>）：根元类对象(<code>NSObject</code> 的类对象)是所有元类对象的父类，</p><p>根元类对象的包含两个指针：</p><ul><li><code>isa</code> 指针指向自身，形成闭环。</li><li><code>superclass</code> 指针指向根类对象。</li></ul></li></ul><p>总结：任何时候给对象发消息，实际上都是通过这个模型寻找和调用方法。虽然这个模型可能在第一次接触时有些复杂，但是理解了它，就能更好地理解 <code>Objective-C</code> 的面向对象特性和消息发送机制。</p></details><h3 id="运行时-realizeclass-作用" tabindex="-1"><a class="header-anchor" href="#运行时-realizeclass-作用" aria-hidden="true">#</a> 运行时 <code>realizeClass</code> 作用</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>realizeClass</code> 方法是运行时系统的一部分，主要用于加载类。</p></blockquote><p>主要作用：</p><ul><li><p>分配类和元类的内存：每个类实际上由两部分组成：类自身和元类（<code>metaclass</code>）。元类包含类方法的信息，而类包含实例方法和实例变量的信息。</p></li><li><p>设置类信息：将类的 <code>superclass</code>、实例大小等信息设置到类结构体中。对于元类，它的 <code>superclass</code> 设置为父类的元类。</p></li><li><p>将方法列表、协议列表、属性列表添加到类中：这些步骤是通过挂载方法列表、协议列表、属性列表到类的相关字段来实现的。<code>Objective-C</code> 支持动态添加方法、协议和属性，这一个步骤非常重要。</p></li><li><p>将类注册到运行时系统：运行时系统维护一个所有类的列表。这个步骤将新实现的类添加到这个列表中。</p></li></ul></details><h3 id="isa" tabindex="-1"><a class="header-anchor" href="#isa" aria-hidden="true">#</a> isa</h3><h4 id="❓isa-是什么" tabindex="-1"><a class="header-anchor" href="#❓isa-是什么" aria-hidden="true">#</a> ❓<code>isa</code> 是什么</h4><details class="hint-container details"><summary>💡</summary><blockquote><p><code>isa</code>： <code>OC</code> 对象的一个指针，它是每个 <code>OC</code> 对象的第一个成员变量，用于指向该对象的类对象。</p></blockquote><p><code>Objective-C</code> 的对象模型中，对象分为实例对象、类对象、元类、根元类对象。</p><ul><li><p>实例对象: 实例对象的 <code>isa</code> 指向它的类对象；实例对象主要存储实例变量的值。</p></li><li><p>类对象: 类对象的 <code>isa</code> 指向元类对象；类对象主要存储实例方法、属性、以及遵守的协议等信息。</p></li><li><p>元类对象: 元类对象的 <code>isa</code> 指向根元类对象；元类对象主要存储类方法等信息。</p></li><li><p>根元类对象: 根元类对象的 <code>isa</code> 指向根类对象；根类对象的 <code>isa</code> 指向自己。</p></li></ul><p>当发送消息给一个对象时，<code>runtime</code> 通过这个对象的 <code>isa</code> 指针找到它的类对象，然后在类对象的方法列表中查找对应的方法进行调用。</p></details><h4 id="❓类结构体的组成-isa-指针指向了什么" tabindex="-1"><a class="header-anchor" href="#❓类结构体的组成-isa-指针指向了什么" aria-hidden="true">#</a> ❓类结构体的组成 <code>isa</code> 指针指向了什么</h4><details class="hint-container details"><summary>💡</summary><p>先给出答案 <code>isa</code> 指针是指向类对象，每一个对象都包含 <code>isa</code> 指针，通过这个指针可以找到类对象。</p><p>当一个对象调用某个方法时(消息发送)，运行时先在当前方法列表中查找，如果不存在，通过 <code>isa</code> 指针查找类对象中是否存在方法，如果还不存在会通过父类指针进一步往上查找，最后还是找不到就会抛出未找到异常。</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// id 就是 objc_object</span>
<span class="token keyword">struct</span> objc_object <span class="token punctuation">{</span>
  Class _Nonnull isa<span class="token punctuation">;</span>         <span class="token comment">// 指向对象所属的类</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// Class 就是 objc_class</span>
<span class="token keyword">struct</span> objc_class <span class="token punctuation">{</span>
  Class _Nonnull isa<span class="token punctuation">;</span>         <span class="token comment">// 指向元类</span>
  Class _Nullable superclass<span class="token punctuation">;</span> <span class="token comment">// 指向父类</span>
  cache_t cache<span class="token punctuation">;</span>              <span class="token comment">// 方法缓存</span>
  class_data_bits_t bits<span class="token punctuation">;</span>     <span class="token comment">// 包含方法列表和其他信息</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h4 id="❓isa-指针里面都存了什么-32-和-64-位分别讲一下" tabindex="-1"><a class="header-anchor" href="#❓isa-指针里面都存了什么-32-和-64-位分别讲一下" aria-hidden="true">#</a> ❓<code>isa</code> 指针里面都存了什么，32 和 64 位分别讲一下</h4><details class="hint-container details"><summary>💡</summary><p><code>isa</code> 指针是 <code>Objective-C</code> 对象的第一个成员变量，它决定了对象的类型。</p><ul><li><p>在 <strong>32</strong> 位系统下，这个 <code>isa</code> 指针是一个普通的指针，存储着对象（或者说是类实例）的类（<code>Class</code>）的信息，一般占据 4 个字节。</p><blockquote><p>通过这个指针可以找到对象所属的类（也就是对象的元类（<code>Metaclass</code>）），以此来调用对象的类方法。通过对象的 <code>isa</code> 指针可以找到对象所属类的信息，这样就可以根据类的具体信息找到该对象能响应的所有方法，向一个 <code>Objective-C</code> 对象发消息时，就是通过查找 <code>isa</code> 指针来完成的。</p></blockquote></li><li><p>在 <strong>64</strong> 位系统下（仅针对优化过的 <code>iOS</code> 系统, <code>iOS 9.0</code> 以后），为了节约内存， <code>isa</code> 的存储结构做了改变，添加了一种叫做 <code>isa</code> 混用（<code>ISA Masking</code>）的技术。<code>isa</code> 指针除了存储了类的信息外，还会存储对象是否正在被 <code>dealloc</code>，以及是否有关联对象(<code>Associated Object</code>)等信息。</p><blockquote><p>如果像在 32 位系统下那样直接访问 <code>isa</code> 就可能取到错误的信息，所以在 64 位系统下，需要通过一些特定的方式来获取具体的 <code>isa</code> 值，例如使用对象提供的 <code>object_getClass()</code> 方法来获取。</p></blockquote></li></ul></details><h4 id="❓class、objc-getclass、object-getclass-三个方法的区别" tabindex="-1"><a class="header-anchor" href="#❓class、objc-getclass、object-getclass-三个方法的区别" aria-hidden="true">#</a> ❓<code>class</code>、<code>objc_getClass</code>、<code>object_getClass</code> 三个方法的区别</h4>`,14),J={class:"hint-container details"},R=t("<summary>💡</summary><ul><li><p><code>class</code> 是一个方法，主要在实例对象上调用，用于获取实例对象的类。</p></li><li><p><code>objc_getClass</code> 是一个函数，接收一个类名字符串作为参数，返回的是对应的类对象。</p><blockquote><p>如果这个类在运行时环境中并未被注册，那么这个函数会返回 <code>nil</code>。</p></blockquote></li><li><p><code>object_getClass</code> 是一个函数，接收一个实例对象作为参数。</p><blockquote><p>当参数是一个实例对象时，返回的是这个实例对象的类；当参数是一个类对象时（包括元类对象和根类对象），返回的是这个类对象的元类。</p></blockquote></li></ul>",2),K=s("div",{class:"language-objc line-numbers-mode","data-ext":"objc"},[s("pre",{class:"language-objc"},[s("code",null,[n("NSObject "),s("span",{class:"token operator"},"*"),n("object "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token punctuation"},"["),s("span",{class:"token punctuation"},"["),n("NSObject alloc"),s("span",{class:"token punctuation"},"]"),n(" init"),s("span",{class:"token punctuation"},"]"),s("span",{class:"token punctuation"},";"),n(`
`),s("span",{class:"token function"},"NSLog"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'@"%@"'),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token punctuation"},"["),n("object class"),s("span",{class:"token punctuation"},"]"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n("               "),s("span",{class:"token comment"},'// 输出 "NSObject"'),n(`
`),s("span",{class:"token function"},"NSLog"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'@"%@"'),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token function"},"objc_getClass"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"NSObject"'),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n("    "),s("span",{class:"token comment"},'// 输出 "NSObject"'),n(`
`),s("span",{class:"token function"},"NSLog"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'@"%@"'),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token function"},"object_getClass"),s("span",{class:"token punctuation"},"("),n("object"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n("      "),s("span",{class:"token comment"},'// 输出 "NSObject"'),n(`
`),s("span",{class:"token function"},"NSLog"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'@"%@"'),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token function"},"object_getClass"),s("span",{class:"token punctuation"},"("),n("NSObject"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n("    "),s("span",{class:"token comment"},'// 输出 "NSObject (meta-class)"'),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),H=s("div",{class:"language-swift line-numbers-mode","data-ext":"swift"},[s("pre",{class:"language-swift"},[s("code",null,[s("span",{class:"token keyword"},"let"),n(" object "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token class-name"},"NSObject"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),n(`
`),s("span",{class:"token function"},"print"),s("span",{class:"token punctuation"},"("),s("span",{class:"token function"},"type"),s("span",{class:"token punctuation"},"("),n("of"),s("span",{class:"token punctuation"},":"),n(" object"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")"),n("             "),s("span",{class:"token comment"},'// 输出 "NSObject"'),n(`
`),s("span",{class:"token function"},"print"),s("span",{class:"token punctuation"},"("),s("span",{class:"token function"},"objc_getClass"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string-literal"},[s("span",{class:"token string"},'"NSObject"')]),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")"),n("    "),s("span",{class:"token comment"},'// 输出 "Optional(NSObject)"'),n(`
`),s("span",{class:"token function"},"print"),s("span",{class:"token punctuation"},"("),s("span",{class:"token function"},"object_getClass"),s("span",{class:"token punctuation"},"("),n("object"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},")"),n("      "),s("span",{class:"token comment"},'// 输出 "Optional(NSObject)"'),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),U=t(`<h3 id="super" tabindex="-1"><a class="header-anchor" href="#super" aria-hidden="true">#</a> super</h3><h4 id="❓super-是什么" tabindex="-1"><a class="header-anchor" href="#❓super-是什么" aria-hidden="true">#</a> ❓<code>super</code> 是什么</h4><details class="hint-container details"><summary>💡</summary><p><code>super</code> 并不是一个指针，在 <code>OC</code> 进行消息调用时，其实是有两个隐藏参数的，一个是接收者(receiver)，一个是方法选择器(selector)。</p><p>常见的 <code>self</code> 表示的是接收者。而 <code>super</code> 其实是一个编译器标示符，当发送给 <code>super</code> 一个消息时，调用者仍然是 <code>self</code> ，但是运行时会从当前类的父类开始查找方法。</p></details><blockquote><p>❓<code>super</code> 的底层实现</p></blockquote><details class="hint-container details"><summary>💡</summary><p><code>OC</code> 中 <code>super</code> 的实现是通过 <code>runtime</code> 的 <code>objc_msgSendSuper</code> 和 <code>objc_msgSendSuper_stret</code> 两个函数来完成的。具体来说，当编译器遇到 <code>[super method]</code> 这种形式的调用时，会转化为 <code>objc_msgSendSuper(super_cls, sel)</code> 的形式。</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// super 结构体</span>
<span class="token keyword">struct</span> objc_super <span class="token punctuation">{</span>
  __unsafe_unretained id receiver<span class="token punctuation">;</span>        <span class="token comment">// 消息的接收者</span>
  __unsafe_unretained Class super_class<span class="token punctuation">;</span>  <span class="token comment">// 父类(开始查找的类)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// objc_msgSendSuper</span>
<span class="token keyword">void</span> <span class="token function">objc_msgSendSuper</span><span class="token punctuation">(</span><span class="token keyword">struct</span> objc_super <span class="token operator">*</span><span class="token keyword">super</span><span class="token punctuation">,</span> SEL op<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>objc_msgSendSuper</code>: 该函数用于向父类发送消息。这个函数的第一个参数是一个指向 <code>objc_super</code> 结构体的指针，该结构体中包含了接收者（也就是当前的 <code>self</code> 对象）和其父类。该函数会在接收者的父类（以及父类的继承链）中查找方法的实现并调用。</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">struct</span> objc_super superInfo <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>receiver <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>super_class <span class="token operator">=</span> <span class="token function">class_getSuperclass</span><span class="token punctuation">(</span><span class="token function">object_getClass</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">objc_msgSendSuper</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>superInfo<span class="token punctuation">,</span> <span class="token keyword">@selector</span><span class="token punctuation">(</span>someMethod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>objc_msgSendSuper_stret</code>: 该函数与 <code>objc_msgSendSuper</code> 类似，<code>stret</code> 表示 <code>Structure Return</code>，表示这个函数用于向返回值为结构体的父类方法发送消息。在某些 <code>CPU</code> 架构（如 <code>x86</code>）中，结构体可能通过寄存器或内存来返回，这就需要一个专门的函数来处理这种情况。</p></li></ul></details><h4 id="❓supperclass-了解吗" tabindex="-1"><a class="header-anchor" href="#❓supperclass-了解吗" aria-hidden="true">#</a> ❓<code>supperclass</code> 了解吗</h4><details class="hint-container details"><summary>💡</summary><figure><img src="`+b+`" alt="objc-superclass" tabindex="0" loading="lazy"><figcaption>objc-superclass</figcaption></figure><blockquote><p><code>superclass</code> 指的是一个类的父类。在类的继承链中，一个类除了根类之外，每一个类都有一个父类，这个父类就被称为 <code>superclass</code>。</p></blockquote><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// Person.h - &quot;Person&quot; 的 superclass 就是 &quot;NSObject&quot;</span>
<span class="token keyword">@interface</span> Person <span class="token punctuation">:</span> NSObject
<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>talk<span class="token punctuation">;</span>
<span class="token keyword">@end</span>

<span class="token comment">// Employee.h - &quot;Employee&quot; 的 superclass 就是 &quot;Person&quot;</span>
<span class="token keyword">@interface</span> Employee <span class="token punctuation">:</span> Person
<span class="token keyword">@end</span>

<span class="token comment">// Employee.m</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">import</span> <span class="token string">&quot;Employee.h&quot;</span></span>

<span class="token keyword">@implementation</span> Employee
<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>talk <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token keyword">super</span> talk<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// Call superclass method</span>
    <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;And I&#39;m an employee!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">@end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="metaclass" tabindex="-1"><a class="header-anchor" href="#metaclass" aria-hidden="true">#</a> metaclass</h3><h4 id="❓metaclass-是什么" tabindex="-1"><a class="header-anchor" href="#❓metaclass-是什么" aria-hidden="true">#</a> ❓<code>metaClass</code> 是什么</h4><details class="hint-container details"><summary>💡</summary><blockquote><p>在 <code>Objective-C</code> 中每一个对象都有一个动态类型，即“类”。因此每一个对象都可以返回它的类。而这个类，本身也是一个对象，也有自己的类，即元类（<code>metaClass</code>）。</p></blockquote><p>元类存储了类方法的信息，就像常规的类对象存储实例方法的信息一样。当向一个对象发送消息时，运行时系统将会在类和超类中查找可以响应这条消息的方法。而当向一个类发送消息时，运行时系统会在元类和其超类中查找可以响应这条消息的方法。</p><p><code>metaClass</code> 主要是用于处理类方法的调用。一个对象的 <code>isa</code> 指针指向它的类，而类对象的 <code>isa</code> 指针指向<code>metaClass</code>。<code>metaClass</code> 的类结构和类对象的结构是一样的，它也有自己的方法列表、属性列表、协议列表。</p></details><h4 id="❓为什么要设计-metaclass" tabindex="-1"><a class="header-anchor" href="#❓为什么要设计-metaclass" aria-hidden="true">#</a> ❓为什么要设计 <code>metaClass</code></h4><details class="hint-container details"><summary>💡</summary><p><code>metaClass</code>（元类）的设计是为了支持类方法。</p><p>每个对象都有一个对应的类，这个类包含了该对象的所有实例方法。这些实例方法是存储在其对应的类对象中的。那么问题是，类方法应该存储在哪儿呢？答案就是元类（<code>metaClass</code>）。</p><p>每个类对象，除了包含实例方法以外，还有一个指向元类的 <code>isa</code> 指针。元类就像是类对象的“类”，它包含了类方法的列表，因此，当发送一个类方法给类对象时，实际上是在元类中查找该方法。</p><p>更进一步说，<code>metaClass</code> 的存在，让无论是操作实例还是类，在代码层面上都有统一的行为（发送消息），实际上简化了语言使用上的复杂度。在 <code>Objective-C</code> 中，万物皆对象，无论是实例对象还是类对象，甚至元类对象，这都得益于 <code>metaClass</code> 的存在。</p></details><h4 id="❓在运行时创建类的方法-objc-allocateclasspair-的方法名尾部为什么是-pair-成对" tabindex="-1"><a class="header-anchor" href="#❓在运行时创建类的方法-objc-allocateclasspair-的方法名尾部为什么是-pair-成对" aria-hidden="true">#</a> ❓在运行时创建类的方法 <code>objc_allocateClassPair</code> 的方法名尾部为什么是 <code>Pair</code>(成对)</h4><details class="hint-container details"><summary>💡</summary><blockquote><p><code>objc_allocateClassPair</code> 这个名称中的 <code>Pair</code> 指的是它在运行时创建类时，一次会创建两个相关的类，而不只是一个。一个是创建的类，另一个是元类（<code>metaClass</code>）。</p></blockquote><p>在 <code>Objective-C</code> 中，每个类都有一个对应的元类。一个类储存了所有的实例方法（在对象实例上调用的方法），相对应的元类则保存了所有的类方法（在类本身上调用的方法）。</p><p>用 <code>objc_allocateClassPair</code> 创建一个新类的时候，<code>Cocoa</code> 为你同时创建了额外的一个元类。因此此方法创建的是一个 &quot;类对&quot; 或 &quot;类配对&quot;，包含了一个类和此类的元类。这也就是方法名中 <code>Pair</code> 一词的含义。</p></details><hr><h2 id="属性" tabindex="-1"><a class="header-anchor" href="#属性" aria-hidden="true">#</a> 属性</h2><h3 id="❓为什么对象方法没有保存的对象结构体里-而是保存在类对象的结构体里" tabindex="-1"><a class="header-anchor" href="#❓为什么对象方法没有保存的对象结构体里-而是保存在类对象的结构体里" aria-hidden="true">#</a> ❓为什么对象方法没有保存的对象结构体里，而是保存在类对象的结构体里</h3><details class="hint-container details"><summary>💡</summary><p>在 <code>Objective-C</code> 中，每个类的实例对象（<code>Instance</code>）都有一个 <code>isa</code> 指针，这个指针指向它的类对象（<code>Class</code>），类对象中保存了这个类的所有对象方法（<code>instance methods</code>）。当在一个对象上调用方法时，<code>Objective-C</code> 运行时系统会通过这个对象的 <code>isa</code> 指针找到类对象，进而找到对应的方法并执行。这样就实现了一个类的所有实例对象共享同一份方法的设计。</p><p>这种设计下，无论一个类有多少个实例对象，这个类的方法都只需要在内存中保存一份，这样可以有效地节省内存。</p><p>而对于类方法（<code>class methods</code>），它们则被保存在元类对象（<code>Meta-class</code>）中。每个类对象同样有一个 <code>isa</code> 指针指向其对应的元类对象，这样在调用类方法时就可以通过类对象找到元类对象，进而找到对应的类方法并执行。</p></details><h3 id="❓class-copyivarlist-vs-class-copypropertylist" tabindex="-1"><a class="header-anchor" href="#❓class-copyivarlist-vs-class-copypropertylist" aria-hidden="true">#</a> ❓<code>class_copyIvarList</code> vs <code>class_copyPropertyList</code></h3><details class="hint-container details"><summary>💡</summary><p><code>class_copyIvarList</code> 和 <code>class_copyPropertyList</code> 都是用于获取相关信息的函数，但它们获取到的信息并不完全相同。</p><ul><li><p><code>class_copyIvarList</code> 用于返回一个指向类实例变量列表的指针。</p><blockquote><p>这个列表包括了类中声明的所有实例变量，包括属性生成的实例变量。所以这意味着，即使一个实例变量是由 <code>@property</code> 声明的，也可以通过 <code>class_copyIvarList</code> 获取到这个变量。</p></blockquote></li><li><p><code>class_copyPropertyList</code> 只能获取到类中用 <code>@property</code> 声明的属性列表。</p><blockquote><p>如果类中有非 <code>@property</code> 声明的实例变量， <code>class_copyPropertyList</code> 是无法获取到这些实例变量的。</p></blockquote></li></ul><p>总结：按照获取到的信息的多少排序， <code>class_copyIvarList</code> &gt; <code>class_copyPropertyList</code>。</p><p>注意：这两个函数都会返回一个数组，并且需要手动释放这个数组（使用<code>free</code>函数），以防止内存泄漏。</p></details><h3 id="❓class-ro-t-vs-class-rw-t" tabindex="-1"><a class="header-anchor" href="#❓class-ro-t-vs-class-rw-t" aria-hidden="true">#</a> ❓<code>class_ro_t</code> vs <code>class_rw_t</code></h3><details class="hint-container details"><summary>💡</summary><p><code>class_ro_t</code> 和 <code>class_rw_t</code> 是 <code>Runtime</code> 内部用来存储类的信息的结构体。</p><ul><li><p><code>class_ro_t</code> 主要存储了类的只读信息，包括类名，基类名，实例变量列表和类的属性列表等只读信息。</p><blockquote><p>所有指针都是只读的。</p></blockquote></li><li><p><code>class_rw_t</code> 主要存储了类的可写信息，包括类的方法列表，协议列表和分类列表等可变信息。</p><blockquote><p>其中的指针是可变的，可以动态添加和删除方法等信息。</p></blockquote></li></ul><p>在类初始化时，编译器会生成对应的 <code>class_ro_t</code> 结构体，并通过<code>class_rw_t</code> 结构体获取。而在运行时，如果对类的方法，协议等进行添加或者删除操作，这些信息都会保存在 <code>class_rw_t</code> 中。</p><p>总结：<code>class_ro_t</code> 存储的是编译时期的类信息，<code>class_rw_t</code> 存储的是运行时期的类信息。</p></details><h3 id="❓能否向编译后得到的类中增加实例变量" tabindex="-1"><a class="header-anchor" href="#❓能否向编译后得到的类中增加实例变量" aria-hidden="true">#</a> ❓能否向编译后得到的类中增加实例变量</h3><details class="hint-container details"><summary>💡</summary><p>不可以。一旦一个类被编译和运行，就不能再向这个类添加实例变量。</p><p>因为在 <code>Objective-C</code> 中，每个对象在内存中所占用的空间是固定的，这个空间取决于这个类的实例变量的总大小。如果允许在运行时添加实例变量，就会导致已经存在的对象需要更多的内存空间，这是不可能实现的。所以，<code>Objective-C</code> 规定，只能在编译阶段添加实例变量。</p><p>不过，可以向类添加方法（通过 <code>class_addMethod</code> 函数）和协议（通过 <code>class_addProtocol</code> 函数）。这些修改只会影响到添加操作之后创建的对象，已经存在的对象不会受到影响。</p></details><h3 id="❓能否向运行时创建的类中添加实例变量" tabindex="-1"><a class="header-anchor" href="#❓能否向运行时创建的类中添加实例变量" aria-hidden="true">#</a> ❓能否向运行时创建的类中添加实例变量</h3><details class="hint-container details"><summary>💡</summary><p>可以在运行时动态的添加一个类，并且向这个类中添加实例变量。</p><p>这个操作只能在注册类之前完成。 因为一旦类被注册到运行时环境中，类的实例变量布局就已经确定，<code>objc runtime</code> 系统不允许再修改，包括添加实例变量。这是因为实例变量涉及到对象的内存布局，一旦类被注册，对象的内存布局已经固定，不能再进行改变。</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// 创建一个新类</span>
Class MyClass <span class="token operator">=</span> <span class="token function">objc_allocateClassPair</span><span class="token punctuation">(</span><span class="token punctuation">[</span>NSObject class<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;MyClass&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 添加实例变量(注册前) </span>
<span class="token comment">// ⚠️ 如果尝试在 objc_registerClassPair 后面再添加实例变量，将会失败。</span>
<span class="token function">class_addIvar</span><span class="token punctuation">(</span>MyClass<span class="token punctuation">,</span> <span class="token string">&quot;_myVar&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">log2</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;@&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 注册该类</span>
<span class="token function">objc_registerClassPair</span><span class="token punctuation">(</span>MyClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 使用新类</span>
id obj <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>MyClass alloc<span class="token punctuation">]</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><hr><h2 id="分类" tabindex="-1"><a class="header-anchor" href="#分类" aria-hidden="true">#</a> 分类</h2><h3 id="❓分类的结构体里面有哪些成员" tabindex="-1"><a class="header-anchor" href="#❓分类的结构体里面有哪些成员" aria-hidden="true">#</a> ❓分类的结构体里面有哪些成员</h3><details class="hint-container details"><summary>💡</summary><p>每个 <code>Category</code> 都对应着一个结构体 <code>category_t</code></p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// objc-runtime-new.h</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> category_t <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>
    classref_t cls<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> method_list_t <span class="token operator">*</span>instanceMethods<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> method_list_t <span class="token operator">*</span>classMethods<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> protocol_list_t <span class="token operator">*</span>protocols<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> property_list_t <span class="token operator">*</span>instanceProperties<span class="token punctuation">;</span>
<span class="token punctuation">}</span> category_t<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>name</code>：分类的名字。</li><li><code>cls</code>：分类所属的类。</li><li><code>instanceMethods</code>：分类中新增的实例方法列表。</li><li><code>classMethods</code>：分类中新增的类方法列表。</li><li><code>protocols</code>：分类实现的协议列表。</li><li><code>instanceProperties</code>：分类中新增的实例属性列表。</li></ul><p>注意：虽然可以在分类中声明和实现新的属性，但是不能使用 <code>@synthesize</code> 来生成存取方法，也无法生成实例变量。只能手动实现 <code>getter</code> 和 <code>setter</code> 来操作已存在的实例变量，或者使用关联对象（<code>Associated Object</code>）来模拟实例变量。</p></details><h3 id="❓分类中如何添加属性" tabindex="-1"><a class="header-anchor" href="#❓分类中如何添加属性" aria-hidden="true">#</a> ❓分类中如何添加属性</h3><details class="hint-container details"><summary>💡</summary><p>分类（<code>Category</code>）的定义中并不支持直接添加属性（<code>instance variable</code>）。但可以通过关联对象（<code>Associative References</code>）机制实现给分类添加属性。</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">import</span> <span class="token string">&quot;NSObject+Property.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">import</span> <span class="token expression"><span class="token operator">&lt;</span>objc<span class="token operator">/</span>runtime<span class="token punctuation">.</span>h<span class="token operator">&gt;</span></span></span>

<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>MyKey <span class="token operator">=</span> <span class="token operator">&amp;</span>MyKey<span class="token punctuation">;</span>

<span class="token keyword">@implementation</span> <span class="token function">NSObject</span> <span class="token punctuation">(</span>Property<span class="token punctuation">)</span>
<span class="token operator">-</span> <span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>myProperty <span class="token punctuation">{</span>
    <span class="token comment">// \`objc_getAssociatedObject\` 用于取关联对象。</span>
    <span class="token comment">//  - 首个参数是要存取的对象</span>
    <span class="token comment">//  - 第二个参数是键，我们用一个静态常量 \`MyKey\` 作为键（每个关联到对象的键必须全局唯一）</span>
    <span class="token keyword">return</span> <span class="token function">objc_getAssociatedObject</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">,</span> MyKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>setMyProperty<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>myProperty <span class="token punctuation">{</span>
    <span class="token comment">// \`objc_setAssociatedObject\` 第三个参数是存储的值，第四个参数是关联策略</span>
    <span class="token comment">// \`OBJC_ASSOCIATION_COPY_NONATOMIC\`，表示这是一个 copy ，非原子操作的特性</span>
    <span class="token function">objc_setAssociatedObject</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">,</span> MyKey<span class="token punctuation">,</span> myProperty<span class="token punctuation">,</span> OBJC_ASSOCIATION_COPY_NONATOMIC<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">@end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><hr><h2 id="关联对象" tabindex="-1"><a class="header-anchor" href="#关联对象" aria-hidden="true">#</a> 关联对象</h2><h3 id="❓关联对象的底层实现" tabindex="-1"><a class="header-anchor" href="#❓关联对象的底层实现" aria-hidden="true">#</a> ❓关联对象的底层实现</h3><details class="hint-container details"><summary>💡</summary><blockquote><p>关联对象（<code>Associated Objects</code>）的底层实现主要依赖于 <code>objc_setAssociatedObject</code> 和 <code>objc_getAssociatedObject</code> 这两个函数，它们的实现是基于哈希表的。</p></blockquote><ul><li><p>两个哈希表</p><ul><li>全局的哈希表：运行时库维护了一个全局的哈希表，键为对象的指针，值为另一个哈希表。</li><li>值哈希表：键为关联对象的 key，值为关联对象本身及其策略信息。</li></ul></li><li><p>实现逻辑</p><ul><li>调用 <code>objc_setAssociatedObject(self, key, value, policy)</code> 时，会在全局哈希表中找到以 <code>self</code> 为键的那个哈希表，然后在这个哈希表中以 <code>key</code> 为键，将 <code>value</code> 及其 <code>policy</code> 存储进去。</li><li>调用 <code>objc_getAssociatedObject(self, key)</code> 时，也会在全局哈希表中找到以 <code>self</code> 为键的哈希表，然后在这个哈希表中以 <code>key</code> 为键，找到并返回对应的值。</li><li>在对象销毁时，<code>dealloc</code> 方法会被调用，在这个方法中会调用 <code>_objc_rootDealloc</code> 方法，该方法会进一步调用 <code>object_dispose</code> 函数，在这个函数中会调用 <code>_object_remove_assocations</code> 函数去清理关联对象，根据它们的策略对这些关联对象进行相应的内存清理操作。</li></ul></li></ul></details><h3 id="❓关联对象的实际应用" tabindex="-1"><a class="header-anchor" href="#❓关联对象的实际应用" aria-hidden="true">#</a> ❓关联对象的实际应用</h3><details class="hint-container details"><summary>💡</summary><p>关联对象的主要应用在于为类动态地添加一些属性或者私有变量，而无需修改原来的类定义或者创建子类。即使不能访问一个类的源码，也可以利用关联对象为它添加属性。</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">import</span> <span class="token expression"><span class="token operator">&lt;</span>objc<span class="token operator">/</span>runtime<span class="token punctuation">.</span>h<span class="token operator">&gt;</span></span></span>

<span class="token keyword">static</span> <span class="token keyword">char</span> kAssociatedObjectKey<span class="token punctuation">;</span>

<span class="token keyword">@interface</span> <span class="token function">UIView</span> <span class="token punctuation">(</span>AssociatedObject<span class="token punctuation">)</span>
<span class="token comment">// 为 UIView 添加了一个 associatedObject 属性</span>
<span class="token keyword">@property</span> <span class="token punctuation">(</span>nonatomic<span class="token punctuation">,</span> strong<span class="token punctuation">)</span> id associatedObject<span class="token punctuation">;</span>
<span class="token keyword">@end</span>

<span class="token keyword">@implementation</span> <span class="token function">UIView</span> <span class="token punctuation">(</span>AssociatedObject<span class="token punctuation">)</span>

<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>setAssociatedObject<span class="token punctuation">:</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>associatedObject <span class="token punctuation">{</span>
    <span class="token function">objc_setAssociatedObject</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>kAssociatedObjectKey<span class="token punctuation">,</span> associatedObject<span class="token punctuation">,</span> OBJC_ASSOCIATION_RETAIN_NONATOMIC<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token operator">-</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span>associatedObject <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">objc_getAssociatedObject</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>kAssociatedObjectKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">@end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="内存管理" tabindex="-1"><a class="header-anchor" href="#内存管理" aria-hidden="true">#</a> 内存管理</h3><h4 id="❓关联对象如何进行内存管理" tabindex="-1"><a class="header-anchor" href="#❓关联对象如何进行内存管理" aria-hidden="true">#</a> ❓关联对象如何进行内存管理</h4><details class="hint-container details"><summary>💡</summary><blockquote><p>关联对象的内存管理是由运行时系统来处理的，主要通过提供的 <code>API</code>（ <code>objc_setAssociatedObject</code> 和<code>objc_getAssociatedObject</code> ）来进行。</p></blockquote><p><code>objc_setAssociatedObject</code> 这个函数需要一个关联策略参数，它决定了在运行时如何管理和处理这个关联对象。</p><p>内存管理策略：</p><ul><li><p><code>OBJC_ASSOCIATION_ASSIGN</code>：类似于 <code>assign</code> 的属性。</p><blockquote><p>关联对象在被释放时不会被保留。如果关联对象被释放了，<code>getter</code> 方法可能会返回一个无效的值。</p></blockquote></li><li><p><code>OBJC_ASSOCIATION_RETAIN_NONATOMIC</code>：类似于 <code>nonatomic</code>, <code>strong</code> 的属性。</p><blockquote><p>运行时系统在设置关联对象时会保留它并且在释放原始对象时释放它。</p></blockquote></li><li><p><code>OBJC_ASSOCIATION_RETAIN</code>：类似于 <code>atomic</code>, <code>strong</code> 的属性。</p><blockquote><p>它与 <code>OBJC_ASSOCIATION_RETAIN_NONATOMIC</code> 的区别是它在设置和获取关联对象时是线程安全的。</p></blockquote></li><li><p><code>OBJC_ASSOCIATION_COPY_NONATOMIC</code>：类似于 <code>nonatomic</code>, <code>copy</code> 的属性。</p><blockquote><p>运行时系统在设置关联对象时会复制它并且在释放原始对象时释放它。</p></blockquote></li><li><p><code>OBJC_ASSOCIATION_COPY</code>：类似于 <code>atomic</code>, <code>copy</code> 的属性。</p><blockquote><p>与 <code>OBJC_ASSOCIATION_COPY_NONATOMIC</code> 的区别是它在设置和获取关联对象时是线程安全的。</p></blockquote></li></ul><p>关联对象的内存管理方式主要取决于选择的关联策略。当原对象被 <code>dealloc</code> 时，运行时系统会按照设定的策略以适当的方式来处理关联对象。</p><p>🌰 如果采用 <code>OBJC_ASSOCIATION_COPY</code> 策略，那么在原对象被 <code>dealloc</code> 时，系统会释放掉关联的对象的副本；如果采用 <code>OBJC_ASSOCIATION_ASSIGN</code> 策略，那么系统则不会释放关联对象。</p></details><h4 id="❓关联对象如何实现-weak-策略" tabindex="-1"><a class="header-anchor" href="#❓关联对象如何实现-weak-策略" aria-hidden="true">#</a> ❓关联对象如何实现 <code>weak</code> 策略</h4><details class="hint-container details"><summary>💡</summary><p><code>objc_setAssociatedObject()</code> 函数是不能直接支持 <code>weak</code> 策略的，但是可以通过一些变通的方式来实现。</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// 创建一个 \`setter\` \`block\` 来持有新的弱引用</span>
__weak id weakObject<span class="token punctuation">;</span>
<span class="token function">id</span> <span class="token punctuation">(</span><span class="token operator">^</span>block<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">^</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> weakObject<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">objc_setAssociatedObject</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> block<span class="token punctuation">,</span> OBJC_ASSOCIATION_COPY<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token comment">// 当新的对象设置时，通过这个 block 来自动将 weak 变量指向新的对象，同时将旧的对象移除观察。</span>
weakObject <span class="token operator">=</span> <span class="token operator">&lt;</span>#新的Object#<span class="token operator">&gt;</span><span class="token punctuation">;</span>

<span class="token comment">// 得到关联对象的弱引用时，需要通过 block 来获取</span>
<span class="token function">id</span> <span class="token punctuation">(</span><span class="token operator">^</span>block<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">objc_getAssociatedObject</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
id object <span class="token operator">=</span> <span class="token punctuation">(</span>block <span class="token operator">?</span> <span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> nil<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于 <code>block</code> 的捕获特性，这对内存管理来说可能造成一定的混乱。所以虽然可以这样做，但是并不推荐在你的代码中大量使用。在需要弱引用关联对象的情况下，最好是重新设计代码，避免这种需求，或者使用其他方式满足需求，比如使用代理或者通知等方式。</p></details><h4 id="❓关联对象需要在主对象-dealloc-的时候手动释放吗" tabindex="-1"><a class="header-anchor" href="#❓关联对象需要在主对象-dealloc-的时候手动释放吗" aria-hidden="true">#</a> ❓关联对象需要在主对象 <code>dealloc</code> 的时候手动释放吗</h4><details class="hint-container details"><summary>💡</summary><p>不需要。在 <code>Objective-C</code> 对象的生命周期结束，即调用 <code>dealloc</code> 方法时，系统会自动释放该对象的所有关联对象。无论关联策略是 <code>retain</code> 还是 <code>copy</code>，关联对象都会被自动释放。当一个对象被销毁时，运行时会查找所有赋予该对象的关联对象，并根据赋予它们的关联策略来释放这些对象。</p><p>总结：无需担心关联对象在主对象 <code>dealloc</code> 的时候需要手动释放。但必须要确保关联对象不会造成循环引用，否则可能会导致内存泄漏。</p></details><hr><h2 id="方法" tabindex="-1"><a class="header-anchor" href="#方法" aria-hidden="true">#</a> 方法</h2><h3 id="❓对象方法-与-类方法存放在哪" tabindex="-1"><a class="header-anchor" href="#❓对象方法-与-类方法存放在哪" aria-hidden="true">#</a> ❓对象方法 与 类方法存放在哪</h3><details class="hint-container details"><summary>💡</summary><ul><li><p>给一个对象发送消息时，运行时系统会在对象的<strong>类对象</strong>的方法列表中查找这个方法。类对象包含了一个指向父类的指针和一个实例方法列表。</p></li><li><p>给一个类发送消息时，运行时系统会在类的<strong>元类对象</strong>的方法列表中查找这个方法。元类对象包含了类方法列表，类方法列表存放的是所有的类方法。</p></li></ul><p>总结：对象方法存放在类对象中，类方法存放在元类对象中。这也是为什么可以用类名来调用类方法，但不能用实例对象来调用类方法的原因。因为在查找方法时，运行时系统会去不同的地方查找。</p></details><h3 id="❓oc-底层方法列表的数据结构是什么" tabindex="-1"><a class="header-anchor" href="#❓oc-底层方法列表的数据结构是什么" aria-hidden="true">#</a> ❓<code>OC</code> 底层方法列表的数据结构是什么</h3><details class="hint-container details"><summary>💡</summary><p>底层是通过结构体来实现了，结构里面的通过数组来存储方法列表，方法列表的数据结构是由 <code>method_list_t</code> 结构体组成的。</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// 方法列表结构体</span>
<span class="token keyword">struct</span> method_list_t <span class="token punctuation">{</span>
  uint32_t entsize<span class="token punctuation">;</span>        <span class="token comment">// 结构体的大小</span>
  uint32_t method_count<span class="token punctuation">;</span>   <span class="token comment">// 方法的数量</span>
  method_t method_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 方法列表</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 方法结构体</span>
<span class="token keyword">struct</span> method_t <span class="token punctuation">{</span>
  SEL sel<span class="token punctuation">;</span>                <span class="token comment">// 方法的名称</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>types<span class="token punctuation">;</span>      <span class="token comment">// 方法的类型</span>
  IMP imp<span class="token punctuation">;</span>                <span class="token comment">// 对应的实现（函数指针）</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每一个 <code>method_list_t</code> 包含了方法的数量和一个 <code>method_t</code> 类型的数组。 <code>method_t</code> 类型的数组包含了每个方法的 <code>SEL</code>（方法选择器）、类型编码和对应的 <code>IMP</code>（方法实现）。</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">unsigned</span> <span class="token keyword">int</span> outCount<span class="token punctuation">;</span>
<span class="token comment">// class_copyMethodList：获取一个类的所有方法</span>
Method <span class="token operator">*</span>methods <span class="token operator">=</span> <span class="token function">class_copyMethodList</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">self</span> class<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>outCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> outCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Method method <span class="token operator">=</span> methods<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// method_getName：获取方法名</span>
    SEL selector <span class="token operator">=</span> <span class="token function">method_getName</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;Method name: %@&quot;</span><span class="token punctuation">,</span> <span class="token function">NSStringFromSelector</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">free</span><span class="token punctuation">(</span>methods<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="❓method-t-里包含什么" tabindex="-1"><a class="header-anchor" href="#❓method-t-里包含什么" aria-hidden="true">#</a> ❓<code>method_t</code> 里包含什么</h3><details class="hint-container details"><summary>💡</summary><p><code>method_t</code> 一个结构体，用来表示类中的一个方法。</p><ul><li><p><code>SEL sel</code>：这是一个指向方法名的指针，也叫做方法选择器（<code>selector</code>）。方法选择器是一个 <code>C</code> 字符串，代表了方法的名字。</p></li><li><p><code>const char *types</code>：这是一个指向方法类型的指针。方法类型是一个 <code>C</code> 字符串，用特定的编码代表了方法的返回值类型和参数类型。</p></li><li><p><code>IMP imp</code>：这是一个指向方法实现的指针。方法实现是一个函数指针，指向了具体实现这个方法的函数。可以通过改变这个指针来动态地改变方法的实现。</p></li></ul><p>运用：可以通过运行时函数，如 <code>method_getName</code>（获取方法名）、 <code>method_getTypeEncoding</code>（获取方法类型）、 <code>method_getImplementation</code>（获取方法实现）等来操作 <code>method_t</code>。</p></details><hr><h2 id="method-swizzling" tabindex="-1"><a class="header-anchor" href="#method-swizzling" aria-hidden="true">#</a> Method Swizzling</h2><h3 id="❓method-swizzling-vs-isa-swizzling" tabindex="-1"><a class="header-anchor" href="#❓method-swizzling-vs-isa-swizzling" aria-hidden="true">#</a> ❓<code>Method Swizzling</code> vs <code>isa-swizzling</code></h3><details class="hint-container details"><summary>💡</summary><ul><li><p><strong>Method Swizzling</strong>: 一种在运行时通过改变类的 <code>method list</code> 来改变方法的实现机制。这种技术常用于对系统方法进行功能添加和替换。</p><blockquote><p>例如，可以通过 <code>Method Swizzling</code> 对 <code>UIViewController</code> 的 <code>viewWillAppear:</code> 方法进行替换，用自己的实现来替换掉系统的实现，原来系统的实现可以在我们的代码里被调用，从而实现在界面出现时计算并记录页面的停留时间等功能。</p></blockquote></li><li><p><strong>isa-swizzling</strong>: 另一种不同的技术，这是 <code>Objective-C</code> 的运行时系统使用的一种优化技术。在 <code>Objective-C</code> 存在一个叫做 <code>isa</code> 的指针，用来表示对象的类型。系统通常会对<code>isa</code>进行优化，改变它的值来产生不同的效果。</p><blockquote><p>比如在 <code>KVO</code>(Key Value Observing) 中，系统会动态创建一个中间类，并让被观察对象的 <code>isa</code> 指向这个新生成的中间类，如此一来，就可以在中间类中重写被观察属性的 <code>setter</code> 方法，当属性值变化时，就可以通知观察者做出相应的响应，这就是 <code>isa-swizzling</code>。</p></blockquote></li></ul></details><h3 id="❓method-swizzling-的底层原理" tabindex="-1"><a class="header-anchor" href="#❓method-swizzling-的底层原理" aria-hidden="true">#</a> ❓<code>Method Swizzling</code> 的底层原理</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>Method Swizzling</code> 允许在运行时更改类的一个方法的实现。常常用在 <code>Objective-C</code> 的分类（<code>Category</code>）和扩展（<code>Extension</code>）中，通过 <code>Method Swizzling</code> 可以覆盖和扩展原有类的方法。</p></blockquote><p>原理：修改类的方法列表，将指向某个方法名称（<code>SEL</code>）的函数指针（<code>IMP</code>）指向另外一个实现。这就类似于在运行时改变了方法的实现。</p><p>运用：通过运行时函数 <code>method_exchangeImplementations</code> 或者 <code>class_replaceMethod</code> 实现，前者交换两个方法的实现，后者替换一个方法的实现。</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// 交换 NSString 的 lowercaseString 方法和 uppercaseString 方法</span>
Method lowercaseMethod <span class="token operator">=</span> <span class="token function">class_getInstanceMethod</span><span class="token punctuation">(</span><span class="token punctuation">[</span>NSString class<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">@selector</span><span class="token punctuation">(</span>lowercaseString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Method uppercaseMethod <span class="token operator">=</span> <span class="token function">class_getInstanceMethod</span><span class="token punctuation">(</span><span class="token punctuation">[</span>NSString class<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">@selector</span><span class="token punctuation">(</span>uppercaseString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">method_exchangeImplementations</span><span class="token punctuation">(</span>lowercaseMethod<span class="token punctuation">,</span> uppercaseMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="❓method-swizzling-的优缺点" tabindex="-1"><a class="header-anchor" href="#❓method-swizzling-的优缺点" aria-hidden="true">#</a> ❓<code>Method Swizzling</code> 的优缺点</h3><details class="hint-container details"><summary>💡</summary><p>优点：</p><ul><li><p>强大且灵活</p><blockquote><p><code>Swizzling</code> 可以改变现存的方法，无需修改源代码。这种特性非常有用于调试、改进现有的方法等。</p></blockquote></li><li><p>针对库函数或者系统函数</p><blockquote><p>可以 <code>Swizzling</code> 系统函数或库函数，进而解决某些 <code>bug</code> 或提高性能。</p></blockquote></li></ul><p>缺点：</p><ul><li><p>难以调试和理解</p><blockquote><p>由于方法的实现在运行时被改变，导致调试变得困难。此外，阅读并理解 <code>Swizzling</code> 的代码也需要一定的经验和技巧。</p></blockquote></li><li><p>破坏封装性</p><blockquote><p><code>Swizzling</code> 会破坏类的封装性和隐藏实现细节的原则，不利于代码的维护和理解。</p></blockquote></li><li><p>命名冲突</p><blockquote><p>如果有多个分类使用了 <code>swizzling</code> 方法，那么很可能出现命名冲突，导致程序运行出错。</p></blockquote></li><li><p>不兼容性问题</p><blockquote><p>由于 <code>Swizzling</code> 对象变更底层的运行机制，如果被 <code>Swizzling</code> 的对象升级或者被其他对象替换，可能会引发难以预料的问题。</p></blockquote></li></ul></details><h3 id="❓如何安全的进行方法替换" tabindex="-1"><a class="header-anchor" href="#❓如何安全的进行方法替换" aria-hidden="true">#</a> ❓如何安全的进行方法替换</h3><details class="hint-container details"><summary>💡</summary><ul><li><p>在统一的地方执行 <code>Method Swizzling</code></p><blockquote><p>通常选择在 <code>+load</code> 方法中执行 <code>Method Swizzling</code>，因为 <code>+load</code> 方法是在类被加载时只被调用一次，从而保证了 <code>Method Swizzling</code> 也只会执行一次。</p></blockquote></li><li><p>方法的调用方</p><blockquote><p><code>Method Swizzling</code> 了一个方法后，原来的方法调用方可能会受到影响。为了避免这个问题，通常会在新的方法中调用一次原来的方法。因此在 <code>Swizzling</code> 方法时，要小心并确保原来的方法在新的实现中被正确地执行了。</p></blockquote></li><li><p>线程安全</p><blockquote><p>尽管 <code>+load</code> 方法是线程安全的，但如果在其它地方进行 <code>Method Swizzling</code>，同时需要确保这个过程是线程安全的。可以使用 <code>dispatch_once</code> 和锁等手段来保证线程安全。</p></blockquote></li><li><p>命名冲突</p><blockquote><p>假如多个分类都去 <code>Swizzling</code> 同一个方法，那么就可能会存在命名冲突。所以在给新的方法命名时，应保证其唯一性，例如可以加上项目的前缀等。</p></blockquote></li><li><p>验证方法存在性</p><blockquote><p>替换一个不存在的方法，或者用一个不存在的方法去替换，都会导致程序错误。在进行 <code>Method Swizzling</code> 前，应该先用 <code>class_getInstanceMethod</code> 确认这两个方法确实存在。</p></blockquote></li><li><p>尽量不使用</p><blockquote><p>由于 <code>Method Swizzling</code> 会改变代码的行为，增加了代码理解的复杂性，除非必须，否则应尽量避免使用。</p></blockquote></li></ul></details><h3 id="实际应用" tabindex="-1"><a class="header-anchor" href="#实际应用" aria-hidden="true">#</a> 实际应用</h3><h4 id="❓使用-method-swizzling-父-view-的-touchbegin-的方法-会对子-view-造成什么影响" tabindex="-1"><a class="header-anchor" href="#❓使用-method-swizzling-父-view-的-touchbegin-的方法-会对子-view-造成什么影响" aria-hidden="true">#</a> ❓使用 <code>Method Swizzling</code> 父 <code>View</code> 的 <code>touchBegin</code> 的方法, 会对子 <code>View</code> 造成什么影响</h4><details class="hint-container details"><summary>💡</summary><blockquote><p><code>Method Swizzling</code>，又称方法交换，是 <code>Objective-C</code> 的运行时特性。这种特性允许我们交换方法的实现，这样在执行特定方法时，实际上会执行另一个方法。</p></blockquote><p>如果在父View中使用 <code>Method Swizzling</code> 来交换 <code>touchesBegan:withEvents:</code> 方法的实现，那么点击父 <code>View</code> 或其子 <code>View</code> 时，实际上调用的将是交换后的方法，这会影响到子 <code>View</code> 原本应有的行为。</p><ul><li><p>如果在新的方法实现中没有调用原始方法，那么在点击视图时，原始的 <code>touchesBegan:withEvent:</code> 方法中的行为就不会执行，可能会失去一些应有的效果或者触摸反馈。</p></li><li><p>如果在新的方法实现中改变了触摸事件的处理方式，可能会影响到子 <code>View</code> 的交互响应。例如如果做了一些拦截处理，那么子 <code>View</code> 可能会无法收到触摸事件。</p></li></ul></details><h4 id="❓method-swizzling-时-不替换父类-只替换子类-怎么处理" tabindex="-1"><a class="header-anchor" href="#❓method-swizzling-时-不替换父类-只替换子类-怎么处理" aria-hidden="true">#</a> ❓<code>Method Swizzling</code> 时，不替换父类，只替换子类，怎么处理</h4><details class="hint-container details"><summary>💡</summary><p>可以在子类中替换方法的实现而不影响父类。具体的操作步骤如下：</p><ul><li>定义一个新的方法（如<code>newMethod</code>），这个方法将作为旧方法（如<code>oldMethod</code>）的替换。</li><li>调用 <code>class_getInstanceMethod</code> 获取旧方法和新方法的 <code>Method</code> 的指针。</li><li>使用 <code>method_exchangeImplementations</code> 来交换两个方法的实现。</li></ul><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">import</span> <span class="token expression"><span class="token operator">&lt;</span>objc<span class="token operator">/</span>runtime<span class="token punctuation">.</span>h<span class="token operator">&gt;</span></span></span>

<span class="token keyword">@implementation</span> MySubclass

<span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>load <span class="token punctuation">{</span>
    <span class="token comment">// 确保交换方法的代码只会执行一次</span>
    <span class="token keyword">static</span> dispatch_once_t onceToken<span class="token punctuation">;</span>
    <span class="token function">dispatch_once</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>onceToken<span class="token punctuation">,</span> <span class="token operator">^</span><span class="token punctuation">{</span>
        Class class <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">self</span> class<span class="token punctuation">]</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 获取旧方法和新方法</span>
        SEL originalSelector <span class="token operator">=</span> <span class="token keyword">@selector</span><span class="token punctuation">(</span>oldMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>
        SEL swizzledSelector <span class="token operator">=</span> <span class="token keyword">@selector</span><span class="token punctuation">(</span>newMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        Method originalMethod <span class="token operator">=</span> <span class="token function">class_getInstanceMethod</span><span class="token punctuation">(</span>class<span class="token punctuation">,</span> originalSelector<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Method swizzledMethod <span class="token operator">=</span> <span class="token function">class_getInstanceMethod</span><span class="token punctuation">(</span>class<span class="token punctuation">,</span> swizzledSelector<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
        <span class="token comment">// 交换方法实现</span>
        <span class="token function">method_exchangeImplementations</span><span class="token punctuation">(</span>originalMethod<span class="token punctuation">,</span> swizzledMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 这是将要替换旧方法的新方法</span>
<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>newMethod <span class="token punctuation">{</span>
    <span class="token comment">// Do something</span>
    
    <span class="token comment">// 如果你想在新方法中调用旧方法的实现，你可以使用以下代码:</span>
    <span class="token comment">// [self newMethod];</span>
    
    <span class="token comment">// 注意我们已经交换了方法的实现，所以 \`newMethod\` 实际上指的是旧方法的实现</span>
<span class="token punctuation">}</span>

<span class="token keyword">@end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h4 id="❓方法交换和分类同时去-hook-一个方法-结果会怎么样-具体交换的是什么-交换时是如何处理传参数" tabindex="-1"><a class="header-anchor" href="#❓方法交换和分类同时去-hook-一个方法-结果会怎么样-具体交换的是什么-交换时是如何处理传参数" aria-hidden="true">#</a> ❓方法交换和分类同时去 <code>hook</code> 一个方法，结果会怎么样，具体交换的是什么，交换时是如何处理传参数</h4><details class="hint-container details"><summary>💡</summary><p>最终的结果取决于这两者加载到运行时的先后顺序。</p><p>在 <code>Objective-C</code> 中，分类和 <code>Method Swizzling </code>在运行时加载的顺序并非固定。一般来说，分类的方法会在类的 <code>load</code> 方法之前调用，因此，如果分类和 <code>Method Swizzling</code> 都尝试去 <code>hook</code> 同一个方法，那么一般情况下，分类会首先替换掉原方法的实现，然后 <code>Method Swizzling</code> 再把分类替换后的实现与自己的实现进行交换。</p><p>例如同时 <code>hook</code> 方法 <code>doSomething</code></p><ul><li>分类首先会替换掉 <code>doSomething</code> 的原始实现，把它替换成分类中 <code>doSomething</code> 的实现。</li><li>然后，<code>Method Swizzling</code> 会把这个被分类替换后的实现，再与 <code>Swizzling</code> 中的新实现进行交换。</li></ul><p>由于分类和 <code>Swizzling</code> 的加载顺序并不是固定的，因此，同样的代码在不同的环境下或者不同的运行时版本下可能会有不同的行为。因此，这种将分类和 <code>Swizzling</code> 混用的做法是不稳定且不可预测的，建议在开发中避免使用。</p></details><hr><h2 id="内存管理-1" tabindex="-1"><a class="header-anchor" href="#内存管理-1" aria-hidden="true">#</a> 内存管理</h2><h3 id="❓weak-的实现原理-sidetable-的结构是什么样" tabindex="-1"><a class="header-anchor" href="#❓weak-的实现原理-sidetable-的结构是什么样" aria-hidden="true">#</a> ❓<code>weak</code> 的实现原理，<code>SideTable</code> 的结构是什么样</h3><details class="hint-container details"><summary>💡</summary><p><code>weak</code> 是指弱引用，它允许一个对象指向另一个对象，而不持有这个对象。当被引用的对象被销毁时，这个弱引用会自动置为 nil。</p><p><code>weak</code> 的实现主要是通过 <code>SideTable</code> 结构来实现的。一个 <code>SideTable</code> 实际上是由一个 <code>spinlock_t</code> 表示的自旋锁和一个 <code>weak_table_t</code> 结构的 <code>weak_table</code> 组成的。而一个 <code>weak_table</code> 结构实际上就是一组键值对，键是被引用的对象，值是这个对象的所有弱引用列表。</p><p>当声明一个 <code>__weak</code> 类型的变量时，运行时系统会把这个弱引用添加到对应的 <code>weak_table</code> 中。当一个对象被销毁时，运行时系统会在 <code>weak_table</code> 找到这个对象的所有弱引用，然后遍历这个列表，把列表中所有的弱引用都置为 nil。最后，运行时系统会在 <code>weak_table</code> 中移除这个对象的所有键值对。</p></details><h3 id="❓如果让你实现属性的-weak-如何实现" tabindex="-1"><a class="header-anchor" href="#❓如果让你实现属性的-weak-如何实现" aria-hidden="true">#</a> ❓如果让你实现属性的 <code>weak</code>，如何实现</h3><details class="hint-container details"><summary>💡</summary><p>要实现属性的 <code>weak</code>，可以使用 <code>objc_storeWeak</code> 和 <code>objc_loadWeak</code> 这两个函数来实现，这两个函数内部利用了 <code>SideTable</code> 结构来维护 <code>weak</code> 属性引用的对象。</p><ul><li><code>objc_storeWeak</code> 函数会把这个对象加入到 <code>SideTable</code> ，并且当这个对象被销毁的时候，会自动将所有指向该对象的 <code>weak</code> 引用设置为 <code>nil</code>。</li><li><code>objc_loadWeak</code> 函数则是直接从 <code>SideTable</code> 中取出 <code>weak</code> 属性引用的对象。</li></ul><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// 设置一个 weak 属性值的时候，需要调用 objc_storeWeak</span>
id tmpObj <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>NSObject alloc<span class="token punctuation">]</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">objc_storeWeak</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token operator">-&gt;</span>_tmpObj<span class="token punctuation">,</span> tmpObj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
<span class="token comment">// 读取一个 weak 属性的值的时候，我们需要调用 objc_loadWeak</span>
id tmpObj <span class="token operator">=</span> <span class="token function">objc_loadWeak</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token operator">-&gt;</span>_tmpObj<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="❓runtime-中的-sidetables-了解吗" tabindex="-1"><a class="header-anchor" href="#❓runtime-中的-sidetables-了解吗" aria-hidden="true">#</a> ❓<code>runtime</code> 中的 <code>SideTables</code> 了解吗</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>SideTables</code> 结构是用来保存一些与对象有关但无法直接保存在对象内存布局中的信息。</p></blockquote><ul><li><p>关联对象（<code>Associated Object</code>）：允许开发者为一个对象关联任意的其他对象或值。由于这个特性的动态并且无法预测的性质，这些关联的对象或值无法被直接保存在对象内部，使用 <code>SideTables</code> 来保存。</p></li><li><p>弱引用（<code>Weak Reference</code>）：当一个对象被赋值给一个 <code>weak</code> 变量时，这个 <code>weak</code> 变量的地址和对应的对象需要被记录下来，以便在这个对象被销毁时，可以遍历所有对它的弱引用并将它们设置为 <code>nil</code>。同理，由于弱引用的动态性，这些信息也需要 <code>SideTables</code> 来保存。</p></li></ul><blockquote><p><code>SideTables</code> 是一种散列表（<code>Hash Table</code>）的结构，每一个表项其实是一个 <code>SideTable</code> 结构，包含了一个互斥锁（<code>Mutex</code>）和对应的散列表。<code>SideTables</code> 之所以设计成这个样子，主要原因是出于线程安全和性能的考虑。它可以将关联对象和弱引用的信息保存在不同的表项里，做到锁的粒度最小化，从而提升多线程环境下的性能。</p></blockquote></details><h3 id="❓weak-底层实现是啥知道吗-是什么结构知道吗-怎么解决寻找冲突的" tabindex="-1"><a class="header-anchor" href="#❓weak-底层实现是啥知道吗-是什么结构知道吗-怎么解决寻找冲突的" aria-hidden="true">#</a> ❓<code>weak</code> 底层实现是啥知道吗？是什么结构知道吗？怎么解决寻找冲突的</h3><hr><h2 id="其它知识点" tabindex="-1"><a class="header-anchor" href="#其它知识点" aria-hidden="true">#</a> 其它知识点</h2><h3 id="❓runtime-中的-fastpath、slowpath-是什么" tabindex="-1"><a class="header-anchor" href="#❓runtime-中的-fastpath、slowpath-是什么" aria-hidden="true">#</a> ❓<code>runtime</code> 中的 <code>fastpath</code>、<code>slowpath</code> 是什么</h3><details class="hint-container details"><summary>💡</summary><p>在计算机科学中 <code>fastpath</code> 和 <code>slowpath</code> 是用来描述代码执行路径的术语，这两个术语主要用于注释和优化代码。这样的设计可以显著地提高常见路径的性能，对于性能有要求的代码可以进行参考。</p><ul><li><p><code>fastpath</code>：这个路径用来处理最常见，最频繁的，计算成本最低的场景或任务，为了加速整体的处理时间，会使得这部分代码尽可能的进行优化。一般会将这部分代码放在函数或者一段代码的前面。</p></li><li><p><code>slowpath</code>：这个路径用来处理那些不常见，复杂度较高或者可能导致错误的场景或任务，处理这部分场景的代码放在<code>slowpath</code>。这部分代码一般在 <code>fastpath</code> 代码之后，很多时候需要进行一些错误处理或者复杂计算。</p></li></ul><blockquote><p>在 <code>iOS</code> 系统源码中经常看到 <code>__builtin_expect</code> 方法，它用来指示编译器对一个条件的预判。这就是 <code>fastpath</code> 和 <code>slowpath</code> 的实现方式，通过这个函数，可以将更可能执行的代码（<code>fastpath</code>）放到 <code>CPU</code> 预取缓存中，提高程序运行效率。</p></blockquote><blockquote><p><code>__builtin_expect</code> 是一个 <code>GCC</code> 和 <code>Clang</code> 的内建函数，它的作用是提供代码分支预测的建议给编译器。通过这个函数，可以将更可能执行的代码放到 <code>CPU</code> 预取缓存中，进而提高程序运行效率。</p></blockquote><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// runtime 源码两个宏： 基于 \`__builtin_expect\` 函数的封装</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">FASTPATH</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">__builtin_expect</span><span class="token punctuation">(</span><span class="token function">bool</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SLOWPATH</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">__builtin_expect</span><span class="token punctuation">(</span><span class="token function">bool</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>FASTPATH(x)</code> 表示 <code>x</code> 这个条件最可能为 <code>true</code></li><li><code>SLOWPATH(x)</code> 表示 <code>x</code> 这个条件最可能为 <code>false</code></li></ul><blockquote><p><code>FASTPATH</code> 和 <code>SLOWPATH</code> 主要用来优化代码路径。比如在处理 <code>retain</code> 和 <code>release</code> 时，<code>runtime</code> 会优先处理最常见、最频繁的情况，即对非空对象进行 <code>retain</code> 和 <code>release</code>，这种情况就显式地标记为 <code>FASTPATH</code>。而对空对象进行 <code>retain</code> 和 <code>release</code> 或者对象释放后调用 <code>dealloc</code> 等情况则被标记为 <code>SLOWPATH</code>。</p></blockquote></details><h3 id="❓oc-运行时在工程中的有过实践运用吗" tabindex="-1"><a class="header-anchor" href="#❓oc-运行时在工程中的有过实践运用吗" aria-hidden="true">#</a> ❓<code>OC</code> 运行时在工程中的有过实践运用吗</h3><details class="hint-container details"><summary>💡</summary><ul><li><p>关联对象（<code>Associated Object</code>）：可以使用关联对象为现有的类增加一些属性，而不需要修改类的源代码。</p><blockquote><p>例如，可以为 <code>UIButton</code> 添加一个 <code>indexPath</code> 属性，用于在 <code>TableView</code> 中定位这个按钮在哪个单元行。</p></blockquote></li><li><p>方法交换（<code>Method Swizzling</code>）：通过运行时系统，可以在类别中添加新的方法，并将新的方法与原有的方法进行交换。</p><blockquote><p>例如，可以在类别中为 <code>UIViewController</code> 添加一个新的 <code>viewWillAppear:</code> 方法，然后将这个新方法与系统原有的方法进行交换。这样就可以在新的方法中添加一些跟踪代码，以便追踪到每个视图控制器的出现。</p></blockquote></li><li><p>懒加载：使用 <code>runtime</code> 实现属性的懒加载，</p><blockquote><p>例如，可以在 <code>getter</code> 方法中检查对象是否已经被初始化，如果没有，那么可以初始化该对象并把它缓存起来，以便下次使用。</p></blockquote></li><li><p>序列化和反序列化</p><blockquote><p>例如，可以通过遍历一个对象的所有属性，然后通过 <code>KVC</code>（键值编码）来得到所有属性的值，之后就可以将这些值序列化为 <code>JSON</code> 或者 <code>XML</code>。反序列化也同样，可以将一个 <code>JSON</code> 或者 <code>XML</code> 数据转化为一个字典，然后通过遍历字典，将字典的值通过 <code>KVC</code> 设置到对象的属性上。</p></blockquote></li></ul></details>`,85);function Y(F,G){const a=p("ExternalLinkIcon"),d=p("CodeTabs");return r(),k("div",null,[v,o(" more "),_,s("ul",null,[s("li",null,[s("a",g,[n("2020-01-23 Aspects 深度解析 - iOS 面向切面编程"),e(a)])]),s("li",null,[s("a",y,[n("2019-08-05 Runtime 原理探究"),e(a)])]),s("li",null,[w,n(),s("a",j,[n("2019-03-07 OC 对象的本质"),e(a)]),f]),s("li",null,[s("a",S,[n("2018-03-16 读 objc4 源码，深入理解 Objective-C Runtime"),e(a)])]),s("li",null,[s("a",O,[n("2014-11-05 Objective-C Runtime"),e(a)])])]),o(" 消息发送 & 消息转发 "),s("ul",null,[s("li",null,[s("a",C,[n("2016-06-15 Objective-C 消息发送与转发机制原理"),e(a)])]),s("li",null,[s("a",q,[n("2013-11-26 Objective-C 中的消息与消息转发"),e(a)])])]),o(" isa "),s("ul",null,[s("li",null,[z,s("a",x,[n("2018-07-01 isa && 元类 && 函数调用"),e(a)])]),s("li",null,[M,s("a",A,[n("2016-09-10 神经病院 Objective-C Runtime 入院第一天—— isa 和 Class"),e(a)])])]),o(" MetaClass "),s("ul",null,[s("li",null,[N,s("a",I,[n("2020-02-28 为什么要设计 metaclass"),e(a)]),T]),s("li",null,[P,s("a",L,[n("2018-05-02 为什么要存在 MetaClass"),e(a)])]),s("li",null,[E,n(),s("a",V,[n("2017-09-15 Why is MetaClass in Objective-C？"),e(a)]),n(" 💯 "),B])]),W,s("details",J,[R,e(d,{id:"373",data:[{id:"objc"},{id:"swift"}]},{title0:c(({value:i,isActive:l})=>[n("objc")]),title1:c(({value:i,isActive:l})=>[n("swift")]),tab0:c(({value:i,isActive:l})=>[K]),tab1:c(({value:i,isActive:l})=>[H]),_:1})]),U])}const Q=u(h,[["render",Y],["__file","0x06.runtime.html.vue"]]);export{Q as default};
