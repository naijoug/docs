import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o as l,c,a as i,b as n,e as s,d as e,f as t}from"./app-QPL3Gdw2.js";const r={},u=n("blockquote",null,[n("p",null,"序列化，将数据接口或对象转化为可读取的格式(如：文件、缓存、网络数据流)，待以后恢复读取使用。")],-1),d=n("h2",{id:"reference",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reference","aria-hidden":"true"},"#"),s(" reference")],-1),k={href:"https://zh.wikipedia.org/wiki/%E5%BA%8F%E5%88%97%E5%8C%96",target:"_blank",rel:"noopener noreferrer"},m=t('<h2 id="xml" tabindex="-1"><a class="header-anchor" href="#xml" aria-hidden="true">#</a> XML</h2><ul><li><p>XML 解析类型</p><table><thead><tr><th>解析类型</th><th>全称</th><th>读写</th><th>解析速度</th><th>适合</th></tr></thead><tbody><tr><td>SAX</td><td>Simple API for XML</td><td>只能读不能写</td><td>快</td><td>大型文本</td></tr><tr><td>DOM</td><td>Document Object Model</td><td>可读可写</td><td>慢</td><td>小型文本</td></tr></tbody></table></li></ul><h2 id="json" tabindex="-1"><a class="header-anchor" href="#json" aria-hidden="true">#</a> JSON</h2><h2 id="yaml" tabindex="-1"><a class="header-anchor" href="#yaml" aria-hidden="true">#</a> YAML</h2>',4),v={href:"https://github.com/yaml",target:"_blank",rel:"noopener noreferrer"},h={href:"https://www.ruanyifeng.com/blog/2016/07/yaml.html",target:"_blank",rel:"noopener noreferrer"},b=n("h2",{id:"protobuf",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#protobuf","aria-hidden":"true"},"#"),s(" Protobuf")],-1),f={href:"https://github.com/protocolbuffers/protobuf",target:"_blank",rel:"noopener noreferrer"},y={href:"https://halfrost.com/protobuf_encode",target:"_blank",rel:"noopener noreferrer"},_=t(`<div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token keyword">syntax</span> <span class="token operator">=</span> <span class="token string">&quot;proto3&quot;</span><span class="token punctuation">;</span>  <span class="token comment">// protocol buffers 版本</span>
<span class="token keyword">option</span> java_package <span class="token operator">=</span> <span class="token string">&quot;io.grpc.hello&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 生成的 Java 代码包名</span>

<span class="token keyword">import</span> <span class="token string">&quot;google/protobuf/empty.proto&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 导入谷歌标准空消息</span>
<span class="token keyword">package</span> hello<span class="token punctuation">;</span> <span class="token comment">// proto 文件包名</span>

<span class="token comment">// 定义一个服务</span>
<span class="token keyword">service</span> <span class="token class-name">HelloService</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1&gt; 单项 RPC : 客户端发送一个请求，服务端返回一个应答 (类似函数调用)</span>
    <span class="token keyword">rpc</span> <span class="token function">SayHello</span><span class="token punctuation">(</span><span class="token class-name">HelloRequest</span><span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token class-name">HelloResponse</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token comment">// 2&gt; 服务端流式 RPC : 客户端发送一个请求，获取一个数据流用来读取一系列的消息(直到没有更多消息为止)</span>
    <span class="token keyword">rpc</span> <span class="token function">LotsOfReplies</span><span class="token punctuation">(</span><span class="token class-name">HelloRequest</span><span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token keyword">stream</span> <span class="token class-name">HelloResponse</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token comment">// 3&gt; 客户端流式 RPC : 客户端提供一个数据流写入一系列消息，服务端读取完毕，返回一个应答</span>
    <span class="token keyword">rpc</span> <span class="token function">LotsOfGreetings</span><span class="token punctuation">(</span><span class="token keyword">stream</span> <span class="token class-name">HelloRequest</span><span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token class-name">HelloResponse</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token comment">// 4&gt; 双向流式 RPC : 客户端和服务端通过一个读写数据流按任意顺序读写</span>
    <span class="token keyword">rpc</span> <span class="token function">BidiHello</span><span class="token punctuation">(</span><span class="token keyword">stream</span> <span class="token class-name">HelloRequest</span><span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token keyword">stream</span> <span class="token class-name">HelloResponse</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 空服务</span>
<span class="token keyword">service</span> <span class="token class-name">EmptyService</span> <span class="token punctuation">{</span>
    <span class="token keyword">rpc</span> <span class="token function">EmptyRequest</span><span class="token punctuation">(</span><span class="token class-name">Empty</span><span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token class-name">HelloResponse</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">rpc</span> <span class="token function">EmptyResponse</span><span class="token punctuation">(</span><span class="token class-name">HelloRequest</span><span class="token punctuation">)</span> <span class="token function">return</span> <span class="token punctuation">(</span>Empty<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">rpc</span> <span class="token function">EmptyAll</span><span class="token punctuation">(</span><span class="token class-name">Empty</span><span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token class-name">Empty</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 请求参数消息</span>
<span class="token keyword">message</span> <span class="token class-name">HelloRequest</span> <span class="token punctuation">{</span>
    <span class="token builtin">string</span> name <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 返回数据消息</span>
<span class="token keyword">message</span> <span class="token class-name">HelloResponse</span> <span class="token punctuation">{</span>
    <span class="token builtin">string</span> message <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function g(w,R){const a=p("ExternalLinkIcon");return l(),c("div",null,[u,i(" more "),d,n("ul",null,[n("li",null,[n("a",k,[s("序列化"),e(a)])])]),m,n("ul",null,[n("li",null,[n("a",v,[s("YAML"),e(a)])]),n("li",null,[n("a",h,[s("YAML 语言教程"),e(a)])])]),b,n("ul",null,[n("li",null,[n("p",null,[n("a",f,[s("protobuf"),e(a)])])]),n("li",null,[n("p",null,[n("a",y,[s("高效的数据压缩编码方式 Protobuf"),e(a)])]),_])])])}const q=o(r,[["render",g],["__file","serialization.html.vue"]]);export{q as default};
