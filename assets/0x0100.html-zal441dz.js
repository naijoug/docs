import{_ as d}from"./plugin-vue_export-helper-x3n3nnut.js";import{r,o as p,c as u,a as h,b as n,e,d as s,w as t,f as o}from"./app-m-SMUe_1.js";const _={},k=n("h2",{id:"_0100",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0100","aria-hidden":"true"},"#"),e(" 0100")],-1),m=n("p",null,"// #region 0100",-1),b={href:"https://leetcode.cn/problems/same-tree",target:"_blank",rel:"noopener noreferrer"},f=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),g=n("p",null,"// #endregion 0100",-1),v=n("h2",{id:"_0101",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0101","aria-hidden":"true"},"#"),e(" 0101")],-1),y=n("p",null,"// #region 0101",-1),x={href:"https://leetcode.cn/problems/symmetric-tree",target:"_blank",rel:"noopener noreferrer"},w=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),I=n("p",null,"// #endregion 0101",-1),L=n("h2",{id:"_0102",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0102","aria-hidden":"true"},"#"),e(" 0102")],-1),N=n("p",null,"// #region 0102",-1),q={href:"https://leetcode.cn/problems/binary-tree-level-order-traversal",target:"_blank",rel:"noopener noreferrer"},C=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),j=n("p",null,"// #endregion 0102",-1),A=n("h2",{id:"_0103",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0103","aria-hidden":"true"},"#"),e(" 0103")],-1),O=n("p",null,"// #region 0103",-1),S={href:"https://leetcode.cn/problems/binary-tree-zigzag-level-order-traversal",target:"_blank",rel:"noopener noreferrer"},V=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),D=n("p",null,"// #endregion 0103",-1),B=n("h2",{id:"_0104",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0104","aria-hidden":"true"},"#"),e(" 0104")],-1),E=n("p",null,"// #region 0104",-1),z={href:"https://leetcode.cn/problems/maximum-depth-of-binary-tree",target:"_blank",rel:"noopener noreferrer"},T=n("blockquote",null,[n("p",null,"给定一个二叉树根节点，返回该二叉树的最大深度。")],-1),P=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),R=n("p",null,"// #endregion 0104",-1),U=n("h2",{id:"_0105",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0105","aria-hidden":"true"},"#"),e(" 0105")],-1),F=n("p",null,"// #region 0105",-1),G={href:"https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal",target:"_blank",rel:"noopener noreferrer"},H=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),J=n("p",null,"// #endregion 0105",-1),K=n("h2",{id:"_0106",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0106","aria-hidden":"true"},"#"),e(" 0106")],-1),M=n("p",null,"// #region 0106",-1),Q={href:"https://leetcode.cn/problems/construct-binary-tree-from-inorder-and-postorder-traversal",target:"_blank",rel:"noopener noreferrer"},W=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),X=n("p",null,"// #endregion 0106",-1),Y=n("h2",{id:"_0107",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0107","aria-hidden":"true"},"#"),e(" 0107")],-1),Z=n("p",null,"// #region 0107",-1),$={href:"https://leetcode.cn/problems/binary-tree-level-order-traversal-ii",target:"_blank",rel:"noopener noreferrer"},nn=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),en=n("p",null,"// #endregion 0107",-1),sn=n("h2",{id:"_0108",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0108","aria-hidden":"true"},"#"),e(" 0108")],-1),an=n("p",null,"// #region 0108",-1),tn={href:"https://leetcode.cn/problems/convert-sorted-array-to-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},on=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),ln=n("p",null,"// #endregion 0108",-1),rn=n("h2",{id:"_0109",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0109","aria-hidden":"true"},"#"),e(" 0109")],-1),cn=n("p",null,"// #region 0109",-1),dn={href:"https://leetcode.cn/problems/convert-sorted-list-to-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},pn=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),un=n("p",null,"// #endregion 0109",-1),hn=n("h2",{id:"_0110",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0110","aria-hidden":"true"},"#"),e(" 0110")],-1),_n=n("p",null,"// #region 0110",-1),kn={href:"https://leetcode.cn/problems/balanced-binary-tree",target:"_blank",rel:"noopener noreferrer"},mn=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),bn=n("p",null,"// #endregion 0110",-1),fn=n("h2",{id:"_0111",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0111","aria-hidden":"true"},"#"),e(" 0111")],-1),gn=n("p",null,"// #region 0111",-1),vn={href:"https://leetcode.cn/problems/minimum-depth-of-binary-tree",target:"_blank",rel:"noopener noreferrer"},yn=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),xn=n("p",null,"// #endregion 0111",-1),wn=n("h2",{id:"_0112",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0112","aria-hidden":"true"},"#"),e(" 0112")],-1),In=n("p",null,"// #region 0112",-1),Ln={href:"https://leetcode.cn/problems/path-sum",target:"_blank",rel:"noopener noreferrer"},Nn=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),qn=n("p",null,"// #endregion 0112",-1),Cn=n("h2",{id:"_0113",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0113","aria-hidden":"true"},"#"),e(" 0113")],-1),jn=n("p",null,"// #region 0113",-1),An={href:"https://leetcode.cn/problems/path-sum-ii",target:"_blank",rel:"noopener noreferrer"},On=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Sn=n("p",null,"// #endregion 0113",-1),Vn=n("h2",{id:"_0114",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0114","aria-hidden":"true"},"#"),e(" 0114")],-1),Dn=n("p",null,"// #region 0114",-1),Bn={href:"https://leetcode.cn/problems/flatten-binary-tree-to-linked-list",target:"_blank",rel:"noopener noreferrer"},En=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),zn=n("p",null,"// #endregion 0114",-1),Tn=n("h2",{id:"_0115",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0115","aria-hidden":"true"},"#"),e(" 0115")],-1),Pn=n("p",null,"// #region 0115",-1),Rn={href:"https://leetcode.cn/problems/distinct-subsequences",target:"_blank",rel:"noopener noreferrer"},Un=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Fn=n("p",null,"// #endregion 0115",-1),Gn=n("h2",{id:"_0116",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0116","aria-hidden":"true"},"#"),e(" 0116")],-1),Hn=n("p",null,"// #region 0116",-1),Jn={href:"https://leetcode.cn/problems/populating-next-right-pointers-in-each-node",target:"_blank",rel:"noopener noreferrer"},Kn=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Mn=n("p",null,"// #endregion 0116",-1),Qn=n("h2",{id:"_0117",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0117","aria-hidden":"true"},"#"),e(" 0117")],-1),Wn=n("p",null,"// #region 0117",-1),Xn={href:"https://leetcode.cn/problems/populating-next-right-pointers-in-each-node-ii",target:"_blank",rel:"noopener noreferrer"},Yn=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Zn=n("p",null,"// #endregion 0117",-1),$n=n("h2",{id:"_0118",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0118","aria-hidden":"true"},"#"),e(" 0118")],-1),ne=n("p",null,"// #region 0118",-1),ee={href:"https://leetcode.cn/problems/pascals-triangle",target:"_blank",rel:"noopener noreferrer"},se=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),ae=n("p",null,"// #endregion 0118",-1),te=n("h2",{id:"_0119",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0119","aria-hidden":"true"},"#"),e(" 0119")],-1),oe=n("p",null,"// #region 0119",-1),le={href:"https://leetcode.cn/problems/pascals-triangle-ii",target:"_blank",rel:"noopener noreferrer"},ie=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),re=n("p",null,"// #endregion 0119",-1),ce=n("h2",{id:"_0120",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0120","aria-hidden":"true"},"#"),e(" 0120")],-1),de=n("p",null,"// #region 0120",-1),pe={href:"https://leetcode.cn/problems/triangle",target:"_blank",rel:"noopener noreferrer"},ue=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),he=n("p",null,"// #endregion 0120",-1),_e=n("h2",{id:"_0121",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0121","aria-hidden":"true"},"#"),e(" 0121")],-1),ke=n("p",null,"// #region 0121",-1),me={href:"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock",target:"_blank",rel:"noopener noreferrer"},be=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),fe=n("p",null,"// #endregion 0121",-1),ge=n("h2",{id:"_0122",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0122","aria-hidden":"true"},"#"),e(" 0122")],-1),ve=n("p",null,"// #region 0122",-1),ye={href:"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii",target:"_blank",rel:"noopener noreferrer"},xe=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),we=n("p",null,"// #endregion 0122",-1),Ie=n("h2",{id:"_0123",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0123","aria-hidden":"true"},"#"),e(" 0123")],-1),Le=n("p",null,"// #region 0123",-1),Ne={href:"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iii",target:"_blank",rel:"noopener noreferrer"},qe=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Ce=n("p",null,"// #endregion 0123",-1),je=n("h2",{id:"_0124",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0124","aria-hidden":"true"},"#"),e(" 0124")],-1),Ae=n("p",null,"// #region 0124",-1),Oe={href:"https://leetcode.cn/problems/binary-tree-maximum-path-sum",target:"_blank",rel:"noopener noreferrer"},Se=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Ve=n("p",null,"// #endregion 0124",-1),De=n("h2",{id:"_0125",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0125","aria-hidden":"true"},"#"),e(" 0125")],-1),Be=n("p",null,"// #region 0125",-1),Ee={href:"https://leetcode.cn/problems/valid-palindrome",target:"_blank",rel:"noopener noreferrer"},ze=n("blockquote",null,[n("p",null,"判断字符串中的字母(大小不敏感，大写字母与小字可以看作相等)和数字是否为回文串，字符中的的其它字符不参与回文串校验。")],-1),Te=o(`<details class="hint-container details"><summary>💡</summary><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span>
  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span> left <span class="token operator">&lt;</span> right <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 寻找左边第一个字母或数字</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span> left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isLetterOrDigit</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            left <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 寻找右边第一个字母或数字</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span> left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isLetterOrDigit</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            right <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> left <span class="token operator">&gt;=</span> right <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token comment">// 左右指针，判断字符是否相等</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 不相等，则表明不是回文串</span>
        <span class="token punctuation">}</span> 
        <span class="token comment">// 相等，跳转到下一个字符进行匹配</span>
        left <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        right <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>// #endregion 0125</p><h2 id="_0126" tabindex="-1"><a class="header-anchor" href="#_0126" aria-hidden="true">#</a> 0126</h2><p>// #region 0126</p>`,4),Pe={href:"https://leetcode.cn/problems/word-ladder-ii",target:"_blank",rel:"noopener noreferrer"},Re=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Ue=n("p",null,"// #endregion 0126",-1),Fe=n("h2",{id:"_0127",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0127","aria-hidden":"true"},"#"),e(" 0127")],-1),Ge=n("p",null,"// #region 0127",-1),He={href:"https://leetcode.cn/problems/word-ladder",target:"_blank",rel:"noopener noreferrer"},Je=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Ke=n("p",null,"// #endregion 0127",-1),Me=n("h2",{id:"_0128",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0128","aria-hidden":"true"},"#"),e(" 0128")],-1),Qe=n("p",null,"// #region 0128",-1),We={href:"https://leetcode.cn/problems/longest-consecutive-sequence",target:"_blank",rel:"noopener noreferrer"},Xe=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Ye=n("p",null,"// #endregion 0128",-1),Ze=n("h2",{id:"_0129",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0129","aria-hidden":"true"},"#"),e(" 0129")],-1),$e=n("p",null,"// #region 0129",-1),ns={href:"https://leetcode.cn/problems/sum-root-to-leaf-numbers",target:"_blank",rel:"noopener noreferrer"},es=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),ss=n("p",null,"// #endregion 0129",-1),as=n("h2",{id:"_0130",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0130","aria-hidden":"true"},"#"),e(" 0130")],-1),ts=n("p",null,"// #region 0130",-1),os={href:"https://leetcode.cn/problems/surrounded-regions",target:"_blank",rel:"noopener noreferrer"},ls=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),is=n("p",null,"// #endregion 0130",-1),rs=n("h2",{id:"_0131",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0131","aria-hidden":"true"},"#"),e(" 0131")],-1),cs=n("p",null,"// #region 0131",-1),ds={href:"https://leetcode.cn/problems/palindrome-partitioning",target:"_blank",rel:"noopener noreferrer"},ps=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),us=n("p",null,"// #endregion 0131",-1),hs=n("h2",{id:"_0132",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0132","aria-hidden":"true"},"#"),e(" 0132")],-1),_s=n("p",null,"// #region 0132",-1),ks={href:"https://leetcode.cn/problems/palindrome-partitioning-ii",target:"_blank",rel:"noopener noreferrer"},ms=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),bs=n("p",null,"// #endregion 0132",-1),fs=n("h2",{id:"_0133",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0133","aria-hidden":"true"},"#"),e(" 0133")],-1),gs=n("p",null,"// #region 0133",-1),vs={href:"https://leetcode.cn/problems/clone-graph",target:"_blank",rel:"noopener noreferrer"},ys=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),xs=n("p",null,"// #endregion 0133",-1),ws=n("h2",{id:"_0134",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0134","aria-hidden":"true"},"#"),e(" 0134")],-1),Is=n("p",null,"// #region 0134",-1),Ls={href:"https://leetcode.cn/problems/gas-station",target:"_blank",rel:"noopener noreferrer"},Ns=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),qs=n("p",null,"// #endregion 0124",-1),Cs=n("h2",{id:"_0135",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0135","aria-hidden":"true"},"#"),e(" 0135")],-1),js=n("p",null,"// #region 0135",-1),As={href:"https://leetcode.cn/problems/candy",target:"_blank",rel:"noopener noreferrer"},Os=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Ss=n("p",null,"// #endregion 0135",-1),Vs=n("h2",{id:"_0136",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0136","aria-hidden":"true"},"#"),e(" 0136")],-1),Ds=n("p",null,"// #region 0136",-1),Bs={href:"https://leetcode.cn/problems/single-number/",target:"_blank",rel:"noopener noreferrer"},Es=n("blockquote",null,[n("p",null,"一个非空的整数数组，除了某个元素只出现一次外，其余元素均出现两次。找出只出现一次的数字")],-1),zs=n("details",{class:"hint-container details"},[n("summary",null,"💡"),n("p",null,[e("【思路】 由于存在相同的元素均出现两次，刚好可以使用 "),n("code",null,"x ^ x = 0"),e(" 的特性。将所有数字进行异或操作，则相同的数字异或结果为 0，只出现一次的数与 0 进行异或结果就是只出现一次的数。 时间复杂度: O(n) 空间复杂度: O(1)")])],-1),Ts=n("p",null,"// #endregion 0136",-1),Ps=n("h2",{id:"_0137",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0137","aria-hidden":"true"},"#"),e(" 0137")],-1),Rs=n("p",null,"// #region 0137",-1),Us={href:"https://leetcode.cn/problems/single-number-ii",target:"_blank",rel:"noopener noreferrer"},Fs=n("blockquote",null,[n("p",null,"一个非空的整数数组中，除了某个元素只出现一次外，其余元素均出现三次。找出只出现一次的数字 时间复杂度: O(n) 空间复杂度: O(1)")],-1),Gs=n("details",{class:"hint-container details"},[n("summary",null,"💡"),n("p",null,[e("【思路】 这道题是 136 的变形版本，不能使用 "),n("code",null,"x ^ x = 0"),e(" 特性。但是但是还是可以使用位运算的特性进行求解。")])],-1),Hs=n("p",null,"// #endregion 0137",-1),Js=n("h2",{id:"_0138",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0138","aria-hidden":"true"},"#"),e(" 0138")],-1),Ks=n("p",null,"// #region 0138",-1),Ms={href:"https://leetcode.cn/problems/copy-list-with-random-pointer",target:"_blank",rel:"noopener noreferrer"},Qs=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Ws=n("p",null,"// #endregion 0138",-1),Xs=n("h2",{id:"_0139",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0139","aria-hidden":"true"},"#"),e(" 0139")],-1),Ys=n("p",null,"// #region 0139",-1),Zs={href:"https://leetcode.cn/problems/word-break",target:"_blank",rel:"noopener noreferrer"},$s=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),na=n("p",null,"// #endregion 0139",-1),ea=n("h2",{id:"_0140",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0140","aria-hidden":"true"},"#"),e(" 0140")],-1),sa=n("p",null,"// #region 0140",-1),aa={href:"https://leetcode.cn/problems/word-break-ii",target:"_blank",rel:"noopener noreferrer"},ta=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),oa=n("p",null,"// #endregion 0140",-1),la=n("h2",{id:"_0141-✅",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0141-✅","aria-hidden":"true"},"#"),e(" 0141 ✅")],-1),ia=n("p",null,"// #region 0141",-1),ra={href:"https://leetcode.cn/problems/linked-list-cycle",target:"_blank",rel:"noopener noreferrer"},ca=n("blockquote",null,[n("p",null,"判断单链表是否有环？")],-1),da={class:"hint-container details"},pa=n("summary",null,"💡",-1),ua=n("p",null,"【技巧】使用快慢指针，fast 指针每次走两步，slow 指针每次走一步，如果两个指针相遇，则表明链表有环。如果没有相遇，fast 直接走到链表最后 nil 空指针，则表明链表没有环。",-1),ha=n("p",null,"【原理】",-1),_a=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token doc-comment comment"},[e(`/**
 * Definition for singly-linked list.
 * class ListNode `),n("span",{class:"token punctuation"},"{"),e(`
 *     int val;
 *     ListNode next;
 *     ListNode(int x) `),n("span",{class:"token punctuation"},"{"),e(`
 *         val = x;
 *         next = null;
 *     `),n("span",{class:"token punctuation"},"}"),e(`
 * `),n("span",{class:"token punctuation"},"}"),e(`
 */`)]),e(`
`),n("span",{class:"token keyword"},"public"),e(),n("span",{class:"token keyword"},"class"),e(),n("span",{class:"token class-name"},"Solution"),e(),n("span",{class:"token punctuation"},"{"),e(`
    `),n("span",{class:"token keyword"},"public"),e(),n("span",{class:"token keyword"},"boolean"),e(),n("span",{class:"token function"},"hasCycle"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"ListNode"),e(" head"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
        `),n("span",{class:"token class-name"},"ListNode"),e(" fast "),n("span",{class:"token operator"},"="),e(" head"),n("span",{class:"token punctuation"},";"),e(`
        `),n("span",{class:"token class-name"},"ListNode"),e(" slow "),n("span",{class:"token operator"},"="),e(" head"),n("span",{class:"token punctuation"},";"),e(`
        `),n("span",{class:"token comment"},"// 需要校验 fast.next 为非空，解决 NullPointerException"),e(`
        `),n("span",{class:"token keyword"},"while"),e(),n("span",{class:"token punctuation"},"("),e(" fast "),n("span",{class:"token operator"},"!="),e(),n("span",{class:"token keyword"},"null"),e(),n("span",{class:"token operator"},"&&"),e(" fast"),n("span",{class:"token punctuation"},"."),e("next "),n("span",{class:"token operator"},"!="),e(),n("span",{class:"token keyword"},"null"),e(),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
            `),n("span",{class:"token comment"},"// 快指针走两步，慢指针走一步"),e(`
            fast `),n("span",{class:"token operator"},"="),e(" fast"),n("span",{class:"token punctuation"},"."),e("next"),n("span",{class:"token punctuation"},"."),e("next"),n("span",{class:"token punctuation"},";"),e(`
            slow `),n("span",{class:"token operator"},"="),e(" slow"),n("span",{class:"token punctuation"},"."),e("next"),n("span",{class:"token punctuation"},";"),e(`
            `),n("span",{class:"token keyword"},"if"),e(),n("span",{class:"token punctuation"},"("),e(" fast "),n("span",{class:"token operator"},"=="),e(" slow "),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
                `),n("span",{class:"token keyword"},"return"),e(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},";"),e(`
            `),n("span",{class:"token punctuation"},"}"),e(`
        `),n("span",{class:"token punctuation"},"}"),e(`
        `),n("span",{class:"token keyword"},"return"),e(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},";"),e(`
    `),n("span",{class:"token punctuation"},"}"),e(`
`),n("span",{class:"token punctuation"},"}"),e(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),ka=n("div",{class:"language-swift line-numbers-mode","data-ext":"swift"},[n("pre",{class:"language-swift"},[n("code",null,[n("span",{class:"token comment"},`/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.next = nil
 *     }
 * }
 */`),e(`

`),n("span",{class:"token keyword"},"class"),e(),n("span",{class:"token class-name"},"Solution"),e(),n("span",{class:"token punctuation"},"{"),e(`
    `),n("span",{class:"token keyword"},"func"),e(),n("span",{class:"token function-definition function"},"hasCycle"),n("span",{class:"token punctuation"},"("),n("span",{class:"token omit keyword"},"_"),e(" head"),n("span",{class:"token punctuation"},":"),e(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token operator"},"->"),e(),n("span",{class:"token class-name"},"Bool"),e(),n("span",{class:"token punctuation"},"{"),e(`
        `),n("span",{class:"token keyword"},"var"),e(" fast "),n("span",{class:"token operator"},"="),e(` head
        `),n("span",{class:"token keyword"},"var"),e(" slow "),n("span",{class:"token operator"},"="),e(` head
        `),n("span",{class:"token keyword"},"while"),e(" fast"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),e("next "),n("span",{class:"token operator"},"!="),e(),n("span",{class:"token nil constant"},"nil"),e(),n("span",{class:"token punctuation"},"{"),e(`
            fast `),n("span",{class:"token operator"},"="),e(" fast"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),e("next"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),e(`next
            slow `),n("span",{class:"token operator"},"="),e(" slow"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),e(`next
            `),n("span",{class:"token keyword"},"guard"),e(" fast "),n("span",{class:"token operator"},"==="),e(" slow "),n("span",{class:"token keyword"},"else"),e(),n("span",{class:"token punctuation"},"{"),e(),n("span",{class:"token keyword"},"continue"),e(),n("span",{class:"token punctuation"},"}"),e(`
            `),n("span",{class:"token keyword"},"return"),e(),n("span",{class:"token boolean"},"true"),e(`
        `),n("span",{class:"token punctuation"},"}"),e(`
        `),n("span",{class:"token keyword"},"return"),e(),n("span",{class:"token boolean"},"false"),e(`
    `),n("span",{class:"token punctuation"},"}"),e(`
`),n("span",{class:"token punctuation"},"}"),e(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),ma=n("p",null,"// #endregion 0141",-1),ba=n("h2",{id:"_0142",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0142","aria-hidden":"true"},"#"),e(" 0142")],-1),fa=n("p",null,"// #region 0142",-1),ga={href:"https://leetcode.cn/problems/linked-list-cycle-ii",target:"_blank",rel:"noopener noreferrer"},va=n("blockquote",null,[n("p",null,"求环形链表入环位置的节点？")],-1),ya=o('<details class="hint-container details"><summary>💡</summary><p>【结论】相遇点 ~ 连接点 = 头指针 ~ 连接点</p><p>数学公式推导</p><blockquote><p>求环形链表的环长？</p></blockquote><p>【思路1】slow 指针视角，记录第一次相遇点位置，之后使用计数器记录步长，当 slow 指针再次走到该位置时，则计数器步长就是环长。</p><p>【思路2】fast 指针视角，由于 fast 刚好比 slow 指针多走一倍，所以当两个指针再次相遇时，则 fast 刚好走了环长的两倍。</p></details><p>// #endregion 0142</p><h2 id="_0143" tabindex="-1"><a class="header-anchor" href="#_0143" aria-hidden="true">#</a> 0143</h2><p>// #region 0143</p>',4),xa={href:"https://leetcode.cn/problems/reorder-list",target:"_blank",rel:"noopener noreferrer"},wa=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Ia=n("p",null,"// #endregion 0143",-1),La=n("h2",{id:"_0144",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0144","aria-hidden":"true"},"#"),e(" 0144")],-1),Na=n("p",null,"// #region 0144",-1),qa={href:"https://leetcode.cn/problems/binary-tree-preorder-traversal",target:"_blank",rel:"noopener noreferrer"},Ca=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),ja=n("p",null,"// #endregion 0144",-1),Aa=n("h2",{id:"_0145",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0145","aria-hidden":"true"},"#"),e(" 0145")],-1),Oa=n("p",null,"// #region 0145",-1),Sa={href:"https://leetcode.cn/problems/binary-tree-postorder-traversal",target:"_blank",rel:"noopener noreferrer"},Va=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Da=n("p",null,"// #endregion 0145",-1),Ba=n("h2",{id:"_0146",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0146","aria-hidden":"true"},"#"),e(" 0146")],-1),Ea=n("p",null,"// #region 0146",-1),za={href:"https://leetcode.cn/problems/lru-cache",target:"_blank",rel:"noopener noreferrer"},Ta=n("blockquote",null,[n("p",null,[n("code",null,"get"),e(),n("code",null,"put"),e(" 操作需要 O(1) 的平均时间复杂度")])],-1),Pa=o('<details class="hint-container details"><summary>💡</summary><p>【思路】: 哈希表 + 双向链表</p><ul><li>首先解决数据的缓存问题。由于需要 O(1) 的时间复杂度，所以应该很自然的想到了使用哈希表来保存数据。这样保存和查询都可以做到 O(1) 的时间复杂度。</li><li>再来解决最近最少使用的问题。这需要使用双向链表的结构来保存数据，链表头部为最少使用的数据，链表尾部为最近使用的数据。 <ul><li>查询数据时，这个查询过的数据为最近使用，也就是需要移除就之前链表中的这个数据，将这个数据重新加入到链表尾部。</li><li>添加数据时，如果这个 key 已存在，则移除旧数据，将新数据加入链表尾部；如果 key 不存在，需要判断缓存是否已满，如果已满则移除链表头部最少使用数据，添加新数据到链表尾部，如果未满则直接添加新数据到链表尾部。</li></ul></li></ul></details><p>// #endregion 0146</p><h2 id="_0147" tabindex="-1"><a class="header-anchor" href="#_0147" aria-hidden="true">#</a> 0147</h2><p>// #region 0147</p>',4),Ra={href:"https://leetcode.cn/problems/insertion-sort-list",target:"_blank",rel:"noopener noreferrer"},Ua=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Fa=n("p",null,"// #endregion 0147",-1),Ga=n("h2",{id:"_0148",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0148","aria-hidden":"true"},"#"),e(" 0148")],-1),Ha=n("p",null,"// #region 0148",-1),Ja={href:"https://leetcode.cn/problems/sort-list",target:"_blank",rel:"noopener noreferrer"},Ka=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Ma=n("p",null,"// #endregion 0148",-1),Qa=n("h2",{id:"_0149",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0149","aria-hidden":"true"},"#"),e(" 0149")],-1),Wa=n("p",null,"// #region 0149",-1),Xa={href:"https://leetcode.cn/problems/max-points-on-a-line",target:"_blank",rel:"noopener noreferrer"},Ya=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Za=n("p",null,"// #endregion 0149",-1),$a=n("h2",{id:"_0150",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0150","aria-hidden":"true"},"#"),e(" 0150")],-1),nt=n("p",null,"// #region 0150",-1),et={href:"https://leetcode.cn/problems/evaluate-reverse-polish-notation",target:"_blank",rel:"noopener noreferrer"},st=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),at=n("p",null,"// #endregion 0150",-1),tt=n("h2",{id:"_0151",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0151","aria-hidden":"true"},"#"),e(" 0151")],-1),ot=n("p",null,"// #region 0151",-1),lt={href:"https://leetcode.cn/problems/reverse-words-in-a-string",target:"_blank",rel:"noopener noreferrer"},it=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),rt=n("p",null,"// #endregion 0151",-1),ct=n("h2",{id:"_0160",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0160","aria-hidden":"true"},"#"),e(" 0160")],-1),dt=n("p",null,"// #region 0160",-1),pt={href:"https://leetcode.cn/problems/intersection-of-two-linked-lists",target:"_blank",rel:"noopener noreferrer"},ut=n("blockquote",null,[n("p",null,"求两个相交链表的相交起始节点？")],-1),ht=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),_t=n("p",null,"// #endregion 0160",-1),kt=n("h2",{id:"_0167",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0167","aria-hidden":"true"},"#"),e(" 0167")],-1),mt=n("p",null,"// #region 0167",-1),bt={href:"https://leetcode.cn/problems/two-sum-ii-input-array-is-sorted",target:"_blank",rel:"noopener noreferrer"},ft=n("blockquote",null,[n("p",null,"给定目标值，在有序数组中查找两个索引对应的值相加等于目标值。")],-1),gt=o(`<details class="hint-container details"><summary>💡</summary><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> right <span class="token operator">=</span> numbers<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span> left <span class="token operator">&lt;</span> right <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> sum <span class="token operator">=</span> numbers<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> numbers<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span> sum <span class="token operator">==</span> target <span class="token punctuation">)</span> <span class="token punctuation">{</span> 
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> sum <span class="token operator">&lt;</span> target <span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 小于目标值，调整左边</span>
                left <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// sum &gt; target</span>
                <span class="token comment">// 大于目标值，调整右边</span>
                right <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>// #endregion 0167</p><h2 id="_0172" tabindex="-1"><a class="header-anchor" href="#_0172" aria-hidden="true">#</a> 0172</h2><p>// #region 0172</p>`,4),vt={href:"https://leetcode.cn/problems/factorial-trailing-zeroes",target:"_blank",rel:"noopener noreferrer"},yt=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),xt=n("p",null,"// #endregion 0172",-1),wt=n("h2",{id:"_0174",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0174","aria-hidden":"true"},"#"),e(" 0174")],-1),It=n("p",null,"// #region 0174",-1),Lt={href:"https://leetcode.cn/problems/dungeon-game",target:"_blank",rel:"noopener noreferrer"},Nt=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),qt=n("p",null,"// #endregion 0174",-1),Ct=n("h2",{id:"_0187",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0187","aria-hidden":"true"},"#"),e(" 0187")],-1),jt=n("p",null,"// #region 0187",-1),At={href:"https://leetcode.cn/problems/repeated-dna-sequences",target:"_blank",rel:"noopener noreferrer"},Ot=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),St=n("p",null,"// #endregion 0187",-1),Vt=n("h2",{id:"_0188",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0188","aria-hidden":"true"},"#"),e(" 0188")],-1),Dt=n("p",null,"// #region 0188",-1),Bt={href:"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iv",target:"_blank",rel:"noopener noreferrer"},Et=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),zt=n("p",null,"// #endregion 0188",-1),Tt=n("h2",{id:"_0189",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0189","aria-hidden":"true"},"#"),e(" 0189")],-1),Pt=n("p",null,"// #region 0189",-1),Rt={href:"https://leetcode.cn/problems/house-robber",target:"_blank",rel:"noopener noreferrer"},Ut=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Ft=n("p",null,"// #endregion 0189",-1),Gt=n("h2",{id:"_0191",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0191","aria-hidden":"true"},"#"),e(" 0191")],-1),Ht=n("p",null,"// #region 0191",-1),Jt={href:"https://leetcode.cn/problems/number-of-1-bits",target:"_blank",rel:"noopener noreferrer"},Kt=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Mt=n("p",null,"// #endregion 0191",-1);function Qt(Wt,Xt){const a=r("ExternalLinkIcon"),c=r("CodeTabs");return p(),u("div",null,[h(" more "),k,m,n("ul",null,[n("li",null,[n("a",b,[e("🟢 100 - 相同的树"),s(a)])])]),f,g,v,y,n("ul",null,[n("li",null,[n("a",x,[e("🟢 101 - 对称二叉树"),s(a)])])]),w,I,L,N,n("ul",null,[n("li",null,[n("a",q,[e("🟠 102 - 二叉树的层序遍历"),s(a)])])]),C,j,A,O,n("ul",null,[n("li",null,[n("a",S,[e("🟠 103 - 二叉树的锯齿形层序遍历"),s(a)])])]),V,D,B,E,n("ul",null,[n("li",null,[n("a",z,[e("🟢 104 - 二叉树的最大深度"),s(a)]),T])]),P,R,U,F,n("ul",null,[n("li",null,[n("a",G,[e("🟠 105 - 从前序与中序遍历序列构造二叉树"),s(a)])])]),H,J,K,M,n("ul",null,[n("li",null,[n("a",Q,[e("🟠 106 - 从中序与后序遍历序列构造二叉树"),s(a)])])]),W,X,Y,Z,n("ul",null,[n("li",null,[n("a",$,[e("🟠 107 - 二叉树的层序遍历 II"),s(a)])])]),nn,en,sn,an,n("ul",null,[n("li",null,[n("a",tn,[e("🟢 108 - 将有序数组转换为二叉搜索树"),s(a)])])]),on,ln,rn,cn,n("ul",null,[n("li",null,[n("a",dn,[e("🟠 109 - 有序链表转换二叉搜索树"),s(a)])])]),pn,un,hn,_n,n("ul",null,[n("li",null,[n("a",kn,[e("🟢 110 - 平衡二叉树"),s(a)])])]),mn,bn,fn,gn,n("ul",null,[n("li",null,[n("a",vn,[e("🟢 111 - 二叉树的最小深度"),s(a)])])]),yn,xn,wn,In,n("ul",null,[n("li",null,[n("a",Ln,[e("🟢 112 - 路径总和"),s(a)])])]),Nn,qn,Cn,jn,n("ul",null,[n("li",null,[n("a",An,[e("🟠 113 - 路径总和 II"),s(a)])])]),On,Sn,Vn,Dn,n("ul",null,[n("li",null,[n("a",Bn,[e("🟠 114 - 二叉树展开为链表"),s(a)])])]),En,zn,Tn,Pn,n("ul",null,[n("li",null,[n("a",Rn,[e("🔴 115 - 不同的子序列"),s(a)])])]),Un,Fn,Gn,Hn,n("ul",null,[n("li",null,[n("a",Jn,[e("🟠 116 - 填充每个节点的下一个右侧节点指针"),s(a)])])]),Kn,Mn,Qn,Wn,n("ul",null,[n("li",null,[n("a",Xn,[e("🟠 117 - 填充每个节点的下一个右侧节点指针 II"),s(a)])])]),Yn,Zn,$n,ne,n("ul",null,[n("li",null,[n("a",ee,[e("🟢 118 - 杨辉三角"),s(a)])])]),se,ae,te,oe,n("ul",null,[n("li",null,[n("a",le,[e("🟢 119 - 杨辉三角 II"),s(a)])])]),ie,re,ce,de,n("ul",null,[n("li",null,[n("a",pe,[e("🟠 120 - 三角形最小路径和"),s(a)])])]),ue,he,_e,ke,n("ul",null,[n("li",null,[n("a",me,[e("🟢 121 - 买卖股票的最佳时机"),s(a)])])]),be,fe,ge,ve,n("ul",null,[n("li",null,[n("a",ye,[e("🟠 122 - 买卖股票的最佳时机 II"),s(a)])])]),xe,we,Ie,Le,n("ul",null,[n("li",null,[n("a",Ne,[e("🔴 123 - 买卖股票的最佳时机 III"),s(a)])])]),qe,Ce,je,Ae,n("ul",null,[n("li",null,[n("a",Oe,[e("🔴 124 - 二叉树中的最大路径和"),s(a)])])]),Se,Ve,De,Be,n("ul",null,[n("li",null,[n("a",Ee,[e("🟢 125 - 验证回文串"),s(a)]),ze])]),Te,n("ul",null,[n("li",null,[n("a",Pe,[e("🔴 126 - 单词接龙 II"),s(a)])])]),Re,Ue,Fe,Ge,n("ul",null,[n("li",null,[n("a",He,[e("🔴 - 单词接龙"),s(a)])])]),Je,Ke,Me,Qe,n("ul",null,[n("li",null,[n("a",We,[e("🟠 128 - 最长连续序列"),s(a)])])]),Xe,Ye,Ze,$e,n("ul",null,[n("li",null,[n("a",ns,[e("🟠 129 - 求根节点到叶节点数字之和"),s(a)])])]),es,ss,as,ts,n("ul",null,[n("li",null,[n("a",os,[e("🟠 130 - 被围绕的区域"),s(a)])])]),ls,is,rs,cs,n("ul",null,[n("li",null,[n("a",ds,[e("🟠 131 - 分割回文串"),s(a)])])]),ps,us,hs,_s,n("ul",null,[n("li",null,[n("a",ks,[e("🔴 132 - 分割回文串 II"),s(a)])])]),ms,bs,fs,gs,n("ul",null,[n("li",null,[n("a",vs,[e("🟠 133 - 克隆图"),s(a)])])]),ys,xs,ws,Is,n("ul",null,[n("li",null,[n("a",Ls,[e("🟠 134 - 加油站"),s(a)])])]),Ns,qs,Cs,js,n("ul",null,[n("li",null,[n("a",As,[e("🔴 135 - 分发糖果"),s(a)])])]),Os,Ss,Vs,Ds,n("ul",null,[n("li",null,[n("a",Bs,[e("🟢 136 - 只出现一次的数字"),s(a)]),Es])]),zs,Ts,Ps,Rs,n("ul",null,[n("li",null,[n("a",Us,[e("🟠 137 - 只出现一次的数字 II"),s(a)]),Fs])]),Gs,Hs,Js,Ks,n("ul",null,[n("li",null,[n("a",Ms,[e("🟠 138 - 随机链表的复制"),s(a)])])]),Qs,Ws,Xs,Ys,n("ul",null,[n("li",null,[n("a",Zs,[e("🟠 139 - 单词拆分"),s(a)])])]),$s,na,ea,sa,n("ul",null,[n("li",null,[n("a",aa,[e("🔴 140 - 单词拆分 II"),s(a)])])]),ta,oa,la,ia,n("ul",null,[n("li",null,[n("a",ra,[e("🟢 141 - 环形链表"),s(a)]),ca])]),n("details",da,[pa,ua,ha,s(c,{id:"791",data:[{id:"java"},{id:"swift"}]},{title0:t(({value:l,isActive:i})=>[e("java")]),title1:t(({value:l,isActive:i})=>[e("swift")]),tab0:t(({value:l,isActive:i})=>[_a]),tab1:t(({value:l,isActive:i})=>[ka]),_:1})]),ma,ba,fa,n("ul",null,[n("li",null,[n("a",ga,[e("🟠 142 - 环形链表 II"),s(a)]),va])]),ya,n("ul",null,[n("li",null,[n("a",xa,[e("🟠 143 - 重排链表"),s(a)])])]),wa,Ia,La,Na,n("ul",null,[n("li",null,[n("a",qa,[e("🟢 144 - 二叉树的前序遍历"),s(a)])])]),Ca,ja,Aa,Oa,n("ul",null,[n("li",null,[n("a",Sa,[e("🟢 145 - 二叉树的后序遍历"),s(a)])])]),Va,Da,Ba,Ea,n("ul",null,[n("li",null,[n("a",za,[e("🟠 146 - LRU 缓存"),s(a)]),Ta])]),Pa,n("ul",null,[n("li",null,[n("a",Ra,[e("🟠 147 - 对链表进行插入排序"),s(a)])])]),Ua,Fa,Ga,Ha,n("ul",null,[n("li",null,[n("a",Ja,[e("🟠 148 - 排序链表"),s(a)])])]),Ka,Ma,Qa,Wa,n("ul",null,[n("li",null,[n("a",Xa,[e("🔴 149 - 直线上最多的点数"),s(a)])])]),Ya,Za,$a,nt,n("ul",null,[n("li",null,[n("a",et,[e("🟠 150 - 逆波兰表达式求值"),s(a)])])]),st,at,tt,ot,n("ul",null,[n("li",null,[n("a",lt,[e("🟠 151 - 反转字符串中的单词"),s(a)])])]),it,rt,ct,dt,n("ul",null,[n("li",null,[n("a",pt,[e("🟢 160 - 相交链表"),s(a)]),ut])]),ht,_t,kt,mt,n("ul",null,[n("li",null,[n("a",bt,[e("🟠 167 - 两数之和 II - 输入有序数组"),s(a)]),ft])]),gt,n("ul",null,[n("li",null,[n("a",vt,[e("🟠 172 - 阶乘后的零"),s(a)])])]),yt,xt,wt,It,n("ul",null,[n("li",null,[n("a",Lt,[e("🔴 714 - 地下城游戏"),s(a)])])]),Nt,qt,Ct,jt,n("ul",null,[n("li",null,[n("a",At,[e("🟠 187 - 重复的DNA序列"),s(a)])])]),Ot,St,Vt,Dt,n("ul",null,[n("li",null,[n("a",Bt,[e("🔴 188 - 买卖股票的最佳时机 IV"),s(a)])])]),Et,zt,Tt,Pt,n("ul",null,[n("li",null,[n("a",Rt,[e("🟠 189 - 打家劫舍"),s(a)])])]),Ut,Ft,Gt,Ht,n("ul",null,[n("li",null,[n("a",Jt,[e("🟢 191 - 位1的个数"),s(a)])])]),Kt,Mt])}const $t=d(_,[["render",Qt],["__file","0x0100.html.vue"]]);export{$t as default};
