import{_ as p}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as l,o as u,c as r,a as k,b as n,e as s,d as o,w as a,f as d}from"./app-70ciXxLL.js";const m={},h=n("h2",{id:"reference",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reference","aria-hidden":"true"},"#"),s(" reference")],-1),b=n("a",{href:"%E2%9C%85"},null,-1),v={href:"https://www.zhihu.com/question/33515481",target:"_blank",rel:"noopener noreferrer"},y=d('<hr><h2 id="概念知识" tabindex="-1"><a class="header-anchor" href="#概念知识" aria-hidden="true">#</a> 概念知识</h2><h3 id="❓说说你理解的多线程" tabindex="-1"><a class="header-anchor" href="#❓说说你理解的多线程" aria-hidden="true">#</a> ❓说说你理解的多线程</h3><details class="hint-container details"><summary>💡</summary><blockquote><p>多线程：程序中包含两个或者更多个可以同时运行的部分，这两个或者多个部分互相独立但又共享某些资源，可以并行执行的每个独立的运行部分就是一个线程。</p></blockquote><p>每个线程都有它自己的程序计数器、一组寄存器和堆栈，这些都是线程从被暂停到再次被执行所必需的，而尽管每个线程都有自己的堆栈，但是该线程所对应的进程的所有线程都共享同样的地址空间，它们就像是属于同一个进程下的兄弟。</p><p>多线程的优点：</p><ul><li><p>充分利用多核处理器的计算能力，一台多核 CPU 计算机上的多线程程序可以使用更多的核，从而提高程序的性能。</p></li><li><p>提高程序的响应速度，用户界面的多线程设计可以保证用户界面始终对用户的操作做出响应，并且可以做到许多耗时的操作和用户界面的独立处理。</p></li><li><p>简化复杂的程序设计。一些需要同时处理多个用户请求或者需要连续完成处理一系列任务的软件，使用多线程可以很好地解耦和简化程序设计，提高程序设计的效率。</p></li></ul><p>多线程的缺点：</p><ul><li><p>线程并发执行时可能需要访问同一块资源（如全局变量），这就会带来同步和互斥问题。</p><blockquote><p>例如，经典的生产者消费者问题，读者写者问题等。</p></blockquote></li><li><p>多线程技术需要操作系统的支持，不是所有的操作系统或者编程语言都适合编写多线程程序。多线程编程通常需要一些复杂的技巧和细心的设计。</p></li><li><p>多线程程序的调试和测试比单线程的程序更为困难，因为由于线程是并发执行的，每个线程都有自己独立的上下文，导致线程的执行顺序无法预测。</p></li></ul></details><h3 id="❓并行-vs-串行" tabindex="-1"><a class="header-anchor" href="#❓并行-vs-串行" aria-hidden="true">#</a> ❓并行 vs 串行</h3><details class="hint-container details"><summary>💡</summary><ul><li><p>并行：两个或更多任务（或进程）在同一时刻进行，也就是说它们是同时执行的。</p><ul><li>如果是多核 <code>CPU</code> 会是真正意义上并行，多个任务会在不同 <code>CPU</code> 上同时运行</li><li>如果是单核 <code>CPU</code> 是一种伪并行，是同一时间间隔上运行多个任务，<code>CPU</code> 在多个任务上切换运行，其实某一时刻上其实只有一个任务执行，由于 <code>CPU</code> 运行速度比较快，用户角度观察呈现并发状态。</li></ul><blockquote><p>比如，超市的几个结账通道就可以同时服务多个顾客，这就是一个并行的例子。</p></blockquote></li><li><p>串行：在一段时间段内同一时间点只处理一个任务或进程。</p><blockquote><p>在任务一完成之后任务二才可以开始，比如一个人在超市逐个挑选商品，从牛奶到面包再到鸡蛋，这个过程就是串行的。</p></blockquote></li></ul></details><h3 id="❓进程-vs-线程-vs-协程" tabindex="-1"><a class="header-anchor" href="#❓进程-vs-线程-vs-协程" aria-hidden="true">#</a> ❓进程 vs 线程 vs 协程</h3><details class="hint-container details"><summary>💡</summary><ul><li>进程(Process) : 程序的一次运行活动，各个进程之间相互资源独立。操作系统分配资源的基本单位，具有唯一的 PID 和 port 号。</li><li>线程(Thread) : 线程是进程的最小执行单位，同一个进程内的多个线程共享进程内的资源。</li><li>协程(Coroutine) : 也被称为“微线程”。运行在用户态，相比于线程具有极高的执行效率和极低的切换成本。</li></ul><p>进程、线程、协程都是程序执行流的基本单元，但它们有着明显的区别：</p><ul><li><p>进程(<code>Process</code>)：</p><ul><li>进程是操作系统资源分配的基本单元，是一个运行中的程序的实例。</li><li>进程具有自己独立的内存空间和系统资源。各个进程间的资源不共享，相互隔离，一个进程不能访问另一个进程的资源和内存空间。</li><li>进程间的通信(<code>IPC</code>)方式复杂，如管道、信号、消息队列、共享内存、套接字等。</li></ul></li><li><p>线程(<code>Thread</code>)：</p><ul><li>线程是操作系统任务调度的基本单元，进程内一个相对独立的、可调度的执行单元。同属一个进程的多个线程共享进程的资源。</li><li>线程的切换开销小于进程，因为同一个进程下的线程共享内存和资源，状态切换相对简单。</li><li>线程间通常可以直接通信，通信开销小。</li></ul></li><li><p>协程(<code>Coroutine</code>)：</p><ul><li>协程是一种用户态的轻量级线程，也叫“微线程”，是程序员显式进行调度的，非抢占，对操作系统透明。</li><li>协程的切换不涉及系统调用，开销极小。</li><li>协程允许有多个入口点，可以在任何地方暂停执行，并在必要时恢复执行，增强了程序的灵活性。</li></ul></li></ul><p>总结：进程、线程和协程，从上到下执行效率越来越高（开销越来越小），但管理和编程复杂度也相应提高。三者并无优劣之分，具体使用哪个需要根据实际情况和需求来判断。</p></details><h3 id="❓说说编程语言都开始支持的-async-await" tabindex="-1"><a class="header-anchor" href="#❓说说编程语言都开始支持的-async-await" aria-hidden="true">#</a> ❓说说编程语言都开始支持的 <code>async/await</code></h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>async/await</code> 是现今很多编程语言支持的一种特性。这两个关键词能够使异步操作（比如文件读取、网络请求、定时操作等）更像是同步操作，有助于简化代码逻辑和提高代码可读性。</p></blockquote><p>原理：<code>async</code> 用于声明一个函数为异步函数，异步函数内部可以使用 <code>await</code> 关键词来等待一个异步操作返回。<code>async</code> 函数返回的结果是一个 <code>Promise</code> 对象（或者类似的 <code>Future</code> 对象），这个对象表示的是一个尚未完成的异步操作。</p><p>优点：使用 <code>async/await</code> 编程模型，可以使得原本需要使用回调（<code>Callback</code>）或者 <code>Promise</code> 来处理的异步结果，能够以同步的方式来编写和读取，大大简化了异步编程的难度，提高代码的可读性和可维护性。</p><p>支持的编程语言：</p><ul><li><code>Python</code> : 在 <code>3.5</code> 版本中新增，内置了对异步 <code>IO</code> 的支持</li><li><code>JavaScript</code> : 在 <code>ES7</code> 规范中引入，现今主流的 <code>JS</code> 运行环境如浏览器和 <code>Node.js</code> 均已支持</li><li><code>TypeScript</code> : 微软开发的 <code>JavaScript</code> 的超集语言，支持 <code>async/await</code>，并可以编译到 <code>ES5/ES3</code> 等不支持这个特性的 <code>JS</code> 版本上运行</li><li><code>C#</code> : 在 <code>5.0</code> 版本中引入，主要用于异步 <code>IO</code> 操作和任务的等待</li><li><code>Dart</code> : <code>Google</code> 开发的一种语言，用于 <code>Flutter</code> 框架开发，支持 <code>async/await</code></li><li><code>Rust</code> : 新兴的系统编程语言，从 <code>1.39</code> 版本开始对 <code>async/await</code> 提供稳定支持。</li></ul></details><hr><h2 id="进程" tabindex="-1"><a class="header-anchor" href="#进程" aria-hidden="true">#</a> 进程</h2><h3 id="❓进程间如何通信" tabindex="-1"><a class="header-anchor" href="#❓进程间如何通信" aria-hidden="true">#</a> ❓进程间如何通信</h3><details class="hint-container details"><summary>💡</summary><p>操作系统为支持。</p><p><code>IPC</code>(<code>Inter-Process Communication</code>，进程间通信) 机制：</p><ul><li><p>管道（<code>Pipe</code>）：最古老的进程间通信方式，它可用于具有血缘关系的父子进程之间通信。数据在管道中只能从一端流入，从另一端流出，即单向流动。</p></li><li><p>命名管道（<code>Named Pipe</code>）：命名管道也叫 <code>FIFO</code>，它是管道的延伸和发展，可用于互不相关的进程间通信。</p></li><li><p>信号（<code>Signals</code>）：一种非常复杂的通信方式，用于通知接收进程某个事件已经发生。</p></li><li><p>消息队列（<code>Message Queue</code>）：由消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息量小，管道只能承载无格式字节流以及缓冲区大小受限等缺点。</p></li><li><p>信号量（<code>Semaphore</code>）：信号量主要作为进程间以及同一进程不同线程之间的同步手段。</p></li><li><p>共享内存（<code>Shared Memory</code>）：映射一段能被其他进程所访问的内存，适用于大量数据的读写。因为数据不需要在进程间来回复制，效率很高。</p></li><li><p>套接字（<code>Socket</code>）：套接字可以用于不同机器之间的进程通信。使用最广泛的 <code>IPC</code> 方式。</p></li><li><p>内存映射（<code>Memory Mapping</code>）：类似于共享内存，允许不同进程访问同一段物理内存。应用于大数据的处理和文件的读写。</p></li></ul></details><h3 id="❓最多能开辟多少个进程" tabindex="-1"><a class="header-anchor" href="#❓最多能开辟多少个进程" aria-hidden="true">#</a> ❓最多能开辟多少个进程</h3><details class="hint-container details"><summary>💡</summary><ul><li><p>在 <code>Linux</code> 系统中，可以使用 <code>ulimit -u</code> 命令来查看单个用户最多可以开辟的进程数。还可以通过读取/修改 <code>/proc/sys/kernel/pid_max</code> 文件，来查看/修改系统整体可以分配的最大进程 <code>ID</code>，从而了解系统最多可以支持的进程数。</p><blockquote><p>在早些年的 <code>Linux</code> 版本中，默认最大进程数为 <code>32768</code>，而在较新的版本中，这个数值通常大得多。</p></blockquote></li><li><p>在 <code>Windows</code> 系统中，系统同样有最大进程数的限制，但这个限制通常来说远大于普通 <code>PC</code> 的资源能应付的范围，因此实际上能开辟多少个进程，更多的是取决于系统的资源情况，当物理和虚拟内存被消耗光时，系统就不能再创建新的进程了。</p></li></ul></details><h3 id="❓进程-a-和进程-b-通过管道通信的话是在同一个管道吗" tabindex="-1"><a class="header-anchor" href="#❓进程-a-和进程-b-通过管道通信的话是在同一个管道吗" aria-hidden="true">#</a> ❓进程 A 和进程 B 通过管道通信的话是在同一个管道吗</h3><details class="hint-container details"><summary>💡</summary><p>管道（<code>Pipe</code>）是半双工的，数据只能向一个方向流动。也就是说，如果进程 A 需要发送数据给进程 B，同时进程 B 又需要发送数据给进程 A，那么就需要创建两个管道，一个管道用于 A 到 B 的通信，另一个管道用于 B 到 A 的通信。</p><p>结论：如果进程 A 和进程 B 需要进行双向的数据传输，那么是需要两个管道的，一个用于 A 发送数据至 B，另一个用于 B 发送数据至 A。</p></details><h3 id="❓为什么进程切换比线程切换开销要大" tabindex="-1"><a class="header-anchor" href="#❓为什么进程切换比线程切换开销要大" aria-hidden="true">#</a> ❓为什么进程切换比线程切换开销要大</h3><details class="hint-container details"><summary>💡</summary><ul><li><p>进程和线程主要的区别在于是否共享内存空间。每个进程都有单独的内存空间，而同一进程内的线程共享该进程的内存空间。因此，进程切换需要进行内存空间的切换，而线程切换不需要。</p></li><li><p>内存切换也意味着需要刷新 <code>CPU</code> 的缓存，因为后一个进程的内存和前一个进程的内存并不是同一块内存，刷新缓存就需要将这块内存的信息加载到 <code>CPU</code> 中，这个过程的开销是相当大的。</p></li><li><p>在进程切换过程中，操作系统需要保存和恢复更多的上下文信息。线程的上下文信息相对较少，保存和恢复的速度会更快。</p></li><li><p>进程切换涉及到的系统调用更多，比如需要经过调度器的调度，需要进行权限的检查等，而线程切换相对较少。</p></li></ul></details><hr><h2 id="线程" tabindex="-1"><a class="header-anchor" href="#线程" aria-hidden="true">#</a> 线程</h2><h3 id="❓线程间的通信方式" tabindex="-1"><a class="header-anchor" href="#❓线程间的通信方式" aria-hidden="true">#</a> ❓线程间的通信方式</h3><details class="hint-container details"><summary>💡</summary><p>线程间的通信方式主要依赖于它们共享的数据结构、变量等资源。</p><ul><li><p>锁机制：提供了保护共享数据访问的方式，用于控制哪个线程可以访问共享数据。</p><blockquote><p>例如，互斥锁（<code>Mutex</code>）用于保护共享资源，确保同一时间只有一个线程可以访问这个资源。</p></blockquote></li><li><p>信号量：主要用于同步线程的执行顺序。</p><blockquote><p>例如有两个线程，一个线程完成一项任务后，另一个线程才能开始任务，那么就需要用到信号量。</p></blockquote></li><li><p>条件变量：用于等待条件的满足以便继续执行。</p><blockquote><p>例如有两个线程，一个生产者线程和一个消费者线程，消费者线程可能需要等待生产者生产出产品后才能继续执行，那么就需要用到条件变量。</p></blockquote></li><li><p>事件：线程可以调用事件 <code>API</code> 来设置或者等待某个事件的发生，从而实现线程间的通信。</p></li><li><p>共享内存：线程间也可以通过共享内存来通信，同一进程的所有线程都共享该进程的全局内存，所以线程之间可以方便地访问相同的数据。</p></li></ul></details><h3 id="❓最多能开辟多少个线程" tabindex="-1"><a class="header-anchor" href="#❓最多能开辟多少个线程" aria-hidden="true">#</a> ❓最多能开辟多少个线程</h3><details class="hint-container details"><summary>💡</summary><ul><li><p>在 <code>Linux</code> 系统中，一个进程的线程个数同样受内存大小限制。理论上，一个进程中的线程数最大可以达到系统进程的上限，通过修改 <code>ulimit -u</code>选项可以改变这一限制。但是实际的数量会远小于这个值，因为每个线程都会消耗一定数量的系统资源。</p></li><li><p>在 <code>Windows</code> 系统中，一个进程内部线程的数量主要取决于可用的虚拟内存和线程堆栈大小。</p><blockquote><p>例如，如果使用默认的 <code>1MB</code> 线程堆栈大小，那么一个进程最多可以创建约 <code>2000</code> 个线程。如果减小线程堆栈的大小，可以创建更多的线程，但是过小的线程堆栈可能导致堆栈溢出。</p></blockquote></li></ul></details><h3 id="❓线程如果中途截断-资源会释放吗-进程呢" tabindex="-1"><a class="header-anchor" href="#❓线程如果中途截断-资源会释放吗-进程呢" aria-hidden="true">#</a> ❓线程如果中途截断，资源会释放吗，进程呢</h3><details class="hint-container details"><summary>💡</summary><ul><li><p>线程被中止，它所占用的线程栈和部分资源会被操作系统自动回收。但是由线程开辟的其他资源（如通过 <code>malloc</code> 或其他方式创建的堆内存，打开的文件、网络连接等）则不会自动释放。</p><blockquote><p>在线程结束运行（包括被意外终止）后，这些资源成为&quot;悬空资源&quot;，只能通过在其他线程中进行额外的操作进行清理。如果忽略这些资源的清理，就可能会造成内存泄漏等问题。</p></blockquote></li><li><p>进程在结束时，它占用的所有资源一般都会被操作系统自动回收。这包括进程的内存空间，进程打开的文件描述符，以及一些其他的资源。</p><blockquote><p>有一些特定类型的资源可能不会被自动清理，例如共享内存和一些系统级别的对象（如 <code>Windows</code> 下的命名管道和信号量等）。这种资源必须由创建它们的程序明确地删除，否则这些资源将永远留在系统中，占用不必要的系统资源。</p></blockquote></li></ul></details><h3 id="线程同步" tabindex="-1"><a class="header-anchor" href="#线程同步" aria-hidden="true">#</a> 线程同步</h3><h4 id="❓线程同步的目的是什么" tabindex="-1"><a class="header-anchor" href="#❓线程同步的目的是什么" aria-hidden="true">#</a> ❓线程同步的目的是什么</h4><details class="hint-container details"><summary>💡</summary><blockquote><p>线程同步的主要目的：为了防止多个线程在执行中对共享资源进行访问时，引起的数据不一致或状态混乱问题，或者说是为了保护共享数据的一致性和完整性。</p></blockquote><p>在多线程环境中，如果多个线程共享同一块资源（如内存区域、文件等），并且其中至少有一个线程对该资源进行写操作，那么就存在着线程间的竞态条件，即&quot;数据竞争&quot;，这种情况下若没有适当的同步机制，可能导致程序的结果出现错误。</p><p>通过同步，可以控制线程对共享资源的访问顺序，使得资源每次只被一个线程访问，或者在访问时有明确的顺序，防止数据混乱和状态不一致。另外，线程同步也可以用于让线程按照某种预定的顺序执行，如等待其他线程的结果，或等待某事件的发生等。</p><p>总结：线程同步在编制高并发、多线程的程序中是非常关键的，如操作系统、网络服务器、并行计算等领域中。使用得当，可以大大提升程序的效率和稳定性。</p></details><h4 id="❓常见的线程同步策略" tabindex="-1"><a class="header-anchor" href="#❓常见的线程同步策略" aria-hidden="true">#</a> ❓常见的线程同步策略</h4><details class="hint-container details"><summary>💡</summary><ul><li><p>互斥量（<code>Mutex</code>）：互斥量是一种用于保护共享资源的方法。当一个线程A访问一个被互斥量保护的资源时，它需要首先获得互斥量，访问结束后，需释放互斥量，然后其他的想要访问该资源的线程才能获得互斥量。</p></li><li><p>信号量（<code>Semaphore</code>）：信号量是一个用来控制一个或者多个线程访问共享资源的数值。当一个线程访问资源时，信号量的值就会递减，当信号量的值为 0 时，其他线程只能等待；只有当信号量的值大于 0 时，线程才可以访问资源。</p></li><li><p>读写锁（<code>ReadWrite Lock</code>）：读写锁允许多个线程同时读取数据，而写入则在整个过程中都无法被其他线程进行读写。</p></li><li><p>事件（<code>Event</code>）/条件变量（<code>Condition variables</code>）：事件或者条件变量是当某个线程改变了某种条件状态时，通知其他在等待这个条件的线程继续运行。</p></li><li><p>管理员管道（<code>Barriers</code>）： 管理员管道是一种多线程同步方法，它可以使在并行计算中的线程在继续执行前等待至其他所有的线程都执行到这一位置。</p></li></ul></details><h3 id="主线程" tabindex="-1"><a class="header-anchor" href="#主线程" aria-hidden="true">#</a> 主线程</h3><h4 id="❓主线程是相对于什么而言的" tabindex="-1"><a class="header-anchor" href="#❓主线程是相对于什么而言的" aria-hidden="true">#</a> ❓主线程是相对于什么而言的</h4><details class="hint-container details"><summary>💡</summary><p>主线程是相对于其他被该程序创建的子线程而言的。</p><ul><li><p>创建：</p><ul><li>主线程：当一个程序开始运行时，操作系统会为它创建一个线程，这个线程就是主线程。</li><li>子线程：在程序运行过程中，主线程可以再创建更多的子线程。</li></ul></li><li><p>运行：</p><ul><li>主线程：在多线程编程中，主线程通常负责执行程序的主要部分。</li><li>子线程：子线程则执行一些特定任务，例如进行输入/输出处理，进行计算等后台任务。</li></ul></li><li><p>结束：</p><ul><li>主线程：主线程在程序启动时自动创建，当主线程结束时，程序也就结束了。即使程序中还有其他的子线程在运行。</li><li>子线程：子线程执行特定任务结束，可以通过结束子线程。一旦主线程结束，所有其他子线程也会被强制结束。</li></ul></li></ul></details><hr><h2 id="线程安全" tabindex="-1"><a class="header-anchor" href="#线程安全" aria-hidden="true">#</a> 线程安全</h2><h3 id="❓什么是线程安全" tabindex="-1"><a class="header-anchor" href="#❓什么是线程安全" aria-hidden="true">#</a> ❓什么是线程安全</h3><details class="hint-container details"><summary>💡</summary><blockquote><p>线程安全：多线程环境下，当多个线程访问某一个对象或程序时，不会对程序的执行和对象所产生的影响进行破坏，始终表现出正确的行为，就称这段代码是线程安全的。</p></blockquote><p>🌰 考虑一个程序其运行环境有多个线程，这个程序会被多个线程共享并进行写操作，如果每次运行结果和预期的一样，那么就是线程安全的。反之，所谓的非线程安全就是程序的运行结果会受到多线程的影响。</p></details><h3 id="死锁" tabindex="-1"><a class="header-anchor" href="#死锁" aria-hidden="true">#</a> 死锁</h3><h4 id="❓死锁-deadlocks-vs-活锁-livelocks" tabindex="-1"><a class="header-anchor" href="#❓死锁-deadlocks-vs-活锁-livelocks" aria-hidden="true">#</a> ❓死锁(<code>deadlocks</code>) vs 活锁(<code>livelocks</code>)</h4><details class="hint-container details"><summary>💡</summary><blockquote><p>死锁：两个或更多的线程被永久阻塞，等待彼此采取行动的情况。这发生在每一个线程都在等待另一个线程所拥有的资源。它们都无法继续执行，因为每个线程都需要等待另一个线程释放资源。</p></blockquote><blockquote><p>活锁：两个或多个线程持续改变它们的状态以响应对方的状态，令它们都无法进行的情况。有点像两个人在门口互相礼让，结果都不能进门。活锁的线程能够执行，但不能完成有实际结果的任务，因为它们还在互相等待。</p></blockquote><p>主要区别：</p><ul><li>在死锁中，进程/线程都停止执行，而在活锁中，它们继续执行，但不能做出实质性的进行。</li><li>从外界观察，死锁看上去就像是没有运行的程序，而活锁则像是在做无尽的忙碌等待。</li><li>对于死锁，可以通过恢复某些资源将其解开。但对于活锁，这可能就需要更复杂的操作，例如需要终止整个过程或者是调整其执行顺序。</li></ul></details><h4 id="❓线程死锁的四个条件" tabindex="-1"><a class="header-anchor" href="#❓线程死锁的四个条件" aria-hidden="true">#</a> ❓线程死锁的四个条件</h4><details class="hint-container details"><summary>💡</summary><blockquote><p>死锁：多个线程永久性地阻塞，无法继续执行的状态。这经常发生在每个线程都在等待其他线程释放它们需要的资源，而这个资源又正被等待释放它的线程持有。</p></blockquote><p>四个必要条件共同存在：</p><ul><li>互斥条件：一个资源每次只能被一个线程使用，即在一段时间内某资源只为一个线程所占有，此时若有其他线程请求该资源，则请求者只能等待。</li><li>请求和保持条件：一个线程因请求占有其他资源而阻塞时，对已获得的资源保持不放。</li><li>不剥夺条件：线程已经获得的资源，在未使用完之前，不能被其他线程强行剥夺。</li><li>循环等待条件：若干资源之间形成一种头尾相接的循环等待资源关系。</li></ul><p>只要系统发生死锁，就存在以上的四个条件，也就是说只有当以上四个条件同时满足时，才可能引起系统产生死锁，只要系统去掉上述四个条件中的一个，就可以防止死锁的发生。</p></details><h4 id="❓避免死锁的方法" tabindex="-1"><a class="header-anchor" href="#❓避免死锁的方法" aria-hidden="true">#</a> ❓避免死锁的方法</h4><details class="hint-container details"><summary>💡</summary><blockquote><p>死锁是指两个或更多的进程在执行过程中，因争夺资源而造成的一种僵局（即进程无法进行下去），若无外力干涨，它们都将无法再向前推进。</p></blockquote><p>避免死锁的方法：</p><ul><li><p>预防死锁：预防死锁最直接的方法是破坏死锁产生的四个必要条件（互斥条件、占有并等待条件、不剥夺条件以及环路等待条件）中的一个或多个。</p><blockquote><p>例如，可以一次性请求所有所需的资源，而不是逐个申请，以避免占有并等待条件。</p></blockquote></li><li><p>避免死锁：可以通过资源的安全分配策略来避免死锁。操作系统可以使用银行家算法，先判断一次资源分配是否安全，即在分配后系统是否存在一条安全序列，如果存在，则分配，否则，不分配。</p></li><li><p>检测和恢复：这需要操作系统定期地检查资源的分配和进程的请求，如果检测到循环等待情况，说明发生了死锁，这时系统需要进行恢复操作来破除死锁，比如暂停或撤销部分进程。</p></li><li><p>死锁的牺牲者：选择一个或多个死锁进程作为牺牲品，强制结束它们以释放资源，打破死锁条件。</p></li></ul></details><h4 id="❓解释一下银行家算法" tabindex="-1"><a class="header-anchor" href="#❓解释一下银行家算法" aria-hidden="true">#</a> ❓解释一下银行家算法</h4><details class="hint-container details"><summary>💡</summary><blockquote><p>银行家算法是一种防止系统进程发生死锁的算法，这种算法考虑到了系统是否有足够的可用资源去满足进程对资源的需求，以及满足需求后是否在系统中仍有足够的资源来满足其它进程的资源要求。如果满足，系统就会分配，如果不满足，那么系统就不会分配资源，进程就必须等待，防止系统进入到不安全状态。</p></blockquote><p>算法原理：</p><ul><li><p>当一个进程对资源进行请求时，银行家算法会先测试分配后系统是否安全，如果是则分配，否则就让进程等待。</p></li><li><p>判断系统是否安全的方法是：查看系统是否存在一条安全序列。</p><blockquote><p>安全序列：系统能为序列中的每一个进程依次分配其所需的资源，直到满足它的最大请求，进程运行完，释放资源后，可满足下一个序列中进程的请求，直到满足所有进程完成并释放所有资源。</p></blockquote></li></ul><p>注：银行家算法的名称来源于银行贷款的类比，考虑银行作为资源所有者，而客户请求贷款即为进程请求资源，银行必须保证自己贷款后所剩的资金能满足其它客户的最大贷款请求，以避免出现破产的情况。</p></details><h3 id="原子操作" tabindex="-1"><a class="header-anchor" href="#原子操作" aria-hidden="true">#</a> 原子操作</h3><h4 id="❓知道原子操作吗-有哪些原子操作" tabindex="-1"><a class="header-anchor" href="#❓知道原子操作吗-有哪些原子操作" aria-hidden="true">#</a> ❓知道原子操作吗？有哪些原子操作？</h4><details class="hint-container details"><summary>💡</summary><p>原子操作是不可分割的操作，即在进行这个操作时，不会被任何其他的活动所中断。在多线程编程中，原子操作是一种防止数据竞争或避免引起并发错误的主要技术。</p><p>下面是一些常见的原子操作：</p><ol><li>在内存中加载一个变量（load）</li><li>存储一个变量（store）</li><li>交换两个变量的值（swap）</li><li>比较并交换（compare-and-swap，简称CAS），它包含以下步骤：比较指定内存位置的值和预期值，如果相等，则用新的值替换原位置的值。</li><li>获得并递增（fetch-and-increment）、获得并递减（fetch-and-decrement）等。</li><li>原子读修改写（read-modify-write），即先读出某个内存位置的值，再对其进行修改，最后将修改后的结果写入原内存位置。</li></ol><p>原子操作在跨线程和跨进程环境中尤其重要，因为它们可以用于实现无锁的线程安全操作，或构建更复杂的同步机制，如互斥锁和信号量等。在实现并发并行编程的数据安全性方面有着重要的作用。在各类编程语言中都有对原子操作的支持，如Java中的Atomic包，C++中的atomic库等。</p></details><h4 id="❓cas-了解吗" tabindex="-1"><a class="header-anchor" href="#❓cas-了解吗" aria-hidden="true">#</a> ❓<code>CAS</code> 了解吗</h4><details class="hint-container details"><summary>💡</summary><ul><li><p>概念知识：</p><blockquote><p><code>CAS</code>(Compare And Swap) : 比较并交换，是一种实现原子的机制，可以保证一个变量在读、写时的原子性。是一种乐观锁技术，适用于读多写少的情况。</p></blockquote><ul><li>优点：不需要预先加锁，避免了加锁的开销，</li><li>缺点：在数据冲突严重的情况下，CAS可能出现“自旋”的现象，即反复读取数据尝试更新。</li></ul></li><li><p>基本原理：</p><blockquote><p>比较三个操作数，<code>V (内存位置值)、A (原值)、B (新值)</code>。比较 <code>V</code> 与 <code>A</code>，如果相等则将更新内存位置值交换为 <code>B</code>，如果不相等则不做交换操作。最后无论是否进行交换操作，都返回该位置的值。</p></blockquote><p><code>线程1</code> 读取值后，在进行写时，将读取的值与要写入内存位置的值进行比较，这样如果 <code>线程2</code> 在 <code>线程1</code> 写之前修改了数据，那么比较的时候就会不相等，也就不能写入保证了原子性。</p></li><li><p>🐛<code>ABA</code> 问题 (“自旋”现象)：</p><blockquote><p><code>线程2</code> 先将 <code>A</code> 修改为了 <code>B</code>，又将 <code>B</code> 修改为了 <code>A</code>，这样 <code>线程1</code> 再进行比较时还是相等，但是其实数据已经是修改过了的。</p></blockquote></li><li><p>💡解决方案：版本号，也就是每次修改数据时，都会加上一个版本号。</p><blockquote><p>原始版本号为 1，而 <code>线程1</code> 读取数据时版本号为 1，当 <code>线程2</code> 进行 <code>ABA</code> 数据修改后，版本号增长为了 3，则 <code>线程1</code> 再进行比较时，就会知道<code> A</code> 是修改后的了，也就不能写入。</p></blockquote></li></ul></details><h3 id="情景题" tabindex="-1"><a class="header-anchor" href="#情景题" aria-hidden="true">#</a> 情景题</h3><h4 id="❓对于多线程进行-for-循环自加-会出现什么结果-既然结果不确定-那结果的范围是什么-为什么会造成这种结果" tabindex="-1"><a class="header-anchor" href="#❓对于多线程进行-for-循环自加-会出现什么结果-既然结果不确定-那结果的范围是什么-为什么会造成这种结果" aria-hidden="true">#</a> ❓对于多线程进行 <code>for</code> 循环自加，会出现什么结果？既然结果不确定，那结果的范围是什么？为什么会造成这种结果？</h4><details class="hint-container details"><summary>💡</summary><p>对于多线程进行 <code>for</code> 循环自加，结果将是不确定的。这是因为多个线程可能会同时对同一块内存进行写操作，造成“数据竞争”或“竞态条件”。数据读取和写入是非原子操作，即它们不是一气呵成的，中间的状态可以被其他线程观察到。这意味着两条（或更多）指令可能会交错执行，导致结果不可预期。</p><p>假设我们有两个线程，每个线程都尝试对同一个变量x进行1000次自加操作，初始时x=0。理想状态下，我们期望结果是2000。但实际上，没有适当的线程同步机制，结果可能会小于2000。</p><p>主要原因是，<code>x++</code>并非原子操作，实际上包含三步：读取x的值，将这个值加一，然后将新的值写回x。如果两个线程一起执行这个操作，可能就会出现竞态条件。例如，线程A读取了x的值（假设为0），此时线程B也读取了x的值（还是0）。然后两个线程分别计算<code>x+1</code>，并将结果（1）写回。本来应该加2次的，结果只加了1次。</p><p>因此，对于多线程 <code>for</code> 循环自加的结果，其范围可能在1000（每次加1被覆盖）到2000（无竞态条件）之间，具体结果取决于线程的调度和交错执行的情况。为了避免数据竞争，可以利用多线程编程中的各种同步机制，如互斥锁、信号量、原子操作等。</p></details><hr><h2 id="线程锁" tabindex="-1"><a class="header-anchor" href="#线程锁" aria-hidden="true">#</a> 线程锁</h2><h3 id="❓线程锁有哪些" tabindex="-1"><a class="header-anchor" href="#❓线程锁有哪些" aria-hidden="true">#</a> ❓线程锁有哪些</h3><details class="hint-container details"><summary>💡</summary><ul><li><p>自旋锁（<code>Spin-lock</code>）：当试图获取自旋锁时，如果锁已经被占用，线程并不会被阻塞挂起，而是忙等待，不断尝试获取锁。适用于保护的临界区时间非常短的情况。</p></li><li><p>互斥锁（<code>Mutex-lock</code>）：与自旋锁不同，如果互斥锁已经被占用，尝试获取锁的线程会进入睡眠状态。</p></li><li><p>读写锁（<code>Read-Write Lock</code>）：特殊的锁，允许多个读者同时访问，但是在写者访问时，所有的其他读者和写者都会被阻塞。</p></li><li><p>递归锁（<code>Recursive Lock</code>）：允许同一个线程对用一个互斥体多次上锁。</p></li></ul></details><h3 id="❓各种的线程锁的常见使用场景" tabindex="-1"><a class="header-anchor" href="#❓各种的线程锁的常见使用场景" aria-hidden="true">#</a> ❓各种的线程锁的常见使用场景</h3><details class="hint-container details"><summary>💡</summary><ul><li><p>互斥锁（<code>Mutex</code>）：用于保护可同时被多个线程访问而引发问题的代码段（临界区）。适用于竞争不激烈，临界区有长有短的情况。</p></li><li><p>自旋锁（<code>Spinlock</code>）：用于中断处理程序以及高速缓存等内存访问。一般在保证有很高的获得锁成功率，且执行代码时间较短的情况下使用。</p></li><li><p>读写锁（<code>Read-Write Lock</code>）：适用于读取操作明显多于写入操作的情况。允许多个线程同时对数据进行读取，提高系统处理效率。</p></li><li><p>递归锁（<code>Recursive Mutex</code>）：可以在同一个线程内多次获取同一把锁，适用于递归函数中需要使用锁的情况。</p></li><li><p>条件变量（<code>Condition variables</code>）：用在某些线程需要等待特定条件才能继续执行的场景中。</p></li><li><p>信号量（<code>Semaphore</code>）：主要使用在多个线程同步以及多个线程访问数量有限的资源场景。</p></li><li><p>屏障（<code>Barrier</code>）：用于多个线程同时等待某个事件发生的场景，例如并行计算中的同步点等。</p></li></ul></details><h3 id="❓线程锁的底层实现" tabindex="-1"><a class="header-anchor" href="#❓线程锁的底层实现" aria-hidden="true">#</a> ❓线程锁的底层实现</h3><details class="hint-container details"><summary>💡</summary><p>线程锁的底层实现通常依赖于操作系统提供的原子操作和系统调用。</p><ul><li><p>互斥锁（<code>Mutex</code>）：主要依赖操作系统的系统调用。</p><blockquote><p>当一个线程试图获取已经被锁定的互斥锁时，该线程会被操作系统挂起，并加入等待队列，在锁被释放时，等待队列中的一个或多个线程会被唤醒并重新竞争锁。</p></blockquote><ul><li>在 <code>Linux</code> 系统中，<code>pthread</code> 库提供了互斥锁的实现。</li><li>在 <code>Windows</code> 系统中， <code>CriticalSection</code> 和Mutex函数提供了互斥锁的实现。</li></ul></li><li><p>自旋锁（Spinlock）：自旋锁的实现主要依赖硬件提供的原子操作（比如 <code>x86</code> 架构下的 <code>cmpxchg</code> 指令）。</p><blockquote><p>当一个线程试图获取已经被锁定的自旋锁时，该线程会循环执行原子比较并交换操作，直到成功获取锁。由于自旋锁的实现不需要系统调用，所以其效率比互斥锁更高，但是在锁被长时间持有或者竞争激烈的情况下，自旋锁可能会造成 <code>CPU</code> 资源的浪费。</p></blockquote></li></ul></details><h3 id="❓互斥锁涉及了两次上下文切换-那么线程切换是用在-cpu-密集型好还是-io-密集型好" tabindex="-1"><a class="header-anchor" href="#❓互斥锁涉及了两次上下文切换-那么线程切换是用在-cpu-密集型好还是-io-密集型好" aria-hidden="true">#</a> ❓互斥锁涉及了两次上下文切换，那么线程切换是用在 <code>CPU</code> 密集型好还是 <code>IO</code> 密集型好</h3><details class="hint-container details"><summary>💡</summary><blockquote><p>线程切换（<code>Context Switch</code>）是操作系统处理管理线程的一种方式，当一个线程在 <code>CPU</code> 上的执行时间片结束了，或者它需要等待一个事件（如 <code>I/O</code> 操作）完成时，操作系统可能会选择另一个线程来运行。这种切换线程执行上下文的行为被称为线程切换。</p></blockquote><ul><li><p><code>CPU</code> 密集型：主要消耗的是 <code>CPU</code> 资源，少数 <code>I/O</code> 操作，线程切换频繁会造成不必要的开销，因为每次切换都需要保存和恢复线程上下文，这不利于 <code>CPU</code> 密集型任务的执行。</p></li><li><p><code>I/O</code> 密集型：需要进行大量的 <code>I/O</code> 操作，<code>I/O</code> 操作完成的时间往往比 <code>CPU</code> 计算要长得多。假如一个线程在等待 <code>I/O</code> 操作完成的时候，<code>CPU</code> 就没有在做任何事情。这种情况就不如将 <code>CPU</code> 交给另一个线程来利用，这样的话，虽然需要线程切换，但使得 <code>CPU</code> 得到了更好的利用。</p></li></ul><p>总结：线程切换更适合用在 <code>I/O</code> 密集型任务，这样可以使得 <code>CPU</code> 在等待 <code>I/O</code> 时仍能处理其他任务，提高了 <code>CPU</code> 的利用率。但是这并不是说线程切换只能在 <code>I/O</code> 密集型任务中使用，对于一些时间片轮转等的调度算法，也会在 <code>CPU</code> 密集型任务中进行线程切换。只不过线程切换的开销在 <code>CPU</code> 密集型任务中可能会更明显。</p></details><h3 id="❓解释一下悲观锁和乐观锁" tabindex="-1"><a class="header-anchor" href="#❓解释一下悲观锁和乐观锁" aria-hidden="true">#</a> ❓解释一下悲观锁和乐观锁</h3><details class="hint-container details"><summary>💡</summary><blockquote><p>悲观锁和乐观锁都是数据库并发控制的两种技术，主要用于解决多个事务对同一数据的并发控制问题。</p></blockquote><ul><li><p>悲观锁（<code>Pessimistic Lock</code>），假设最坏的情况，总是假设最坏的情况将发生，因此在整个数据处理过程中，将数据处于锁定状态。悲观锁主要是在读写数据之前先获得锁，确保在整个数据处理过程中数据不会被其他事务修改。但是这样会导致资源的等待时间增加，可能引起系统性能问题。</p></li><li><p>乐观锁（<code>Optimistic Lock</code>）持相反的观点，总是假设最好的情况，认为数据在大部分时间内都不会造成冲突，所以原则上它并不会产生数据的锁定。如果在数据提交时检测到其他事务已经进行了修改，则进行回滚。乐观锁避免了长时间的数据锁定，但是可能会带来更高的回滚开销。</p></li></ul><p>总结：悲观锁和乐观锁各有优缺点，需要根据实际应用环境中的并发修改可能性选择使用。在没有冲突时，乐观锁效果更好；反之，悲观锁效果更好。</p></details><h3 id="信号量" tabindex="-1"><a class="header-anchor" href="#信号量" aria-hidden="true">#</a> 信号量</h3><h4 id="❓信号量和锁的关系" tabindex="-1"><a class="header-anchor" href="#❓信号量和锁的关系" aria-hidden="true">#</a> ❓信号量和锁的关系</h4><details class="hint-container details"><summary>💡</summary><p>信号量（<code>Semaphore</code>）和锁是两种用于控制多线程并发和同步的机制。</p><p>作用：</p><ul><li><p>锁：用于保护临界区（即一次只能有一个线程访问的代码段），防止出现数据不一致的问题。</p><blockquote><p>例如，互斥锁（<code>Mutex</code>）可以确保同一时间只有一个线程正在执行某个临界区。</p></blockquote></li><li><p>信号量：用于控制某个资源的可用数量。</p><blockquote><p>例如，如果有一个资源有 N 个可用的实例，可以通过一个初始为 N 的信号量来控制对它的并发访问。</p></blockquote></li></ul><p>关系：</p><ul><li><p>锁在某种程度上可以被看作是一个初始值为 1 的信号量，也就是说，锁其实是信号量的一个特例。当线程持有锁时，它实际上是从信号量中获取了一个资源，当线程释放锁时，它实际上是向信号量返回了一个资源。</p></li><li><p>简单互斥锁在功能上不如信号量强大。一个信号量可以控制多个线程对共享资源的访问，而简单的互斥锁通常只允许一个线程在任何时候访问资源。</p></li></ul></details><h4 id="❓信号量有什么功能是锁做不到的" tabindex="-1"><a class="header-anchor" href="#❓信号量有什么功能是锁做不到的" aria-hidden="true">#</a> ❓信号量有什么功能是锁做不到的</h4><details class="hint-container details"><summary>💡</summary><ul><li><p>互斥锁主要用于保护临界区，确保同一时间只有一个线程能进入临界区进行操作，主要用于实现乐观并发控制。所以互斥锁是一个二元的信号量，其值只能为 0 或 1。</p></li><li><p>信号量则有更大的灵活性，它的值可以大于 1，意味着它可以控制对一个资源的多次访问。</p><blockquote><p>例如，如果有一个有 3 个空闲位置的停车场，可以用一个初始值为 3 的信号量来控制它。每当有车辆进入时，信号量减 1，每当有车辆离开时，信号量加 1。当信号量为 0 时，新来的车辆将会等待，直到有车辆离开为止。这是锁无法实现的。</p></blockquote></li></ul><p>总结：互斥锁主要用于实现 “资源的排他性访问”；而信号量除了可以实现 “资源的排他性访问”，还可以实现对 “有限资源的并发控制” 以及线程间的同步操作。</p></details><h3 id="锁设计" tabindex="-1"><a class="header-anchor" href="#锁设计" aria-hidden="true">#</a> 锁设计</h3><h4 id="❓如果让你设计读写锁-你怎么设计" tabindex="-1"><a class="header-anchor" href="#❓如果让你设计读写锁-你怎么设计" aria-hidden="true">#</a> ❓如果让你设计读写锁，你怎么设计</h4><details class="hint-container details"><summary>💡</summary><p>读写锁设计的关键点是允许多个读线程同时进行操作，但在有写线程时，写操作有优先权，并且只允许一个写线程进行操作。</p><p>设计思路：</p><ul><li><p>定义两个互斥锁（<code>mutex</code>）和一个等待读线程的数量（<code>readCount</code>）。</p><ul><li>一个互斥锁用于保护读写锁的状态（<code>stateLock</code>），</li><li>另外一个互斥锁用于保护等待读线程的数量（<code>readCountLock</code>）。</li><li>在初始化时，<code>stateLock</code> 被锁定，<code>readCountLock</code> 被解锁，<code>readCount</code> 设为 0。</li></ul></li><li><p>当一个读线程试图获取锁时，首先获得 <code>readCountLock</code>，然后将 <code>readCount</code> 加 1。如果这是第一个读线程（即 <code>readCount</code> 从 0 变为 1），则尝试获取 <code>stateLock</code>。获取成功后，释放 <code>readCountLock</code>。此时，可以开始读操作。</p></li><li><p>当一个读线程完成读操作并试图释放锁时，首先获得 <code>readCountLock</code>，然后将 <code>readCount</code> 减 1。如果这是最后一个读线程（即 <code>readCount</code> 从 1 变为 0），则释放 <code>stateLock</code>。然后，释放 <code>readCountLock</code>。</p></li><li><p>当一个写线程试图获取锁时，直接尝试获取 <code>stateLock</code>。获取成功后，可以开始写操作。</p></li><li><p>当一个写线程完成写操作并试图释放锁时，直接释放 <code>stateLock</code>。</p></li></ul><p>注意，为了避免出现读线程饥饿（即写线程连续获得锁，导致等待的读线程无法进行读操作）的情况，可以通过增加一个等待写线程的数量（<code>writeCount</code>）和相应的互斥锁（<code>writeCountLock</code>）来进行限制。具体的，当一个读线程试图获取锁但发现有等待的写线程时，可以选择等待，直到没有等待的写线程为止。</p></details><h4 id="❓如果没有看门狗机制你应该如何解决锁过期的问题" tabindex="-1"><a class="header-anchor" href="#❓如果没有看门狗机制你应该如何解决锁过期的问题" aria-hidden="true">#</a> ❓如果没有看门狗机制你应该如何解决锁过期的问题</h4><details class="hint-container details"><summary>💡</summary><p>看门狗通常用于解决分布式系统中的分布式锁过期问题。</p><blockquote><p>看门狗（<code>Watchdog</code>）机制是一种常见的硬件或软件设施，用于检测系统故障并采取恢复措施，确保系统可靠和稳定运行。</p></blockquote><p>工作原理：</p><ul><li><p>在系统启动后，看门狗定时器开始计时。时间间隔是有系统设置的，例如1秒钟。</p></li><li><p>在正常运行时，系统周期性地（比如每0.5秒钟）向看门狗发送一个“我还活着”的信号，也叫做“喂狗”操作，重置看门狗定时器。</p></li><li><p>如果系统运行发生问题，无法正常喂狗，比如有某个重要的线程卡死了，那么看门狗定时器会继续计时，直到计时时间结束。</p></li><li><p>当看门狗定时器时间到了，如果还未收到系统“喂狗”的信号，它就判断系统发生了故障，然后执行预定义的恢复操作。最常见的恢复操作是硬重启系统。</p></li></ul><p>如果环境中没有看门狗机制的方案：</p><ul><li><p>锁超时：为锁设置一个合理的超时时间，而非永久锁定。这样避免因为执行期间发生异常导致锁永久持有，影响其它请求获取锁阻塞等待。</p></li><li><p>锁续期：在获取锁的线程中定期检查，如果锁即将到期，且任务线程并未结束，则重新设置锁的过期时间。</p></li><li><p>检查-设置模式：只有真正拥有锁的进程才能对锁进行操作。这可以通过在释放锁时检查进程是否仍然拥有该锁来实现。这需要原子操作支持，<code>Redis</code> 的 <code>Lua</code> 脚本可以实现。</p></li><li><p>闹钟模式：设置一个单独的定时任务（类似看门狗），定时检查超时的锁，然后释放。</p></li></ul></details><h4 id="❓说一说分布式锁" tabindex="-1"><a class="header-anchor" href="#❓说一说分布式锁" aria-hidden="true">#</a> ❓说一说分布式锁</h4><details class="hint-container details"><summary>💡</summary><blockquote><p>分布式锁是在分布式环境（多个服务器、多个进程）中，对共享资源进行访问控制的一种机制。在进行一些需要保持互斥性（即同一时间只能有一个任务执行）的操作时，为了避免并发导致的数据不一致，需要使用分布式锁来保证这种互斥性。</p></blockquote><p>分布式锁方案：</p><ul><li><p>基于数据库的分布式锁：通过在数据库中创建一个锁表，表中包含了锁的信息。当一个进程需要获取锁时，会向这个表中插入一行数据，如果插入成功，那么就获取了锁。当进程完成操作后，会删除这行数据释放锁。</p><ul><li>优点：实现简单。</li><li>缺点：存在性能瓶颈和单点故障问题。</li></ul></li><li><p>基于 <code>Redis</code> 的分布式锁：利用 <code>Redis</code> 的 <code>setnx</code>（<code>SET if Not eXists</code>）命令原子性，尝试向某个 <code>key</code> 写入数据，如果写入成功则获取锁，结束后删除 <code>key</code> 释放锁。使用 <code>Lua</code> 脚本可以更安全地实现锁的释放。</p><ul><li>优点：性能好，适合轻量级锁。</li><li>缺点：无法防止锁被长时间占用的问题。</li></ul></li><li><p>基于 <code>ZooKeeper</code> 的分布式锁：<code>ZooKeeper</code> 是一个开放源码的分布式协调服务，它是集群的管理者，监视着集群中各个节点的状态根据节点提交的反馈进行下一步合理操作。通过其提供的临时有序节点可以实现公平的分布式锁。</p><ul><li>优点：能实现公平锁，同时有较好的容错性和可靠性。</li><li>缺点：使用相对复杂，性能较 <code>Redis</code> 锁差。</li></ul></li><li><p>基于分布式一致性算法（如<code>Paxos</code>，<code>Raft</code>）实现的分布式锁：这类锁通常会在分布式存储系统中内置，如 <code>etcd</code> 的分布式锁。</p><ul><li>优点：安全性、可靠性极高，可以提供阻塞锁和租约锁。</li><li>缺点：使用复杂，性能一般。</li></ul></li></ul></details><hr><h2 id="线程设计" tabindex="-1"><a class="header-anchor" href="#线程设计" aria-hidden="true">#</a> 线程设计</h2><h3 id="❓一个线程打印奇数-一个线程打印偶数-打印-1-100" tabindex="-1"><a class="header-anchor" href="#❓一个线程打印奇数-一个线程打印偶数-打印-1-100" aria-hidden="true">#</a> ❓一个线程打印奇数，一个线程打印偶数，打印 1~100</h3>',84),f={class:"hint-container details"},w=n("summary",null,"💡",-1),x=n("p",null,"主要通过线程间的同步和互斥，确保他们交替打印奇数和偶数。",-1),g=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"PrintOddEven"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token keyword"},"int"),s(" count"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token keyword"},"final"),s(),n("span",{class:"token class-name"},"Object"),s(" lock "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Object"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"PrintOddEven"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" count"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("count "),n("span",{class:"token operator"},"="),s(" count"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token comment"},"// 打印奇数"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"printOdd"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" count"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"+="),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"synchronized"),n("span",{class:"token punctuation"},"("),s("lock"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                `),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Odd Thread: "'),s(),n("span",{class:"token operator"},"+"),s(" i"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                lock`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"notifyAll"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                `),n("span",{class:"token keyword"},"try"),s(),n("span",{class:"token punctuation"},"{"),s(`
                    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("i "),n("span",{class:"token operator"},"<"),s(" count "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                        lock`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"wait"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                    `),n("span",{class:"token punctuation"},"}"),s(`
                `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"catch"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"InterruptedException"),s(" e"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                    e`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"printStackTrace"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                `),n("span",{class:"token punctuation"},"}"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token comment"},"// 打印偶数"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"printEven"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<="),s(" count"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"+="),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"synchronized"),n("span",{class:"token punctuation"},"("),s("lock"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                `),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Even Thread: "'),s(),n("span",{class:"token operator"},"+"),s(" i"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                lock`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"notifyAll"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                `),n("span",{class:"token keyword"},"try"),s(),n("span",{class:"token punctuation"},"{"),s(`
                    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("i "),n("span",{class:"token operator"},"<"),s(" count"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                        lock`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"wait"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                    `),n("span",{class:"token punctuation"},"}"),s(`
                `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"catch"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"InterruptedException"),s(" e"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                    e`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"printStackTrace"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                `),n("span",{class:"token punctuation"},"}"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(" args"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token class-name"},"PrintOddEven"),s(" printer "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"PrintOddEven"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"100"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token class-name"},"Thread"),s(" oddThread "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Thread"),n("span",{class:"token punctuation"},"("),s("printer"),n("span",{class:"token operator"},"::"),n("span",{class:"token function"},"printOdd"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token class-name"},"Thread"),s(" evenThread "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Thread"),n("span",{class:"token punctuation"},"("),s("printer"),n("span",{class:"token operator"},"::"),n("span",{class:"token function"},"printEven"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

        oddThread`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"start"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        evenThread`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"start"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),_=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(` threading

`),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"ZeroEvenOdd"),n("span",{class:"token punctuation"},":"),s(`
    `),n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"__init__"),n("span",{class:"token punctuation"},"("),s("self"),n("span",{class:"token punctuation"},","),s(" n"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),s(`
        self`),n("span",{class:"token punctuation"},"."),s("n "),n("span",{class:"token operator"},"="),s(` n
        self`),n("span",{class:"token punctuation"},"."),s("num "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1"),s(`
        `),n("span",{class:"token comment"},"# 使用条件锁控制奇数偶数交替打印"),s(`
        self`),n("span",{class:"token punctuation"},"."),s("cond "),n("span",{class:"token operator"},"="),s(" threading"),n("span",{class:"token punctuation"},"."),s("Condition"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`

    `),n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"print_number"),n("span",{class:"token punctuation"},"("),s("self"),n("span",{class:"token punctuation"},","),s(" number"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),s(`
        `),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("number"),n("span",{class:"token punctuation"},")"),s(`

    `),n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"odd"),n("span",{class:"token punctuation"},"("),s("self"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),s(`
        `),n("span",{class:"token keyword"},"with"),s(" self"),n("span",{class:"token punctuation"},"."),s("cond"),n("span",{class:"token punctuation"},":"),s(`
            `),n("span",{class:"token keyword"},"for"),s(" _ "),n("span",{class:"token keyword"},"in"),s(),n("span",{class:"token builtin"},"range"),n("span",{class:"token punctuation"},"("),s("self"),n("span",{class:"token punctuation"},"."),s("n "),n("span",{class:"token operator"},"//"),s(),n("span",{class:"token number"},"2"),s(),n("span",{class:"token operator"},"+"),s(" self"),n("span",{class:"token punctuation"},"."),s("n "),n("span",{class:"token operator"},"%"),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),s(`
                `),n("span",{class:"token keyword"},"while"),s(" self"),n("span",{class:"token punctuation"},"."),s("num "),n("span",{class:"token operator"},"%"),s(),n("span",{class:"token number"},"2"),s(),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},":"),s(`
                    self`),n("span",{class:"token punctuation"},"."),s("cond"),n("span",{class:"token punctuation"},"."),s("wait"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
                self`),n("span",{class:"token punctuation"},"."),s("print_number"),n("span",{class:"token punctuation"},"("),s("self"),n("span",{class:"token punctuation"},"."),s("num"),n("span",{class:"token punctuation"},")"),s(`
                self`),n("span",{class:"token punctuation"},"."),s("num "),n("span",{class:"token operator"},"+="),s(),n("span",{class:"token number"},"1"),s(`
                self`),n("span",{class:"token punctuation"},"."),s("cond"),n("span",{class:"token punctuation"},"."),s("notify_all"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`

    `),n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"even"),n("span",{class:"token punctuation"},"("),s("self"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),s(`
        `),n("span",{class:"token keyword"},"with"),s(" self"),n("span",{class:"token punctuation"},"."),s("cond"),n("span",{class:"token punctuation"},":"),s(`
            `),n("span",{class:"token keyword"},"for"),s(" _ "),n("span",{class:"token keyword"},"in"),s(),n("span",{class:"token builtin"},"range"),n("span",{class:"token punctuation"},"("),s("self"),n("span",{class:"token punctuation"},"."),s("n "),n("span",{class:"token operator"},"//"),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),s(`
                `),n("span",{class:"token keyword"},"while"),s(" self"),n("span",{class:"token punctuation"},"."),s("num "),n("span",{class:"token operator"},"%"),s(),n("span",{class:"token number"},"2"),s(),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},":"),s(`
                    self`),n("span",{class:"token punctuation"},"."),s("cond"),n("span",{class:"token punctuation"},"."),s("wait"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
                self`),n("span",{class:"token punctuation"},"."),s("print_number"),n("span",{class:"token punctuation"},"("),s("self"),n("span",{class:"token punctuation"},"."),s("num"),n("span",{class:"token punctuation"},")"),s(`
                self`),n("span",{class:"token punctuation"},"."),s("num "),n("span",{class:"token operator"},"+="),s(),n("span",{class:"token number"},"1"),s(`
                self`),n("span",{class:"token punctuation"},"."),s("cond"),n("span",{class:"token punctuation"},"."),s("notify_all"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`


`),n("span",{class:"token keyword"},"if"),s(" __name__ "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token string"},'"__main__"'),n("span",{class:"token punctuation"},":"),s(`
    foo `),n("span",{class:"token operator"},"="),s(" ZeroEvenOdd"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"100"),n("span",{class:"token punctuation"},")"),s(`
    threading`),n("span",{class:"token punctuation"},"."),s("Thread"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token operator"},"="),s("foo"),n("span",{class:"token punctuation"},"."),s("odd"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),s("start"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
    threading`),n("span",{class:"token punctuation"},"."),s("Thread"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token operator"},"="),s("foo"),n("span",{class:"token punctuation"},"."),s("even"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),s("start"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),q=n("div",{class:"language-swift line-numbers-mode","data-ext":"swift"},[n("pre",{class:"language-swift"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token class-name"},"Foundation"),s(`

`),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"PrintOddEven"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token keyword"},"var"),s(" max"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"Int"),s(`
    `),n("span",{class:"token keyword"},"var"),s(" count "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" semaphore1 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"DispatchSemaphore"),n("span",{class:"token punctuation"},"("),s("value"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" semaphore2 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"DispatchSemaphore"),n("span",{class:"token punctuation"},"("),s("value"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(`

    `),n("span",{class:"token keyword"},"init"),n("span",{class:"token punctuation"},"("),s("max"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"Int"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"self"),n("span",{class:"token punctuation"},"."),s("max "),n("span",{class:"token operator"},"="),s(` max
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token keyword"},"func"),s(),n("span",{class:"token function-definition function"},"printOdd"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"while"),s(" count "),n("span",{class:"token operator"},"<="),s(" max "),n("span",{class:"token punctuation"},"{"),s(`
            semaphore1`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"wait"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s("  "),n("span",{class:"token comment"},"// if semaphore1's value <= 0, then block"),s(`
            `),n("span",{class:"token keyword"},"if"),s(" count "),n("span",{class:"token operator"},"<="),s(" max "),n("span",{class:"token punctuation"},"{"),s(`
                `),n("span",{class:"token function"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal"},[n("span",{class:"token string"},'"'),n("span",{class:"token interpolation-punctuation punctuation"},"\\("),n("span",{class:"token interpolation"},[n("span",{class:"token class-name"},"Thread"),n("span",{class:"token punctuation"},"."),s("current")]),n("span",{class:"token interpolation-punctuation punctuation"},")"),n("span",{class:"token string"}," "),n("span",{class:"token interpolation-punctuation punctuation"},"\\("),n("span",{class:"token interpolation"},"count"),n("span",{class:"token interpolation-punctuation punctuation"},")"),n("span",{class:"token string"},'"')]),n("span",{class:"token punctuation"},")"),s(`
                count `),n("span",{class:"token operator"},"+="),s(),n("span",{class:"token number"},"1"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
            semaphore2`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"signal"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s("  "),n("span",{class:"token comment"},"// semaphore2's value += 1"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token keyword"},"func"),s(),n("span",{class:"token function-definition function"},"printEven"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"while"),s(" count "),n("span",{class:"token operator"},"<="),s(" max "),n("span",{class:"token punctuation"},"{"),s(`
            semaphore2`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"wait"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s("  "),n("span",{class:"token comment"},"// if semaphore2's value <= 0, then block"),s(`
            `),n("span",{class:"token keyword"},"if"),s(" count "),n("span",{class:"token operator"},"<="),s(" max "),n("span",{class:"token punctuation"},"{"),s(`
                `),n("span",{class:"token function"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal"},[n("span",{class:"token string"},'"'),n("span",{class:"token interpolation-punctuation punctuation"},"\\("),n("span",{class:"token interpolation"},[n("span",{class:"token class-name"},"Thread"),n("span",{class:"token punctuation"},"."),s("current")]),n("span",{class:"token interpolation-punctuation punctuation"},")"),n("span",{class:"token string"}," "),n("span",{class:"token interpolation-punctuation punctuation"},"\\("),n("span",{class:"token interpolation"},"count"),n("span",{class:"token interpolation-punctuation punctuation"},")"),n("span",{class:"token string"},'"')]),n("span",{class:"token punctuation"},")"),s(`
                count `),n("span",{class:"token operator"},"+="),s(),n("span",{class:"token number"},"1"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
            semaphore1`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"signal"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s("  "),n("span",{class:"token comment"},"// semaphore1's value += 1"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"let"),s(" printer "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"PrintOddEven"),n("span",{class:"token punctuation"},"("),s("max"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"100"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"let"),s(" queue1 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"DispatchQueue"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"global"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"let"),s(" queue2 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"DispatchQueue"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"global"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
queue1`),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"async"),s(),n("span",{class:"token punctuation"},"{"),s(`
    printer`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"printOdd"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
queue2`),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"async"),s(),n("span",{class:"token punctuation"},"{"),s(`
    printer`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"printEven"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token function"},"dispatchMain"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s("  "),n("span",{class:"token comment"},"// to keep the program running"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),C=n("h3",{id:"❓三个线程按照顺序打印-0-100",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#❓三个线程按照顺序打印-0-100","aria-hidden":"true"},"#"),s(" ❓三个线程按照顺序打印 0~100")],-1),S={class:"hint-container details"},T=n("summary",null,"💡",-1),P=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"NumberPrinter"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token keyword"},"int"),s(" number "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token keyword"},"final"),s(),n("span",{class:"token class-name"},"Object"),s(" lock "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Object"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"PrintThread"),s(),n("span",{class:"token keyword"},"implements"),s(),n("span",{class:"token class-name"},"Runnable"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token keyword"},"final"),s(),n("span",{class:"token keyword"},"int"),s(" threadRemainder"),n("span",{class:"token punctuation"},";"),s(`

        `),n("span",{class:"token class-name"},"PrintThread"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" remainder"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("threadRemainder "),n("span",{class:"token operator"},"="),s(" remainder"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`

        `),n("span",{class:"token annotation punctuation"},"@Override"),s(`
        `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"run"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                `),n("span",{class:"token keyword"},"synchronized"),s(),n("span",{class:"token punctuation"},"("),s("lock"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                    `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("number "),n("span",{class:"token operator"},"<="),s(),n("span",{class:"token number"},"100"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                        `),n("span",{class:"token comment"},"// 根据线程的余数和数字的余数是否相等，来决定这个线程是否应该打印这个数字"),s(`
                        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("number "),n("span",{class:"token operator"},"%"),s(),n("span",{class:"token number"},"3"),s(),n("span",{class:"token operator"},"=="),s(" threadRemainder"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                            `),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Thread"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"currentThread"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getName"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token string"},'": "'),s(),n("span",{class:"token operator"},"+"),s(" number"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                            number`),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},";"),s(`
                            lock`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"notifyAll"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                        `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
                            `),n("span",{class:"token keyword"},"try"),s(),n("span",{class:"token punctuation"},"{"),s(`
                                lock`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"wait"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                            `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"catch"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"InterruptedException"),s(" e"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                                `),n("span",{class:"token class-name"},"Thread"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"currentThread"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"interrupt"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                                `),n("span",{class:"token keyword"},"throw"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"RuntimeException"),n("span",{class:"token punctuation"},"("),s("e"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                            `),n("span",{class:"token punctuation"},"}"),s(`
                        `),n("span",{class:"token punctuation"},"}"),s(`
                    `),n("span",{class:"token punctuation"},"}"),s(`
                `),n("span",{class:"token punctuation"},"}"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(" args"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token class-name"},"NumberPrinter"),s(" numberPrinter "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"NumberPrinter"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Thread"),n("span",{class:"token punctuation"},"("),s("numberPrinter"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"PrintThread"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"Thread1"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"start"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Thread"),n("span",{class:"token punctuation"},"("),s("numberPrinter"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"PrintThread"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"Thread2"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"start"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Thread"),n("span",{class:"token punctuation"},"("),s("numberPrinter"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"PrintThread"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"Thread3"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"start"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),A=n("div",{class:"language-swift line-numbers-mode","data-ext":"swift"},[n("pre",{class:"language-swift"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token class-name"},"Foundation"),s(`

`),n("span",{class:"token comment"},"// 使用三个信号量来控制三个线程的顺序打印，每次开启一个信号量"),s(`
`),n("span",{class:"token keyword"},"let"),s(" semaphore1"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"DispatchSemaphore"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"DispatchSemaphore"),n("span",{class:"token punctuation"},"("),s("value"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"let"),s(" semaphore2"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"DispatchSemaphore"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"DispatchSemaphore"),n("span",{class:"token punctuation"},"("),s("value"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"let"),s(" semaphore3"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"DispatchSemaphore"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"DispatchSemaphore"),n("span",{class:"token punctuation"},"("),s("value"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token keyword"},"var"),s(" counter"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"Int"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),s(`

`),n("span",{class:"token keyword"},"enum"),s(),n("span",{class:"token class-name"},"ThreadType"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"case"),s(),n("span",{class:"token class-name"},"Thread1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Thread2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Thread3"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"func"),s(),n("span",{class:"token function-definition function"},"threadHandler"),n("span",{class:"token punctuation"},"("),s("threadType"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"ThreadType"),n("span",{class:"token punctuation"},","),s(" waitOnSemaphore beforeSemaphore"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"DispatchSemaphore"),n("span",{class:"token punctuation"},","),s(" signalSemaphore afterSemaphore"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"DispatchSemaphore"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"while"),s(" counter "),n("span",{class:"token operator"},"<="),s(),n("span",{class:"token number"},"100"),s(),n("span",{class:"token punctuation"},"{"),s(`
        beforeSemaphore`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"wait"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token function"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal"},[n("span",{class:"token string"},'"'),n("span",{class:"token interpolation-punctuation punctuation"},"\\("),n("span",{class:"token interpolation"},"threadType"),n("span",{class:"token interpolation-punctuation punctuation"},")"),n("span",{class:"token string"}," : "),n("span",{class:"token interpolation-punctuation punctuation"},"\\("),n("span",{class:"token interpolation"},"counter"),n("span",{class:"token interpolation-punctuation punctuation"},")"),n("span",{class:"token string"},'"')]),n("span",{class:"token punctuation"},")"),s(`
        counter `),n("span",{class:"token operator"},"+="),s(),n("span",{class:"token number"},"1"),s(`
        afterSemaphore`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"signal"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"let"),s(" thread1 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"Thread"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s("  "),n("span",{class:"token punctuation"},"{"),n("span",{class:"token function"},"threadHandler"),n("span",{class:"token punctuation"},"("),s("threadType"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token punctuation"},"."),n("span",{class:"token class-name"},"Thread1"),n("span",{class:"token punctuation"},","),s(" waitOnSemaphore"),n("span",{class:"token punctuation"},":"),s(" semaphore1"),n("span",{class:"token punctuation"},","),s(" signalSemaphore"),n("span",{class:"token punctuation"},":"),s(" semaphore2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token keyword"},"let"),s(" thread2 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"Thread"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s("  "),n("span",{class:"token punctuation"},"{"),n("span",{class:"token function"},"threadHandler"),n("span",{class:"token punctuation"},"("),s("threadType"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token punctuation"},"."),n("span",{class:"token class-name"},"Thread2"),n("span",{class:"token punctuation"},","),s(" waitOnSemaphore"),n("span",{class:"token punctuation"},":"),s(" semaphore2"),n("span",{class:"token punctuation"},","),s(" signalSemaphore"),n("span",{class:"token punctuation"},":"),s(" semaphore3"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token keyword"},"let"),s(" thread3 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"Thread"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s("  "),n("span",{class:"token punctuation"},"{"),n("span",{class:"token function"},"threadHandler"),n("span",{class:"token punctuation"},"("),s("threadType"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token punctuation"},"."),n("span",{class:"token class-name"},"Thread3"),n("span",{class:"token punctuation"},","),s(" waitOnSemaphore"),n("span",{class:"token punctuation"},":"),s(" semaphore3"),n("span",{class:"token punctuation"},","),s(" signalSemaphore"),n("span",{class:"token punctuation"},":"),s(" semaphore1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token punctuation"},"["),s("thread1"),n("span",{class:"token punctuation"},","),s(" thread2"),n("span",{class:"token punctuation"},","),s(" thread3"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),s("forEach "),n("span",{class:"token punctuation"},"{"),s("thread "),n("span",{class:"token keyword"},"in"),s(`
    thread`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"start"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token punctuation"},"["),s("thread1"),n("span",{class:"token punctuation"},","),s(" thread2"),n("span",{class:"token punctuation"},","),s(" thread3"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),s("forEach "),n("span",{class:"token punctuation"},"{"),s("thread "),n("span",{class:"token keyword"},"in"),s(`
    thread`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"join"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),L=n("h3",{id:"❓需要请求-200-个url-一次性只能发送10个-该怎么在最短的时间内请求完",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#❓需要请求-200-个url-一次性只能发送10个-该怎么在最短的时间内请求完","aria-hidden":"true"},"#"),s(" ❓需要请求 200 个URL，一次性只能发送10个，该怎么在最短的时间内请求完")],-1),O={class:"hint-container details"},U=n("summary",null,"💡",-1),E=n("p",null,[s("这个问题的本质在于对并发进行限制，即并发控制或者任务分发。这在很多实际工程场景中都非常常见，比如 "),n("code",null,"Web"),s(" 爬虫，或者批量请求外部服务等。解决这个问题可以使用一种策略叫做「"),n("code",null,"Semaphore"),s("（信号量）」，或者使用线程池进行并发数量的控制。")],-1),R=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("java"),n("span",{class:"token punctuation"},"."),s("util"),n("span",{class:"token punctuation"},"."),s("concurrent"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token operator"},"*")]),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("java"),n("span",{class:"token punctuation"},"."),s("net"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token operator"},"*")]),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Main"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(" args"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token constant"},"URL"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(" urls "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"URL"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"200"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 200个 URL 需要请求"),s(`
        `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(),n("span",{class:"token number"},"200"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"try"),s(),n("span",{class:"token punctuation"},"{"),s(`
                urls`),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"URL"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"http://example.com"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"catch"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"MalformedURLException"),s(" e"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                e`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"printStackTrace"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`

        `),n("span",{class:"token comment"},"// 创建一个线程池，每次最多发送 10 个请求"),s(`
        `),n("span",{class:"token class-name"},"ExecutorService"),s(" executor "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"Executors"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"newFixedThreadPool"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

        `),n("span",{class:"token comment"},"// submit 方法用于添加请求任务"),s(`
        `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(),n("span",{class:"token number"},"200"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"final"),s(),n("span",{class:"token class-name"},"URL"),s(" url "),n("span",{class:"token operator"},"="),s(" urls"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
            executor`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"submit"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Runnable"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                `),n("span",{class:"token annotation punctuation"},"@Override"),s(`
                `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"run"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                    `),n("span",{class:"token keyword"},"try"),s(),n("span",{class:"token punctuation"},"{"),s(`
                        `),n("span",{class:"token comment"},"// 假设 fetchData 请求 url 并获取数据的方法"),s(`
                        `),n("span",{class:"token function"},"fetchData"),n("span",{class:"token punctuation"},"("),s("url"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                    `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"catch"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Exception"),s(" e"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                        e`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"printStackTrace"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                    `),n("span",{class:"token punctuation"},"}"),s(`
                `),n("span",{class:"token punctuation"},"}"),s(`
            `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token comment"},"// 关闭 executor，等待未完成的任务完成"),s(`
        executor`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"shutdown"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"try"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token comment"},"// 设置最大等待时间，例如 1 小时，等待所有任务完成"),s(`
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("executor"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"awaitTermination"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"TimeUnit"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"HOURS"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                `),n("span",{class:"token comment"},"// 如果等待的时间超过了设定的时间，将强制停止所有任务"),s(`
                executor`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"shutdownNow"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"catch"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"InterruptedException"),s(" e"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            executor`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"shutdownNow"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token comment"},"// 假设你有一个 fetchData 的方法用于获取数据"),s(`
    `),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"fetchData"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"URL"),s(" url"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// Request the data and process it."),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),I=n("div",{class:"language-swift line-numbers-mode","data-ext":"swift"},[n("pre",{class:"language-swift"},[n("code",null,[n("span",{class:"token keyword"},"let"),s(" dispatchGroup "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"DispatchGroup"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(` 
`),n("span",{class:"token keyword"},"let"),s(" queue "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"DispatchQueue"),n("span",{class:"token punctuation"},"("),s("label"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token string-literal"},[n("span",{class:"token string"},'"com.queue.serial"')]),n("span",{class:"token punctuation"},","),s(" attributes"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token punctuation"},"."),s("concurrent"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"let"),s(" urls"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token constant"},"URL"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token comment"},"//200 个 URL 放入这个数组中"),s(`
`),n("span",{class:"token keyword"},"let"),s(" chunked "),n("span",{class:"token operator"},"="),s(" urls"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"chunked"),n("span",{class:"token punctuation"},"("),s("into"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"//把 URL 分成每 10 个一组"),s(`

`),n("span",{class:"token keyword"},"for"),s(" urlChunk "),n("span",{class:"token keyword"},"in"),s(" chunked "),n("span",{class:"token punctuation"},"{"),s(`
    dispatchGroup`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"enter"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
    queue`),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"async"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"for"),s(" url "),n("span",{class:"token keyword"},"in"),s(" urlChunk "),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token comment"},"// 发送网络请求"),s(`
            `),n("span",{class:"token class-name"},"URLSession"),n("span",{class:"token punctuation"},"."),s("shared"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"dataTask"),n("span",{class:"token punctuation"},"("),s("with"),n("span",{class:"token punctuation"},":"),s(" url"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
                `),n("span",{class:"token punctuation"},"("),s("data"),n("span",{class:"token punctuation"},","),s(" response"),n("span",{class:"token punctuation"},","),s(" error"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"in"),s(`
                `),n("span",{class:"token comment"},"// 处理结果"),s(`
                `),n("span",{class:"token keyword"},"if"),s(" error "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token nil constant"},"nil"),s(),n("span",{class:"token punctuation"},"{"),s(`
                    `),n("span",{class:"token function"},"print"),n("span",{class:"token punctuation"},"("),s("error"),n("span",{class:"token operator"},"!"),n("span",{class:"token punctuation"},")"),s(`
                `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
                    `),n("span",{class:"token comment"},"// do something with data."),s(`
                `),n("span",{class:"token punctuation"},"}"),s(`
            `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"resume"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        dispatchGroup`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"leave"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

dispatchGroup`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"notify"),n("span",{class:"token punctuation"},"("),s("queue"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token punctuation"},"."),s("main"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token function"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal"},[n("span",{class:"token string"},'"所有的请求都已经完成！"')]),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"extension"),s(),n("span",{class:"token class-name"},"Array"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// 分组"),s(`
    `),n("span",{class:"token keyword"},"func"),s(),n("span",{class:"token function-definition function"},"chunked"),n("span",{class:"token punctuation"},"("),s("into size"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"Int"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"->"),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"["),n("span",{class:"token class-name"},"Element"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token function"},"stride"),n("span",{class:"token punctuation"},"("),s("from"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(" to"),n("span",{class:"token punctuation"},":"),s(" count"),n("span",{class:"token punctuation"},","),s(" by"),n("span",{class:"token punctuation"},":"),s(" size"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),s("map "),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token class-name"},"Array"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"self"),n("span",{class:"token punctuation"},"["),n("span",{class:"token short-argument"},"$0"),n("span",{class:"token operator"},"..<"),n("span",{class:"token class-name"},"Swift"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"min"),n("span",{class:"token punctuation"},"("),n("span",{class:"token short-argument"},"$0"),s(),n("span",{class:"token operator"},"+"),s(" size"),n("span",{class:"token punctuation"},","),s(" count"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1);function j(B,D){const i=l("ExternalLinkIcon"),c=l("CodeTabs");return u(),r("div",null,[k(" more "),h,n("ul",null,[n("li",null,[b,n("a",v,[s("2015-07-27 并发与并行的区别是什么？"),o(i)])])]),y,n("details",f,[w,x,o(c,{id:"1353",data:[{id:"java"},{id:"python"},{id:"swift"}]},{title0:a(({value:e,isActive:t})=>[s("java")]),title1:a(({value:e,isActive:t})=>[s("python")]),title2:a(({value:e,isActive:t})=>[s("swift")]),tab0:a(({value:e,isActive:t})=>[g]),tab1:a(({value:e,isActive:t})=>[_]),tab2:a(({value:e,isActive:t})=>[q]),_:1})]),C,n("details",S,[T,o(c,{id:"1369",data:[{id:"java"},{id:"swift"}]},{title0:a(({value:e,isActive:t})=>[s("java")]),title1:a(({value:e,isActive:t})=>[s("swift")]),tab0:a(({value:e,isActive:t})=>[P]),tab1:a(({value:e,isActive:t})=>[A]),_:1})]),L,n("details",O,[U,E,o(c,{id:"1385",data:[{id:"java"},{id:"swift"}]},{title0:a(({value:e,isActive:t})=>[s("java")]),title1:a(({value:e,isActive:t})=>[s("swift")]),tab0:a(({value:e,isActive:t})=>[R]),tab1:a(({value:e,isActive:t})=>[I]),_:1})])])}const W=p(m,[["render",j],["__file","0x07.thread.html.vue"]]);export{W as default};
