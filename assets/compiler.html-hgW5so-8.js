import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as l,o,c,b as e,e as n,d as s,f as i}from"./app-LRXv-RhI.js";const r={},d=e("h2",{id:"reference",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#reference","aria-hidden":"true"},"#"),n(" reference")],-1),p={href:"https://github.com/facebook/chisel",target:"_blank",rel:"noopener noreferrer"},m=e("blockquote",null,[e("p",null,"a collection of LLDB Commands")],-1),u=e("hr",null,null,-1),h={href:"https://juejin.cn/post/6844903912143585288",target:"_blank",rel:"noopener noreferrer"},b=i(`<h2 id="compile" tabindex="-1"><a class="header-anchor" href="#compile" aria-hidden="true">#</a> Compile</h2><ul><li><p>编译流程 : <code>预处理 -&gt; 语法和语义分析 -&gt; 生成代码和优化 -&gt; 汇编 -&gt; 链接</code></p></li><li><p>Clang &amp; LLVM</p><table><thead><tr><th>编译器</th><th>说明</th></tr></thead><tbody><tr><td><code>Clang</code></td><td>编译器前端，预处理、词法分析、语法分析、语义分析、静态分析、生成中间代码(LLVM 代码)</td></tr><tr><td><code>LLVM</code></td><td>(Low Level Virtual Machine) 编译器后端，将代码优化并产生汇编代码、链接</td></tr></tbody></table></li></ul><h2 id="clang" tabindex="-1"><a class="header-anchor" href="#clang" aria-hidden="true">#</a> Clang</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>clang <span class="token parameter variable">-x</span> objective-c <span class="token parameter variable">-arch</span> arm-64 <span class="token parameter variable">-c</span> XX/Test.m <span class="token parameter variable">-o</span> XX/Test.o
<span class="token comment"># clang</span>
<span class="token comment">#   Options:</span>
<span class="token comment">#       -x          编译语言</span>
<span class="token comment">#       -arch       编译架构</span>
<span class="token comment">#       -fobjc-arc  文件采用 ARC 内存管理</span>
<span class="token comment">#       -c          编译文件</span>
<span class="token comment">#       -o          编译输出文件</span>

clang -rewrite-objc main.m <span class="token parameter variable">-o</span> main.cpp
<span class="token comment"># 将 OC 代码转化为 C/C++ 代码</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="memory-layout" tabindex="-1"><a class="header-anchor" href="#memory-layout" aria-hidden="true">#</a> Memory Layout</h2><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token class-name">MemoryLayout</span><span class="token punctuation">.</span>size       <span class="token comment">// 占用的内存大小</span>
<span class="token class-name">MemoryLayout</span><span class="token punctuation">.</span>stride     <span class="token comment">// 分配的内存大小</span>
<span class="token class-name">MemoryLayout</span><span class="token punctuation">.</span>alignment  <span class="token comment">// 内存的对齐大小</span>

<span class="token function">withUnsafePointer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment">// 获取 swift 中对象的指针地址</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="dwarf-dsym" tabindex="-1"><a class="header-anchor" href="#dwarf-dsym" aria-hidden="true">#</a> DWARF &amp; dSYM</h2>`,7),v={href:"https://dwarfstd.org",target:"_blank",rel:"noopener noreferrer"},f=e("ul",null,[e("li",null,"DWARF (debuging with attributed record formats) : 一种调试文件的格式"),e("li",null,[n("dSYM (debug Symbils) : 调试符号，符号文件。按照 "),e("code",null,"DWARF"),n(" 格式保存的调试文件")])],-1);function k(_,g){const a=l("ExternalLinkIcon");return o(),c("div",null,[d,e("ul",null,[e("li",null,[e("a",p,[n("Chisel"),s(a)]),m])]),u,e("ul",null,[e("li",null,[e("a",h,[n("2019-08-13 iOS程序员的自我修养"),s(a)])])]),b,e("blockquote",null,[e("p",null,[e("a",v,[n("DWARF Debugging Standard"),s(a)])])]),f])}const x=t(r,[["render",k],["__file","compiler.html.vue"]]);export{x as default};
