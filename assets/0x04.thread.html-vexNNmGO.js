import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,a as e,f as t}from"./app-UFGkdp2j.js";const o={},c=t(`<h3 id="❓dart-是不是单线程模型-是如何运行的" tabindex="-1"><a class="header-anchor" href="#❓dart-是不是单线程模型-是如何运行的" aria-hidden="true">#</a> ❓<code>Dart</code> 是不是单线程模型，是如何运行的</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>Dart</code> 是单线程执行模型，它的并发模型基于“事件循环”。</p></blockquote><p><code>Dart</code> 使用单线程事件循环模型，所有的 <code>Dart</code> 代码在一个称为 <code>Isolate</code> 的单线程执行环境中运行。每个 <code>Isolate</code> 有自己的内存堆，不同的 <code>Isolate</code> 之间不能共享内存，只能通过消息传递来交互。</p><p>事件循环可以看作是一个大循环，在这个循环中，<code>Dart</code> 语言会不断去检查事件队列，如果有事件（如用户交互、<code>I/O</code>、计时器等）就处理事件，事件处理完后再去检查下一个事件，如果事件队列为空则等待事件的发生。</p><p>由于 <code>Dart</code> 是单线程模型，所以针对某个特定的任务，假如这个任务特别耗时，会占据线程大量时间，其他任务就无法得到及时的处理，因此 <code>Dart</code> 中有 <code>Microtask</code> 和 <code>Event</code> 两种任务队列，<code>Microtask</code> 队列优先级高于 <code>Event</code> 队列。执行顺序为：先执行所有 <code>Microtask</code> 任务，然后再处理一个 <code>Event</code> 任务，再执行此 <code>Event</code> 产生的所有 <code>Microtask</code>，依此类推。</p></details><h3 id="❓dart-多任务如何并行的" tabindex="-1"><a class="header-anchor" href="#❓dart-多任务如何并行的" aria-hidden="true">#</a> ❓<code>Dart</code> 多任务如何并行的</h3><details class="hint-container details"><summary>💡</summary><p><code>Dart</code> 本身是单线程的，它依赖于事件循环和异步编程以便在单一线程中完成尽可能多的任务。对于需要并行计算或者诸如文件读写等阻塞性操作，<code>Dart</code> 提供了 <code>Isolate</code> 的概念。</p><p><code>Isolate</code> 可以被看作是 <code>Dart</code> 的轻量级线程。每个 <code>Isolate</code> 有其自己的内存堆并且不与其他 <code>Isolate</code> 共享内存。这避免了多线程环境中的常见问题，如线程锁定和数据紊乱等，并增强了安全性。但是，因为内存不共享，所以 <code>Isolates</code> 之间只能通通过消息传递进行通信。</p><p><code>Dart</code> 的并发实现：在单线程中处理异步任务，如果需要任务并行计算则可以创建多个 <code>Isolates</code> 来执行任务。</p><p>注意：虽然每个 <code>Isolate</code> 有自己的事件队列，但是创建、启动和管理 <code>Isolate</code> 需要相对较重的资源（比如内存和计算时间），并且消息传递和上下文切换也有一些开销。所以在确实需要的情况下才使用 <code>Isolate</code> 进行并发操作，例如处理 <code>CPU</code> 密集型任务或者进行大量的 <code>I/O</code> 操作。</p></details><h3 id="❓future-与-microtask-两者的执行顺序" tabindex="-1"><a class="header-anchor" href="#❓future-与-microtask-两者的执行顺序" aria-hidden="true">#</a> ❓<code>Future</code> 与 <code>microtask</code> 两者的执行顺序</h3><details class="hint-container details"><summary>💡</summary><p><code>Dart</code> 中的事件队列：</p><ul><li>事件队列 <code>Event Queue</code></li><li>微任务队列 <code>Microtask Queue</code></li></ul><p>区别：</p><ul><li><p><code>Future</code> 是将任务添加到 <code>Event Queue</code> 中，然后按照事件顺序来处理。</p></li><li><p><code>Microtask</code> 是将任务添加到 <code>Microtask Queue</code> 中。</p></li></ul><p>运行机制：</p><blockquote><p><code>Microtask Queue</code> 的优先级高于 <code>Event Queue</code>，执行顺序一般来说，<code>Microtask</code> 会在 <code>Future</code> 之前执行。</p></blockquote><ul><li><p>事件循环从 <code>Microtask Queue</code> 中获取任务，如果 <code>Microtask Queue</code> 中有任务，那么一直执行到 <code>Microtask Queue</code> 为空。</p></li><li><p>当 <code>Microtask Queue</code> 为空时，事件循环会检查 <code>Event Queue</code>，如果有任务，那么取出一个执行，然后再去执行 <code>Microtask Queue</code> 中的任务。</p></li></ul></details><h3 id="❓future-microtask-vs-schedulemicrotask" tabindex="-1"><a class="header-anchor" href="#❓future-microtask-vs-schedulemicrotask" aria-hidden="true">#</a> ❓<code>Future.microtask</code> vs <code>scheduleMicrotask</code></h3><details class="hint-container details"><summary>💡</summary><ul><li><p><code>scheduleMicrotask</code>: <code>dart:async</code> 包中的一个全局函数，用于在微任务队列中添加一个任务，该任务会在当前事件循环结束时，下一个事件循环开始前执行。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token function">scheduleMicrotask</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;This is a micro task&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>Future.microtask</code>: <code>Future</code> 类中的一个工厂构造函数，它也是用于在微任务队列中添加一个任务，但它会返回一个 <code>Future</code>，此 <code>Future</code> 在任务执行完后完成。</p><blockquote><p><code>Future.microtask</code> 内部实现时基于 <code>scheduleMicrotask</code>，唯一区别在于返回了一个 <code>Feture</code>。</p></blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> future <span class="token operator">=</span> <span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">microtask</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;This is a micro task&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
future<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// ....</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
future<span class="token punctuation">.</span><span class="token function">catchError</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></details><h3 id="❓isolate-compute-是如何运行的" tabindex="-1"><a class="header-anchor" href="#❓isolate-compute-是如何运行的" aria-hidden="true">#</a> ❓<code>Isolate</code> <code>compute</code> 是如何运行的</h3><details class="hint-container details"><summary>💡</summary><ul><li><p><code>Isolate</code>: 内部创建一个新的、独立运行的执行线程，它有自己的内存（堆和栈），并运行一个事件循环。<code>Isolate</code> 可以运行重复或者持续的任务。</p><blockquote><p>例如计时器或者监听某个特定资源的变化，它有自身的生命周期，且可以一直运行，直到显式地被停止。</p></blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:isolate&#39;</span></span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">printMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Isolate</span><span class="token punctuation">.</span><span class="token function">spawn</span><span class="token punctuation">(</span>printMessage<span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;Hello, Isolate!&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>compute</code>：这个函数会创建一个新的 <code>Isolate</code>，执行给定的函数，并返回结果。当计算完成后，这个 <code>Isolate</code> 会被自动销毁。</p></li><li><p><code>compute</code>: <code>Flutter</code> 提供的便捷函数，它在内部使用 <code>Isolate</code>，并返回 <code>Future</code>，执行结束，创建的 <code>Isolate</code> 就会被销毁。更适用于处理单次耗时计算任务。</p><blockquote><p>例如一个复杂的排序、过滤操作。</p></blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:isolate&#39;</span></span><span class="token punctuation">;</span>

int <span class="token function">longRunningCalculation</span><span class="token punctuation">(</span>int value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// This could be a CPU-intensive operation that lasts a long time.</span>
  <span class="token keyword">return</span> value <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
  int result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">compute</span><span class="token punctuation">(</span>longRunningCalculation<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Will print: 20</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></details><h3 id="❓dart-运行时是如何进行任务调度" tabindex="-1"><a class="header-anchor" href="#❓dart-运行时是如何进行任务调度" aria-hidden="true">#</a> ❓<code>Dart</code> 运行时是如何进行任务调度</h3><details class="hint-container details"><summary>💡</summary></details><h3 id="❓zone-是什么" tabindex="-1"><a class="header-anchor" href="#❓zone-是什么" aria-hidden="true">#</a> ❓<code>Zone</code> 是什么</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>Zone</code> 是一个用于错误处理和任务调度的上下文，可以把 <code>Zone</code> 理解为一个执行上下文环境。每个 <code>Dart</code> 线程都有与之关联的 <code>Zone</code>，可以使用 <code>Zone.current</code> 来获取当前的 <code>Zone</code>。 在 <code>Flutter</code> 中，新建的每个 <code>Isolate</code> 都会有一个默认的 <code>root Zone</code>，但也可以根据需要创建新的 <code>Zone</code>。<code>Flutter</code> 框架的 <code>runApp</code> 方法就是在 <code>Zone</code> 中运行的。</p></blockquote><p><code>Zone</code> 的主要功能：</p><ul><li><p>错误处理：<code>Zone</code> 可以提供一个统一的错误处理机制。</p><blockquote><p>比如，可以在创建 <code>Zone</code> 时指定一个错误回调，那么在 <code>Zone</code> 内部运行的代码如果有未捕获的异常，就会被这个回调捕获。</p></blockquote></li><li><p>任务调度：<code>Zone</code> 还可以对任务的调度进行自定义。</p><blockquote><p><code>Dart</code> 中有两种任务调度队列：微任务队列和事件队列。但 <code>Dart</code> 运行时如何进行任务调度的呢？其实就是通过 <code>Zone</code>。<code>Zone</code> 为微任务和事件任务的调度提供了 <code>hook</code>，可以在创建 <code>Zone</code> 时重写这两个 <code>hook</code> 来改变任务调度的行为。</p></blockquote></li></ul><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">runZonedGuarded</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 这里的代码运行在新的 Zone 中</span>
    <span class="token class-name">Future</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;我是一个异常&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> error<span class="token punctuation">,</span> <span class="token class-name">StackTrace</span> stackTrace<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 区域内的未捕获异常将被处理在此</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;捕获到异常: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">error</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="❓runzoned-与-runzonedguarded-的区别" tabindex="-1"><a class="header-anchor" href="#❓runzoned-与-runzonedguarded-的区别" aria-hidden="true">#</a> ❓<code>runZoned</code> 与 <code>runZonedGuarded</code> 的区别</h3><details class="hint-container details"><summary>💡</summary><ul><li><p><code>runZoned</code>：函数接受两个回调函数，一个是运行在新的 <code>Zone</code> 中的回调，另一个是错误处理的回调。这个错误处理回调可以用来捕获和处理在新的 <code>Zone</code> 中抛出的未捕获的异常。</p><blockquote><p>如果没有提供错误处理回调，或者错误处理回调抛出了异常，这个异常将会被重新抛出，并且可能会导致应用崩溃。</p></blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token function">runZoned</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token string-literal"><span class="token string">&#39;Details&#39;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> onError<span class="token punctuation">:</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> stackTrace<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Caught error: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">error</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>runZonedGuarded</code>: 函数接受两个回调函数，一个运行在新 <code>Zone</code> 中的回调，另一个错误处理回调。</p><blockquote><p>要求必须提供错误处理回调，并且这个错误处理回调必须不能抛出异常。</p></blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token function">runZonedGuarded</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token string-literal"><span class="token string">&#39;Details&#39;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> stackTrace<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Caught error: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">error</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>总结：<code>runZonedGuarded</code> 提供了更强的保护机制，以防止错误处理器抛出异常导致应用崩溃。</p></details>`,16);function p(i,l){return s(),a("div",null,[e(" more "),c])}const r=n(o,[["render",p],["__file","0x04.thread.html.vue"]]);export{r as default};
