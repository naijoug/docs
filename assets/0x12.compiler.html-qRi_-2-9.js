import{_ as s}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as c,o as d,c as i,a as l,b as e,e as o,d as n,f as t}from"./app-Epb51Bxn.js";const p={},r=e("h2",{id:"reference",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#reference","aria-hidden":"true"},"#"),o(" reference")],-1),u={href:"https://juejin.cn/post/6844904200493596680",target:"_blank",rel:"noopener noreferrer"},h={href:"https://juejin.cn/post/6844903912143585288",target:"_blank",rel:"noopener noreferrer"},m=t(`<hr><h2 id="调试" tabindex="-1"><a class="header-anchor" href="#调试" aria-hidden="true">#</a> 调试</h2><h3 id="❓lldb-gdb-常用的调试命令" tabindex="-1"><a class="header-anchor" href="#❓lldb-gdb-常用的调试命令" aria-hidden="true">#</a> ❓<code>lldb (gdb)</code> 常用的调试命令</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>lldb</code>是一个使用 <code>C++</code> 编写的调试工具，用于解决运行在 <code>Apple</code> 平台上的代码问题。</p></blockquote><p>常用的<code>lldb</code>调试命令：</p><ul><li><p>断点调试</p><ul><li><p><strong>watchpoint set variable (w s v)</strong>: 开始监视特定变量的值，当其值改变时，执行会停止。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>w s <span class="token function">v</span> myVariable
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>breakpoint set (br s)</strong>: 设置断点。可以根据函数名、文件名和行号、或者地址设置断点。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>br s <span class="token parameter variable">-n</span> functionName
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>breakpoint delete (br del)</strong>: 删除断点。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>br del <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>continue (c)</strong>: 从当前位置继续执行代码。</p></li><li><p><strong>step over (n)</strong>: 单步执行代码，但是会跳过函数或方法的内部。</p></li><li><p><strong>step into (s)</strong>: 单步执行代码，如果当前行是一个函数或方法，会跳转到它的内部。</p></li><li><p><strong>step out (finish)</strong>: 如果当前位置是在一个函数或方法的内部，单步执行代码直到返回到父级。</p></li></ul></li><li><p>堆栈信息</p><ul><li><p><strong>thread backtrace (bt)</strong>: 显示当前线程的堆栈信息。</p></li><li><p><strong>thread return (th r)</strong>: 返回到上层的线程。</p></li><li><p><strong>frame variable (fr v)</strong>: 显示当前栈帧下的所有变量。</p></li><li><p><strong>frame select (fr s)</strong>: 切换到指定的栈帧。</p></li><li><p><strong>expression (e)</strong>: 在当前栈帧下执行指定的代码，例如修改变量的值，或者执行方法等。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>e self.view.backgroundColor <span class="token operator">=</span> <span class="token punctuation">[</span>UIColor redColor<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p>其它命令</p><ul><li><p><strong>list (l)</strong>: 列出源代码。</p></li><li><p><strong>process interrupt (pro int)</strong>: 暂停正在运行的进程。</p></li></ul></li></ul></details><h2 id="编译器" tabindex="-1"><a class="header-anchor" href="#编译器" aria-hidden="true">#</a> 编译器</h2><h3 id="❓ios-整个编译流程说一下" tabindex="-1"><a class="header-anchor" href="#❓ios-整个编译流程说一下" aria-hidden="true">#</a> ❓iOS 整个编译流程说一下</h3><details class="hint-container details"><summary>💡</summary><ul><li><p>预处理：这一步主要是处理源代码中的预处理器指令，如 <code>#define、#include</code> 等，并将结果输出为预处理后的源文件。</p></li><li><p>编译：预处理后的源文件被编译器（例如<code>Clang</code>）编译，进行词法分析、语法分析、语义分析和优化，将代码转换成对应的中间代码。然后将中间代码进一步优化并生成汇编代码。</p></li><li><p>汇编：汇编器（例如 <code>Clang</code> 的集成汇编器）将汇编代码转换为目标文件（<code>.o</code> 文件），即包含了机器语言代码的文件。</p></li><li><p>链接：链接器（例如 <code>ld</code>）将所有的目标文件以及所需的系统库和框架进行链接，生成可执行文件。这里涉及到的主要步骤有地址和空间的分配、符号决议及重定位。</p></li><li><p>打包：可执行文件配合对应的资源文件（如图片、音频等）一起打包，生成 <code>.ipa</code> 文件，这一步主要由 <code>Xcode</code> 的工具完成。</p></li><li><p>签名：<code>.ipa</code> 文件需要经过开发者的私钥进行签名才能在设备上运行，签名过程通常也称为代码签名。</p></li><li><p>安装：将签名后的 <code>.ipa</code> 文件安装到设备上，通常是通过 <code>iTunes</code> 或者 <code>Xcode</code> 进行安装。</p></li></ul></details><h3 id="❓从代码仓库拉取代码-到生成-ipa-都有哪些过程-期间都生成了什么文件" tabindex="-1"><a class="header-anchor" href="#❓从代码仓库拉取代码-到生成-ipa-都有哪些过程-期间都生成了什么文件" aria-hidden="true">#</a> ❓从代码仓库拉取代码，到生成 <code>.ipa</code> 都有哪些过程，期间都生成了什么文件</h3><details class="hint-container details"><summary>💡</summary><ul><li><p>拉取代码</p><blockquote><p>使用版本控制工具（如<code>Git</code>）从代码仓库拉取项目代码。</p></blockquote></li><li><p>预处理</p><blockquote><p>通过 <code>Xcode</code> 或命令行工具进行预处理，将源代码中的宏等预处理指令进行展开。这个过程并不直接生成文件，只是对源代码进行预处理。</p></blockquote></li><li><p>编译</p><blockquote><p>预处理后的代码被编译器（如<code>Clang</code>）逐个编译为目标文件（<code>.o</code> 文件）。此过程中可能会生成一些中间文件，如预编译头文件 <code>.pch</code>，或者 <code>Swift</code> 模块文件 <code>.swiftmodule</code> 等。</p></blockquote></li><li><p>链接</p><blockquote><p>由链接器（如 <code>ld</code>）将所有的目标文件以及所需的系统库和框架进行链接，生成可执行的 <code>Mach-O</code> 文件。</p></blockquote></li><li><p>打包</p><blockquote><p>将可执行文件以及各种资源文件（如图片、<code>xib</code>、<code>storyboard</code> 文件等）打包到 <code>.app</code> 文件（即应用程序包）中。</p></blockquote></li><li><p>签名</p><blockquote><p>对 <code>.app</code> 文件进行签名，生成 <code>embedded.mobileprovision</code>（包含开发者证书和设备 <code>UDID</code>）、<code>CodeResources</code>（包含资源文件的哈希值）等文件，并被包含到 <code>.app</code> 文件中。</p></blockquote></li><li><p>生成 <code>.ipa</code></p><blockquote><p>将上述的 <code>.app</code> 文件以及 <code>iTunesArtwork</code>（<code>iTunes</code> 中用来展示的 <code>App</code> 图标）等文件打包进 <code>Payload</code> 文件夹，然后以 <code>.zip</code> 格式进行压缩，最后将文件后缀名改为 <code>.ipa</code>，就生成了最后的 <code>.ipa</code> 文件。</p></blockquote></li></ul></details><h3 id="❓说说对-bitcode-的理解和作用" tabindex="-1"><a class="header-anchor" href="#❓说说对-bitcode-的理解和作用" aria-hidden="true">#</a> ❓说说对 <code>bitcode</code> 的理解和作用</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>Bitcode</code> 是苹果在 <code>2015</code> 年推出的一个新的编译选项，它是 <code>LLVM</code>（低级虚拟机）的一种中间表示（<code>Intermediate Representation，IR</code>）形式。对源代码做完一些基本的语义分析和验证工作后，就可以转化成<code>Bitcode</code>。</p></blockquote><p><code>Bitcode</code> 的出现是为了支持苹果的 <code>App Thinning</code> 特性。具体来说，当提交一个包含 <code>Bitcode</code> 的应用到 <code>App Store</code> 时，苹果会在后台重新编译提交的应用并进行优化，生成针对各种设备的具体执行文件。因此，当用户从 <code>App Store</code> 下载应用时，他们只需下载适用于他们自己设备架构的二进制代码，而无需下载面向所有设备的通用二进制代码。</p><p>优点：</p><ul><li>节省存储空间：用户下载的应用体积更小，节省了设备的存储空间。</li><li>提高性能：苹果可以根据特定硬件和 <code>iOS</code> 版本进行特定的优化，从而更好地利用硬件性能。</li><li>更新兼容：当苹果引 <code>introduce</code> 新的硬件或者指令集时，可以在后台重新编译 <code>Bitcode</code>，自动使应用适配最新的设备，而无需开发者重新编译和提交。</li></ul><p>缺点：</p><ul><li>失去一些控制权：由于程序最终是由 <code>Apple</code> 的服务器进行编译和优化，开发者无法知道、控制和验证优化的细节。</li><li>调试难度增加：当出现问题时，可能下载的二进制代码已经被修改，与开发者本地编译出的二进制不一致，因此可能带来调试困难。此外，提交的 <code>.ipa</code> 包也无法直接运行和调试，由于里面的二进制代码实际上是 <code>Bitcode</code>，需要通过运行 <code>App Store</code> 版本或者从 <code>Xcode</code> 中下载 <code>dSYM</code> 文件来获取具体的崩溃日志。</li></ul><p>总结：<code>Bitcode</code> 有点像把原先在本地进行的“链接”过程交给了苹果的服务器来完成，进一步加强了苹果对 <code>AppStore</code> 中应用的控制，又能提升用户的下载体验和设备性能。对于开发者来说，需要权衡 <code>Bitcode</code> 带来的好处与潜在问题。</p></details><hr><h2 id="hook" tabindex="-1"><a class="header-anchor" href="#hook" aria-hidden="true">#</a> hook</h2><h3 id="❓ios-中-hook-一个方法有什么途径" tabindex="-1"><a class="header-anchor" href="#❓ios-中-hook-一个方法有什么途径" aria-hidden="true">#</a> ❓<code>iOS</code> 中 <code>hook</code> 一个方法有什么途径</h3><details class="hint-container details"><summary>💡</summary><ul><li><p><code>Method Swizzling</code>：通过 <code>Objective-C</code> 的方法交换 (<code>Method Swizzling</code>)，可以在运行时动态地交换某个类的两个方法的实现。</p></li><li><p>分类(<code>Category</code>)：在其中添加一个新方法，然后用这个新方法的实现替换原始方法的实现。这将导致原始方法被分类中的新方法所替代。</p></li><li><p>反射机制：可以在运行时动态地创建类、检查类的属性和方法，甚至改变类的结构。通过反射可以实现对方法的拦截和替换。</p></li><li><p>使用第三方库：如<code>Aspects</code>，<code>Facebook</code> 的 <code>fishhook</code>，它们提供了较为方便和简洁的 <code>hook</code> 方案。</p></li><li><p><code>Cycript</code>：这是一个用于调试和研究 <code>iOS</code> 应用的工具，它可以注入 <code>JavaScript</code> 语境进入正在运行的应用进程中，从而实现对对象和函数的交互操作。</p></li></ul></details><h3 id="❓ios-如何-hook-一个对象的方法-而不影响其它对象" tabindex="-1"><a class="header-anchor" href="#❓ios-如何-hook-一个对象的方法-而不影响其它对象" aria-hidden="true">#</a> ❓<code>iOS</code> 如何 <code>hook</code> 一个对象的方法，而不影响其它对象</h3><details class="hint-container details"><summary>💡</summary><blockquote><p>“Isa Swizzling”：这是一种动态改变对象的类的技术。</p></blockquote><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// 原来的类</span>
<span class="token keyword">@interface</span> MyClass <span class="token punctuation">:</span> NSObject
<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>originalMethod<span class="token punctuation">;</span>
<span class="token keyword">@end</span>

<span class="token keyword">@implementation</span> MyClass
<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>originalMethod <span class="token punctuation">{</span>
    <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;Original method&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">@end</span>

<span class="token comment">// 子类</span>
<span class="token keyword">@interface</span> MySwizzledClass <span class="token punctuation">:</span> MyClass
<span class="token keyword">@end</span>

<span class="token keyword">@implementation</span> MySwizzledClass
<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>originalMethod <span class="token punctuation">{</span>
    <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;Swizzled method&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span><span class="token keyword">super</span> originalMethod<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">@end</span>

<span class="token comment">// 让 hook 的对象使用子类</span>
MyClass <span class="token operator">*</span>myInstance <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>MyClass alloc<span class="token punctuation">]</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">object_setClass</span><span class="token punctuation">(</span>myInstance<span class="token punctuation">,</span> <span class="token punctuation">[</span>MySwizzledClass class<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>myInstance originalMethod<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 输出 “Swizzled method” 和 “Original method”</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="❓了解-fishhook-吗-说说为什么-fishhook-不能修改非动态连接库中的符号" tabindex="-1"><a class="header-anchor" href="#❓了解-fishhook-吗-说说为什么-fishhook-不能修改非动态连接库中的符号" aria-hidden="true">#</a> ❓了解 <code>fishhook</code> 吗，说说为什么 <code>fishhook</code> 不能修改非动态连接库中的符号</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>fishhook</code> 是 <code>Facebook</code> 开发的一个用于 <code>iOS</code> 和 <code>macOS</code> 应用的开源库，允许你在运行时对 <code>C</code> 语言函数进行重绑定，并且是通过修改 <code>mach-O</code> 文件中的符号表（<code>Symbol Table</code>）实现的。</p></blockquote><p>不能修改非动态连接库中的符号的原因：</p><ul><li><code>fishhook</code> 修改的是动态链接表，在程序启动时，动态链接器(<code>dyld</code>)会根据表中的符号信息，找到动态链接库中的函数地址，并在运行时进行函数调用。而对于静态链接库，链接发生在编译时，对应的函数或者变量的值在编译后就确定了，不存在动态链接表，因此 <code>fishhook</code>无法修改。</li><li>静态库在编译时会直接被合并到可执行文件中，静态库中的符号信息会在编译时被解析并且写入到可执行文件中，所以 <code>fishhook</code>也 无法修改。</li><li>根据 <code>Mach-O</code> 文件格式的定义，<code>fishhook</code> 通过修改 <code>LC_SYMTAB command</code> 下的符号表，而这个符号表主要用于动态连接过程中的符号解析，所以只能修改动态库中的符号。</li></ul><p>总结：<code>fishhook</code> 只能修改动态库的符号，无法修改非动态库的符号。</p></details><hr><h2 id="逆向工程" tabindex="-1"><a class="header-anchor" href="#逆向工程" aria-hidden="true">#</a> 逆向工程</h2><h3 id="❓ios-逆向分析" tabindex="-1"><a class="header-anchor" href="#❓ios-逆向分析" aria-hidden="true">#</a> ❓<code>iOS</code> 逆向分析</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>iOS</code> 逆向分析，通常指破解者通过分析和修改设备中的 <code>iOS</code> 应用程序来了解其工作原理的行为。逆向分析的应用场景广泛，包括但不限于：<code>Bug</code> 定位、性能优化、安全测试以及对竞品的调研等。</p></blockquote><p><code>iOS</code> 逆向分析的方法：</p><ul><li><p>静态分析：静态分析是分析字节码或逆向编译后的代码来了解其功能和行为的过程，未运行程序代码。常用的静态分析工具有 <code>Hopper Disassembler</code>、<code>IDA Pro</code> 等。</p></li><li><p>动态分析：动态分析是在程序运行时观察其行为，常用到的工具有 <code>LLDB</code>、<code>Cycript</code>、<code>frida</code> 等。通过动态分析可以实时查看和修改程序的运行状态。</p></li><li><p><code>Class-Dump</code>：是一个用来解析在 <code>Mach-O</code> 文件中 <code>Objc</code> 的类信息的命令行工具。逆向分析的第一步常常是使用 <code>Class-Dump</code> 获取被分析对象的头文件信息。</p></li><li><p><code>Mach-O</code> 文件探索：<code>Mach-O</code> 文件是 <code>macOS</code> 和 <code>iOS</code> 的可执行文件的格式。通过探索 <code>Mach-O</code> 文件，可以获取到程序的 <code>Segments、Sections、Symbol</code> 等信息，分析程序的入口点、链接库等。</p></li></ul></details><h3 id="❓lild-重签名" tabindex="-1"><a class="header-anchor" href="#❓lild-重签名" aria-hidden="true">#</a> ❓<code>lild</code> 重签名</h3><details class="hint-container details"><summary>💡</summary><p><code>Resigning</code> 重签名：对给定的库或者插件进行签名才能将它包含在我们的应用中。</p><p><code>lild</code>（Link Identity Editor）是一个在 <code>macOS</code> 上可以用来重签名可执行文件的命令行工具。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 清除原有签名</span>
codesign --remove-signature /path/to/my.framework
    
<span class="token comment"># 添加新的签名</span>
<span class="token comment">#   -f: 强制重签名，即使已经签过名了</span>
<span class="token comment">#   -s: 开发者证书，可以在 Keychain Access 应用程序中找到</span>
codesign <span class="token parameter variable">-f</span> <span class="token parameter variable">-s</span> <span class="token string">&quot;iPhone Developer: Your Name (ID)&quot;</span> /path/to/my.framework
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：进行重签名操作需要正确的开发者证书和配套的 <code>Provisioning Profiles</code>，否则重签名后的文件将无法在设备上运行。重签名是安全敏感操作，必须确保源文件和签名证书的可信任性。遵守相关法律法规和协议出于合法合规的前提操作。</p></details><h3 id="❓简述下-match-o-文件结构" tabindex="-1"><a class="header-anchor" href="#❓简述下-match-o-文件结构" aria-hidden="true">#</a> ❓简述下 <code>Match-O</code> 文件结构</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>Mach-O</code> （Mach Object）文件格式是用于可执行文件、对象代码、共享库、动态加载代码以及内核代码等在 <code>macOS</code> 和 <code>iOS</code> 中的格式。</p></blockquote><ul><li><p><code>Header</code>：描述了整个 <code>Mach-O</code> 文件的一些基本信息。</p><blockquote><p>例如文件类型（如可执行文件、动态库或对象文件等）、<code>CPU</code> 类型、加载命令的数量和大小等。</p></blockquote></li><li><p><code>Load Commands</code>：负责描述 <code>Mach-O</code> 文件的内部结构和布局。</p><blockquote><p>例如 <code>Segment、Section、Dynamic Symbol Table、Dylib ID、Entry Point</code> 等信息。</p></blockquote></li><li><p><code>Segments and Sections</code>：<code>Segments</code> 包含一种或多种类型的 <code>Sections</code>。每个 <code>Segment</code> 对应程序运行时的一个内存映射，<code>Sections</code> 则存储具体的代码和数据。</p></li><li><p><code>Data</code>：包括符号表、字符串表等各种实际的数据。</p><blockquote><p>例如程序的执行代码、常量、全局变量等。</p></blockquote></li></ul></details><h3 id="❓怎么防止别人反编译你的-ios-app" tabindex="-1"><a class="header-anchor" href="#❓怎么防止别人反编译你的-ios-app" aria-hidden="true">#</a> ❓怎么防止别人反编译你的 <code>iOS App</code></h3><details class="hint-container details"><summary>💡</summary><ul><li><p>代码混淆：这是最基本的方法，通过改变变量名和方法名，添加无用代码等手段来让反编译出的代码难以阅读。</p></li><li><p>字符串加密：很多时候，敏感的信息是以字符串的形式存在于程序中的，通过将这些字符串加密，可以有效防止这些信息被泄露。</p></li><li><p>符号剥离：将程序中的符号信息剥离掉，这样在反编译的时候就看不到原始的符号信息，降低可读性。</p></li><li><p>把关键代码部分用汇编或者 <code>C</code> 语言重写：高级语言相比于底层语言更易于被反编译和理解，把关键部分的代码用汇编或者 <code>C</code> 语言写可以增加破解难度。</p></li><li><p>使用防护壳：就像电脑端的软件可以使用加壳技术一样，移动端的程序也可以通过防护壳来对抗反编译。</p></li><li><p>运行时防护：可以在程序中加入一些运行时检测的代码，比如检测设备是否被越狱，检测正在运行的进程等，一旦发现破解行为，就立即终止运行。</p></li></ul></details>`,29);function k(b,v){const a=c("ExternalLinkIcon");return d(),i("div",null,[l(" more "),r,e("ul",null,[e("li",null,[e("a",u,[o("2020-06-27 Swift 编译器中间码 SIL"),n(a)])]),e("li",null,[e("a",h,[o("2019-08-13 iOS程序员的自我修养"),n(a)])])]),m])}const y=s(p,[["render",k],["__file","0x12.compiler.html.vue"]]);export{y as default};
