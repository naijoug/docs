import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as e,c as r,a as i,f as d}from"./app-PKGOewPu.js";const h={},t=d('<h2 id="介绍下内存的几大区域" tabindex="-1"><a class="header-anchor" href="#介绍下内存的几大区域" aria-hidden="true">#</a> 介绍下内存的几大区域？</h2><h2 id="栈区地址排列是从低到高吗" tabindex="-1"><a class="header-anchor" href="#栈区地址排列是从低到高吗" aria-hidden="true">#</a> 栈区地址排列是从低到高吗？</h2><h2 id="什么是内存对齐" tabindex="-1"><a class="header-anchor" href="#什么是内存对齐" aria-hidden="true">#</a> 什么是内存对齐？</h2><h2 id="❓内存中存在栈区和堆区-数据结构中存在栈和堆-那么这两者有什么关系" tabindex="-1"><a class="header-anchor" href="#❓内存中存在栈区和堆区-数据结构中存在栈和堆-那么这两者有什么关系" aria-hidden="true">#</a> ❓内存中存在栈区和堆区，数据结构中存在栈和堆，那么这两者有什么关系？</h2><details class="hint-container details"><summary>💡</summary><p>对于内存栈区来说，确实底层工作方式使用了栈的数据结构。遵循后进先出 <code>LIFO</code>(Last In First Out) 的原则。函数调用过程中，局部变量会被压入栈区，函数调用结束后，会从栈顶弹出。这也是栈区访问效率高于堆区的原因。</p><p>而内存堆区，其实与堆这种数据结构就没有太大关系了。<code>heap</code> 在英语中表示一堆、许多的意思，表示一堆可以供程序员自由支配使用的内存区域。堆区的内存分配管理方案就与底层的操作系统以及所使用的编程语言有关了。使用的数据结构包括链表、位图、平衡二叉搜素树等。常用的内存分配算法：最佳适配算法、最差适配算法、首次适配算法、循环首次适配算法等。</p></details><h2 id="❓什么情况下会发生-栈溢出" tabindex="-1"><a class="header-anchor" href="#❓什么情况下会发生-栈溢出" aria-hidden="true">#</a> ❓什么情况下会发生“栈溢出”？</h2><details class="hint-container details"><summary>💡</summary><p>程序运行时，操作系统会分配一块固定大小的内存作为栈区。如果递归层数较多、申请临时变量过大等都可能触发栈溢出的问题。</p></details><h2 id="❓什么情况下会发生-内存不足" tabindex="-1"><a class="header-anchor" href="#❓什么情况下会发生-内存不足" aria-hidden="true">#</a> ❓什么情况下会发生“内存不足”？</h2><details class="hint-container details"><summary>💡</summary><p>堆区内存大小，是可以动态扩容的。但是这个大小也是有限，当程序发生内存泄漏，申请堆区内存不断增长，当达到操作系统设自动的内存阈值，就会触发内存不足的问题。</p></details><h3 id="一次寻址过程会访问几次内存" tabindex="-1"><a class="header-anchor" href="#一次寻址过程会访问几次内存" aria-hidden="true">#</a> 一次寻址过程会访问几次内存？</h3><h3 id="字节序有了解吗-介绍下" tabindex="-1"><a class="header-anchor" href="#字节序有了解吗-介绍下" aria-hidden="true">#</a> 字节序有了解吗，介绍下？</h3><h2 id="如何计算图片加载内存中所占的大小" tabindex="-1"><a class="header-anchor" href="#如何计算图片加载内存中所占的大小" aria-hidden="true">#</a> 如何计算图片加载内存中所占的大小?</h2><h2 id="一张图片的内存占用大小是由什么决定的" tabindex="-1"><a class="header-anchor" href="#一张图片的内存占用大小是由什么决定的" aria-hidden="true">#</a> 一张图片的内存占用大小是由什么决定的？</h2><details class="hint-container details"><summary>💡</summary><p>图片在内存中占据的空间大小由其分辨率、颜色深度（bits per pixel，简称bpp）和压缩方法等因素决定。</p><p>在未经压缩的情况下，可以通过以下计算公式进行估算：</p><p>内存占用（字节） = 宽度（像素） * 高度（像素） * 颜色深度（字节）</p><p>常见的彩色图片颜色深度一般为24bit（即3字节，RGB各8bit）或32bit（即4字节，RGBA各8bit）。</p><p>例如，一张1000 * 1000像素，颜色深度为32bit的图片，其在内存中的占用大概为：</p><p>1000 * 1000 * 4 = 4,000,000字节，也就是约4MB。</p><p>需要注意的是这是未经压缩的情况，实际中许多图片格式（如JPEG，PNG等）都使用了压缩算法，实际占用的内存大小会小于这个计算结果。同时，如果程序使用了图像金字塔、缩略图等技术，那么实际占用的内存也会有所不同。</p></details><h2 id="❓一张-100-100-的-rgba-格式的图片占用多少内存" tabindex="-1"><a class="header-anchor" href="#❓一张-100-100-的-rgba-格式的图片占用多少内存" aria-hidden="true">#</a> ❓一张 100*100 的 RGBA 格式的图片占用多少内存？</h2><details class="hint-container details"><summary>💡</summary><p>首先计算每个像素点占用内存，RGBA 格式的图片由于占用 4 个字节， 然后图片大小为 100*100 = 10000 像素点 (≈ 10240 = 10 * 1024 = 10kb) 所有最后结果为: 4 * 10kb = 40kb</p></details><h2 id="如何计算一个像素点的大小和一张图的大小" tabindex="-1"><a class="header-anchor" href="#如何计算一个像素点的大小和一张图的大小" aria-hidden="true">#</a> 如何计算一个像素点的大小和一张图的大小？</h2>',17);function s(n,c){return e(),r("div",null,[i(" more "),t])}const m=a(h,[["render",s],["__file","0x08.memory.html.vue"]]);export{m as default};
