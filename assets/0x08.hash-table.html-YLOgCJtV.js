import{_ as u}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as t,o as r,c as d,a as o,b as n,e as s,d as a,w as c,f as k}from"./app-QoRASclm.js";const m={},h=n("h2",{id:"reference",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reference","aria-hidden":"true"},"#"),s(" reference")],-1),b={href:"https://visualgo.net/zh/hashtable/print",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/apple/swift-corelibs-foundation/blob/main/CoreFoundation/Collections.subproj/CFDictionary.c",target:"_blank",rel:"noopener noreferrer"},_={href:"https://github.com/apple/swift/blob/main/stdlib/public/core/Dictionary.swift",target:"_blank",rel:"noopener noreferrer"},f=n("hr",null,null,-1),g={href:"https://github.com/apple/swift-collections/blob/main/Sources/OrderedCollections/OrderedDictionary/OrderedDictionary.swift",target:"_blank",rel:"noopener noreferrer"},y={href:"https://github.com/openjdk/jdk/blob/master/src/java.base/share/classes/java/util/LinkedHashMap.java",target:"_blank",rel:"noopener noreferrer"},j={href:"https://github.com/python/cpython/blob/main/Lib/collections/__init__.py#L83",target:"_blank",rel:"noopener noreferrer"},x=k(`<h2 id="哈希表的常用操作" tabindex="-1"><a class="header-anchor" href="#哈希表的常用操作" aria-hidden="true">#</a> 哈希表的常用操作</h2><p>::: codetabs</p><p>@tab java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 创建哈希表</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//  - 添加键值对</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;one&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//  - 查询键值对</span>
map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">&quot;one&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 查询是否包含某个键</span>
map<span class="token punctuation">.</span><span class="token function">containsValue</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 查询是否包含某个值</span>
<span class="token class-name">Integer</span> value <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;one&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 根据键查询对应值</span>
map<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 判断哈希表是否为空</span>
<span class="token keyword">int</span> size <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 查询哈希表长度</span>
<span class="token comment">//  - 遍历键</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key in map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//  - 遍历值</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Inetger</span> value in map<span class="token punctuation">.</span>values<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">prinln</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//  - 删除键值对</span>
map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">&quot;one&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 根据键值移除元素</span>
map<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 清空哈希表</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="lru-cache-最近最少使用缓存" tabindex="-1"><a class="header-anchor" href="#lru-cache-最近最少使用缓存" aria-hidden="true">#</a> <code>LRU Cache</code> - “最近最少使用缓存”</h2>`,5),w={href:"https://leetcode.cn/problems/lru-cache",target:"_blank",rel:"noopener noreferrer"},O=n("blockquote",null,[n("p",null,[n("code",null,"get"),s(),n("code",null,"put"),s(" 操作需要 O(1) 的平均时间复杂度")])],-1),q={class:"hint-container details"},C=n("summary",null,"💡",-1),L=n("p",null,"【思路】: 哈希表 + 双向链表",-1),S=n("ul",null,[n("li",null,"首先解决数据的缓存问题。由于需要 O(1) 的时间复杂度，所以应该很自然的想到了使用哈希表来保存数据。这样保存和查询都可以做到 O(1) 的时间复杂度。"),n("li",null,[s("再来解决最近最少使用的问题。这需要使用双向链表的结构来保存数据，链表头部为最少使用的数据，链表尾部为最近使用的数据。 "),n("ul",null,[n("li",null,"查询数据时，这个查询过的数据为最近使用，也就是需要移除就之前链表中的这个数据，将这个数据重新加入到链表尾部。"),n("li",null,"添加数据时，如果这个 key 已存在，则移除旧数据，将新数据加入链表尾部；如果 key 不存在，需要判断缓存是否已满，如果已满则移除链表头部最少使用数据，添加新数据到链表尾部，如果未满则直接添加新数据到链表尾部。")])])],-1),D=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,`
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),N=n("h2",{id:"lfu-cache-最不经常使用缓存",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#lfu-cache-最不经常使用缓存","aria-hidden":"true"},"#"),s(),n("code",null,"LFU Cache"),s(" - “最不经常使用缓存”")],-1),V={href:"https://leetcode.cn/problems/lfu-cache",target:"_blank",rel:"noopener noreferrer"},I=n("blockquote",null,[n("p",null,[n("code",null,"get"),s(),n("code",null,"put"),s(" 操作需要 O(1) 的时间复杂度")])],-1),T=n("details",{class:"hint-container details"},[n("summary",null,"💡"),n("p",null,"【思路】: 双哈希表"),n("ul",null,[n("li",null,[s("数据缓存的问题。同 "),n("code",null,"LRU"),s(" 一样需要哈希表来保证数据存取的 O(1) 的时间复杂度。")]),n("li",null,"最不经常时间的问题。这个需要为没有数据加上一个 frequency 使用频率计数值来进行标记。关键点在于需要 O(1) 时间复杂度，那么使用")])],-1);function U(E,F){const e=t("ExternalLinkIcon"),l=t("CodeTabs");return r(),d("div",null,[o(" more "),h,n("ul",null,[n("li",null,[n("a",b,[s("哈希表"),a(e)])]),n("li",null,[n("a",v,[s("NSDictionary"),a(e)])]),n("li",null,[n("a",_,[s("Swift- Dictionary"),a(e)])])]),f,o(" `Ordered Hash Table` - “有序哈希表” "),n("ul",null,[n("li",null,[n("a",g,[s("Swift - OrderedDictionary"),a(e)])]),n("li",null,[n("a",y,[s("Java - LinkedHashMap"),a(e)])]),n("li",null,[n("a",j,[s("Python - OrderedDict"),a(e)])])]),x,n("ul",null,[n("li",null,[n("a",w,[s("🟠 146 - LRU 缓存"),a(e)]),O])]),n("details",q,[C,L,S,a(l,{id:"94",data:[{id:"java"}]},{title0:c(({value:p,isActive:i})=>[s("java")]),tab0:c(({value:p,isActive:i})=>[D]),_:1})]),N,n("ul",null,[n("li",null,[n("a",V,[s("🔴 460 - LFU 缓存"),a(e)]),I])]),T])}const z=u(m,[["render",U],["__file","0x08.hash-table.html.vue"]]);export{z as default};
