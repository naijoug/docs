import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as i,c as l,a as d,f as t}from"./app-gYdSfCGt.js";const o={},c=t('<h2 id="❓flutter-列表优化方案" tabindex="-1"><a class="header-anchor" href="#❓flutter-列表优化方案" aria-hidden="true">#</a> ❓<code>Flutter</code> 列表优化方案</h2><details class="hint-container details"><summary>💡</summary><p>在 Flutter 中，需要处理大量列表数据时，为了优化性能和内存使用，我们主要使用以下几种方法：</p><ol><li><p>ListView.builder: 使用 <code>ListView.builder</code> 可以实现列表的懒加载。它仅在列表项滚动到屏幕内时创建对应的 Widget，因此对于大量的列表项，它可以大大节省创建和渲染列表项所需的时间和内存。</p></li><li><p>使用 const widgets: 在定义静态列表项时，可以使用 const 关键字创建不可变的 widget。这样可以避免在每次构建时都重新创建新的 widget。</p></li><li><p>使用 keys: 如果列表数据中的项可能会在不同的位置移动，那么使用 <code>UniqueKey</code> 或 <code>ValueKey</code> 可以帮助 Flutter 框架识别出哪些 widget 是“一样的”，哪些是需要更新的。这样可以避免无效的 widget 重建。</p></li><li><p>防止列表项更新: 如果列表项的更新不频繁，使用 <code>AutomaticKeepAliveClientMixin</code> 可以保持列表项状态不被销毁，减少不必要的构建。</p></li><li><p>使用分隔线: Flutter 提供了 <code>ListView.separated</code>，可以方便地在列表项之间添加分隔线，而无需在每个列表项中添加分隔线元素，这可以减少 widget 树的深度，提高性能。</p></li><li><p>使用 shrink-wrap: 有些情况下，使用 <code>ListView</code> 会导致列表项无法在列表之外进行布局。此时可以 使用 <code>shrinkWrap</code> 属性来让列表适应其内容的大小。</p></li></ol><p>总的来说，优化 Flutter 列表的关键是尽可能地减少无效的 widget 重建和内存使用，这既需要理解 Flutter 的列表用法，也需要根据实际的应用场景进行针对性的优化。</p></details><h2 id="❓flutter-包体积如何优化" tabindex="-1"><a class="header-anchor" href="#❓flutter-包体积如何优化" aria-hidden="true">#</a> ❓<code>Flutter</code> 包体积如何优化</h2><details class="hint-container details"><summary>💡</summary><p>包体积的优化说到底就是包里面所含有资源的优化，主要包含两类文件一类是资源文件，另一个类是二进制文件。</p><ul><li>资源文件的优化: 图片的压缩，bundle 优化，无用资源的移除，资源的动态下发</li><li>二进制文件优化: 无用代码的移除；减少第三方的依赖；编译优化，主要有编译参数相关，以及底层编译生成产物优化，需要去进行底层研究对一些无用功能的裁剪。</li></ul><p>优化 Flutter 打包体积的步骤：</p><ol><li><p>使用仅包含所需功能的包和插件：只添加你需要的功能包，避免使用过大的库，尤其是当你只需要库的一部分功能时。</p></li><li><p>删除未使用的资源文件：检查项目中的所有资源文件，删除没有被使用到的图片、视频等大型资源文件。</p></li><li><p>压缩图片和音频文件：这些文件往往体积较大，使用一些工具进行压缩可以节省 considerable 的空间。</p></li><li><p>使用 Flutter 的 tree-shaking: Flutter 的编译工具会自动删除“死代码”。保证在项目中无未使用的代码可以让 tree-shaking 更加有效。</p></li><li><p>缩小 native 代码：如果你的应用包含 native (Kotlin/Java/Swift/Objective-C) 的代码，那么也可以通过一些 native 工具来减小它们的体积。例如，Android 可以使用 ProGuard/R8 来进行代码混淆和优化。</p></li><li><p>使用 App Bundle （仅对 Android）：发布到 Google Play Store 时，考虑用 Android App Bundle（.aab 文件）替代 APK。App Bundle 将你的应用拆分成多个 APK，分别对应不同的硬件配置，用户下载时只需要下载对应自身设备的 APK。</p></li><li><p>Reviewing pubspec.yaml: 确保你的_manifest_文件没有包含任何不需要的行，例如无用的依赖和_asset_。</p></li><li><p>运行 flutter build 命令时，开启 --split-debug-info 选项可以将符号信息（Dart的堆栈追踪信息）和程序信息分别保存，以此降低程序本身的体积。</p></li></ol><p>这些都是可以帮助你减小 Flutter 应用打包大小的一些常见步骤。记住，实际效果会根据你的应用具体情况而有所不同。</p></details><h2 id="❓flutter-渲染优化方案" tabindex="-1"><a class="header-anchor" href="#❓flutter-渲染优化方案" aria-hidden="true">#</a> ❓<code>Flutter</code> 渲染优化方案</h2><details class="hint-container details"><summary>💡</summary><p>渲染优化来说主要涉及两个方面，其一是首次加载的渲染，其二是 <code>StatefulWidget</code> 状态改变时页面的重建渲染。</p><ul><li>首次渲染方面: 构建 <code>Widget</code> 时应该合理搭建，减少复杂度；能使用 <code>const</code> 的地方尽量使用</li><li>重建渲染方面: 尽量减少状态改变引起重建区域；减少 <code>saveLayer()</code>的触发</li></ul><p>触发 <code>saveLayer()</code></p><ul><li>ShaderMask</li><li>ColorFilter</li><li>Chip &amp; <code>disabledColorAlpha != 0xff</code></li><li>Text &amp; <code>overflowShader</code></li></ul><p>Flutter 的渲染优化主要分为如下几个方面:</p><ol><li><p>图片优化：</p><ul><li>使用合适大小的图片，避免加载过大的图片。</li><li>使用 Flutter 中的 <code>cacheHeight</code> 和 <code>cacheWidth</code> 对图片进行缩放。</li><li>避免在一个界面显示大量图片，可以使用懒加载的方式，如 ListView.builder。</li><li>使用 <code>FadeInImage</code> 控件实现图片的平滑切换。</li></ul></li><li><p>布局优化：</p><ul><li>减少无关层级的嵌套，尽量避免深层次的布局嵌套。</li><li>使用 <code>const</code> 关键字，避免不必要的重绘。</li><li>避免频繁使用 <code>Opacity</code>，<code>ClipRRect</code> 等比较消耗性能的组件。</li><li>当不需要布局关联时，使用 <code>RepaintBoundary</code> 将部分布局剥离出来，可以有效地分割渲染树。</li></ul></li><li><p>代码方面优化：</p><ul><li>使用 <code>shouldRebuild</code> 避免不必要的 widget 重建。</li><li>尽量使用轻量级组件，尽量避免将大型组件当作 child 传入其他组件。</li><li><code>ListView</code>、<code>GridView</code> 等长列表类的组件尽量使用 <code>ListView.builder</code> 或 <code>GridView.builder</code>，这种模式下，列表子项只在需要时创建，可以极大提升性能。</li></ul></li><li><p>动画优化：</p><ul><li>使用 <code>Flare</code> 代替传统的 <code>Controller</code> 完成复杂的动画。</li><li>动画开启时，使用 <code>timeDilation</code> 延长动画时间，方便调试。</li><li>将动画部分剥离出 <code>RepaintBoundary</code>，避免整个列表频繁重绘。</li></ul></li></ol><p>在优化渲染性能的过程中，Flutter 提供了性能分析工具，如 <code>Observatory</code>、<code>Dart DevTools</code> 等，帮助我们分析和找出性能的瓶颈。</p></details>',6);function a(r,p){return i(),l("div",null,[d(" more "),c])}const n=e(o,[["render",a],["__file","0x06.optimization.html.vue"]]);export{n as default};
