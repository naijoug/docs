import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,a as t,f as e}from"./app-LFcJklNL.js";const p={},o=e(`<h2 id="线程安全" tabindex="-1"><a class="header-anchor" href="#线程安全" aria-hidden="true">#</a> 线程安全</h2><h3 id="❓atomic-线程安全吗" tabindex="-1"><a class="header-anchor" href="#❓atomic-线程安全吗" aria-hidden="true">#</a> ❓<code>atomic</code> 线程安全吗？</h3><details class="hint-container details"><summary>💡</summary><p><code>atomic</code> 属性只保证属性 setter 和 getter 的原子操作，以防止数据被多个线程同时写入或者在写入过程中被另一个线程读取。然而，这并不能完全保证线程安全。</p><blockquote><p>假设有两个线程 A 和 B，它们都尝试更新同一个数值。线程 A 读取该数值，然后在 A 执行写入操作之前，线程 B 也读取了该数值，并且写回了一个新的值。然后线程 A 继续它的写入操作，这样就覆盖了线程 B 的操作。这就是所谓的&quot;竞态条件&quot;，在这种情况下，<code>atomic</code>属性并不能保证线程安全。</p></blockquote><p>虽然 <code>atomic</code> 属性可以保证单独的 getter 或 setter 操作是线程安全的，但是它不能保证一个操作序列（例如先读取，然后根据读取的值做计算，然后写回新的值）是作为一个整体的线程安全。</p><p>如果需要一个线程安全的操作，应使用 <code>mutex</code>（互斥锁）或者其它的线程同步技术。可以使用 <code>DispatchQueue</code>、<code>NSLock</code>、<code>NSOperationQueue</code> 或者用 <code>GCD</code>（<code>Grand Central Dispatch</code>）等方式来处理线程同步。</p></details><h3 id="❓如果让你来实现属性的-atomic-如何实现" tabindex="-1"><a class="header-anchor" href="#❓如果让你来实现属性的-atomic-如何实现" aria-hidden="true">#</a> ❓如果让你来实现属性的 <code>atomic</code>，如何实现？</h3><details class="hint-container details"><summary>💡</summary><p>可以使用互斥锁，对读写操作进行保护，来防止不同线程中的读写操作相互干扰。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Atomic</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 定义 \`DispatchQueue\` 是一个串行队列，所以这个操作是互斥的</span>
  <span class="token keyword">private</span> <span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token class-name">DispatchQueue</span><span class="token punctuation">(</span>label<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;queue.atomic.lock&quot;</span></span><span class="token punctuation">)</span>
  <span class="token keyword">private</span> <span class="token keyword">var</span> value<span class="token punctuation">:</span> <span class="token class-name">T</span>
  <span class="token keyword">public</span> <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> value<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">self</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value
  <span class="token punctuation">}</span>
  <span class="token comment">// get set 中进行加锁保护</span>
  <span class="token keyword">public</span> <span class="token keyword">var</span> atomicValue<span class="token punctuation">:</span> <span class="token class-name">T</span> <span class="token punctuation">{</span>
      <span class="token keyword">set</span> <span class="token punctuation">{</span>
          queue<span class="token punctuation">.</span>sync <span class="token punctuation">{</span>
              value <span class="token operator">=</span> newValue
          <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">get</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> queue<span class="token punctuation">.</span>sync <span class="token punctuation">{</span>
              value
          <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="❓oc-中的锁有哪些" tabindex="-1"><a class="header-anchor" href="#❓oc-中的锁有哪些" aria-hidden="true">#</a> ❓<code>OC</code> 中的锁有哪些？</h3><blockquote><p>自旋和互斥对比？</p></blockquote><blockquote><p>用 <code>C/OC/C++</code> 实现自旋或互斥？</p></blockquote><h3 id="❓nsmutablearray-的线程安全性" tabindex="-1"><a class="header-anchor" href="#❓nsmutablearray-的线程安全性" aria-hidden="true">#</a> ❓<code>NSMutableArray</code> 的线程安全性？</h3><h3 id="看现象" tabindex="-1"><a class="header-anchor" href="#看现象" aria-hidden="true">#</a> “看现象”</h3><blockquote><p>❓以下代码输出是什么？</p></blockquote><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">dispatch_async</span><span class="token punctuation">(</span><span class="token function">dispatch_get_global_queue</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">^</span><span class="token punctuation">{</span>
  <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token keyword">self</span> performSelector<span class="token punctuation">:</span><span class="token keyword">@selector</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span> withObject<span class="token punctuation">:</span>nil afterDelay<span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>test <span class="token punctuation">{</span>
  <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="gcd" tabindex="-1"><a class="header-anchor" href="#gcd" aria-hidden="true">#</a> <code>GCD</code></h2><blockquote><p><code>Grand Central Dispatch</code>（GCD）是 Apple 开发的一个多核编程的解决方案。它主要是通过向指定的队列（<code>Dispatch Queue</code>）中添加要执行的任务（任务 = 工作项 = 代码块）来进行工作的。<code>GCD</code> 的目标是为了最大化利用处理器的多核，同时最小化线程创建和管理的开销。</p></blockquote><h3 id="❓gcd-执行原理" tabindex="-1"><a class="header-anchor" href="#❓gcd-执行原理" aria-hidden="true">#</a> ❓<code>GCD</code> 执行原理？</h3><details class="hint-container details"><summary>💡</summary><ul><li>任务：执行操作的最小单元，只能插入到队列中。它是一个虚拟函数，不能直接访问属性或方法。</li><li>队列（Dispatch Queue）：用于存放任务的先进先出（FIFO）类型的线程安全的数据结构。</li></ul><p><code>GCD</code> 为每个处理器的核心在系统内存中维护一个线程池，当向 <code>DispatchQueue</code> 添加任务时，系统会自动将任务分发到这些线程中运行，以实现任务的并发执行。</p><p><code>DispatchQueue</code> 存在两种类型：<code>Serial Dispatch Queue</code>（串行队列）和 <code>Concurrent Dispatch Queue</code>（并行队列）。每个任务添加到串行队列中会按照添加到队列中的顺序依次执行，而添加到并行队列中的任务则会被调度在多个线程中并发执行。</p><p>GCD 主要有四个特点：</p><ul><li>可用于多核的并行运算</li><li>自动利用更多的CPU内核</li><li>自动管理线程的生命周期（线程的创建，调度和销毁）</li><li>具有线程同步的功能</li></ul></details><h2 id="线程设计" tabindex="-1"><a class="header-anchor" href="#线程设计" aria-hidden="true">#</a> 线程设计</h2><h3 id="❓ios-中如何创建一个常驻线程" tabindex="-1"><a class="header-anchor" href="#❓ios-中如何创建一个常驻线程" aria-hidden="true">#</a> ❓<code>iOS</code> 中如何创建一个常驻线程？</h3><details class="hint-container details"><summary>💡</summary><p>创建一个常驻线程，也就是这个线程并不会在任务执行完后就立即退出，而是能够等待新的任务的加入并执行。这在处理一些持久的、周期性的或者需要在特定线程中执行的任务非常有用。</p><p>核心点在于创建线程时，启动 <code>RunLoop</code>，但是 <code>RunLoop</code> 如果在没有任何事件源时会退出，所以需要添加一个 port 事件让 <code>RunLoop</code> 一直运行。</p><p>下面是一个 <code>Swift</code> 版本的常驻线程</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token comment">/// 守护线程</span>
<span class="token keyword">class</span> <span class="token class-name">DaemonThread</span><span class="token punctuation">:</span> <span class="token class-name">NSObject</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建的守护线程，并开启一个Runloop</span>
    <span class="token keyword">private</span> <span class="token keyword">lazy</span> <span class="token keyword">var</span> thread <span class="token operator">=</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>
        <span class="token comment">// 添加了一个 port 事件源到 RunLoop 中防止它因为没有事件源立即退出</span>
        <span class="token class-name">RunLoop</span><span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Port</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> forMode<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">)</span>
        <span class="token comment">// 启动 RunLoop</span>
        <span class="token class-name">RunLoop</span><span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">override</span> <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment">// 启动线程</span>
        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/// 在守护进程执行任务</span>
    <span class="token keyword">func</span> <span class="token function-definition function">execute</span><span class="token punctuation">(</span>task<span class="token punctuation">:</span> <span class="token attribute atrule">@escaping</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perform</span><span class="token punctuation">(</span><span class="token other-directive property">#selector</span><span class="token punctuation">(</span><span class="token function">runTask</span><span class="token punctuation">(</span><span class="token omit keyword">_</span><span class="token punctuation">:</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> on<span class="token punctuation">:</span> thread<span class="token punctuation">,</span> with<span class="token punctuation">:</span> task<span class="token punctuation">,</span> waitUntilDone<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/// 停止守护线程</span>
    <span class="token keyword">func</span> <span class="token function-definition function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perform</span><span class="token punctuation">(</span><span class="token other-directive property">#selector</span><span class="token punctuation">(</span>clear<span class="token punctuation">)</span><span class="token punctuation">,</span> on<span class="token punctuation">:</span> thread<span class="token punctuation">,</span> with<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">,</span> waitUntilDone<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">/// 清理资源 : 停止 RunLoop、退出线程</span>
    <span class="token attribute atrule">@objc</span> <span class="token keyword">private</span> <span class="token keyword">func</span> <span class="token function-definition function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">CFRunLoopStop</span><span class="token punctuation">(</span><span class="token class-name">CFRunLoopGetCurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/// 执行任务</span>
    <span class="token attribute atrule">@objc</span> <span class="token keyword">private</span> <span class="token keyword">func</span> <span class="token function-definition function">runTask</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> task<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">task</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="❓nstimer-定时器准确吗-如果不准确该怎样实现一个精确的-nstimer" tabindex="-1"><a class="header-anchor" href="#❓nstimer-定时器准确吗-如果不准确该怎样实现一个精确的-nstimer" aria-hidden="true">#</a> ❓<code>NStimer</code> 定时器准确吗？如果不准确该怎样实现一个精确的 <code>NSTimer</code>?</h3><details class="hint-container details"><summary>💡</summary><p><code>NSTimer</code> 的定时并不会非常精确，因为它依赖于 <code>RunLoop</code> 的执行情况，如果 <code>RunLoop</code> 处于除 <code>Default</code> 模式之外的状态或 <code>RunLoop</code> 是忙于其它事情，那么 <code>NSTimer</code> 是不会被执行的。因此，如果你启动了一个每秒触发一次的 NSTimer，实际上它触发的时间间隔可能会稍微大于一秒。</p><p>更精确的定时器方案：</p><ul><li><p><code>GCD</code>：使用 <code>dispatch_after</code> 来实现定时器功能，它可以脱离 <code>RunLoop</code> 工作。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> time<span class="token punctuation">:</span> <span class="token class-name">TimeInterval</span> <span class="token operator">=</span> <span class="token number">2.0</span>
<span class="token class-name">DispatchQueue</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token function">asyncAfter</span><span class="token punctuation">(</span>deadline<span class="token punctuation">:</span> <span class="token class-name">DispatchTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>timestamp</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>CADisplayLink</code>: 这是一个和屏幕刷新率同步的定时器，每一帧刷新都会被调用，精度很高，常用于做动画。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token comment">// 与屏幕刷新同步刷新调用 render 函数</span>
<span class="token keyword">var</span> displayLink<span class="token punctuation">:</span> <span class="token class-name">CADisplayLink</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token class-name">CADisplayLink</span><span class="token punctuation">(</span>target<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">,</span> selector<span class="token punctuation">:</span> <span class="token other-directive property">#selector</span><span class="token punctuation">(</span>render<span class="token punctuation">)</span><span class="token punctuation">)</span>
displayLink<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> <span class="token class-name">RunLoop</span><span class="token punctuation">.</span>current<span class="token punctuation">,</span> forMode<span class="token punctuation">:</span> <span class="token punctuation">.</span>common<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></details>`,21);function c(i,l){return s(),a("div",null,[t(" more "),o])}const r=n(p,[["render",c],["__file","thread.html.vue"]]);export{r as default};
