import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as e,a as s,f as o}from"./app-JXAd7Ynn.js";const t={},i=o(`<hr><h2 id="notificationcenter" tabindex="-1"><a class="header-anchor" href="#notificationcenter" aria-hidden="true">#</a> NotificationCenter</h2><h3 id="❓页面销毁时不移除通知会崩溃吗" tabindex="-1"><a class="header-anchor" href="#❓页面销毁时不移除通知会崩溃吗" aria-hidden="true">#</a> ❓页面销毁时不移除通知会崩溃吗？</h3><details class="hint-container details"><summary>💡</summary><p>是的，如果当页面销毁时没有移除通知，那么可能会导致程序崩溃。</p><p>原因是NSNotificationCenter并不持有观察者，而是根据注册通知时提供的对象和选择器（即方法），在通知发生时去调用对应的方法。当对象销毁后，其内存也跟着释放，如果此时发送通知，那么NSNotificationCenter就会去调用一个不存在的对象，导致程序崩溃。</p><p>典型的错误信息是：“unrecognized selector sent to instance”，意思就是调用了无法识别的方法。</p><p>所以，为了避免这种情况发生，我们在对象销毁前需要取消注册的通知。常见的做法是在对象的<code>dealloc</code>方法中移除自己注册的所有通知：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>dealloc <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token punctuation">[</span>NSNotificationCenter defaultCenter<span class="token punctuation">]</span> removeObserver<span class="token punctuation">:</span><span class="token keyword">self</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样可以保证在对象销毁后不再接收通知，避免异常崩溃。</p></details><h3 id="❓多次添加同一个通知会是什么结果-多次移除通知呢" tabindex="-1"><a class="header-anchor" href="#❓多次添加同一个通知会是什么结果-多次移除通知呢" aria-hidden="true">#</a> ❓多次添加同一个通知会是什么结果？多次移除通知呢？</h3><details class="hint-container details"><summary>💡</summary><p>多次添加同一个通知会导致通知被多次执行。因为在添加通知的时候，NotificationCenter会为每个添加的通知注册一个观察者。当有一个通知被发布的时候，NotificationCenter会查找所有注册了该通知名的观察者并执行对应的选择器（方法）。所以，如果你多次注册了同一个通知和同一个选择器，当该通知被发布的时候，对应的选择器就会被执行多次。</p><p>多次移除同一个通知，系统不会报错，移除操作也不会对性能有影响。系统在移除时会找到对应的观察者并取消其注册，如果没有找到则不会有任何操作。所以多次移除同一个通知是没有问题的，但还是建议按照需要来添加或移除通知，以保持代码干净整洁。如果你确定某个通知已经被移除，那么就没有必要再次移除。</p></details><h3 id="❓下面代码可以接受通知吗" tabindex="-1"><a class="header-anchor" href="#❓下面代码可以接受通知吗" aria-hidden="true">#</a> ❓下面代码可以接受通知吗</h3><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>NSNotificationCenter <span class="token operator">*</span>center <span class="token operator">=</span> <span class="token punctuation">[</span>NSNotificationCenter defaultCenter<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 发送通知</span>
<span class="token punctuation">[</span>center addObserver<span class="token punctuation">:</span><span class="token keyword">self</span> selector<span class="token punctuation">:</span><span class="token keyword">@selector</span><span class="token punctuation">(</span>handleNotification<span class="token punctuation">:</span><span class="token punctuation">)</span> name<span class="token punctuation">:</span><span class="token string">@&quot;One&quot;</span> object<span class="token punctuation">:</span><span class="token operator">@</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 接收通知</span>
<span class="token punctuation">[</span>center postNotificationName<span class="token punctuation">:</span><span class="token string">@&quot;One&quot;</span> object<span class="token punctuation">:</span>nil<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>💡</summary><p>这段代码无法接收到通知。</p><p>原因在于：当你在添加观察者<code>addObserver:selector:name:object:</code>时，你为<code>object</code>参数传入了@1，这意味着你的观察者只处理那些<code>object</code>为@1的通知。</p><p>然而，在你发送通知<code>postNotificationName:object:</code>时，你将<code>object</code>参数设置为nil，这意味着你的通知并没有携带任何对象。</p><p>由于你的观察者只处理那些携带@1对象的通知，因此它不会处理你发送的这个通知。</p><p>要解决这个问题，你可以在发送通知时将<code>object</code>设置为@1，即：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token punctuation">[</span>center postNotificationName<span class="token punctuation">:</span><span class="token string">@&quot;One&quot;</span> object<span class="token punctuation">:</span><span class="token operator">@</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者在添加观察者时将<code>object</code>参数设置为nil，即：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token punctuation">[</span>center addObserver<span class="token punctuation">:</span><span class="token keyword">self</span> selector<span class="token punctuation">:</span><span class="token keyword">@selector</span><span class="token punctuation">(</span>handleNotification<span class="token punctuation">:</span><span class="token punctuation">)</span> name<span class="token punctuation">:</span><span class="token string">@&quot;One&quot;</span> object<span class="token punctuation">:</span>nil<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样，你的观察者就能处理所有名为&quot;One&quot;的通知，不管这个通知是否携带对象。</p></details><h3 id="❓nsnotification-实现原理" tabindex="-1"><a class="header-anchor" href="#❓nsnotification-实现原理" aria-hidden="true">#</a> ❓<code>NSNotification</code> 实现原理？</h3><details class="hint-container details"><summary>💡</summary><p><code>NSNotification</code>的实现原理在于“观察者模式”，以下是它的基本原理：</p><ol><li><p>注册观察者：你的对象（观察者）向<code>NSNotificationCenter</code>（通知中心）注册自己，表示希望接收某一种通知。此时，你需要提供一个选择器，这个选择器是在通知发生后调用的一个方法，你也会提供一个可选的名称和/或发送者，以便筛选需要接收的通知。</p></li><li><p>发送通知：某个对象（通知源）创建了一个<code>NSNotification</code>实例，包含了通知的名称和有关通知所代表事件的信息，然后将这个实例传递给<code>NSNotificationCenter</code>，要求它将通知发送给所有的观察者。</p></li><li><p>接收和处理通知：<code>NSNotificationCenter</code>找到注册听这种通知的所有观察者，然后调用它们提供的选择器，把通知实例作为参数传入。观察者在方法内部可以获取并使用其中的信息。</p></li><li><p>移除观察者：当观察者不再需要监听通知时（比如在对象被销毁前），需要手动告诉<code>NSNotificationCenter</code>移除自己，以防止在观察者不存在时尝试调用观察者的方法引发错误。</p></li></ol><p><code>NSNotificationCenter</code>在处理通知时，它会遍历所有注册的观察者，如果你没有指定通知的发送者或者通知的发送者和注册时的发送者匹配，NSNotificationCenter就会调用这个观察者的方法。这就是<code>NSNotification</code>如何实现通知和观察者之间通信的。</p></details><hr><h2 id="notificationqueue" tabindex="-1"><a class="header-anchor" href="#notificationqueue" aria-hidden="true">#</a> NotificationQueue</h2><h3 id="❓nsnotificationqueue-是异步还是同步发送-在哪个线程响应" tabindex="-1"><a class="header-anchor" href="#❓nsnotificationqueue-是异步还是同步发送-在哪个线程响应" aria-hidden="true">#</a> ❓<code>NSNotificationQueue</code> 是异步还是同步发送？在哪个线程响应？</h3><details class="hint-container details"><summary>💡</summary><p><code>NSNotificationQueue</code> 是 <code>NSNotificationCenter</code> 的扩展，它可以实现异步发送通知以及合并发送相同通知。</p><p>当通过 <code>NSNotificationQueue</code> 的 <code>- (void)enqueueNotification:(NSNotification *)notification postingStyle:(NSPostingStyle)postingStyle</code> 方法发送通知时，这是一个异步过程。通知会被加入一个基于 RunLoop 的队列中，只有当 RunLoop 启动时才会发送通知。</p><p>通知响应的线程一般依赖于添加通知的线程。当你在主线程添加通知，那么你也会在主线程响应这个通知。但需要注意的是，由于 <code>NSNotificationQueue</code> 是基于 RunLoop 的，因此在后台线程中由于默认情况下没有 RunLoop，所以你无法在后台线程响应通过 <code>NSNotificationQueue</code> 发送的通知。如果你希望在后台线程响应，那么你需要自己创建并启动 RunLoop。</p><p>同时，<code>NSNotificationQueue</code> 还提供了一种机制，即合并通知。当你连续发送多个相同的通知时，NSNotificationQueue 会将它们合并为一个通知进行发送，这样可以避免发送大量相同的通知造成的性能问题。</p></details><h3 id="❓nsnotificationqueue-和-runloop的关系" tabindex="-1"><a class="header-anchor" href="#❓nsnotificationqueue-和-runloop的关系" aria-hidden="true">#</a> ❓<code>NSNotificationQueue</code> 和 <code>runloop</code>的关系？</h3><details class="hint-container details"><summary>💡</summary><p><code>NSNotificationQueue</code>的工作是基于<code>RunLoop</code>的。当我们将一个通知加入到<code>NSNotificationQueue</code>时，通知不会立刻被发送出去，而是会被加到当前<code>RunLoop</code>的事件队列中，在下一个<code>RunLoop</code>迭代时才会被处理和发送。</p><p>如果我们将多个相同的通知加入到队列中，<code>NSNotificationQueue</code>会进行合并，等到<code>RunLoop</code>迭代时只发送一个通知，这样可以有效防止大量重复通知导致的性能问题。</p><p>另外，因为<code>RunLoop</code>是线程相关的，每个线程都有且只有一个与之对应的<code>RunLoop</code>，所以<code>NSNotificationQueue</code>的通知发送和接受也是在添加通知的那个线程中进行的。</p><p>同时，需要注意的是在后台线程中，默认情况下<code>RunLoop</code>是不会启动的，这就导致如果我们在后台线程添加通知到<code>NSNotificationQueue</code>，那么这个通知通常不会被发送。如果想要在后台线程发送通知，我们需要手动启动<code>RunLoop</code>。</p></details><hr><h2 id="通知与线程" tabindex="-1"><a class="header-anchor" href="#通知与线程" aria-hidden="true">#</a> 通知与线程</h2><h3 id="❓如何保证通知接收的线程在主线程" tabindex="-1"><a class="header-anchor" href="#❓如何保证通知接收的线程在主线程" aria-hidden="true">#</a> ❓如何保证通知接收的线程在主线程？</h3><details class="hint-container details"><summary>💡</summary><p>我们通常使用Grand Central Dispatch (GCD) 来确保通知的响应是在主线程上执行的。在通知接收到之后，在主线程队列上异步执行一个块来处理通知事件。以下是使用Objective-C来实现的代码示例：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// Notification callback method</span>
<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>handleNotification<span class="token punctuation">:</span><span class="token punctuation">(</span>NSNotification <span class="token operator">*</span><span class="token punctuation">)</span>notification <span class="token punctuation">{</span>
    <span class="token function">dispatch_async</span><span class="token punctuation">(</span><span class="token function">dispatch_get_main_queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">^</span><span class="token punctuation">{</span>
        <span class="token comment">// Handle notification in the main thread here.</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，当接收到通知后，我们调用<code>dispatch_async</code>函数，这将在主队列中异步执行一个代码块，这个代码块内的代码会在主线程中运行，这样我们就能保证通知的处理在主线程中进行。</p><p>这样做可以确保在接收到通知时，我们无论在哪个线程，都可以安全地进行UI更新和其他只能在主线程进行的操作。</p></details><h3 id="❓通知的发送时同步还是异步" tabindex="-1"><a class="header-anchor" href="#❓通知的发送时同步还是异步" aria-hidden="true">#</a> ❓通知的发送时同步还是异步？</h3><details class="hint-container details"><summary>💡</summary><p>NSNotification的发送是同步的，也就是说当一个通知被发出，NSNotificationCenter会立刻逐个遍历所有的观察者，执行对应的处理方法，直到所有观察者都处理完通知，才会继续执行发送通知后的代码。</p><p>在执行观察者的处理代码时，是在发送通知的线程内执行的。这意味着如果在主线程发送通知，通知的处理也将在主线程执行。如果在后台线程发送通知，通知的处理也将在后台线程执行。</p><p>因此在处理通知时，如果有耗时操作或者需要更新UI，你需要确保在合适的线程里执行。对于耗时操作应该放到后台线程来执行，而更新UI应该切回主线程。</p><p>NSNotificationCenter同时也提供了异步发送通知的方法：<code>postNotification:object:userInfo:deliverImmediately:</code>。这个方法会把通知添加到当前runloop的队列中，然后立即返回，通知的处理会在runloop下次循环时执行。但是这个方法在iOS中并未公开，只在macOS中可以使用。</p></details><h3 id="❓通知的发送和接受是在同一个线程里吗-如何异步发送消息" tabindex="-1"><a class="header-anchor" href="#❓通知的发送和接受是在同一个线程里吗-如何异步发送消息" aria-hidden="true">#</a> ❓通知的发送和接受是在同一个线程里吗？如何异步发送消息？</h3><details class="hint-container details"><summary>💡</summary><p><code>NSNotification</code>的发送和接收默认情况下是在同一个线程中进行的。简单来说，如果你在主线程中发布通知，那么处理通知的方法也会在主线程中运行。同样，如果你在后台线程中发布通知，那么接收到的通知也会在后台线程中处理。</p><p>这种情况通常需要开发者特别留意，因为假如你在后台线程接收到通知并尝试进行UI更新，这将会导致问题，因为UI更新需要在主线程中进行。</p><p>对于如何异步发送通知，Cocoa并没有提供直接的API，但你可以通过<code>dispatch_async</code>函数将发送通知的操作放到你想要的队列（主队列或者其他自定义的并发队列）中进行。</p><p>比如以下示例是在主队列中异步发送通知：</p><div class="language-objective-c line-numbers-mode" data-ext="objective-c"><pre class="language-objective-c"><code>dispatch_async(dispatch_get_main_queue(), ^{
    [[NSNotificationCenter defaultCenter] postNotificationName:@&quot;NotificationName&quot; object:nil];
});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码会把通知的发送放到主队列的末尾，发送的操作会在主队列的当前循环结束后的下一次循环中进行，从而实现了异步发送通知。</p></details>`,25);function c(p,d){return a(),e("div",null,[s(" more "),i])}const r=n(t,[["render",c],["__file","0x05.notification.html.vue"]]);export{r as default};
