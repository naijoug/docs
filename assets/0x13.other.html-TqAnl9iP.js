import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,a as t,f as o}from"./app-g9omgN1g.js";const p={},e=o(`<hr><h2 id="字符编码" tabindex="-1"><a class="header-anchor" href="#字符编码" aria-hidden="true">#</a> 字符编码</h2><h3 id="❓字符编码都知道哪些" tabindex="-1"><a class="header-anchor" href="#❓字符编码都知道哪些" aria-hidden="true">#</a> ❓字符编码都知道哪些</h3><details class="hint-container details"><summary>💡</summary><ul><li><p><code>ASCII</code> 编码：最早最基础的字符编码方式，只使用 7 位，可以表示 128 个字符，主要用来表示英文字符。</p></li><li><p><code>ISO 8859-1</code>：也叫 <code>Latin-1</code> 编码，一种 8 位的编码方式，可以表示 256 个字符，用以表示大部分欧洲语言。</p></li><li><p><code>Unicode</code>：为了解决不同字符集转换和文本处理问题，提出了 <code>Unicode</code> 这种编码方式。<code>Unicode</code> 可以用来表示世界上几乎所有的文字。</p><ul><li><p><code>UTF-8</code>：是 <code>Unicode</code>的一种实现方式。<code>UTF-8</code> 使用 1 到 4 个字节表示一个字符，长度可变。</p></li><li><p><code>UTF-16</code>：是 <code>Unicode</code> 的另一种实现方式，使用 2 或 4 个字节表示一个字符，包含音节和补充平面字符。</p></li></ul></li><li><p><code>GB2312/GBK/GB18030</code>：主要用于表示简体中文字符。</p><ul><li><code>GB2312</code> 用于表示 6763 个简体中文字符</li><li><code>GBK</code> 包含了更多的字符</li><li><code>GB18030</code> 完全兼容 <code>Unicode</code>。</li></ul></li><li><p><code>Big5</code>：主要用于表示繁体中文字符。</p></li></ul></details><hr><h2 id="文件格式" tabindex="-1"><a class="header-anchor" href="#文件格式" aria-hidden="true">#</a> 文件格式</h2><h3 id="❓在不知道二进制文件格式的情况下如何区分文件" tabindex="-1"><a class="header-anchor" href="#❓在不知道二进制文件格式的情况下如何区分文件" aria-hidden="true">#</a> ❓在不知道二进制文件格式的情况下如何区分文件</h3><details class="hint-container details"><summary>💡</summary><ul><li><p>文件扩展名：虽然文件扩展名不能百分之百保证文件类型，但是它却是一种最便捷的方式。</p><blockquote><p>例如，<code>.jpg</code> 和 <code>.png</code> 常常是图片文件，<code>.exe</code> 通常是 <code>Windows</code> 下的可执行文件，<code>.txt</code> 通常是文本文件等。</p></blockquote></li><li><p>文件头信息：许多文件类型（如<code>JPEG</code>、<code>PNG</code>、<code>MP3</code>等）都含有特定的文件头(<code>Binary Signature / Magic Number</code>)，这是一段位于文件开头的特定的二进制信息。通过读取二进制数据的前几个字节，就可以得到一些线索。</p><blockquote><p>前提：要有对应的文件头信息数据库作为对照才行。</p></blockquote></li><li><p>文件大小：某些类型的文件有其特定的大小范围。</p><blockquote><p>例如简单的文本文件通常不会很大，而一些图像、视频或者音频文件则通常较大。</p></blockquote></li><li><p>文件命令：在 <code>Unix/Linux</code> 操作系统中，文件命令可以用来查看文件类型。</p><blockquote><p>这个命令会读取文件的文件头的二进制信息来推断文件类型。</p></blockquote></li><li><p>专业工具：有很多专业的文件分析工具。</p><blockquote><p>例如 <code>TrID</code>、<code>DROID</code> 等，它们有大规模的文件类型数据库，可以识别上千种文件类型。</p></blockquote></li></ul></details><h3 id="❓一个文件有哪些属性-怎么获取-文件描述符" tabindex="-1"><a class="header-anchor" href="#❓一个文件有哪些属性-怎么获取-文件描述符" aria-hidden="true">#</a> ❓一个文件有哪些属性，怎么获取（文件描述符）</h3><details class="hint-container details"><summary>💡</summary><p>文件属性：</p><ul><li>名称：文件的名称，包括文件的扩展名。</li><li>大小：文件的大小。通常以字节为单位。</li><li>创建日期和时间：创建文件的日期和时间。</li><li>修改日期和时间：文件最后修改的日期和时间。</li><li>访问日期和时间：最后访问文件的日期和时间。</li><li>文件类型：文件的类型，如普通文件、目录文件、链接文件等。</li><li>所有者：文件的所有者，通常指的是创建该文件的用户。</li><li>文件权限：对文件的访问权限，包括读、写、执行。</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在 Unix 或 Linux 中，可以使用 fstat、stat、lstat 来获取文件的属性</span>
    <span class="token keyword">struct</span> <span class="token class-name">stat</span> fileStat<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">stat</span><span class="token punctuation">(</span><span class="token string">&quot;/path/to/your/file&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>fileStat<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Informations of the file: \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;File Size: \\t\\t%d bytes\\n&quot;</span><span class="token punctuation">,</span>fileStat<span class="token punctuation">.</span>st_size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 文件的大小</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Number of Links: \\t%d\\n&quot;</span><span class="token punctuation">,</span>fileStat<span class="token punctuation">.</span>st_nlink<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;File inode: \\t\\t%d\\n&quot;</span><span class="token punctuation">,</span>fileStat<span class="token punctuation">.</span>st_ino<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;File Permissions: \\t&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 文件的权限</span>
    <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token function">S_ISDIR</span><span class="token punctuation">(</span>fileStat<span class="token punctuation">.</span>st_mode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&quot;d&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;-&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>fileStat<span class="token punctuation">.</span>st_mode <span class="token operator">&amp;</span> S_IRUSR<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&quot;r&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;-&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>fileStat<span class="token punctuation">.</span>st_mode <span class="token operator">&amp;</span> S_IWUSR<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&quot;w&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;-&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>fileStat<span class="token punctuation">.</span>st_mode <span class="token operator">&amp;</span> S_IXUSR<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&quot;x&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;-&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>fileStat<span class="token punctuation">.</span>st_mode <span class="token operator">&amp;</span> S_IRGRP<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&quot;r&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;-&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>fileStat<span class="token punctuation">.</span>st_mode <span class="token operator">&amp;</span> S_IWGRP<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&quot;w&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;-&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>fileStat<span class="token punctuation">.</span>st_mode <span class="token operator">&amp;</span> S_IXGRP<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&quot;x&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;-&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>fileStat<span class="token punctuation">.</span>st_mode <span class="token operator">&amp;</span> S_IROTH<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&quot;r&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;-&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>fileStat<span class="token punctuation">.</span>st_mode <span class="token operator">&amp;</span> S_IWOTH<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&quot;w&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;-&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>fileStat<span class="token punctuation">.</span>st_mode <span class="token operator">&amp;</span> S_IXOTH<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&quot;x&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;-&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;The file %s a symbolic link\\n&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token function">S_ISLNK</span><span class="token punctuation">(</span>fileStat<span class="token punctuation">.</span>st_mode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&quot;is&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;is not&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><hr><h2 id="图片" tabindex="-1"><a class="header-anchor" href="#图片" aria-hidden="true">#</a> 图片</h2><h3 id="❓bitmap-的结构" tabindex="-1"><a class="header-anchor" href="#❓bitmap-的结构" aria-hidden="true">#</a> ❓<code>bitmap</code> 的结构</h3><details class="hint-container details"><summary>💡</summary><blockquote><p>位图（<code>Bitmap</code>）是一种将图像根据每个像素点分别存储和表示的方式。位图由许多称为像素的矩阵组成，每个像素表示一个点的颜色。</p></blockquote><p>基本结构：</p><ul><li>位图文件头（<code>Bitmap File Header</code>）：包含位图文件的类型、大小和处理方式的信息。</li><li>位图信息头（<code>Bitmap Information Header</code>）：包含位图的尺寸、颜色、压缩方式等图像的详细信息。</li><li>颜色表（<code>Color Table</code>）：包含整个图像可能使用的所有颜色信息。</li><li>像素数据（<code>Pixel Data</code>）：真正的位图数据，记录了位图中每一个像素的颜色信息。</li></ul><p><code>Bitmap</code> 有着良好的图像效果和兼容性，但与矢量图形相比，其缺点是文件相对较大，且如果将位图进行放大操作，可能会出现失真和马赛克现象。</p></details><h3 id="❓图片格式有哪些-有什么区别" tabindex="-1"><a class="header-anchor" href="#❓图片格式有哪些-有什么区别" aria-hidden="true">#</a> ❓图片格式有哪些，有什么区别</h3><details class="hint-container details"><summary>💡</summary><ul><li><p><code>BMP</code>(Bitmap): 是一种未经压缩的格式.</p><blockquote><p>通常用于 <code>Windows</code> 中的简单图像和图标，文件较大。</p></blockquote></li><li><p><code>JPEG</code> (<code>Joint Photographic Experts Group</code>): 使用有损压缩，通常用于存储照片和复杂图像。</p><ul><li>优点：可以根据需要调整压缩级别以达到理想的文件大小。</li><li>缺点：如果压缩级别过高可能导致图像质量明显降低。</li></ul></li><li><p><code>PNG</code> (<code>Portable Network Graphics</code>): 使用无损压缩，可以支持透明度（alpha通道）。</p><blockquote><p>通常用于网页设计和需要透明效果的地方。</p></blockquote></li><li><p><code>GIF</code> (<code>Graphics Interchange Format</code>): 使用无损压缩，支持动画和透明度，但只有 <code>256</code> 种颜色。</p><blockquote><p>通常用于简单动画和图标。</p></blockquote></li><li><p><code>WebP</code>: 是谷歌开发的一种旨在加快图像加载速度的图像格式。<code>WebP</code> 支持有损压缩。</p></li><li><p><code>SVG</code> (<code>Scalable Vector Graphics</code>): 是一种基于 <code>XML</code>，用于描述二维向量图形的图像格式。</p><blockquote><p>优点是可无损缩放。</p></blockquote></li><li><p><code>TIFF</code> (<code>Tagged Image File Format</code>): 可以使用无损压缩或者无压缩，支持多页和图层。</p><blockquote><p>常用于出版、印刷或者其他专业领域.。</p></blockquote></li><li><p><code>RAW</code>: 未经压缩或者只进行轻微压缩，质量高但文件大。</p><blockquote><p>用于存储数码相机捕获的全部数据的未处理图像文件。</p></blockquote></li></ul></details><h3 id="❓图像的压缩方式有哪些" tabindex="-1"><a class="header-anchor" href="#❓图像的压缩方式有哪些" aria-hidden="true">#</a> ❓图像的压缩方式有哪些</h3><details class="hint-container details"><summary>💡</summary><ul><li><p>无损压缩：原始图像的所有信息都被保留下来，压缩和解压缩之后的图像与原图像完全一样。</p><blockquote><p>典型的无损压缩格式有 <code>GIF</code> 和 <code>PNG</code>。</p></blockquote><p>无损压缩方法：</p><ul><li>游程编码：游程编码是将连续的相同的数据值编码为一个数据值和它的长度。 <blockquote><p>例如，对于黑白图像，大片的黑/白区域就可以通过游程编码进行压缩。</p></blockquote></li><li>霍夫曼编码：霍夫曼编码是一种效率很高的编码方式，在 <code>JPEG</code> 中也用到了霍夫曼编码。</li><li>预测编码：在预测编码中，每个像素被编码成原始值与预测值之间的差。</li></ul></li><li><p>有损压缩：会丢弃图像中的一部分信息，通常是一些对于视觉影响较小的部分。这种方式压缩后的图像与原图像有所区别，但视觉效果往往相差不大。有损压缩可以实现比无损压缩更高的压缩率。</p><blockquote><p>典型的有损压缩格式有 <code>JPEG</code> 和 <code>WebP</code>。</p></blockquote><p>有损压缩的方法：</p><ul><li>转换编码：如使用离散余弦变换（<code>DCT</code>）等方法把像素的色彩和亮度信息转换为频率信息，然后丢弃一些频率信息。</li><li>量化：这是一种精度降低的方法。高的量化级别会增加压缩比，但也会降低图像质量。</li><li>子采样：这是减少色度信息的方法。人眼对颜色的敏感度低于亮度，所以可以降低色度信息的精度以达到压缩的目的。</li></ul></li></ul></details><h3 id="❓怎么将彩色的图片转化为黑白的" tabindex="-1"><a class="header-anchor" href="#❓怎么将彩色的图片转化为黑白的" aria-hidden="true">#</a> ❓怎么将彩色的图片转化为黑白的</h3><details class="hint-container details"><summary>💡</summary><p>基本方法：将图片的颜色信息转换为灰度信息。</p><ul><li><p>手动转换</p><blockquote><p>对于图片中的每一个像素，把它的红绿蓝(<code>RGB</code>)值转换为一个单独的灰度值。</p></blockquote><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 通过计算加权平均值，公式中的权重取决于人眼对不同颜色的敏感程度。绿色的权重最高，因为人眼对绿色最敏感。</span>
Gray <span class="token operator">=</span> R<span class="token operator">*</span><span class="token number">0.299</span> <span class="token operator">+</span> G<span class="token operator">*</span><span class="token number">0.587</span> <span class="token operator">+</span> B<span class="token operator">*</span><span class="token number">0.114</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用 <code>Python</code> 库</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 使用 Python 的 PIL 库进行彩色到黑白转换</span>
<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image
img <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;input.jpg&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token string">&#39;L&#39;</span><span class="token punctuation">)</span>
img<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">&#39;output.jpg&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># &#39;L&#39;模式表示灰度信息。PIL 库会使用一个算法把每个像素的红绿蓝(RGB)值转换为一个灰度值。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></details><hr><h2 id="密码学" tabindex="-1"><a class="header-anchor" href="#密码学" aria-hidden="true">#</a> 密码学</h2><h3 id="❓pki-体系当中加密和签名有什么区别" tabindex="-1"><a class="header-anchor" href="#❓pki-体系当中加密和签名有什么区别" aria-hidden="true">#</a> ❓<code>PKI</code> 体系当中加密和签名有什么区别</h3><details class="hint-container details"><summary>💡</summary><blockquote><p>公钥基础设施（<code>PKI</code>）是一种用于实现数字签名、身份验证、加密等功能的技术框架。</p></blockquote><p>主要区别：</p><ul><li><p><strong>加密：</strong> 主要用于确保信息的保密性。消息发送者使用接收者的公钥进行加密，接收者使用自己的私钥进行解密。这样，即使信息被第三方截获，由于没有私钥，他们也无法解读信息内容。</p></li><li><p><strong>签名：</strong> 主要用于验证信息的完整性和消息的发送者身份。消息发送者使用自己的私钥对原始信息进行加密，得到的结果就是签名。接收者使用发送者的公钥对签名进行解密，并与自己独立得到的初始信息摘要进行对比，如果一致，那么说明信息没有被篡改，发送者身份也得到了验证。</p></li></ul><p>总结：加密主要是为了保护信息内容的保密性，防止被第三方窃取，而签名主要是为了验证信息的来源和完整性，防止被第三方伪造或篡改。</p></details>`,24);function c(i,l){return s(),a("div",null,[t(" more "),e])}const r=n(p,[["render",c],["__file","0x13.other.html.vue"]]);export{r as default};
