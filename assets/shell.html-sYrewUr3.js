import{_ as l}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as c,c as p,a as i,b as n,e as s,d as e,f as t}from"./app-Epb51Bxn.js";const d={},r=n("blockquote",null,[n("p",null,"Shell 脚本 : 包含一系列命令的文件"),n("p",null,"Shell : 读取脚本文件，并执行脚本中的所有命令 (== 在命令行一条一条的输入命令)")],-1),u=n("h2",{id:"reference",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reference","aria-hidden":"true"},"#"),s(" Reference")],-1),k={href:"https://www.runoob.com/linux/linux-shell.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/ohmyzsh/ohmyzsh",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/52fhy/shell-book",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/idank/explainshell",target:"_blank",rel:"noopener noreferrer"},h=n("blockquote",null,[n("p",null,"match command-line arguments to their help text")],-1),g=t(`<h2 id="concept" tabindex="-1"><a class="header-anchor" href="#concept" aria-hidden="true">#</a> Concept</h2><ul><li><p>命令种类</p><table><thead><tr><th>命令种类</th><th>说明</th></tr></thead><tbody><tr><td>可执行程序</td><td>使用编程语言(C、C++、Java、Python...)编写，编译成的可执行二进制文件</td></tr><tr><td>Shell 内建命令</td><td>Shell (builtins) 命令 (如 cd、ls...)</td></tr><tr><td>脚本定义的 Shell 函数</td><td>Shell 脚本中，自定义一系列操作组合的 Shell 函数</td></tr><tr><td>命令别名</td><td>定义其它命令的别名</td></tr></tbody></table></li><li><p>文件描述符</p><table><thead><tr><th>描述符</th><th>说明</th></tr></thead><tbody><tr><td><code>STDIN</code></td><td>0, 标准输入</td></tr><tr><td><code>STDOUT</code></td><td>1, 标准输出</td></tr><tr><td><code>STDERR</code></td><td>2, 标准错误输出</td></tr></tbody></table></li><li><p>脚本目录</p><table><thead><tr><th>目录</th><th>权限</th></tr></thead><tbody><tr><td><code>~/bin</code></td><td>个人脚本(当前用户可用)</td></tr><tr><td><code>/usr/local/bin</code></td><td>个人脚本(所有用户可用)</td></tr><tr><td><code>/usr/local/sbin</code></td><td>系统管理员脚本</td></tr><tr><td><code>/bin</code> &amp; <code>/usr/bin</code></td><td>系统提供的一下脚本(不要改动)</td></tr><tr><td><code>/sbin</code> &amp; <code>/usr/sbin</code></td><td>系统提供的系统管理员脚本(不要改动)</td></tr></tbody></table></li><li><p>Shell 脚本中的 $</p><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td><code>$$</code></td><td>Shell 本身的进程ID (ProcessID)</td></tr><tr><td><code>$!</code></td><td>Shell 最后运行的后台进程ID</td></tr><tr><td><code>$?</code></td><td>最后运行的命令的结束代码 (返回值，0: 正确，其它: 错误)</td></tr><tr><td><code>$-</code></td><td>显示 Shell 使用的当前选项，与 set 功能相同</td></tr><tr><td><code>$*</code></td><td>所有参数列表，以&quot;<code>$1 $2 … $n</code>&quot;的形式输出所有参数</td></tr><tr><td><code>$@</code></td><td>所有参数列表，以&quot;<code>$1</code>&quot; &quot;<code>$2</code>&quot; … &quot;<code>$n</code>&quot; 的形式输出所有参数</td></tr><tr><td><code>$#</code></td><td>Shell 的参数个数</td></tr><tr><td><code>$0</code></td><td>Shell 本身的文件名</td></tr><tr><td><code>$1~$n</code></td><td>Shell 的各参数值，<code>$1</code>是第1个参数，<code>$2</code>是第2个参数...，<code>\${10}</code>是第10个参数 (<code>&gt; 10</code> 需要使用<code>{}</code>)</td></tr></tbody></table></li></ul><h2 id="通配符" tabindex="-1"><a class="header-anchor" href="#通配符" aria-hidden="true">#</a> 通配符</h2><ul><li><p>通配符表</p><table><thead><tr><th style="text-align:center;">通配符</th><th>意义</th></tr></thead><tbody><tr><td style="text-align:center;"><code>*</code></td><td>匹配任意多个字符(包括零个或一个)</td></tr><tr><td style="text-align:center;"><code>?</code></td><td>匹配任意一个字符(不包括零个)</td></tr><tr><td style="text-align:center;"><code>[characters]</code></td><td>匹配任意一个属于字符集中的字符</td></tr><tr><td style="text-align:center;"><code>[!characters]</code></td><td>匹配任意一个不是字符集中的字符</td></tr><tr><td style="text-align:center;"><code>[[:class:]]</code></td><td>匹配任意一个属于指定<code>字符类</code>(详见字符类表)中的字符</td></tr></tbody></table></li><li><p>字符类表</p><table><thead><tr><th>字符类</th><th>意义</th></tr></thead><tbody><tr><td><code>[:alnum:]</code></td><td>匹配任意一个字母或数字</td></tr><tr><td><code>[:alpha:]</code></td><td>匹配任意一个字母</td></tr><tr><td><code>[:digit:]</code></td><td>匹配任意一个数字</td></tr><tr><td><code>[:lower:]</code></td><td>匹配任意一个小写字母</td></tr><tr><td><code>[:upper]</code></td><td>匹配任意一个大写字母</td></tr></tbody></table></li><li><p>范例</p><table><thead><tr><th style="text-align:center;">模式</th><th>匹配对象</th></tr></thead><tbody><tr><td style="text-align:center;"><code>*</code></td><td>所有文件</td></tr><tr><td style="text-align:center;"><code>g*</code></td><td>文件名以“g”开头的文件</td></tr><tr><td style="text-align:center;"><code>b*.txt</code></td><td>以”b” 开头，中间有零个或任意多个字符，并以”.txt” 结尾 的文件</td></tr><tr><td style="text-align:center;"><code>Data???</code></td><td>以“Data”开头，其后紧接着 3 个字符的文件</td></tr><tr><td style="text-align:center;"><code>[abc]*</code></td><td>文件名以”a”，”b”，或”c”开头的文件</td></tr><tr><td style="text-align:center;"><code>BACKUP.[0-9][0-9][0-9]</code></td><td>以”BACKUP.” 开头，并紧接着3个数字的文件</td></tr><tr><td style="text-align:center;"><code>[[:upper:]]*</code></td><td>以大写字母开头的文件</td></tr><tr><td style="text-align:center;"><code>[![:digit:]]*</code></td><td>不以数字开头的文件</td></tr><tr><td style="text-align:center;"><code>*[[:lower:]123]</code></td><td>文件名以小写字母结尾， 或以“1”，“2”，或“3”结尾的文件</td></tr></tbody></table></li></ul><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">cat</span> /etc/shells   <span class="token comment"># 查看本机 shell 种类</span>
$ <span class="token builtin class-name">echo</span> <span class="token environment constant">$SHELL</span>       <span class="token comment"># 查看当前使用 shell</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,6),f=n("li",null,[n("p",null,"sh : Bourne Shell")],-1),y={href:"https://wiki.archlinux.org/index.php/Bash_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)",target:"_blank",rel:"noopener noreferrer"},q=t("<blockquote><p>Bourne Again Shell</p></blockquote><ul><li>1.<code>/etc/profile</code></li><li>2.<code>/etc/paths</code></li><li>3.<code>~/.bash_profile</code> ( bash 下，在这个文件中配置环境变量)</li><li>4.<code>~/.bash_login</code></li><li>5.<code>~/.profile</code></li><li>6.<code>~/.bashrc</code></li></ul>",2),x={href:"https://wiki.archlinux.org/index.php/Zsh_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)",target:"_blank",rel:"noopener noreferrer"},$=t("<ul><li>1.<code>/etc/zshenv</code></li><li>2.<code>~/.zshenv</code></li><li>3.<code>~/.zprofile</code> ( zsh 下，在这个文件中配置环境变量)</li><li>4.<code>~/.zlogin</code></li><li>5.<code>~/.zshrc</code></li></ul>",1),_=t(`<h2 id="usage-1" tabindex="-1"><a class="header-anchor" href="#usage-1" aria-hidden="true">#</a> Usage</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash # Shebang : 指定解析脚本使用的 Shell 程序</span>

<span class="token comment"># &gt; 注释 : 注释以 “#” 开头，会被解释器忽略</span>
<span class="token comment"># &gt; 多行注释 : EOF 可以使用其它符号(&#39;、!)代替</span>
:<span class="token operator">&lt;&lt;</span><span class="token string">EOF
xxx...
xxx...
EOF</span>

<span class="token comment"># &gt; 变量 : 字母、数组和下划线 (首字母不能为数字，不能使用 Shell 中的关键字)</span>
<span class="token assign-left variable">num</span><span class="token operator">=</span><span class="token number">100</span>     <span class="token comment"># 定义变量 【注：等号两边不能有空格】</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$num</span>   <span class="token comment"># 输出变量 num</span>
<span class="token assign-left variable">num</span><span class="token operator">=</span><span class="token number">99</span>      <span class="token comment"># 修改变量</span>
<span class="token builtin class-name">echo</span> <span class="token variable">\${num}</span> <span class="token comment"># 输出变量 num 【注：花括号可以省略，添加时为了帮助解析器识别】</span>
<span class="token builtin class-name">unset</span> num   <span class="token comment"># 删除变量 num 【注：删除后不能使用，只读变量不能删除】</span>
<span class="token comment"># &gt; 只读变量 : 只读变量定义后不能修改和删除</span>
<span class="token assign-left variable">PI</span><span class="token operator">=</span><span class="token number">3.1415926</span> 
<span class="token builtin class-name">readonly</span> PI <span class="token comment"># 定义只读变量 PI</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$PI</span>

<span class="token comment"># &gt; 字符串</span>
<span class="token comment">#   单引号 : 原样输出字符串，不能使用变量和转义字符</span>
<span class="token comment">#   双引号 : 可以使用变量和转义字符</span>
<span class="token assign-left variable">str</span><span class="token operator">=</span><span class="token string">&#39;this is a string&#39;</span>          <span class="token comment"># 单引号字符串</span>
<span class="token assign-left variable">str2</span><span class="token operator">=</span><span class="token string">&quot;the num is <span class="token entity" title="\\&quot;">\\&quot;</span><span class="token variable">\${num}</span><span class="token entity" title="\\&quot;">\\&quot;</span>&quot;</span>    <span class="token comment"># 双引号字符串</span>
<span class="token comment"># &gt; 拼接字符串</span>
<span class="token assign-left variable">str3</span><span class="token operator">=</span><span class="token string">&#39;the num is &quot;&#39;</span><span class="token variable">\${num}</span><span class="token string">&#39;&quot; !&#39;</span>  
<span class="token comment"># &gt; 字符串长度</span>
<span class="token builtin class-name">echo</span> <span class="token variable">\${<span class="token operator">#</span>str}</span>        <span class="token comment"># 打印 str1 字符串的长度</span>
<span class="token comment"># &gt; 截取子字符串</span>
<span class="token builtin class-name">echo</span> <span class="token variable">\${str<span class="token operator">:</span>0<span class="token operator">:</span>4}</span>     <span class="token comment"># 截取第0个字符开始的4个字符</span>
<span class="token comment"># &gt; 查找子字符串</span>
<span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">\`</span><span class="token function">expr</span> index <span class="token string">&quot;<span class="token variable">$str</span>&quot;</span> is<span class="token variable">\`</span></span> <span class="token comment"># ?</span>

<span class="token comment"># &gt; 索引数组 : 支持一维数组，不支持多维数组</span>
<span class="token comment"># &gt; 定义数组</span>
<span class="token assign-left variable">tuple</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">&quot;one&quot;</span> <span class="token string">&quot;two&quot;</span> <span class="token string">&quot;three&quot;</span><span class="token punctuation">)</span>
<span class="token assign-left variable">tuple2</span><span class="token operator">=</span><span class="token punctuation">(</span>
    <span class="token string">&quot;one&quot;</span>
    <span class="token string">&quot;two&quot;</span>
    <span class="token string">&quot;three&quot;</span>
<span class="token punctuation">)</span>
tuple3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">&quot;one&quot;</span>
tuple3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">&quot;two&quot;</span>
tuple3<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">&quot;three&quot;</span>
<span class="token comment"># &gt; 读取数组</span>
<span class="token builtin class-name">echo</span> <span class="token variable">\${tuple<span class="token punctuation">[</span>0<span class="token punctuation">]</span>}</span>    <span class="token comment"># 读取 tuple 数组第一个元素值</span>
<span class="token builtin class-name">echo</span> <span class="token variable">\${tuple<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span>    <span class="token comment"># 读取 tuple 数组所有值</span>
<span class="token comment"># &gt; 数组长度</span>
<span class="token builtin class-name">echo</span> <span class="token variable">\${<span class="token operator">#</span>tuple<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span>   <span class="token comment"># 获取数组长度</span>
<span class="token builtin class-name">echo</span> <span class="token variable">\${<span class="token operator">#</span>tuple<span class="token punctuation">[</span>*<span class="token punctuation">]</span>}</span>   <span class="token comment"># 获取数组长度</span>
<span class="token builtin class-name">echo</span> <span class="token variable">\${<span class="token operator">#</span>tuple<span class="token punctuation">[</span>2<span class="token punctuation">]</span>}</span>   <span class="token comment"># 获取第3个元素长度</span>

<span class="token comment"># 关联数组 : 类似字典，索引可以自定义key</span>
<span class="token builtin class-name">declare</span> <span class="token parameter variable">-a</span> dic
<span class="token assign-left variable">dic</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">[</span>key1<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">&quot;value1&quot;</span> <span class="token punctuation">[</span>key2<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">&quot;value2&quot;</span> <span class="token punctuation">[</span>key3<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">&quot;value3&quot;</span><span class="token punctuation">)</span>
<span class="token builtin class-name">echo</span> <span class="token variable">\${dic<span class="token punctuation">[</span>key1<span class="token punctuation">]</span>}</span>   <span class="token comment"># 打印 key1 的值</span>
<span class="token builtin class-name">echo</span> <span class="token variable">\${<span class="token operator">!</span>dic<span class="token punctuation">[</span>*<span class="token punctuation">]</span>}</span>     <span class="token comment"># 打印所有 key</span>
<span class="token builtin class-name">echo</span> <span class="token variable">\${dic<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span>      <span class="token comment"># 打印所有 value</span>
<span class="token comment"># 遍历所有 key</span>
<span class="token keyword">for</span> <span class="token for-or-select variable">key</span> <span class="token keyword">in</span> <span class="token variable">\${<span class="token operator">!</span>dic<span class="token punctuation">[</span>*<span class="token punctuation">]</span>}</span><span class="token punctuation">;</span><span class="token keyword">do</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$key</span>: <span class="token variable">\${dic<span class="token punctuation">[</span>$key<span class="token punctuation">]</span>}</span>&quot;</span>
<span class="token keyword">done</span>

<span class="token comment"># &gt; 运算符</span>
<span class="token comment"># &gt; 算法运算符 : + 、- 、* 、/ 、%、= 、==、!=</span>
<span class="token comment">#  expr : 表达式计算工具, 用法: \`expr [算术表达式]\`</span>
<span class="token assign-left variable">sum</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span><span class="token function">expr</span> <span class="token number">1</span> + <span class="token number">1</span><span class="token variable">\`</span></span>
<span class="token builtin class-name">echo</span> <span class="token string">&#39;1 + 1 = &#39;</span><span class="token variable">$sum</span>
<span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">3</span>
<span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">5</span>
<span class="token assign-left variable">res</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span><span class="token function">expr</span> $a + $b<span class="token variable">\`</span></span>  
<span class="token assign-left variable">res</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span><span class="token function">expr</span> $a - $b<span class="token variable">\`</span></span>
<span class="token assign-left variable">res</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span><span class="token function">expr</span> $a * $b<span class="token variable">\`</span></span>
<span class="token comment"># &gt; 关系运算符 </span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token operator">==</span> <span class="token variable">$b</span> <span class="token punctuation">]</span> <span class="token comment"># 判断 a 与 b 是否相等</span>
<span class="token keyword">then</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;a 等于 b&quot;</span>
<span class="token keyword">fi</span>
<span class="token comment"># &gt; 布尔运算符</span>

<span class="token comment"># &gt; 逻辑运算符</span>

<span class="token comment"># &gt; 字符串运算符</span>

<span class="token comment"># &gt; 文件测试运算符</span>

<span class="token comment"># &gt; 函数定义</span>
<span class="token punctuation">[</span>function<span class="token punctuation">]</span> funname <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment"># function 可以省略</span>
<span class="token punctuation">{</span>
    action<span class="token punctuation">;</span>
    <span class="token punctuation">[</span>return int<span class="token punctuation">;</span><span class="token punctuation">]</span> <span class="token comment"># 若省略 return, 则将最后一条命令运行结果作为返回值</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 判断上一个 shell 命令是否执行成功</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token parameter variable">-eq</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;succeeded.&quot;</span>
<span class="token keyword">else</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;failed.&quot;</span>
<span class="token keyword">fi</span>
<span class="token comment"># 或者</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token parameter variable">-ne</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;failed.&quot;</span>
<span class="token keyword">else</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;succeeded.&quot;</span>
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3);function w(S,E){const a=o("ExternalLinkIcon");return c(),p("div",null,[r,i(" more "),u,n("ul",null,[n("li",null,[n("a",k,[s("Shell 教程"),e(a)])]),n("li",null,[n("a",m,[s("ohmyzsh"),e(a)])]),n("li",null,[n("a",v,[s("shell-book"),e(a)])]),n("li",null,[n("a",b,[s("explainshell"),e(a)]),h])]),g,n("ul",null,[f,n("li",null,[n("p",null,[n("a",y,[s("bash"),e(a)])]),q]),n("li",null,[n("p",null,[n("a",x,[s("zsh"),e(a)])]),$])]),_])}const z=l(d,[["render",w],["__file","shell.html.vue"]]);export{z as default};
