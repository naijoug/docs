import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,a as e,b as n,f as t}from"./app-3jL1FZzb.js";const c={},p=n("blockquote",null,[n("p",null,"运行循环")],-1),u=t(`<h3 id="❓runloop-有几种事件源-有几种模式" tabindex="-1"><a class="header-anchor" href="#❓runloop-有几种事件源-有几种模式" aria-hidden="true">#</a> ❓<code>RunLoop</code> 有几种事件源？有几种模式？</h3><details class="hint-container details"><summary>💡</summary><p><code>RunLoop</code>是用来管理事件和处理 <code>IO</code> 的基本架构</p><p>三种事件源</p><ul><li><code>Timer</code>：定时器事件 <blockquote><p><code>RunLoop</code> 按照设定的时间区间接收定时器事件。</p></blockquote></li><li><code>Source</code>：输入源事件 <blockquote><p>包括两种类型：source0 &amp; source1</p></blockquote><ul><li>source0 : 自定义的输入源，需要程序员自己生成和管理。</li><li>source1 ： 基于 <code>Port</code> 的输入源，接收来自其他线程或进程的消息，然后在当前线程上调用指定的处理方法。</li></ul></li><li><code>Observer</code>：观察者事件 <blockquote><p>可以设置在 <code>RunLoop</code> 各个运行阶段接收的事件。</p></blockquote></li></ul><p>运行模式</p><ul><li><code>NSDefaultRunLoopMode</code>（kCFRunLoopDefaultMode）：默认模式 <blockquote><p>如果不手动指定模式，<code>RunLoop</code> 就在这个模式下运行。</p></blockquote></li><li><code>UITrackingRunLoopMode</code>：界面跟踪模式 <blockquote><p>用于 <code>ScrollView</code> 滚动时。</p></blockquote></li><li><code>UIInitializationRunLoopMode</code>：启动 App 时第进入的模式 <blockquote><p>启动完成后就不再使用。</p></blockquote></li><li><code>NSRunLoopCommonModes</code>（kCFRunLoopCommonModes）：这是一个占位模式，不是一种真正的 Mode。 <blockquote><p>可以将事件源（<code>Timer/Observer/Source</code>）添加到 <code>CommonModes</code> 中，<code>RunLoop</code> 运行在哪种 Mode 时，只要这种 Mode 被标记为 Common 的属性，则 <code>RunLoop</code> 就会处理相应的事件。</p></blockquote></li></ul></details><h3 id="❓runloop-内部实现逻辑" tabindex="-1"><a class="header-anchor" href="#❓runloop-内部实现逻辑" aria-hidden="true">#</a> ❓<code>Runloop</code> 内部实现逻辑？</h3><details class="hint-container details"><summary>💡</summary><p><code>RunLoop</code> 的内部实现可以简单地概括为一个 <code>while</code> 循环，在这个循环中处理各种输入源的事件。<code>RunLoop</code> 在开启后会一直在这个循环中执行，直到接收到停止 <code>RunLoop</code> 的消息。</p><ul><li><p><code>RunLoop</code> 在启动时会从预设的 <code>Mode</code> 中选择一个，然后进入 <code>RunLoop</code> 的循环。</p></li><li><p>进入循环周期</p><ul><li>首先，处理所有到期的定时器事件。</li><li>然后，处理所有的输入源事件。输入源的事件包括来自 <code>Port</code> 的消息，以及用户定义的其他事件。</li><li>然后，如果有观察者的话，<code>RunLoop</code> 会通知观察者当前 <code>RunLoop</code> 的状态。</li><li>最后，如果在处理事件的过程中没有任何源需要处理，那么 <code>RunLoop</code> 会进入休眠等待被唤醒。</li></ul></li><li><p>继续下一次循环，直到接收到结束 <code>RunLoop</code> 的消息。</p></li></ul></details><h3 id="runloop-与-performselector-的关系" tabindex="-1"><a class="header-anchor" href="#runloop-与-performselector-的关系" aria-hidden="true">#</a> <code>runloop</code> 与 <code>performSelector</code> 的关系？</h3><h3 id="performselector-vs-nsinvocation" tabindex="-1"><a class="header-anchor" href="#performselector-vs-nsinvocation" aria-hidden="true">#</a> <code>performSelector</code> vs <code>NSInvocation</code></h3><h3 id="❓以下代码输出是什么" tabindex="-1"><a class="header-anchor" href="#❓以下代码输出是什么" aria-hidden="true">#</a> ❓以下代码输出是什么？</h3><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">dispatch_async</span><span class="token punctuation">(</span><span class="token function">dispatch_get_global_queue</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">^</span><span class="token punctuation">{</span>
  <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token keyword">self</span> performSelector<span class="token punctuation">:</span><span class="token keyword">@selector</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span> withObject<span class="token punctuation">:</span>nil afterDelay<span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>test <span class="token punctuation">{</span>
  <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>💡</summary><blockquote><p>打印顺序 : 1, 4, 2, 3</p></blockquote><p>&quot;1&quot;和&quot;4&quot;是普通的直接执行代码，因此会按照顺序输出。</p><p>&quot;2&quot;和&quot;3&quot;位于异步并发队列中，会在新线程中执行，所以会在&quot;1&quot;和&quot;4&quot;之后开始执行。</p><p>&quot;5&quot;不会输出。原因是<code>[self performSelector:@selector(test) withObject:nil afterDelay:10];</code>这一行代码被放在异步并发队列中，并且是在子线程中执行，但是这种执行方式是依赖 <code>RunLoop</code> 的，而新创建的线程默认是没有启动 <code>RunLoop</code> 的，所以<code>performSelector:afterDelay:</code>方法会失效。</p><blockquote><p>如果想要使 &quot;5&quot; 能够打印，应该怎么处理？</p></blockquote><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// 方案一 : 放入主线程 RunLoop</span>
<span class="token punctuation">[</span><span class="token keyword">self</span> performSelectorOnMainThread<span class="token punctuation">:</span><span class="token keyword">@selector</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span> withObject<span class="token punctuation">:</span>nil waitUntilDone<span class="token punctuation">:</span>NO<span class="token punctuation">]</span><span class="token punctuation">;</span>
  
<span class="token comment">// 方案二 : 在子线程中手动启动 RunLoop</span>
NSRunLoop <span class="token operator">*</span>runLoop <span class="token operator">=</span> <span class="token punctuation">[</span>NSRunLoop currentRunLoop<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span><span class="token keyword">self</span> performSelector<span class="token punctuation">:</span><span class="token keyword">@selector</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span> withObject<span class="token punctuation">:</span>nil afterDelay<span class="token punctuation">:</span><span class="token number">5.0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>runLoop run<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,9);function l(i,d){return s(),a("div",null,[p,e(" more "),u])}const m=o(c,[["render",l],["__file","runloop.html.vue"]]);export{m as default};
