import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o,c as r,a as t,b as e,f as c}from"./app-CmXikh8R.js";const h={},n=e("blockquote",null,[e("p",null,"08 递归 & 动态规划 (14)")],-1),i=c(`<h2 id="_8-1-三步问题" tabindex="-1"><a class="header-anchor" href="#_8-1-三步问题" aria-hidden="true">#</a> 8.1 三步问题</h2><blockquote><p>有个小孩正在上楼梯，楼梯有n阶台阶，小孩一次可以上1阶、2阶或3阶。实现一种方法，计算小孩有多少种上楼梯的方式。</p></blockquote><h2 id="_8-2-迷路的机器人" tabindex="-1"><a class="header-anchor" href="#_8-2-迷路的机器人" aria-hidden="true">#</a> 8.2 迷路的机器人</h2><blockquote><p>设想有个机器人坐在一个网格的左上角，网格r行c列。机器人只能向下或向右移动，但不能走到一些被禁止的网格。设计一种算法，寻找机器人从左上角移动到右下角的路径。</p></blockquote><h2 id="_8-3-魔术索引" tabindex="-1"><a class="header-anchor" href="#_8-3-魔术索引" aria-hidden="true">#</a> 8.3 魔术索引</h2><blockquote><p>在数组A[0...n-1]中，有所谓的魔术索引，满足条件A[i]=i。给定一个有序整数数组，元素值各不相同，编写一种方法找出魔术索引，若有的话，在数组A中找出一个魔术索引。</p></blockquote><h2 id="_8-4-幂集" tabindex="-1"><a class="header-anchor" href="#_8-4-幂集" aria-hidden="true">#</a> 8.4 幂集</h2><blockquote><p>编写一种方法，返回某集合的所有子集。</p></blockquote><h2 id="_8-5-递归乘法" tabindex="-1"><a class="header-anchor" href="#_8-5-递归乘法" aria-hidden="true">#</a> 8.5 递归乘法</h2><blockquote><p>写一个递归函数，不使用*运算符，实现两个正整数的相乘。可以使用加号、减号、位移，但要吝啬一些。</p></blockquote><h2 id="_8-6-汉诺塔问题。" tabindex="-1"><a class="header-anchor" href="#_8-6-汉诺塔问题。" aria-hidden="true">#</a> 8.6 汉诺塔问题。</h2><blockquote><p>在经典汉诺塔问题中，有3根柱子及N个不同大小的穿孔圆盘，盘子可以滑入任意一根柱子。一开始，所有盘子自上而下按升序依次套在第一根柱子上（即每一个盘子只能放在更大的盘子上面）。</p></blockquote><pre><code>移动圆盘时受到以下限制：
(1) 每次只能移动一个盘子；
(2) 盘子只能从柱子顶端滑出移到下一根柱子；
(3) 盘子只能叠在比它大的盘子上。请编写程序，用栈将所有盘子从第一根柱子移到最后一根柱子。
</code></pre><h2 id="_8-7-无重复字符串的排列组合" tabindex="-1"><a class="header-anchor" href="#_8-7-无重复字符串的排列组合" aria-hidden="true">#</a> 8.7 无重复字符串的排列组合</h2><blockquote><p>编写一种方法，计算某字符串的所有排列组合，字符串每个字符均不相同。</p></blockquote><h2 id="_8-8-重复字符串的排列组合" tabindex="-1"><a class="header-anchor" href="#_8-8-重复字符串的排列组合" aria-hidden="true">#</a> 8.8 重复字符串的排列组合</h2><blockquote><p>编写一种方法，计算字符串所有的排列组合，字符串中可能有字符相同，但结果不能有重复组合。</p></blockquote><h2 id="_8-9-括号。" tabindex="-1"><a class="header-anchor" href="#_8-9-括号。" aria-hidden="true">#</a> 8.9 括号。</h2><blockquote><p>设计一种算法，打印n对括号的所有合法的（例如，开闭一一对应）组合。</p></blockquote><pre><code>示例：
    输入：3
    输出：((())), (()()), (())(), ()(()), ()()()
</code></pre><h2 id="_8-10-颜色填充" tabindex="-1"><a class="header-anchor" href="#_8-10-颜色填充" aria-hidden="true">#</a> 8.10 颜色填充</h2><blockquote><p>编写函数，实现许多图片编辑软件都支持的“颜色填充”功能。给定一个屏幕（以二维数组表示，元素为颜色值）、一个点和一个新的颜色值，将新颜色值填入这个点的周围区域，直到原来的颜色值全都改变。</p></blockquote><h2 id="_8-11-硬币" tabindex="-1"><a class="header-anchor" href="#_8-11-硬币" aria-hidden="true">#</a> 8.11 硬币</h2><blockquote><p>给定数量不限的硬币，币值为25分、10分、5分和1分，编写代码计算n分有几种表示法。</p></blockquote><h2 id="_8-12-八皇后" tabindex="-1"><a class="header-anchor" href="#_8-12-八皇后" aria-hidden="true">#</a> 8.12 八皇后</h2><blockquote><p>设计一种算法，打印八皇后在8×8棋盘上的各种摆法，其中每个皇后都不同行、不同列，也不在对角线上。这里的“对角线”指的是所有的对角线，不只是平分整个棋盘的那两条对角线。</p></blockquote><h2 id="_8-13-堆箱子" tabindex="-1"><a class="header-anchor" href="#_8-13-堆箱子" aria-hidden="true">#</a> 8.13 堆箱子</h2><blockquote><p>给你一堆n个箱子，箱子宽wi、高hi、深di。箱子不能翻转，将箱子堆起来时，下面箱子的宽度、高度和深度必须大于上面的箱子。实现一种方法，搭出最高的一堆箱子。箱堆的高度为每个箱子高度的总和。</p></blockquote><div class="hint-container tip"><p class="hint-container-title">提示</p><p>#155，#194，#214，#260，#322，#368，#378</p></div><h2 id="_8-14-布尔运算" tabindex="-1"><a class="header-anchor" href="#_8-14-布尔运算" aria-hidden="true">#</a> 8.14 布尔运算</h2><blockquote><p>给定一个布尔表达式和一个期望的布尔结果result，布尔表达式由0、1、&amp;、|和<sup>符号组成。实现一个函数，算出有几种可使该表达式得出result值的括号方法。该表达式要用全括号（如(0)</sup>(1)）表示，而不能包含半括号（如(((0))^(1))）。</p></blockquote><pre><code>示例：
    countEval(&quot;1^0|0|1&quot;, false) -&gt; 2
    countEval(&quot;0&amp;0&amp;0&amp;1^1|0&quot;, true) -&gt; 10
</code></pre><div class="hint-container tip"><p class="hint-container-title">提示</p><p>#148，#168，#197，#305，#327</p></div>`,33);function d(l,u){return o(),r("div",null,[n,t(" more "),i])}const _=a(h,[["render",d],["__file","0x08.recursion-dynamic-programming.html.vue"]]);export{_ as default};
