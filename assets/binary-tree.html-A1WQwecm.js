import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as s,o,c as i,a as t,b as e,e as r,d as l,f as c}from"./app-enJ7wihl.js";const d={},h=e("blockquote",null,[e("p",null,[e("code",null,"Balanced Binary Tree"),r(" - “平衡二叉树”")])],-1),u=e("p",null,"平衡二叉树需要保证左右子树高度差不超过 1。",-1),_=e("p",null,"常见的平衡二叉树",-1),p=e("ul",null,[e("li",null,[e("code",null,"AVL"),r(" 二叉树 (名称来源于两位作者名 G. M. Adelson-Velsky 和 E. M. Landis)")]),e("li",null,"红黑树")],-1),m=e("h2",{id:"traversal-遍历",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#traversal-遍历","aria-hidden":"true"},"#"),r(),e("code",null,"traversal"),r(" - “遍历”")],-1),b={href:"https://leetcode.cn/problems/binary-tree-preorder-traversal",target:"_blank",rel:"noopener noreferrer"},f=e("details",{class:"hint-container details"},[e("summary",null,"💡")],-1),y={href:"https://leetcode.cn/problems/binary-tree-inorder-traversal",target:"_blank",rel:"noopener noreferrer"},v=e("details",{class:"hint-container details"},[e("summary",null,"💡")],-1),k={href:"https://leetcode.cn/problems/binary-tree-postorder-traversal",target:"_blank",rel:"noopener noreferrer"},g=e("details",{class:"hint-container details"},[e("summary",null,"💡")],-1),x={href:"https://leetcode.cn/problems/binary-tree-level-order-traversal",target:"_blank",rel:"noopener noreferrer"},B=e("details",{class:"hint-container details"},[e("summary",null,"💡")],-1),V={href:"https://leetcode.cn/problems/binary-tree-level-order-traversal-ii",target:"_blank",rel:"noopener noreferrer"},I=e("details",{class:"hint-container details"},[e("summary",null,"💡")],-1),S={href:"https://leetcode.cn/problems/binary-tree-zigzag-level-order-traversal",target:"_blank",rel:"noopener noreferrer"},N=e("details",{class:"hint-container details"},[e("summary",null,"💡")],-1),E={href:"https://leetcode.cn/problems/binary-tree-vertical-order-traversal",target:"_blank",rel:"noopener noreferrer"},F=e("details",{class:"hint-container details"},[e("summary",null,"💡")],-1),L={href:"https://leetcode.cn/problems/vertical-order-traversal-of-a-binary-tree",target:"_blank",rel:"noopener noreferrer"},T=e("details",{class:"hint-container details"},[e("summary",null,"💡")],-1),z=e("h2",{id:"construct-构造",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#construct-构造","aria-hidden":"true"},"#"),r(),e("code",null,"construct"),r(" - “构造”")],-1),A={href:"https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal",target:"_blank",rel:"noopener noreferrer"},C=e("details",{class:"hint-container details"},[e("summary",null,"💡")],-1),D={href:"https://leetcode.cn/problems/construct-binary-tree-from-inorder-and-postorder-traversal",target:"_blank",rel:"noopener noreferrer"},M=e("details",{class:"hint-container details"},[e("summary",null,"💡")],-1),q={href:"https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-postorder-traversal",target:"_blank",rel:"noopener noreferrer"},G=e("details",{class:"hint-container details"},[e("summary",null,"💡")],-1),j=e("h2",{id:"invert-反转",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#invert-反转","aria-hidden":"true"},"#"),r(),e("code",null,"invert"),r(" - “反转”")],-1),w={href:"https://leetcode.cn/problems/invert-binary-tree",target:"_blank",rel:"noopener noreferrer"},H=c('<details class="hint-container details"><summary>💡</summary></details><h2 id="dfs-depth-first-search-深度优先搜索" tabindex="-1"><a class="header-anchor" href="#dfs-depth-first-search-深度优先搜索" aria-hidden="true">#</a> <code>DFS</code>(Depth First Search) - “深度优先搜索”</h2><h2 id="bfs-breadth-first-search-广度优先搜索" tabindex="-1"><a class="header-anchor" href="#bfs-breadth-first-search-广度优先搜索" aria-hidden="true">#</a> <code>BFS</code>(Breadth First Search) - “广度优先搜索”</h2><h2 id="binary-search-tree-二叉搜素树" tabindex="-1"><a class="header-anchor" href="#binary-search-tree-二叉搜素树" aria-hidden="true">#</a> <code>Binary Search Tree</code> - “二叉搜素树”</h2>',4);function J(K,O){const n=s("ExternalLinkIcon");return o(),i("div",null,[h,u,_,p,t(" more "),m,t(" 前序遍历 "),e("ul",null,[e("li",null,[e("a",b,[r("🟢 144 - 二叉树的前序遍历"),l(n)])])]),f,t(" 中序遍历 "),e("ul",null,[e("li",null,[e("a",y,[r("🟢 94 - 二叉树的中序遍历"),l(n)])])]),v,t(" 后序遍历 "),e("ul",null,[e("li",null,[e("a",k,[r("🟢 145 - 二叉树的后序遍历"),l(n)])])]),g,t(" 层序遍历 "),e("ul",null,[e("li",null,[e("a",x,[r("🟠 102 - 二叉树的层序遍历"),l(n)])])]),B,t(" 层序遍历 II "),e("ul",null,[e("li",null,[e("a",V,[r("🟠 107 - 二叉树的层序遍历 II"),l(n)])])]),I,t(" 二叉树的锯齿形层序遍历 "),e("ul",null,[e("li",null,[e("a",S,[r("🟠 103 - 二叉树的锯齿形层序遍历"),l(n)])])]),N,t(" 二叉树的垂直遍历 "),e("ul",null,[e("li",null,[e("a",E,[r("🟠 314 - 二叉树的垂直遍历"),l(n)])])]),F,t(" 二叉树的垂序遍历 "),e("ul",null,[e("li",null,[e("a",L,[r("🔴 987 - 二叉树的垂序遍历"),l(n)])])]),T,z,t(" 从前序与中序遍历序列构造二叉树 "),e("ul",null,[e("li",null,[e("a",A,[r("🟠 105 - 从前序与中序遍历序列构造二叉树"),l(n)])])]),C,t(" 从中序与后序遍历序列构造二叉树 "),e("ul",null,[e("li",null,[e("a",D,[r("🟠 106 - 从中序与后序遍历序列构造二叉树"),l(n)])])]),M,t(" 根据前序和后序遍历构造二叉树 "),e("ul",null,[e("li",null,[e("a",q,[r("🟠 889 - 根据前序和后序遍历构造二叉树"),l(n)])])]),G,j,t(" 翻转二叉树 "),e("ul",null,[e("li",null,[e("a",w,[r("🟠 226 - 翻转二叉树"),l(n)])])]),H])}const R=a(d,[["render",J],["__file","binary-tree.html.vue"]]);export{R as default};
