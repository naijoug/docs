import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as e,o as p,c as o,a as c,b as n,e as i,d as l,f as a}from"./app-TLKbS0Xy.js";const u={},r=a(`<h2 id="❓如何自己高效实现-nsuserdefault" tabindex="-1"><a class="header-anchor" href="#❓如何自己高效实现-nsuserdefault" aria-hidden="true">#</a> ❓如何自己高效实现 <code>NSUserDefault</code></h2><details class="hint-container details"><summary>💡</summary><p>实现自己的 <code>NSUserDefault</code>，即创建一个键值存储类可以有以下几个步骤：</p><ol><li><p>定义一个单例类，类名可以为 <code>MyUserDefault</code>，在这个类里，我们会持久化保存键值对数据。</p></li><li><p>使用 <code>NSMutableDictionary</code> 存储键值数据，并且通过 <code>NSKeyedArchiver</code> 和 <code>NSKeyedUnarchiver</code> 来实现数据的持久化存储。</p></li><li><p>提供读写方法，如 setValue:ForKey: 和 valueForKey:</p></li></ol><p>以下是粗略的实现：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">@interface</span> MyUserDefault <span class="token punctuation">:</span> NSObject
<span class="token operator">+</span> <span class="token punctuation">(</span>instancetype<span class="token punctuation">)</span>defaultUser<span class="token punctuation">;</span>
<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>setValue<span class="token punctuation">:</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>value forKey<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>key<span class="token punctuation">;</span>
<span class="token operator">-</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span>valueForKey<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>key<span class="token punctuation">;</span>
<span class="token keyword">@end</span>

<span class="token keyword">@interface</span> <span class="token function">MyUserDefault</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">@property</span> <span class="token punctuation">(</span>nonatomic<span class="token punctuation">,</span> strong<span class="token punctuation">)</span> NSMutableDictionary <span class="token operator">*</span>userDict<span class="token punctuation">;</span>
<span class="token keyword">@property</span> <span class="token punctuation">(</span>nonatomic<span class="token punctuation">,</span> strong<span class="token punctuation">)</span> NSString <span class="token operator">*</span>filePath<span class="token punctuation">;</span>
<span class="token keyword">@end</span>

<span class="token keyword">@implementation</span> MyUserDefault

<span class="token operator">+</span> <span class="token punctuation">(</span>instancetype<span class="token punctuation">)</span>defaultUser <span class="token punctuation">{</span>
    <span class="token keyword">static</span> MyUserDefault <span class="token operator">*</span>user <span class="token operator">=</span> nil<span class="token punctuation">;</span>
    <span class="token keyword">static</span> dispatch_once_t onceToken<span class="token punctuation">;</span>
    <span class="token function">dispatch_once</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>onceToken<span class="token punctuation">,</span> <span class="token operator">^</span><span class="token punctuation">{</span>
        user <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token keyword">self</span> alloc<span class="token punctuation">]</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> user<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token operator">-</span> <span class="token punctuation">(</span>instancetype<span class="token punctuation">)</span>init<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">self</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">super</span> init<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        NSArray <span class="token operator">*</span>doc <span class="token operator">=</span> <span class="token function">NSSearchPathForDirectoriesInDomains</span><span class="token punctuation">(</span>NSDocumentDirectory<span class="token punctuation">,</span> NSUserDomainMask<span class="token punctuation">,</span> YES<span class="token punctuation">)</span><span class="token punctuation">;</span>
        NSString <span class="token operator">*</span>path <span class="token operator">=</span> <span class="token punctuation">[</span>doc objectAtIndex<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        _filePath <span class="token operator">=</span> <span class="token punctuation">[</span>path stringByAppendingPathComponent<span class="token punctuation">:</span><span class="token string">@&quot;userinfo.dat&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        NSData <span class="token operator">*</span>readData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>NSData alloc<span class="token punctuation">]</span> initWithContentsOfFile<span class="token punctuation">:</span>_filePath<span class="token punctuation">]</span><span class="token punctuation">;</span>
        _userDict <span class="token operator">=</span> <span class="token punctuation">[</span>NSKeyedUnarchiver unarchiveObjectWithData<span class="token punctuation">:</span>readData<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>_userDict<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            _userDict <span class="token operator">=</span> <span class="token punctuation">[</span>NSMutableDictionary dictionary<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">self</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>setValue<span class="token punctuation">:</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>value forKey<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>key <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>_userDict setValue<span class="token punctuation">:</span>value forKey<span class="token punctuation">:</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span><span class="token keyword">self</span> save<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token operator">-</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span>valueForKey<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>key <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>_userDict valueForKey<span class="token punctuation">:</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>save <span class="token punctuation">{</span>
    NSData <span class="token operator">*</span>data <span class="token operator">=</span> <span class="token punctuation">[</span>NSKeyedArchiver archivedDataWithRootObject<span class="token punctuation">:</span>_userDict<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>data writeToFile<span class="token punctuation">:</span>_filePath atomically<span class="token punctuation">:</span>YES<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">@end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个粗略实现中，使用了 <code>NSKeyedArchiver</code> 和 <code>NSKeyedUnarchiver</code> 来做数据序列化和反序列化，使用单例模式来确保所有地方使用的都是同一个存储空间，同时把数据的存储路径放在 Document 下面的 <code>userinfo.dat</code> 文件，可以方便做数据迁移等操作。</p><p>需要注意这只是一个简单的实现，实际情况中，可能还需要考虑版本兼容，错误处理，数据迁移，数据安全性，以及性能等多方面的问题。</p></details><h2 id="❓fmdb-vs-coredata-vs-swiftdata" tabindex="-1"><a class="header-anchor" href="#❓fmdb-vs-coredata-vs-swiftdata" aria-hidden="true">#</a> ❓<code>FMDB</code> vs <code>CoreData</code> vs <code>SwiftData</code></h2><details class="hint-container details"><summary>💡</summary><p>这三个都是iOS应用开发中用来管理数据和持久化存储的工具。每一个工具都有它的优点和特殊用途。</p><ol><li><p>FMDB：是一个用Objective-C编写的SQLite数据库的封装库。如果你只是想使用SQLite并且不希望直接使用SQLite的C API，那么FMDB是个不错的选择。它提供的接口相比SQLite的C API更容易使用。</p></li><li><p>CoreData：是Apple开发的一个功能强大的持久化存储框架。虽然用起来复杂一些，但是它提供了许多像对象关系映射(ORM)这样的高级功能。如果你的应用需要处理复杂的数据模型，并且你喜欢用面向对象的方式来处理数据，或者你需要利用CoreData的一些特性，例如版本管理、模型迁移、撤销和恢复等，那么可以选择CoreData。</p></li><li><p>SwiftData：iOS 17</p></li></ol></details><h2 id="❓coredata-的底层实现" tabindex="-1"><a class="header-anchor" href="#❓coredata-的底层实现" aria-hidden="true">#</a> ❓<code>CoreData</code> 的底层实现</h2><details class="hint-container details"><summary>💡</summary><p>Core Data是一个强大的iOS持久化框架，同时也是macOS的数据持久化框架。它处理的范围相当广，包括图形数据模型化、属性类型检查、对象图管理和持久化、数据变更和版本控制、灵活的查询语句以及iCloud集成等。</p><p>Core Data并不是一个关系型数据库，SQLite只是它底层的持久化方式之一。也可以选择其他的存储方式，如XML、二进制等。其实Core Data更像是一个ORM（对象关系映射）框架。</p><p>下面是关于Core Data的几个主要部分的概述：</p><ol><li><p><strong>托管对象模型（NSManagedObjectModel）</strong>：这是核心数据的数据模型，用来定义在当前应用的对象关系映射的名称、属性、数据类型。</p></li><li><p><strong>持久性存储协调者（NSPersistentStoreCoordinator）</strong>：用于协调来自对象上下文的请求，并将这些请求路由到适当的持久性存储区。</p></li><li><p><strong>托管对象上下文（NSManagedObjectContext）</strong>：你在应用程序中处理的所有对象基本上都属于某个对象上下文。所有的创建、更新、删除操作都在这个上下文之中操作。</p></li></ol><p>Core Data的工作流程基本为：你从托管对象上下文 (NSManagedObjectContext) 中请求对象，通过对象的增删改查，然后返回到托管对象上下文中。当你需要保存数据的时候，就会把托管对象上下文的变化持久化到存储协调器 (NSPersistentStoreCoordinator)，存储协调器再把这些变化保存到持久化存储器 (Persistent Store) 中，例如SQLite数据库。</p><p>所以即使是SQLite，Core Data也只是用它来存储数据，并没有用到它的所有功能，因为Core Data不是数据库。Core Data的主要优势在于它允许你以面向对象的方式处理数据，并提供丰富的相关功能。</p></details><h2 id="❓swiftdata-的底层实现" tabindex="-1"><a class="header-anchor" href="#❓swiftdata-的底层实现" aria-hidden="true">#</a> ❓<code>SwiftData</code> 的底层实现</h2>`,7),d={class:"hint-container details"},k=n("summary",null,"💡",-1),v={href:"https://developer.apple.com/documentation/swiftdata",target:"_blank",rel:"noopener noreferrer"},m=a('<h2 id="❓realm-了解吗" tabindex="-1"><a class="header-anchor" href="#❓realm-了解吗" aria-hidden="true">#</a> ❓<code>realm</code> 了解吗</h2><details class="hint-container details"><summary>💡</summary><p>Realm是一个用于移动设备的数据库，并非仅限于iOS，也可以用于Android。它是用C++编写的，然后为不同的平台和语言提供接口，比如Swift和Objc以及Java等。Realm的目标是提供比Core Data和SQLite更简单、更快速的持久化存储解决方案。</p><p>以下是一些有关Realm的关键点：</p><ul><li>Realm 是一个面向对象的数据库，并且支持跨平台。这意味着你在一个平台上保存的数据可以在其他平台使用。</li><li>Realm 非常易于使用。对象持久化的过程极其简单，只需要进行简单的读写操作。</li><li>Realm有着出色的性能特性，它的读写速度常常超过SQLite和Core Data。</li><li>Realm 支持关系，你可以很容易地在对象之间创建关联关系。</li><li>Realm 支持数据加密，提供了256-bit AES加密来保护你的数据安全。</li><li>Realm还具有实时自动更新、数据迁移支持、线程安全性和可视化编辑器等独特的优点。</li></ul><p>然而，尽管Realm具有上述优点，但它也有自己的挑战。例如，它的库文件相对较大，增加了应用的大小。此外，由于Realm的核心是使用C++编写和封装的，某些复杂错误的调试和处理可能会比较困难。</p></details>',2);function b(y,h){const s=e("ExternalLinkIcon");return p(),o("div",null,[c(" more "),r,n("details",d,[k,n("p",null,[n("a",v,[i("SwiftData"),l(s)])])]),m])}const D=t(u,[["render",b],["__file","0x09.store.html.vue"]]);export{D as default};
