import{_ as l}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as i,c,b as n,e as a,d as e,f as t}from"./app-ts76ylnm.js";const p={},d=n("h2",{id:"reference",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reference","aria-hidden":"true"},"#"),a(" reference")],-1),r={href:"https://cpp-lang.net",target:"_blank",rel:"noopener noreferrer"},u={href:"http://zh.cppreference.com/",target:"_blank",rel:"noopener noreferrer"},m=n("hr",null,null,-1),k={href:"https://light-city.github.io",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/Light-City/CPlusPlusThings",target:"_blank",rel:"noopener noreferrer"},b={href:"https://changkun.de/modern-cpp",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/changkun/modern-cpp-tutorial",target:"_blank",rel:"noopener noreferrer"},g=n("hr",null,null,-1),_={href:"https://svandex.github.io/2018/03/31/function-bind-redemption-after-reading.html",target:"_blank",rel:"noopener noreferrer"},f=t(`<h2 id="compiler" tabindex="-1"><a class="header-anchor" href="#compiler" aria-hidden="true">#</a> Compiler</h2><ul><li><p>编译过程 :</p><ul><li>Pre-Processing : 预编译 <ul><li>去掉#开头程序，保留#pragma</li><li>宏替换</li><li>去掉注释</li><li>头文件包含</li><li>添加行号</li></ul></li><li>Compiling : 编译 <ul><li>语法分析</li><li>词法分析</li><li>生成相应的汇编代码</li></ul></li><li>Assembling : 汇编 <ul><li>将汇编代码转化为相应的机器语言</li></ul></li><li>Linking : 链接 <ul><li>通过调用连接器ld来链接程序运行需要的一大堆目标文件，以及所依赖的其它库文件，最后生成可执行文件</li></ul></li></ul></li><li><p>编译器</p><table><thead><tr><th>编译器</th><th>名称</th><th>自动链接标准STL</th><th>说明</th></tr></thead><tbody><tr><td>gcc</td><td>GUN C 编译器</td><td>×</td><td>GCC (GNU Compiler Collection) : GNU 编译器套件</td></tr><tr><td>g++</td><td>GUN C++ 编译器</td><td>√</td><td><code>g++</code> = <code>gcc -xc++ -lstdc++ -shared-libgcc</code></td></tr></tbody></table></li><li><p>环境文件对比</p><table><thead><tr><th>文件</th><th>Linux</th><th>Windows</th></tr></thead><tbody><tr><td>目标文件</td><td>.o</td><td>.obj</td></tr><tr><td>动态库</td><td>.so，DSO (Dynamic Shared Objects) 动态共享对象</td><td>.dll，DLL (Dynamic Linking Library) 动态链接库</td></tr><tr><td>静态库</td><td>.lib</td><td>.a</td></tr></tbody></table></li><li><p>动态库 &amp; 静态库</p><table><thead><tr><th>类型</th><th>加载时机</th><th>程序包体积</th><th>运行依赖</th></tr></thead><tbody><tr><td>静态库</td><td>编译时</td><td>编译包含静态库文件，体积大</td><td>不再依赖静态库文件</td></tr><tr><td>动态库</td><td>运行时</td><td>编译不包含动态库文件，体积小</td><td>依赖动态库文件</td></tr></tbody></table></li><li><p>编译参数</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>-E</code></td><td>只进行预编译，不做其它处理</td></tr><tr><td><code>-S</code></td><td>只编译不汇编，生成汇编代码</td></tr><tr><td><code>-c</code></td><td>只编译不链接，生成目标文件</td></tr><tr><td><code>-g</code></td><td>在可执行程序中包含标准调试信息</td></tr><tr><td><code>-o</code></td><td>指定输出文件</td></tr><tr><td><code>-I</code></td><td>添加头文件搜索路径 (默认：/usr/include/)</td></tr><tr><td><code>-L</code></td><td>添加库文件搜索路径 (默认：/usr/lib/)</td></tr><tr><td><code>-lname</code></td><td>链接名为 <code>libname.a</code> 或 <code>libname.so</code> 的库文件。两者均存在，根据编译方式(-static 或 -shared) 进行选择</td></tr><tr><td><code>-static</code></td><td>进行静态编译(链接静态库)</td></tr><tr><td><code>-shared</code></td><td>生成动态库文件 或者 进行动态编译(链接动态库)</td></tr><tr><td><code>-fPIC</code></td><td>(Position Independent Code) 使用地址无关代码，可以多进程共享</td></tr></tbody></table><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 编译过程</span>
<span class="token comment">#   1&gt; 预处理阶段，生成 .i 文件</span>
$ gcc <span class="token parameter variable">-E</span> hello.c <span class="token parameter variable">-o</span> hello.i 
<span class="token comment">#   2&gt; 编译阶段，编译生成 .s 文件</span>
$ gcc <span class="token parameter variable">-S</span> hello.i <span class="token parameter variable">-o</span> hello.s 
<span class="token comment">#   3&gt; 汇编阶段，生成目标 .o 文件 </span>
$ gcc <span class="token parameter variable">-c</span> hello.s <span class="token parameter variable">-o</span> hello.o <span class="token comment"># 方式一</span>
$ as hello.s <span class="token parameter variable">-o</span> hello.o     <span class="token comment"># 方式二：使用汇编器从汇编代码生成目标代码</span>
<span class="token comment">#   4&gt; 链接阶段，生成可执行文件</span>
$ gcc hello.o <span class="token parameter variable">-o</span> hello      <span class="token comment"># 生成可执行文件 hello</span>
<span class="token comment"># 创建静态库</span>
$ g++ <span class="token parameter variable">-c</span> hello.cpp           <span class="token comment"># 将源文件编译为目标文件</span>
$ ar <span class="token parameter variable">-crv</span> libhello.a hello.o  <span class="token comment"># 使用 ar 工具将目标文件打包成为 .a 静态库文件</span>
<span class="token comment"># 创建动态库</span>
$ g++ <span class="token parameter variable">-fPIC</span> <span class="token parameter variable">-shared</span> hello.cpp <span class="token parameter variable">-o</span> libhello.so
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="so" tabindex="-1"><a class="header-anchor" href="#so" aria-hidden="true">#</a> <code>.so</code></h2><blockquote><p>动态库</p></blockquote><ul><li>隐式调用 : 只需将动态库文件(.so)放入系统动态库路径(/usr/lib)，包含头文件即可使用</li><li>显示调用 : 代码中出现库文件名，需要自己去打开和管理库文件 <ul><li>包含 <code>dlfcn.h</code> 系统库</li><li>使用 <code>dlopen</code> 函数打开库文件</li><li>使用 <code>dlerror</code> 函数测试是否打开成功，并进行错误处理</li><li>使用 <code>dlsym</code> 函数获得函数地址，存放在一个函数指针中</li><li>用获得函数指针进行函数调用</li><li>程序结束前，使用 <code>dlclose</code> 关闭打开的动态库，释放资源</li><li>使用 <code>dlconfig</code> 工具将动态库的路径加载到系统库列表中</li></ul></li></ul><h2 id="extern-c" tabindex="-1"><a class="header-anchor" href="#extern-c" aria-hidden="true">#</a> extern &quot;C&quot;</h2><blockquote><p><code>extern &quot;C&quot;</code> 声明的函数使用函数名作为符号名(跟 C 函数一样)，不能重载(只有非成员函数才能被声明为 <code>extern &quot;C&quot;</code>)，可以被 dlopen 动态加载。</p></blockquote><table><thead><tr><th>符号名</th><th>说明</th></tr></thead><tbody><tr><td><code>C</code></td><td>符号名就是函数名</td></tr><tr><td><code>C++</code></td><td>允许重载，几乎不可能使用函数名作为符号名，而是使用 <code>name mangling</code> (使用函数名和其它信息拼接在一起)</td></tr></tbody></table><h2 id="const" tabindex="-1"><a class="header-anchor" href="#const" aria-hidden="true">#</a> <code>const</code></h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>            <span class="token comment">// 常量整形</span>
<span class="token keyword">int</span> <span class="token keyword">const</span> a<span class="token punctuation">;</span>            <span class="token comment">// 同上</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">;</span>           <span class="token comment">// 指向常量整形的指针 (指针可变，整形不可变)</span>
<span class="token keyword">int</span> <span class="token keyword">const</span> <span class="token operator">*</span>a<span class="token punctuation">;</span>           <span class="token comment">// 同上</span>
<span class="token keyword">int</span> <span class="token operator">*</span> <span class="token keyword">const</span> a<span class="token punctuation">;</span>          <span class="token comment">// 指向整形的常量指针 (指针不可变，整数可变)</span>
<span class="token keyword">int</span> <span class="token keyword">const</span> <span class="token operator">*</span> <span class="token keyword">const</span> a<span class="token punctuation">;</span>    <span class="token comment">// 指向常量整形的常量指针 (指针不可变，整形不可变)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="c-默认参数" tabindex="-1"><a class="header-anchor" href="#c-默认参数" aria-hidden="true">#</a> C++ 默认参数</h2><ul><li>如果某个参数是默认参数，那么它后面的参数必须都是默认参数</li><li>默认参数可以放在函数声明或者定义中，但只能放在二者之一</li><li>函数重载时谨慎使用默认参数值</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
<span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 1 + 3 + 5</span>
<span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 1 + 2 + 5</span>
<span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 1 + 2 + 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="make-cmake" tabindex="-1"><a class="header-anchor" href="#make-cmake" aria-hidden="true">#</a> Make &amp; CMake</h2><ul><li><p>make : 通过 Makefile 文件进行编译和链接程序 (Makefile 缺陷 : 工程大时手写 Makefile 比较困难，更换平台需要修改 Makefile)</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Makefile</span>

<span class="token comment"># target : prerequisites</span>
<span class="token comment"># [tab]command</span>

<span class="token comment"># 1.0 版本</span>
sayHello: main.o hello.o 
	gcc <span class="token parameter variable">-o</span> sayHello main.o hello.o
main.o: main.c hello.h
	gcc <span class="token parameter variable">-c</span> main.c
hello.o: hello.c hello.h
	gcc <span class="token parameter variable">-c</span> hello.c
clean:
	<span class="token function">rm</span> sayHello main.o hello.o

<span class="token comment"># 2.0 版本</span>
objs <span class="token operator">=</span> main.o hello.o
sayHello: <span class="token variable"><span class="token variable">$(</span>objs<span class="token variable">)</span></span>
	gcc <span class="token parameter variable">-o</span> sayHello <span class="token variable"><span class="token variable">$(</span>objs<span class="token variable">)</span></span>
main.o: main.c hello.h  <span class="token comment"># Makefile 可以自动推导文件依赖关系</span>
hello.o: hello.c hello.h
.PHONY <span class="token builtin class-name">:</span> clean <span class="token comment"># 防止与 clean 命名的文件冲突</span>
clean:
	<span class="token parameter variable">-rm</span> sayHello <span class="token variable"><span class="token variable">$(</span>objs<span class="token variable">)</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">make</span> <span class="token comment"># 按照 Makefile 文件进行编译</span>
$ <span class="token function">make</span> clean <span class="token comment"># 按照 Makefile 清除中间文件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>CMake</code> : (Cross-platform Make) 跨平台 make 工具, 通过 CMakeLists.txt 文件生成 Makefile</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># CMakeLists.txt</span>

<span class="token comment"># 主目录 </span>
cmake_minimum_required<span class="token punctuation">(</span>VERSION <span class="token number">3.12</span><span class="token punctuation">)</span>    <span class="token comment"># CMake 最低版本</span>
project<span class="token punctuation">(</span>test<span class="token punctuation">)</span>   <span class="token comment"># 项目名称</span>
add_subdirectory<span class="token punctuation">(</span>hello<span class="token punctuation">)</span> <span class="token comment"># 添加 cmake 管理子目录</span>
target_link_libraries<span class="token punctuation">(</span>test hello<span class="token punctuation">)</span> <span class="token comment"># 链接名为 hello 的链接库</span>
aux_source_directory<span class="token punctuation">(</span>. DIR_SOURCES<span class="token punctuation">)</span> <span class="token comment"># 目录下所有源文件</span>
add_executable<span class="token punctuation">(</span>test <span class="token variable">\${DIR_SOURCES}</span><span class="token punctuation">)</span> <span class="token comment"># 将目标文件编译为可执行文件 test</span>
<span class="token comment"># 子目录(hello) CMakeLists.txt</span>
aux_source_directory<span class="token punctuation">(</span>. DIR_LIB_SOURCES<span class="token punctuation">)</span>
add_library<span class="token punctuation">(</span>hello <span class="token variable">\${DIR_LIB_SOURCES}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ cmake <span class="token builtin class-name">.</span>   <span class="token comment"># 根据 CMakeLists.txt 生成 Makefile</span>
$ <span class="token function">make</span>      <span class="token comment"># 根据生成的 Makefile 进行编译链接</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,15),y={id:"swig",tabindex:"-1"},C=n("a",{class:"header-anchor",href:"#swig","aria-hidden":"true"},"#",-1),x={href:"https://github.com/swig/swig",target:"_blank",rel:"noopener noreferrer"},w=n("blockquote",null,[n("p",null,"Simplified Wrapper and Interface Generator")],-1),$={href:"https://zhuanlan.zhihu.com/p/20150641",target:"_blank",rel:"noopener noreferrer"},M={href:"https://note.qidong.name/2018/01/hello-swig-example/",target:"_blank",rel:"noopener noreferrer"},I=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 树莓派安装</span>
$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> swig
<span class="token comment"># macOS(源码安装)</span>
$ ./configure 
$ <span class="token function">make</span>
$ <span class="token function">make</span> <span class="token function">install</span>
    
<span class="token comment"># 简单使用 </span>
<span class="token comment">#  配置文件(test.i) -&gt; 包装c文件(test_wrap.c) &amp; python文件(test.py)</span>
$ swig <span class="token parameter variable">-python</span> test.i       <span class="token comment"># C : test.i -&gt; test.py test_wrap.c</span>
$ swig -c++ <span class="token parameter variable">-python</span> test.i  <span class="token comment"># C++ : test.i -&gt; test.py test.wrap.cxx</span>
<span class="token comment">#  生成动态库</span>
$ gcc <span class="token parameter variable">-fPIC</span> <span class="token parameter variable">-shared</span> test_wrap.c <span class="token parameter variable">-o</span> _test.so -I/usr/include/python2.7 <span class="token parameter variable">-lpython2.7</span>    <span class="token comment"># C</span>
$ g++ <span class="token parameter variable">-fPIC</span> <span class="token parameter variable">-shared</span> test_wrap.cxx <span class="token parameter variable">-o</span> _test.so -I/usr/include/python2.7 <span class="token parameter variable">-lpython2.7</span>  <span class="token comment"># C++</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),S=t(`<h2 id="error" tabindex="-1"><a class="header-anchor" href="#error" aria-hidden="true">#</a> Error</h2><ul><li><p><code>No CMAKE_CXX_COMPILER could be found.</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># solution</span>
$ <span class="token function">sudo</span> <span class="token function">apt-get</span> update
$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> build-essential
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,2);function L(q,E){const s=o("ExternalLinkIcon");return i(),c("div",null,[d,n("ul",null,[n("li",null,[n("a",r,[a("C++"),e(s)])]),n("li",null,[n("a",u,[a("C++ 参考手册"),e(s)])])]),m,n("ul",null,[n("li",null,[n("a",k,[a("C++ 那些事"),e(s)]),a(" 👉🏻 "),n("a",v,[a("GitHub"),e(s)])]),n("li",null,[n("a",b,[a("现代 C++ 教程：高速上手 C++ 11/14/17/20"),e(s)]),a(" 👉🏻 "),n("a",h,[a("GitHub"),e(s)])])]),g,n("ul",null,[n("li",null,[n("a",_,[a("2018-03-31 函数对象"),e(s)])])]),f,n("h2",y,[C,a(),n("a",x,[a("SWIG"),e(s)])]),w,n("ul",null,[n("li",null,[n("p",null,[n("a",$,[a("Python与C/C++混合编程"),e(s)])])]),n("li",null,[n("p",null,[n("a",M,[a("编译运行SWIG的example代码样例"),e(s)])]),I])]),S])}const G=l(p,[["render",L],["__file","cpp.html.vue"]]);export{G as default};
