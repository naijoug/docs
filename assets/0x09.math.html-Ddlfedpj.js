import{_ as d}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as c,o as u,c as k,a as i,b as n,e as s,d as a,w as t,f as r}from"./app-JXAd7Ynn.js";const m={},b=n("h2",{id:"reference",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reference","aria-hidden":"true"},"#"),s(" reference")],-1),h={href:"https://visualgo.net/zh/polygon/print",target:"_blank",rel:"noopener noreferrer"},v={href:"https://visualgo.net/zh/convexhull/print",target:"_blank",rel:"noopener noreferrer"},_={href:"https://visualgo.net/zh/reductions/print",target:"_blank",rel:"noopener noreferrer"},f=n("h2",{id:"整除",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#整除","aria-hidden":"true"},"#"),s(" 整除")],-1),y=n("h3",{id:"判断整除",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#判断整除","aria-hidden":"true"},"#"),s(" 判断整除")],-1),w={class:"hint-container details"},g=r("<summary>💡</summary><p>如果你想判断一个数能否被另一个数整除，最直接的办法就是使用求模运算（%）。如果一个数N除以另一个数M得到的余数为0，那么就可以说N能被M整除。如果余数不为0，那么N不能被M整除。</p><p>对于整除性判断，有一些数学技巧可以应用：</p><table><thead><tr><th>除数</th><th>技巧</th></tr></thead><tbody><tr><td>2</td><td>其个位数为0、2、4、6、8。</td></tr><tr><td>3</td><td>其各位数之和能被3整除。</td></tr><tr><td>4</td><td>看该数的末两位组成的数能否被4整除。</td></tr><tr><td>5</td><td>个位数为0或5。</td></tr><tr><td>6</td><td>同时被2和3整除。</td></tr><tr><td>7</td><td>有个复杂的规则，将其倒数的三位数乘以2，然后减去前面的数，得出的结果若是7的倍数，则该数就可以被7整除。</td></tr><tr><td>8</td><td>看该数的末三位数能否被8整除。</td></tr><tr><td>9</td><td>其各位数之和能被9整除。</td></tr><tr><td>10</td><td>末位为0。</td></tr><tr><td>11</td><td>奇数位的和与偶数位的和之差是11的倍数。</td></tr><tr><td>12</td><td>同时被3和4整除。</td></tr><tr><td>13</td><td>🈚️ 没有一个简单的规则，常规判断方法是进行除法或求模运算。</td></tr><tr><td>14</td><td>同时被2和7整除。</td></tr><tr><td>15</td><td>同时被3和5整除。</td></tr><tr><td>16</td><td>看该数的末四位组成的数能否被16整除。</td></tr><tr><td>17</td><td>🈚️ 没有一个简单的规则，常规判断方法是进行除法或求模运算。</td></tr><tr><td>18</td><td>同时被2和9整除。</td></tr><tr><td>19</td><td>🈚️ 没有一个简单的规则，常规判断方法是进行除法或求模运算。</td></tr><tr><td>20</td><td>末位为0，且倒数第二位为偶数。</td></tr></tbody></table><p>这些只是一些技巧，并非所有的整除情况都有一个快速的方法。对于那些复杂的数字（例如13、17、19等），常规的方法是通过实际的除法或求模运算来判断。</p>",5),x={href:"https://www.cnblogs.com/xz816111/p/4580491.html",target:"_blank",rel:"noopener noreferrer"},N=r(`<h3 id="一千位的数字字符串-判断是否能被-6-整除" tabindex="-1"><a class="header-anchor" href="#一千位的数字字符串-判断是否能被-6-整除" aria-hidden="true">#</a> 一千位的数字字符串，判断是否能被 6 整除</h3><details class="hint-container details"><summary>💡</summary><p>一个整数能被6整除，当且仅当这个数既能被2整除，又能被3整除。对于一个一千位的字符串，我们无法将其直接转换为整数，因为这将超出整数的最大范围。但是，我们可以独立地判断这个字符串表示的数是否能被2整除和被3整除。</p><p>1、能被2整除的数，其最后一位数字一定是偶数。因此，我们只需要查看字符串的最后一个字符，也就是字符串的最后一位数字，如果是偶数则可以被2整除。</p><p>2、一个数能被3整除，则这个数的各位数字之和一定能被3整除。因此，我们只需要求出字符串每个字符（数字）的和，再判断这个和是否能被3整除。</p><p>如果这个字符串表示的整数能被2整除并且能被3整除，那么这个数就能被6整除。</p><p>以下是一个实现的代码示例（Python语言）：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">isDivisibleBySix</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>   <span class="token comment"># check if divisible by 2</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>
    <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> digit <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>   <span class="token comment"># check if divisible by 3</span>
        <span class="token builtin">sum</span> <span class="token operator">+=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>digit<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token builtin">sum</span> <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>
    <span class="token keyword">return</span> <span class="token boolean">True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以调用函数<code>isDivisibleBySix</code>并传入你的一千位字符串，如果返回值为True，则代表这个字符串表示的整数能被6整除，如果返回值为False，则代表不能被6整除。</p></details><h2 id="求和" tabindex="-1"><a class="header-anchor" href="#求和" aria-hidden="true">#</a> 求和</h2><h3 id="等差数列" tabindex="-1"><a class="header-anchor" href="#等差数列" aria-hidden="true">#</a> 等差数列</h3><blockquote><p>求和公式: <code>(首项 + 尾项) * 项数 / 2</code></p></blockquote>`,5),j={href:"https://leetcode.cn/problems/missing-number",target:"_blank",rel:"noopener noreferrer"},A=n("blockquote",null,[n("p",null,"给定一个包含 [0, n] 中的 n 个数的数组 nums，找出 [0, n] 这个范围中没有出现在数组中的那个数。")],-1),B={class:"hint-container details"},C=n("summary",null,"💡",-1),S=n("p",null,"【思路1】缺失的数 = 等差数列求和 - 数组的和",-1),T=n("p",null,[s("【思路2】位运算 由于这个数组的值范围为[0, n]，则表明刚好是长度为 n+1 长度的数组。数字刚好与所在的索引的位置匹配，而缺失的数表明该位置没有数。那么使用 "),n("code",null,"x ^ x = 0"),s(" 的特性。只要将数组中数值与所有的索引进行异或操作，那么结果刚好就是缺失的那个数。 代码实现时，必须要构造一个 0~n 的数组，可以在循环变量数组时，直接使用索引值。需要注意的是 nums 长度为 n，不是 n+1。所以遍历时索引值只能到 n-1，所以可以将进行异或操作的结果值初始值设置为 n。")],-1),V=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[s(`
`),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Solution"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"missingNumber"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(" nums"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"int"),s(" sum "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 数组的和"),s(`
        `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" num "),n("span",{class:"token operator"},":"),s(" nums"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            sum `),n("span",{class:"token operator"},"+="),s(" num"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token comment"},"// 缺失的数 = 数学等差数列求和 - 数组的和"),s(`
        `),n("span",{class:"token keyword"},"int"),s(" len "),n("span",{class:"token operator"},"="),s(" nums"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),s(),n("span",{class:"token operator"},"+"),s(" len"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},"*"),s("len"),n("span",{class:"token operator"},"/"),n("span",{class:"token number"},"2"),s(),n("span",{class:"token operator"},"-"),s(" sum"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),z=n("div",{class:"language-swift line-numbers-mode","data-ext":"swift"},[n("pre",{class:"language-swift"},[n("code",null,[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Solution"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"func"),s(),n("span",{class:"token function-definition function"},"missingNumber"),n("span",{class:"token punctuation"},"("),n("span",{class:"token omit keyword"},"_"),s(" nums"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token class-name"},"Int"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"->"),s(),n("span",{class:"token class-name"},"Int"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"let"),s(" count "),n("span",{class:"token operator"},"="),s(" nums"),n("span",{class:"token punctuation"},"."),s(`count
        `),n("span",{class:"token keyword"},"var"),s(" result "),n("span",{class:"token operator"},"="),s(` count
        `),n("span",{class:"token keyword"},"for"),s(" i "),n("span",{class:"token keyword"},"in"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token operator"},"..<"),s("count "),n("span",{class:"token punctuation"},"{"),s(`
            result `),n("span",{class:"token operator"},"^="),s(` i
            result `),n("span",{class:"token operator"},"^="),s(" nums"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"return"),s(` result
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),I=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,`
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),q=n("h2",{id:"求-n",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#求-n","aria-hidden":"true"},"#"),s(" 求 "),n("code",null,"N!")],-1);function E(F,M){const e=c("ExternalLinkIcon"),p=c("CodeTabs");return u(),k("div",null,[i(" more "),b,n("ul",null,[n("li",null,[n("a",h,[s("多边形和多边形上的算法"),a(e)])]),n("li",null,[n("a",v,[s("凸边形"),a(e)])]),n("li",null,[n("a",_,[s("问题简化"),a(e)])])]),f,y,n("details",w,[g,n("p",null,[n("a",x,[s("👉🏻"),a(e)])])]),N,i(" 丢失的数字 "),n("ul",null,[n("li",null,[n("a",j,[s("🟢 268 - 丢失的数字"),a(e)]),A])]),n("details",B,[C,S,T,a(p,{id:"263",data:[{id:"java 解法1"},{id:"swift 解法2"},{id:"java"}]},{title0:t(({value:o,isActive:l})=>[s("java 解法1")]),title1:t(({value:o,isActive:l})=>[s("swift 解法2")]),title2:t(({value:o,isActive:l})=>[s("java")]),tab0:t(({value:o,isActive:l})=>[V]),tab1:t(({value:o,isActive:l})=>[z]),tab2:t(({value:o,isActive:l})=>[I]),_:1})]),q])}const P=d(m,[["render",E],["__file","0x09.math.html.vue"]]);export{P as default};
