import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as c,o as l,c as i,b as n,e,d as t,a as r,f as a}from"./app-gtYUf9e2.js";const p={},d={href:"https://github.com/apple-oss-distributions/objc4/blob/objc4-876/runtime",target:"_blank",rel:"noopener noreferrer"},u=n("h2",{id:"runtime-是什么",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#runtime-是什么","aria-hidden":"true"},"#"),e(),n("code",null,"runtime"),e(" 是什么")],-1),m={href:"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ObjCRuntimeGuide",target:"_blank",rel:"noopener noreferrer"},b=a('<blockquote><p>The Objective-C language defers as many decisions as it can from compile time and link time to runtime. Whenever possible, it does things dynamically. This means that the language requires not just a compiler, but also a runtime system to execute the compiled code. The runtime system acts as a kind of operating system for the Objective-C language; it’s what makes the language work.</p><p>Objective-C 语言尽可能地将许多决策从编译时间和链接时间推迟到运行时。它就会尽可能地动态地执行任务。 这意味着该语言不仅需要一个编译器，而且还需要一个运行时系统来执行编译过的代码。 运行时系统就像是 Objective-C 语言的操作系统；这是语言运行工作的原理所在。</p></blockquote><p>这段说明可以分三段理解</p><ul><li><code>OC</code> 的设计者为了让它具备动态能力，所以将只要可以动态处理的任务都迁移到运行时。</li><li>编译器只完成了部分代码编译链接工作，还剩一部分需要运行时处理，所以需要设计这个 <code>runtime</code> 来进行代码的动态处理。</li><li>将 <code>runtime</code> 看做 <code>OC</code> 语言的操作系统。操作系统是计算机运行的核心，用来进行系统资源分配，各种任务调度，是计算机可以正常运行的关键。说明了 <code>runtime</code> 对于 <code>OC</code> 语言的重要性，也是必不可少的一部分。</li></ul><p>这也很好地解释了“为什么是 OC 是一个动态语言？”。</p><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> reference</h2>',5),k={href:"https://github.com/apple-oss-distributions/objc4",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/RetVal/objc-runtime",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/nst/iOS-Runtime-Headers",target:"_blank",rel:"noopener noreferrer"},_=n("blockquote",null,[n("p",null,"iOS Objective-C headers as derived from runtime introspection")],-1),g={href:"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ObjCRuntimeGuide",target:"_blank",rel:"noopener noreferrer"},f={href:"https://github.com/steipete/Aspects",target:"_blank",rel:"noopener noreferrer"},S=n("blockquote",null,[n("p",null,"Delightful, simple library for aspect oriented programming in Objective-C and Swift.")],-1),C=n("hr",null,null,-1),j={href:"https://juejin.cn/post/6844904052778598408",target:"_blank",rel:"noopener noreferrer"},y={href:"https://www.jianshu.com/p/30de582dbeb7",target:"_blank",rel:"noopener noreferrer"},O=n("a",{href:"%E2%9C%85"},null,-1),w={href:"https://www.jianshu.com/p/1bf78e1b3594",target:"_blank",rel:"noopener noreferrer"},x=n("blockquote",null,[n("p",null,"作者的 Slogan : 汇编是检验一切语法糖的唯一标准")],-1),q={href:"https://shannonchenchn.github.io/2018/03/16/objc-runtime-learning-notes/",target:"_blank",rel:"noopener noreferrer"},N=n("a",{href:"%E2%9C%85"},null,-1),P={href:"https://nemocdz.github.io/post/why-is-metaclass-in-objective-c/",target:"_blank",rel:"noopener noreferrer"},E=a("<blockquote><p>作者从自己遇到的一个面试题出发，按照第一性原理进行问题推导。 👉🏻 首先去研究了 <code>OC</code> 中的源码，梳理了 <code>isa</code>、<code>MetaClass</code> 关系。 👉🏻 在搜索 <code>MetaClass</code> 的过程，发现了 <code>Python</code> 中也有这个设计。进而了解到是源于 <code>Smalltalk</code> 的设计，而 <code>OC</code> 就是借鉴的 <code>Smalltalk</code> 的设计思想。 👉🏻 进一步思考如果没有 <code>MetaClass</code> 是否可行。在宏观成面思考了面向对象的两种设计思想，以 <code>C++</code> (借鉴 <code>Simula</code>)为代表的<em>类的划分</em>，还有以 <code>OC</code> (借鉴 <code>Smalltalk</code>)为代表的<code>消息传递</code>。</p></blockquote>",1),L={href:"http://yulingtianxia.com/blog/2016/06/15/Objective-C-Message-Sending-and-Forwarding/",target:"_blank",rel:"noopener noreferrer"},M={href:"https://blog.sunnyxx.com/2014/11/06/runtime-nuts",target:"_blank",rel:"noopener noreferrer"},R={href:"http://yulingtianxia.com/blog/2014/11/05/objective-c-runtime/",target:"_blank",rel:"noopener noreferrer"},I={href:"https://blog.ibireme.com/2013/11/26/objective-c-messaging/",target:"_blank",rel:"noopener noreferrer"},F=a(`<h2 id="concept" tabindex="-1"><a class="header-anchor" href="#concept" aria-hidden="true">#</a> concept</h2><ul><li><p><code>instance -&gt; class -&gt; method -&gt; SEL -&gt; IMP -&gt; 实现函数</code></p></li><li><p><code>objc_msgSend</code> : Objective-C 消息传递函数 <code>id objc_msgSend(id self, SEL op, ... );</code></p></li><li><p>SEL &amp; IMP</p></li></ul><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>SEL</code></td><td>方法选择器 (方法的 ID)</td></tr><tr><td><code>IMP</code></td><td>函数指针，方法实现的指针</td></tr></tbody></table><ul><li>反射</li></ul><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">/** SEL 反射 */</span>
<span class="token comment">//  String -&gt; SEL</span>
SEL selector <span class="token operator">=</span> <span class="token function">NSSelectorFromString</span><span class="token punctuation">(</span><span class="token string">@&quot;setName:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>stu performSelector<span class="token punctuation">:</span>selector withObject<span class="token punctuation">:</span><span class="token string">@&quot;Kobe&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//  SEL -&gt; String</span>
<span class="token function">NSStringFromSelector</span><span class="token punctuation">(</span><span class="token keyword">@selector</span><span class="token punctuation">(</span>setName<span class="token punctuation">:</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/**  Class 反射 */</span>
<span class="token comment">//  String -&gt; Class</span>
Class class <span class="token operator">=</span> <span class="token function">NSClassFromString</span><span class="token punctuation">(</span><span class="token string">@&quot;Student&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Student <span class="token operator">*</span>student <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>class alloc<span class="token punctuation">]</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span> 
<span class="token comment">//  Class -&gt; String</span>
Class class <span class="token operator">=</span> <span class="token punctuation">[</span>Student class<span class="token punctuation">]</span><span class="token punctuation">;</span>
NSString <span class="token operator">*</span>className <span class="token operator">=</span> <span class="token function">NSStringFromClass</span><span class="token punctuation">(</span>class<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/** Protocol 反射 */</span>
<span class="token comment">//  String -&gt; Protocol</span>
Protocol protocol <span class="token operator">=</span> <span class="token function">NSProtocolFromString</span><span class="token punctuation">(</span><span class="token string">@&quot;People&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//  Protocol -&gt; String</span>
NSString <span class="token operator">*</span>protocolName <span class="token operator">=</span> <span class="token function">NSStringFromProtocol</span><span class="token punctuation">(</span>protocol<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="oc-的动态特性" tabindex="-1"><a class="header-anchor" href="#oc-的动态特性" aria-hidden="true">#</a> OC 的动态特性</h2><ul><li><p>动态类型（Dynamic typing）</p><ul><li><code>isKindOfClass:</code> : 判断某一对象是否是某个类或其子类的实例</li><li><code>isMemberOfClass:</code> : 判断某一对象是否是某个类的实例</li></ul></li><li><p>动态绑定（Dynamic binding）</p><ul><li>传统函数 : 编译时期，将函数参数和实现打包到源码</li><li>OC的消息机制 : 运行时，才去动态查找与实例绑定的属性和方法</li></ul></li><li><p>动态加载（Dynamic loading）</p><ul><li>根据需求动态加载资源(如 : @2x,@3x图片的加载)\`</li></ul></li></ul><h2 id="runtime-struct" tabindex="-1"><a class="header-anchor" href="#runtime-struct" aria-hidden="true">#</a> Runtime Struct</h2><table><thead><tr><th>结构体</th><th>说明</th></tr></thead><tbody><tr><td><code>objc_object</code></td><td>objc 对象 <code>id</code>，isa 指针包含指向对象的地址</td></tr><tr><td><code>objc_class</code></td><td>objc 对象的类 <code>Class</code></td></tr><tr><td><code>class_data_bits_t</code></td><td>包含 <code>class_rw_t</code> 信息</td></tr><tr><td><code>class_rw_t</code></td><td>rw : 可读可写，类在运行时才确定的方法、属性、协议 (包含指向 <code>class_ro_t</code>的指针)</td></tr><tr><td><code>class_ro_t</code></td><td>ro : 只读，类在编译期间就确定的方法、属性、协议</td></tr><tr><td><code>cache_t</code></td><td>缓存已经使用过的方法</td></tr><tr><td><code>bucket_t</code></td><td>缓存使用的哈希表结构体 (<code>key: SEL ; value: IMP</code>)</td></tr></tbody></table><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">struct</span> class_rw_t <span class="token punctuation">{</span> <span class="token comment">// 可读可写</span>
    uint32_t flags<span class="token punctuation">;</span>
    uint32_t version<span class="token punctuation">;</span>

    <span class="token keyword">const</span> class_ro_t <span class="token operator">*</span>ro<span class="token punctuation">;</span>           <span class="token comment">// 指向只读的结构体,存放类初始信息</span>
    
    method_array_t methods<span class="token punctuation">;</span>         <span class="token comment">// 方法列表（类对象存放对象方法，元类对象存放类方法）</span>
    property_array_t properties<span class="token punctuation">;</span>    <span class="token comment">// 属性列表</span>
    protocol_array_t protocols<span class="token punctuation">;</span>     <span class="token comment">// 协议列表</span>

    Class firstSubclass<span class="token punctuation">;</span>
    Class nextSiblingClass<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">struct</span> class_ro_t <span class="token punctuation">{</span> <span class="token comment">// 只读 </span>
    uint32_t flags<span class="token punctuation">;</span>
    uint32_t instanceStart<span class="token punctuation">;</span>
    uint32_t instanceSize<span class="token punctuation">;</span>
    uint32_t reserved<span class="token punctuation">;</span>

    <span class="token keyword">const</span> uint8_t <span class="token operator">*</span> ivarLayout<span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> name<span class="token punctuation">;</span>
    method_list_t <span class="token operator">*</span> baseMethodList<span class="token punctuation">;</span>     <span class="token comment">// 方法列表</span>
    protocol_list_t <span class="token operator">*</span> baseProtocols<span class="token punctuation">;</span>    <span class="token comment">// 协议列表</span>
    <span class="token keyword">const</span> ivar_list_t <span class="token operator">*</span> ivars<span class="token punctuation">;</span>          <span class="token comment">// 成员变量列表</span>

    <span class="token keyword">const</span> uint8_t <span class="token operator">*</span> weakIvarLayout<span class="token punctuation">;</span>
    property_list_t <span class="token operator">*</span>baseProperties<span class="token punctuation">;</span>    <span class="token comment">// 属性列表</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10);function V(A,D){const s=c("ExternalLinkIcon");return l(),i("div",null,[n("blockquote",null,[n("p",null,[e("参考源码 "),n("a",d,[e("objc-876"),t(s)])])]),r(" more "),u,n("p",null,[n("a",m,[e("Objective-C Runtime Programming Guide"),t(s)])]),b,n("ul",null,[n("li",null,[n("a",k,[e("objc4"),t(s)])]),n("li",null,[n("a",h,[e("A debuggable objc runtime"),t(s)])]),n("li",null,[n("a",v,[e("iOS-Runtime-Headers"),t(s)]),e(" : iOS 运行时头文件(包括私有 API) "),_]),n("li",null,[n("a",g,[e("Objective-C Runtime Programming Guide"),t(s)])]),n("li",null,[n("a",f,[e("Aspects"),t(s)]),S])]),C,n("ul",null,[n("li",null,[n("a",j,[e("2020-01-23 Aspects深度解析-iOS面向切面编程"),t(s)])]),n("li",null,[n("a",y,[e("2019-08-05 Runtime原理探究"),t(s)])]),n("li",null,[O,e(),n("a",w,[e("2019-03-07 OC对象的本质"),t(s)]),x]),n("li",null,[n("a",q,[e("2018-03-16 读 objc4 源码，深入理解 Objective-C Runtime"),t(s)])]),n("li",null,[N,e(),n("a",P,[e("2017-09-15 Why is MetaClass in Objective-C？"),t(s)]),e(" 💯 "),E]),n("li",null,[n("a",L,[e("2016-06-15 Objective-C 消息发送与转发机制原理"),t(s)])]),n("li",null,[n("a",M,[e("2014-11-06 神经病院objc runtime入院考试"),t(s)])]),n("li",null,[n("a",R,[e("2014-11-05 Objective-C Runtime"),t(s)])]),n("li",null,[n("a",I,[e("2013-11-26 Objective-C 中的消息与消息转发"),t(s)])])]),F])}const B=o(p,[["render",V],["__file","index.html.vue"]]);export{B as default};
