import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o as c,c as l,a as i,b as n,e as s,d as t,f as e}from"./app-DEFCDufz.js";const u={},r=n("blockquote",null,[n("p",null,[n("code",null,"Message"),s(" - “发消息”")])],-1),d=n("h2",{id:"消息发送",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#消息发送","aria-hidden":"true"},"#"),s(" 消息发送")],-1),k=n("h3",{id:"objc-msgsend",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#objc-msgsend","aria-hidden":"true"},"#"),s(" objc_msgSend")],-1),m={href:"https://github.com/apple-oss-distributions/objc4/blob/objc4-876/runtime/message.h#L84",target:"_blank",rel:"noopener noreferrer"},v=e(`<div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// message.h#L84</span>
<span class="token comment">// objc_msgSend 函数声明</span>
OBJC_EXPORT id _Nullable
<span class="token function">objc_msgSend</span><span class="token punctuation">(</span>id _Nullable <span class="token keyword">self</span><span class="token punctuation">,</span> SEL _Nonnull op<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="objc-msgsend-1" tabindex="-1"><a class="header-anchor" href="#objc-msgsend-1" aria-hidden="true">#</a> _objc_msgSend</h3>`,2),b={href:"https://github.com/apple-oss-distributions/objc4/blob/objc4-876/runtime/Messengers.subproj/objc-msg-arm64.s#L575",target:"_blank",rel:"noopener noreferrer"},h=e(`<div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// objc-msg-arm64.s#L575</span>
<span class="token comment">// objc 消息发送汇编实现</span>
	MSG_ENTRY _objc_msgSend
	UNWIND _objc_msgSend<span class="token punctuation">,</span> NoFrame

	cmp	p0<span class="token punctuation">,</span> #<span class="token number">0</span>			<span class="token comment">// nil check and tagged pointer check</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">SUPPORT_TAGGED_POINTERS</span></span>
	b<span class="token punctuation">.</span>le	LNilOrTagged		<span class="token comment">//  (MSB tagged pointer looks negative)</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
	b<span class="token punctuation">.</span>eq	LReturnZero
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
	ldr	p14<span class="token punctuation">,</span> <span class="token punctuation">[</span>x0<span class="token punctuation">]</span>		<span class="token comment">// p14 = raw isa</span>
	GetClassFromIsa_p16 p14<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> x0	<span class="token comment">// p16 = class</span>
LGetIsaDone<span class="token punctuation">:</span>
	<span class="token comment">// calls imp or objc_msgSend_uncached</span>
	CacheLookup NORMAL<span class="token punctuation">,</span> _objc_msgSend<span class="token punctuation">,</span> __objc_msgSend_uncached

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">SUPPORT_TAGGED_POINTERS</span></span>
LNilOrTagged<span class="token punctuation">:</span>
	b<span class="token punctuation">.</span>eq	LReturnZero		<span class="token comment">// nil check</span>
	GetTaggedClass
	b	LGetIsaDone
<span class="token comment">// SUPPORT_TAGGED_POINTERS</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

LReturnZero<span class="token punctuation">:</span>
	<span class="token comment">// x0 is already zero</span>
	mov	x1<span class="token punctuation">,</span> #<span class="token number">0</span>
	movi	d0<span class="token punctuation">,</span> #<span class="token number">0</span>
	movi	d1<span class="token punctuation">,</span> #<span class="token number">0</span>
	movi	d2<span class="token punctuation">,</span> #<span class="token number">0</span>
	movi	d3<span class="token punctuation">,</span> #<span class="token number">0</span>
	ret

	END_ENTRY _objc_msgSend
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="objc-msglookup" tabindex="-1"><a class="header-anchor" href="#objc-msglookup" aria-hidden="true">#</a> _objc_msgLookup</h3>`,2),g={href:"https://github.com/apple-oss-distributions/objc4/blob/objc4-876/runtime/Messengers.subproj/objc-msg-arm64.s#L610",target:"_blank",rel:"noopener noreferrer"},_=e(`<div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// objc-msg-arm64.s#L610</span>
<span class="token comment">// objc 消息查询汇编实现</span>
	ENTRY _objc_msgLookup
	UNWIND _objc_msgLookup<span class="token punctuation">,</span> NoFrame
	cmp	p0<span class="token punctuation">,</span> #<span class="token number">0</span>			<span class="token comment">// nil check and tagged pointer check</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">SUPPORT_TAGGED_POINTERS</span></span>
	b<span class="token punctuation">.</span>le	LLookup_NilOrTagged	<span class="token comment">//  (MSB tagged pointer looks negative)</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
	b<span class="token punctuation">.</span>eq	LLookup_Nil
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
	ldr	p13<span class="token punctuation">,</span> <span class="token punctuation">[</span>x0<span class="token punctuation">]</span>		<span class="token comment">// p13 = isa</span>
	GetClassFromIsa_p16 p13<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> x0	<span class="token comment">// p16 = class</span>
LLookup_GetIsaDone<span class="token punctuation">:</span>
	<span class="token comment">// returns imp</span>
	CacheLookup LOOKUP<span class="token punctuation">,</span> _objc_msgLookup<span class="token punctuation">,</span> __objc_msgLookup_uncached

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">SUPPORT_TAGGED_POINTERS</span></span>
LLookup_NilOrTagged<span class="token punctuation">:</span>
	b<span class="token punctuation">.</span>eq	LLookup_Nil	<span class="token comment">// nil check</span>
	GetTaggedClass
	b	LLookup_GetIsaDone
<span class="token comment">// SUPPORT_TAGGED_POINTERS</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

LLookup_Nil<span class="token punctuation">:</span>
	adr	x17<span class="token punctuation">,</span> __objc_msgNil
	SignAsImp x17
	ret

	END_ENTRY _objc_msgLookup
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="cachelookup" tabindex="-1"><a class="header-anchor" href="#cachelookup" aria-hidden="true">#</a> CacheLookup</h3>`,2),f={href:"https://github.com/apple-oss-distributions/objc4/blob/objc4-876/runtime/Messengers.subproj/objc-msg-arm64.s#L336",target:"_blank",rel:"noopener noreferrer"},j=e('<hr><h2 id="消息转发" tabindex="-1"><a class="header-anchor" href="#消息转发" aria-hidden="true">#</a> 消息转发</h2><blockquote><p>消息转发 : <code>resolveInstanceMethod: -&gt; forwardingTargetForSelector: -&gt; methodSignatureForSelector: -&gt; forwardInvocation: -&gt; 无法处理</code></p></blockquote><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td><code>resolveInstanceMethod:</code></td><td>实例方法是否为动态添加</td></tr><tr><td><code>resolveClassMethod</code></td><td>类方法是否为动态添加</td></tr><tr><td><code>forwardingTargetForSelector:</code></td><td>指定那个对象响应消息</td></tr><tr><td><code>methodSignatureForSelector:</code></td><td>进行方法签名</td></tr><tr><td><code>forwardInvocation:</code></td><td>根据签名创建 NSInvocation</td></tr></tbody></table><h3 id="objc-msgforward" tabindex="-1"><a class="header-anchor" href="#objc-msgforward" aria-hidden="true">#</a> __objc_msgForward</h3>',5),y={href:"https://github.com/apple-oss-distributions/objc4/blob/objc4-876/runtime/Messengers.subproj/objc-msg-arm64.s#L776",target:"_blank",rel:"noopener noreferrer"},L=e(`<div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// objc-msg-arm64.s#L776</span>
<span class="token comment">// objc 消息转发汇编实现</span>
	ENTRY __objc_msgForward

	adrp	x17<span class="token punctuation">,</span> __objc_forward_handler<span class="token operator">@</span>PAGE
	ldr	p17<span class="token punctuation">,</span> <span class="token punctuation">[</span>x17<span class="token punctuation">,</span> __objc_forward_handler<span class="token operator">@</span>PAGEOFF<span class="token punctuation">]</span>
	TailCallFunctionPointer x17
	
	END_ENTRY __objc_msgForward
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="resolveclassmethod" tabindex="-1"><a class="header-anchor" href="#resolveclassmethod" aria-hidden="true">#</a> resolveClassMethod</h3>`,2),S={href:"https://github.com/apple-oss-distributions/objc4/blob/objc4-876/runtime/objc-runtime-new.mm#L6635",target:"_blank",rel:"noopener noreferrer"},w=e(`<div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// objc-runtime-new.mm#L6635</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">resolveClassMethod</span><span class="token punctuation">(</span>id inst<span class="token punctuation">,</span> SEL sel<span class="token punctuation">,</span> Class cls<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    lockdebug<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">assert_unlocked</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>runtimeLock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ASSERT</span><span class="token punctuation">(</span>cls<span class="token operator">-&gt;</span><span class="token function">isRealized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ASSERT</span><span class="token punctuation">(</span>cls<span class="token operator">-&gt;</span><span class="token function">isMetaClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">lookUpImpOrNilTryCache</span><span class="token punctuation">(</span>inst<span class="token punctuation">,</span> <span class="token keyword">@selector</span><span class="token punctuation">(</span>resolveClassMethod<span class="token punctuation">:</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cls<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Resolver not implemented.</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    Class nonmeta<span class="token punctuation">;</span>
    <span class="token punctuation">{</span>
        mutex_locker_t <span class="token function">lock</span><span class="token punctuation">(</span>runtimeLock<span class="token punctuation">)</span><span class="token punctuation">;</span>
        nonmeta <span class="token operator">=</span> <span class="token function">getMaybeUnrealizedNonMetaClass</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> inst<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// +initialize path should have realized nonmeta already</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>nonmeta<span class="token operator">-&gt;</span><span class="token function">isRealized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">_objc_fatal</span><span class="token punctuation">(</span><span class="token string">&quot;nonmeta class %s (%p) unexpectedly not realized&quot;</span><span class="token punctuation">,</span>
                        nonmeta<span class="token operator">-&gt;</span><span class="token function">nameForLogging</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nonmeta<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">BOOL</span> <span class="token punctuation">(</span><span class="token operator">*</span>msg<span class="token punctuation">)</span><span class="token punctuation">(</span>Class<span class="token punctuation">,</span> SEL<span class="token punctuation">,</span> SEL<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span>objc_msgSend<span class="token punctuation">;</span>
    bool resolved <span class="token operator">=</span> <span class="token function">msg</span><span class="token punctuation">(</span>nonmeta<span class="token punctuation">,</span> <span class="token keyword">@selector</span><span class="token punctuation">(</span>resolveClassMethod<span class="token punctuation">:</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sel<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Cache the result (good or bad) so the resolver doesn&#39;t fire next time.</span>
    <span class="token comment">// +resolveClassMethod adds to self-&gt;ISA() a.k.a. cls</span>
    IMP imp <span class="token operator">=</span> <span class="token function">lookUpImpOrNilTryCache</span><span class="token punctuation">(</span>inst<span class="token punctuation">,</span> sel<span class="token punctuation">,</span> cls<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>resolved  <span class="token operator">&amp;&amp;</span>  PrintResolving<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>imp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">_objc_inform</span><span class="token punctuation">(</span><span class="token string">&quot;RESOLVE: method %c[%s %s] &quot;</span>
                         <span class="token string">&quot;dynamically resolved to %p&quot;</span><span class="token punctuation">,</span>
                         cls<span class="token operator">-&gt;</span><span class="token function">isMetaClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token char">&#39;+&#39;</span> <span class="token punctuation">:</span> <span class="token char">&#39;-&#39;</span><span class="token punctuation">,</span>
                         cls<span class="token operator">-&gt;</span><span class="token function">nameForLogging</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sel_getName</span><span class="token punctuation">(</span>sel<span class="token punctuation">)</span><span class="token punctuation">,</span> imp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// Method resolver didn&#39;t add anything?</span>
            <span class="token function">_objc_inform</span><span class="token punctuation">(</span><span class="token string">&quot;RESOLVE: +[%s resolveClassMethod:%s] returned YES&quot;</span>
                         <span class="token string">&quot;, but no new implementation of %c[%s %s] was found&quot;</span><span class="token punctuation">,</span>
                         cls<span class="token operator">-&gt;</span><span class="token function">nameForLogging</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sel_getName</span><span class="token punctuation">(</span>sel<span class="token punctuation">)</span><span class="token punctuation">,</span>
                         cls<span class="token operator">-&gt;</span><span class="token function">isMetaClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token char">&#39;+&#39;</span> <span class="token punctuation">:</span> <span class="token char">&#39;-&#39;</span><span class="token punctuation">,</span>
                         cls<span class="token operator">-&gt;</span><span class="token function">nameForLogging</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sel_getName</span><span class="token punctuation">(</span>sel<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="resolveinstancemethod" tabindex="-1"><a class="header-anchor" href="#resolveinstancemethod" aria-hidden="true">#</a> resolveInstanceMethod</h3>`,2),E={href:"https://github.com/apple-oss-distributions/objc4/blob/objc4-876/runtime/objc-runtime-new.mm#L6688",target:"_blank",rel:"noopener noreferrer"},C=e(`<div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// objc-runtime-new.mm#L6688</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">resolveInstanceMethod</span><span class="token punctuation">(</span>id inst<span class="token punctuation">,</span> SEL sel<span class="token punctuation">,</span> Class cls<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    lockdebug<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">assert_unlocked</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>runtimeLock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ASSERT</span><span class="token punctuation">(</span>cls<span class="token operator">-&gt;</span><span class="token function">isRealized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    SEL resolve_sel <span class="token operator">=</span> <span class="token keyword">@selector</span><span class="token punctuation">(</span>resolveInstanceMethod<span class="token punctuation">:</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">lookUpImpOrNilTryCache</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> resolve_sel<span class="token punctuation">,</span> cls<span class="token operator">-&gt;</span><span class="token function">ISA</span><span class="token punctuation">(</span><span class="token comment">/*authenticated*/</span>true<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Resolver not implemented.</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">BOOL</span> <span class="token punctuation">(</span><span class="token operator">*</span>msg<span class="token punctuation">)</span><span class="token punctuation">(</span>Class<span class="token punctuation">,</span> SEL<span class="token punctuation">,</span> SEL<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span>objc_msgSend<span class="token punctuation">;</span>
    bool resolved <span class="token operator">=</span> <span class="token function">msg</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> resolve_sel<span class="token punctuation">,</span> sel<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Cache the result (good or bad) so the resolver doesn&#39;t fire next time.</span>
    <span class="token comment">// +resolveInstanceMethod adds to self a.k.a. cls</span>
    IMP imp <span class="token operator">=</span> <span class="token function">lookUpImpOrNilTryCache</span><span class="token punctuation">(</span>inst<span class="token punctuation">,</span> sel<span class="token punctuation">,</span> cls<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>resolved  <span class="token operator">&amp;&amp;</span>  PrintResolving<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>imp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">_objc_inform</span><span class="token punctuation">(</span><span class="token string">&quot;RESOLVE: method %c[%s %s] &quot;</span>
                         <span class="token string">&quot;dynamically resolved to %p&quot;</span><span class="token punctuation">,</span>
                         cls<span class="token operator">-&gt;</span><span class="token function">isMetaClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token char">&#39;+&#39;</span> <span class="token punctuation">:</span> <span class="token char">&#39;-&#39;</span><span class="token punctuation">,</span>
                         cls<span class="token operator">-&gt;</span><span class="token function">nameForLogging</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sel_getName</span><span class="token punctuation">(</span>sel<span class="token punctuation">)</span><span class="token punctuation">,</span> imp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// Method resolver didn&#39;t add anything?</span>
            <span class="token function">_objc_inform</span><span class="token punctuation">(</span><span class="token string">&quot;RESOLVE: +[%s resolveInstanceMethod:%s] returned YES&quot;</span>
                         <span class="token string">&quot;, but no new implementation of %c[%s %s] was found&quot;</span><span class="token punctuation">,</span>
                         cls<span class="token operator">-&gt;</span><span class="token function">nameForLogging</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sel_getName</span><span class="token punctuation">(</span>sel<span class="token punctuation">)</span><span class="token punctuation">,</span>
                         cls<span class="token operator">-&gt;</span><span class="token function">isMetaClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token char">&#39;+&#39;</span> <span class="token punctuation">:</span> <span class="token char">&#39;-&#39;</span><span class="token punctuation">,</span>
                         cls<span class="token operator">-&gt;</span><span class="token function">nameForLogging</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sel_getName</span><span class="token punctuation">(</span>sel<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// file: objc-runtime-new.mm</span>
<span class="token comment">// line:7085</span>
<span class="token comment">/***********************************************************************
* resolveClassMethod
* Call +resolveClassMethod, looking for a method to be added to class cls.
* cls should be a metaclass.
* Does not check if the method already exists.
**********************************************************************/</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">resolveClassMethod</span><span class="token punctuation">(</span>id inst<span class="token punctuation">,</span> SEL sel<span class="token punctuation">,</span> Class cls<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    lockdebug<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">assert_unlocked</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>runtimeLock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ASSERT</span><span class="token punctuation">(</span>cls<span class="token operator">-&gt;</span><span class="token function">isRealized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ASSERT</span><span class="token punctuation">(</span>cls<span class="token operator">-&gt;</span><span class="token function">isMetaClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">lookUpImpOrNilTryCache</span><span class="token punctuation">(</span>inst<span class="token punctuation">,</span> <span class="token keyword">@selector</span><span class="token punctuation">(</span>resolveClassMethod<span class="token punctuation">:</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cls<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Resolver not implemented.</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    Class nonmeta<span class="token punctuation">;</span>
    <span class="token punctuation">{</span>
        mutex_locker_t <span class="token function">lock</span><span class="token punctuation">(</span>runtimeLock<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 互斥锁，上锁</span>
        nonmeta <span class="token operator">=</span> <span class="token function">getMaybeUnrealizedNonMetaClass</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> inst<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// +initialize path should have realized nonmeta already</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>nonmeta<span class="token operator">-&gt;</span><span class="token function">isRealized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">_objc_fatal</span><span class="token punctuation">(</span><span class="token string">&quot;nonmeta class %s (%p) unexpectedly not realized&quot;</span><span class="token punctuation">,</span>
                        nonmeta<span class="token operator">-&gt;</span><span class="token function">nameForLogging</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nonmeta<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">BOOL</span> <span class="token punctuation">(</span><span class="token operator">*</span>msg<span class="token punctuation">)</span><span class="token punctuation">(</span>Class<span class="token punctuation">,</span> SEL<span class="token punctuation">,</span> SEL<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span>objc_msgSend<span class="token punctuation">;</span>
    bool resolved <span class="token operator">=</span> <span class="token function">msg</span><span class="token punctuation">(</span>nonmeta<span class="token punctuation">,</span> <span class="token keyword">@selector</span><span class="token punctuation">(</span>resolveClassMethod<span class="token punctuation">:</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sel<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Cache the result (good or bad) so the resolver doesn&#39;t fire next time.</span>
    <span class="token comment">// +resolveClassMethod adds to self-&gt;ISA() a.k.a. cls</span>
    IMP imp <span class="token operator">=</span> <span class="token function">lookUpImpOrNilTryCache</span><span class="token punctuation">(</span>inst<span class="token punctuation">,</span> sel<span class="token punctuation">,</span> cls<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>resolved  <span class="token operator">&amp;&amp;</span>  PrintResolving<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>imp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">_objc_inform</span><span class="token punctuation">(</span><span class="token string">&quot;RESOLVE: method %c[%s %s] &quot;</span>
                         <span class="token string">&quot;dynamically resolved to %p&quot;</span><span class="token punctuation">,</span>
                         cls<span class="token operator">-&gt;</span><span class="token function">isMetaClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token char">&#39;+&#39;</span> <span class="token punctuation">:</span> <span class="token char">&#39;-&#39;</span><span class="token punctuation">,</span>
                         cls<span class="token operator">-&gt;</span><span class="token function">nameForLogging</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sel_getName</span><span class="token punctuation">(</span>sel<span class="token punctuation">)</span><span class="token punctuation">,</span> imp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// Method resolver didn&#39;t add anything?</span>
            <span class="token function">_objc_inform</span><span class="token punctuation">(</span><span class="token string">&quot;RESOLVE: +[%s resolveClassMethod:%s] returned YES&quot;</span>
                         <span class="token string">&quot;, but no new implementation of %c[%s %s] was found&quot;</span><span class="token punctuation">,</span>
                         cls<span class="token operator">-&gt;</span><span class="token function">nameForLogging</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sel_getName</span><span class="token punctuation">(</span>sel<span class="token punctuation">)</span><span class="token punctuation">,</span>
                         cls<span class="token operator">-&gt;</span><span class="token function">isMetaClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token char">&#39;+&#39;</span> <span class="token punctuation">:</span> <span class="token char">&#39;-&#39;</span><span class="token punctuation">,</span>
                         cls<span class="token operator">-&gt;</span><span class="token function">nameForLogging</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sel_getName</span><span class="token punctuation">(</span>sel<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token comment">/***********************************************************************
* resolveInstanceMethod
* Call +resolveInstanceMethod, looking for a method to be added to class cls.
* cls may be a metaclass or a non-meta class.
* Does not check if the method already exists.
**********************************************************************/</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">resolveInstanceMethod</span><span class="token punctuation">(</span>id inst<span class="token punctuation">,</span> SEL sel<span class="token punctuation">,</span> Class cls<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    lockdebug<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">assert_unlocked</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>runtimeLock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ASSERT</span><span class="token punctuation">(</span>cls<span class="token operator">-&gt;</span><span class="token function">isRealized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    SEL resolve_sel <span class="token operator">=</span> <span class="token keyword">@selector</span><span class="token punctuation">(</span>resolveInstanceMethod<span class="token punctuation">:</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">lookUpImpOrNilTryCache</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> resolve_sel<span class="token punctuation">,</span> cls<span class="token operator">-&gt;</span><span class="token function">ISA</span><span class="token punctuation">(</span><span class="token comment">/*authenticated*/</span>true<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Resolver not implemented.</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">BOOL</span> <span class="token punctuation">(</span><span class="token operator">*</span>msg<span class="token punctuation">)</span><span class="token punctuation">(</span>Class<span class="token punctuation">,</span> SEL<span class="token punctuation">,</span> SEL<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span>objc_msgSend<span class="token punctuation">;</span>
    bool resolved <span class="token operator">=</span> <span class="token function">msg</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> resolve_sel<span class="token punctuation">,</span> sel<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Cache the result (good or bad) so the resolver doesn&#39;t fire next time.</span>
    <span class="token comment">// +resolveInstanceMethod adds to self a.k.a. cls</span>
    IMP imp <span class="token operator">=</span> <span class="token function">lookUpImpOrNilTryCache</span><span class="token punctuation">(</span>inst<span class="token punctuation">,</span> sel<span class="token punctuation">,</span> cls<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>resolved  <span class="token operator">&amp;&amp;</span>  PrintResolving<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>imp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">_objc_inform</span><span class="token punctuation">(</span><span class="token string">&quot;RESOLVE: method %c[%s %s] &quot;</span>
                         <span class="token string">&quot;dynamically resolved to %p&quot;</span><span class="token punctuation">,</span>
                         cls<span class="token operator">-&gt;</span><span class="token function">isMetaClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token char">&#39;+&#39;</span> <span class="token punctuation">:</span> <span class="token char">&#39;-&#39;</span><span class="token punctuation">,</span>
                         cls<span class="token operator">-&gt;</span><span class="token function">nameForLogging</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sel_getName</span><span class="token punctuation">(</span>sel<span class="token punctuation">)</span><span class="token punctuation">,</span> imp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// Method resolver didn&#39;t add anything?</span>
            <span class="token function">_objc_inform</span><span class="token punctuation">(</span><span class="token string">&quot;RESOLVE: +[%s resolveInstanceMethod:%s] returned YES&quot;</span>
                         <span class="token string">&quot;, but no new implementation of %c[%s %s] was found&quot;</span><span class="token punctuation">,</span>
                         cls<span class="token operator">-&gt;</span><span class="token function">nameForLogging</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sel_getName</span><span class="token punctuation">(</span>sel<span class="token punctuation">)</span><span class="token punctuation">,</span>
                         cls<span class="token operator">-&gt;</span><span class="token function">isMetaClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token char">&#39;+&#39;</span> <span class="token punctuation">:</span> <span class="token char">&#39;-&#39;</span><span class="token punctuation">,</span>
                         cls<span class="token operator">-&gt;</span><span class="token function">nameForLogging</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sel_getName</span><span class="token punctuation">(</span>sel<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="直接方法调用" tabindex="-1"><a class="header-anchor" href="#直接方法调用" aria-hidden="true">#</a> 直接方法调用</h2>`,4),N={href:"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html",target:"_blank",rel:"noopener noreferrer"},M=n("h3",{id:"method-invoke",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#method-invoke","aria-hidden":"true"},"#"),s(" method_invoke")],-1),R={href:"https://github.com/apple-oss-distributions/objc4/blob/objc4-876/runtime/message.h#L257",target:"_blank",rel:"noopener noreferrer"},q=e(`<div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// message.h#L257</span>
<span class="token comment">// method_invoke 函数声明</span>
OBJC_EXPORT id _Nullable
<span class="token function">method_invoke</span><span class="token punctuation">(</span>id _Nullable receiver<span class="token punctuation">,</span> Method _Nonnull m<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function T(x,I){const a=p("ExternalLinkIcon");return c(),l("div",null,[r,i(" more "),d,k,n("blockquote",null,[n("p",null,[n("a",m,[s("👉🏻"),t(a)])])]),v,n("blockquote",null,[n("p",null,[n("a",b,[s("👉🏻"),t(a)])])]),h,n("blockquote",null,[n("p",null,[n("a",g,[s("👉🏻"),t(a)])])]),_,n("blockquote",null,[n("p",null,[s("[👉🏻]["),n("a",f,[s("objc-msg-arm64.s#L336"),t(a)]),s("]")])]),j,n("blockquote",null,[n("p",null,[n("a",y,[s("👉🏻"),t(a)])])]),L,n("blockquote",null,[n("p",null,[n("a",S,[s("👉🏻"),t(a)])])]),w,n("blockquote",null,[n("p",null,[n("a",E,[s("👉🏻"),t(a)])])]),C,n("blockquote",null,[n("p",null,[n("a",N,[s("Type Encodings"),t(a)])])]),M,n("blockquote",null,[n("p",null,[n("a",R,[s("👉🏻"),t(a)])])]),q])}const F=o(u,[["render",T],["__file","message.html.vue"]]);export{F as default};
