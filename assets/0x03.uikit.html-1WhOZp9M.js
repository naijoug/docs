import{_ as u}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as l,o as r,c as k,a as d,b as n,e as s,d as a,w as o,f as i}from"./app-FmEnCh3Y.js";const m={},v=n("h2",{id:"reference",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reference","aria-hidden":"true"},"#"),s(" reference")],-1),b={href:"http://oncenote.com/2015/12/08/How-to-build-UI/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://www.codingtour.com/posts/%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA-ios-%E6%8E%A7%E4%BB%B6-ios-%E6%8E%A7%E4%BB%B6%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%90/",target:"_blank",rel:"noopener noreferrer"},w={href:"http://blog.sunnyxx.com/2015/05/17/cell-height-calculation/",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"UITableViewCell",-1),g={href:"https://tech.glowing.com/cn/practice-in-uiscrollview",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"UIScrollView",-1),I=n("a",{href:"%E2%9C%85"},null,-1),U={href:"https://juejin.cn/post/6905914367171100680",target:"_blank",rel:"noopener noreferrer"},V=n("a",{href:"%E2%9C%85"},null,-1),C={href:"https://juejin.cn/post/6894518925514997767",target:"_blank",rel:"noopener noreferrer"},q=n("a",{href:""},null,-1),x={href:"https://github.com/Lotheve/blogdemo/blob/master/TouchEventLib/README.md",target:"_blank",rel:"noopener noreferrer"},A=i(`<hr><h2 id="概念知识" tabindex="-1"><a class="header-anchor" href="#概念知识" aria-hidden="true">#</a> 概念知识</h2><h3 id="❓-main-vs-uiapplicationmain" tabindex="-1"><a class="header-anchor" href="#❓-main-vs-uiapplicationmain" aria-hidden="true">#</a> ❓<code>@main</code> vs <code>@UIApplicationMain</code></h3><details class="hint-container details"><summary>💡</summary><ul><li><p><code>@UIApplicationMain</code>: <code>UIKit</code> 中的 <code>iOS</code> 应用程序模板。该声明告诉 <code>Swift</code> 在程序开始时，去找一个名为 <code>AppDelegate</code> 的类，并创建该类的实例作为应用程序的委托。<code>AppDelegate</code> 类必须遵守 <code>UIApplicationDelegate</code> 协议，并且最初需要实现其中一些方法来处理应用程序的生命周期事件。</p></li><li><p><code>@main</code>: <code>SwiftUI</code> 设置程序入口。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token attribute atrule">@main</span>
<span class="token keyword">struct</span> <span class="token class-name">MyApp</span><span class="token punctuation">:</span> <span class="token class-name">App</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">Scene</span> <span class="token punctuation">{</span>
        <span class="token class-name">WindowGroup</span> <span class="token punctuation">{</span>
            <span class="token class-name">ContentView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></details><hr><h2 id="uikit" tabindex="-1"><a class="header-anchor" href="#uikit" aria-hidden="true">#</a> UIKit</h2><h3 id="❓ios-的应用程序有几种状态" tabindex="-1"><a class="header-anchor" href="#❓ios-的应用程序有几种状态" aria-hidden="true">#</a> ❓<code>iOS</code> 的应用程序有几种状态</h3><details class="hint-container details"><summary>💡</summary><ul><li><p><strong>Not running（未运行）</strong>：应用程序尚未启动，或者系统或用户已将其终止。</p></li><li><p><strong>Inactive（不活跃）</strong>：应用程序正在前台运行，但无法接收事件（如来电或用户锁定设备导致的应用程序转至后台）。</p></li><li><p><strong>Active（活跃）</strong>：应用程序正在前台运行并接收事件。这也是正常的、应用程序接收和处理事件的状态。</p></li><li><p><strong>Background（后台）</strong>：应用程序在后台并正在运行代码。大多数应用程序会进入这种状态并在进入挂起状态之前停止。</p></li><li><p><strong>Suspended（挂起）</strong>：应用程序在后台但不运行代码。系统会自动将应用程序移至此状态而不提供通知。当挂起时，应用程序仍留在内存中，但不执行任何代码。</p></li></ul></details><blockquote><p>❓退到后台代码是否可以执行，双击home键，代码是否可以执行</p></blockquote><details class="hint-container details"><summary>💡</summary><ul><li><p>退到后台之后，应用程序进入Background状态，此时代码是可以执行的。但系统会对后台运行的时间有限制（这主要是为了优化电池寿命和效能），一般情况下，在应用进入后台后的几分钟内，应用将被系统挂起。但是在这个时间段内或者通过申请背景执行时间的方式，是可以继续执行代码的。</p></li><li><p>双击home键后应用进入后台，但不会直接进入挂起状态。所以短时间内是可以执行代码的，但如果长期无操作，应用程序会被系统挂起，此时无法执行代码。</p></li></ul></details><h3 id="❓了解的-uikit-结构" tabindex="-1"><a class="header-anchor" href="#❓了解的-uikit-结构" aria-hidden="true">#</a> ❓了解的 <code>UIKit</code> 结构</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>UIKit</code> 这个框架提供了在 <code>iOS</code> 中开发图形化、事件驱动的应用所需要的所有基础工具和基础结构。</p></blockquote><p>主要组件：</p><ul><li><p><code>UIWindow</code></p><blockquote><p>通常会有一个或多个 <code>UIWindow</code>，这是展示 <code>UIView</code> 的地方，是 <code>UIView</code> 的最顶层容器。它通常与设备的屏幕一样大小。</p></blockquote></li><li><p><code>UIView</code> 和 <code>UIViewController</code></p><blockquote><p><code>UIView</code> 是 <code>iOS</code> 中的基础组件，负责绘制和布局界面元素，处理与用户交互的事件。<code>UIViewController</code> 对应一个 <code>UIView</code>，它管理着 <code>UIView</code> 的生命周期，负责处理用户交互和视图切换等逻辑。</p></blockquote></li><li><p>控件</p><blockquote><p><code>UIKit</code> 提供了一组预封装的常见 <code>UI</code> 元素组件，如按钮（<code>UIButton</code>）、标签（<code>UILabel</code>）、滚动视图（<code>UIScrollView</code>）、表格视图（<code>UITableView</code>）、集合视图（<code>UICollectionView</code>）等。</p></blockquote></li><li><p>文本处理</p><blockquote><p><code>UIKit</code> 提供了一套强大的文本处理和布局系统。不仅提供了基础的 <code>UILabel</code> 用于显示文本，还有 <code>UITextField</code>、<code>UITextView</code> 等用于文本输入，以及 <code>NSLayoutManager</code> 和 <code>NSTextContainer</code> 等高级 <code>API</code> 用于复杂的文本布局。</p></blockquote></li><li><p>图形和动画</p><blockquote><p><code>UIKit</code> 提供了一套强大的 <code>2D</code> 图形和动画框架，包括基础的画图 <code>API</code>、复杂的形状和路径、渐变、屏幕刷新和动画等。</p></blockquote></li><li><p><code>CoreAnimation</code></p><blockquote><p><code>UIKit</code> 的绚丽动画效果就是 <code>Core Animation</code> 提供支持。可以构建具有复杂视觉效果的动画，例如在两个视图状态之间平滑过渡，或者是在屏幕上移动、缩放、旋转视图。</p></blockquote></li><li><p>触摸事件处理</p><blockquote><p><code>UIKit</code> 提供了一套事件处理机制，包括触摸事件、手势识别等，非常方便地可以让我们对用户的交互作出响应。</p></blockquote></li><li><p>响应者链</p><blockquote><p><code>UIKit</code> 针对 <code>UI</code> 事件提供了响应者链的机制，当一个事件产生后，通过响应者链，逐层寻找可以处理该事件的对象。比如触屏事件，先从最上层的 <code>view</code> 开始，如果该 <code>view</code> 不能处理，则逐层向上传递至其父 <code>view</code>，直到找到可以处理该事件的对象。</p></blockquote></li><li><p>自动布局</p><blockquote><p>利用 <code>UIKit</code> 框架的自动布局系统，开发者可以创建灵活且响应的界面布局。开发者可以使用 <code>AutoLayout</code> 和 <code>UIStackView</code> 来布局界面。</p></blockquote></li></ul></details><h3 id="❓uiscene-了解吗" tabindex="-1"><a class="header-anchor" href="#❓uiscene-了解吗" aria-hidden="true">#</a> ❓<code>UIScene</code> 了解吗</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>UIScene</code> 是在 <code>iOS 13</code> 中引入的一种新的应用生命周期模型，它提供了管理应用 <code>UI</code> 以及该 <code>UI</code> 如何响应系统和用户事件的更细粒度的方式。</p></blockquote><p>在 <code>iOS 13</code> 以前，<code>iOS</code> 应用由单一的 <code>UIWindow</code> 实例进行管理，并且该 <code>UIWindow</code> 实例存在于整个应用的生命周期中。<code>AppDelegate</code> 要负责所有 <code>UI</code> 设置以及与应用生命周期相关的事件。</p><p><code>iOS 13</code> 以后 <code>UIScene</code> 则是对此进行了优化，每一个 <code>UIScene</code> 实例代表应用 <code>UI</code> 的一个单一实例。当应用在前台运行时，可以有多个 <code>UIScene</code> 实例，从而实现多窗口的多任务管理。例如在 <code>iPadOS</code> 上，用户可以开启多个窗口。</p><p>每个 <code>Scene</code> 由一个 <code>Scene Delegate</code> 来进行管理，各种 <code>UI</code> 设置以及和场景（Scene）生命周期相关的事件都由 <code>Scene Delegate</code> 来处理。就像原来 <code>AppDelegate</code> 处理应用级别的事件一样，<code>Scene Delegate</code> 负责处理和特定 <code>Scene</code> 相关的事件。只有当进行 <code>App</code> 级别的事件处理，譬如接收远程消息通知，处理后台下载任务，这些工作才会交给 <code>AppDelegate</code> 去完成。</p><p>这样的设计，使得在做一些 <code>UI</code> 设置以及响应生命周期事件时，更加的清晰和方便，同时也带来了更好的多任务管理能力。</p></details><blockquote><p><code>SceneDelegate</code> 详细说说</p></blockquote><details class="hint-container details"><summary>💡</summary><blockquote><p><code>SceneDelegate</code> 是从 <code>iOS 13</code> 开始引入的一个新的代理模型，用于处理和 <code>UI Scene Session</code> 相关的事件，并控制和管理与其关联的 <code>Scene</code>。</p></blockquote><p><code>SceneDelegate</code> 中处理以下一些事件：</p><ul><li><p><code>func scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions)</code> 方法：这个方法是在创建新的 <code>scene</code> 时被调用，相当于 <code>AppDelegate</code> 中的 <code>application:didFinishLaunchingWithOptions:</code> 方法。通常会在该方法中设置窗口和根视图控制器。</p></li><li><p><code>func sceneDidDisconnect(_ scene: UIScene)</code> 方法：当 <code>scene</code> 与 <code>app</code> 断开连接时候调用。发生在 <code>scene</code> 进入后台并且系统决定需要释放 <code>scene</code> 时。</p></li><li><p><code>func sceneDidBecomeActive(_ scene: UIScene)</code> 方法：当 <code>scene</code> 进入活跃状态或者进入前台时调用，对应的是 <code>AppDelegate</code> 中的 <code>applicationDidBecomeActive:</code> 方法。</p></li><li><p><code>func sceneWillResignActive(_ scene: UIScene)</code> 方法：当 <code>scene</code> 准备进入非活跃状态或者进入后台时调用，对应的是 <code>AppDelegate</code> 中的 <code>applicationWillResignActive:</code> 方法。</p></li><li><p><code>func sceneWillEnterForeground(_ scene: UIScene)</code> 方法：当 <code>scene</code> 从后台恢复到前台时调用，对应的是 <code>AppDelegate</code> 中的 <code>applicationWillEnterForeground:</code> 方法。</p></li><li><p><code>func sceneDidEnterBackground(_ scene: UIScene)</code> 方法：当 <code>scene</code> 进入后台时调用，对应的是 <code>AppDelegate</code> 中的 <code>applicationDidEnterBackground:</code> 方法。</p></li><li><p><code>func stateRestorationActivity(for scene: UIScene)</code> 方法: 应用状态恢复时调用的方法，用以保存应用的当前状态。</p></li></ul></details><h3 id="❓applicationwillenterforeground-和-applicationdidbecomeactive-都会在哪些场景下被调用" tabindex="-1"><a class="header-anchor" href="#❓applicationwillenterforeground-和-applicationdidbecomeactive-都会在哪些场景下被调用" aria-hidden="true">#</a> ❓<code>applicationWillEnterForeground</code> 和 <code>applicationDidBecomeActive</code> 都会在哪些场景下被调用</h3><details class="hint-container details"><summary>💡</summary><p>调用场景：</p><ul><li><p>用户通过主屏幕点击图标打开应用：</p><blockquote><p>这种情况下首先调用 <code>applicationWillEnterForeground</code>，之后紧接着调用 <code>applicationDidBecomeActive</code>。</p></blockquote></li><li><p>应用在后台，通过通知或者系统打开应用：</p><blockquote><p>也是先调用 <code>applicationWillEnterForeground</code>，之后紧接着调用 <code>applicationDidBecomeActive</code>。</p></blockquote></li><li><p>应用从后台切换到前台：</p><blockquote><p>这种情况下，两个函数的调用顺序和之前一样，首先调用 <code>applicationWillEnterForeground</code>，之后紧接着调用 <code>applicationDidBecomeActive</code>。</p></blockquote></li><li><p>应用内部弹出系统视图，例如电话，信息，分享等视图，视图消失后：</p><blockquote><p>这个情况下只会调用 <code>applicationDidBecomeActive</code>，<code>applicationWillEnterForeground</code> 不会被调用，因为应用实际上并没有进入后台，只是暂时失去了焦点。</p></blockquote></li></ul></details><h3 id="❓ios-怎么检测图层混合" tabindex="-1"><a class="header-anchor" href="#❓ios-怎么检测图层混合" aria-hidden="true">#</a> ❓<code>iOS</code> 怎么检测图层混合</h3><details class="hint-container details"><summary>💡</summary><p>检查图层混合（<code>Layer Blending</code>）方法：</p><ul><li><p>使用 <code>Xcode</code> 的 <code>Debug View Hierarchy</code>。</p><blockquote><p>点击 <code>Xcode Debug Area</code> 的 <code>Debug View Hierarchy</code> 按钮，会显示 <code>App</code> 当前的界面层级结构。在这个工具里，你可以检查图层混合问题。在界面右侧有一个 <code>3D</code> 效果的开关以及一个调整深度值的滑杆，通过它们可以更好地观察各个视图的在 <code>3D</code> 空间中的位置关系。</p></blockquote></li><li><p>使用 <code>Instruments</code> 的 <code>Core Animation</code> 工具。</p><blockquote><p><code>Instruments</code>的 <code>Core Animation</code> 工具是一种主要用于检测图形性能的强大工具。在该工具中，可以打开 <code>Color Blended Layers</code> 来检查图层混合问题。</p></blockquote></li><li><p>使用 <code>Quartz Debug</code> 工具：是苹果的一个调试工具，如果安装了 <code>Xcode</code>，在 <code>Developer Tools</code> 文件夹里就会有这个工具。</p><blockquote><p>打开 <code>Quartz Debug</code> 后，在工具栏选择 <code>Tools -&gt; Show Debug Options</code>，然后在弹出的窗口中选择 <code>Color Blended Layers</code>。这会将需要混合的部分以红色显示，不需要混合的部分以绿色显示。</p></blockquote></li><li><p>使用第三方工具如 <code>Reveal</code>。</p><blockquote><p><code>Reveal</code> 是一款强大的 <code>iOS</code> 应用 <code>UI</code> 检查工具。它可以能够在运行时查看和修改 <code>UI</code>，这对于查找和解决图层混合有很大帮助。</p></blockquote></li></ul></details><h3 id="❓keywindow-和-appdelegate-的-window-区别" tabindex="-1"><a class="header-anchor" href="#❓keywindow-和-appdelegate-的-window-区别" aria-hidden="true">#</a> ❓<code>keyWindow</code> 和 <code>AppDelegate</code> 的 <code>window</code> 区别</h3><details class="hint-container details"><summary>💡</summary><ul><li><p><code>keyWindow</code>: 是指 <code>UIApplication</code> 对象的 <code>windows</code> 数组的第一个 <code>UIWindow</code> 对象。这也是应用程序中用来接收 <code>touch</code> 事件的唯一 <code>UIWindow</code> 对象。当一个新的 <code>UIWindow</code> 对象添加到应用程序中，它默认就会塞给 <code>keyWindow</code>，用来接收 <code>touch</code> 事件。</p><blockquote><p>有些特殊的情形，例如 <code>AlertView</code>, <code>ActionSheet</code>, <code>Keyboard</code> 等会临时创建一个隐藏的 <code>Window</code> 对象作为 <code>keyWindow</code>。</p></blockquote></li><li><p><code>AppDelegate</code> 的 <code>window</code>: 是 <code>AppDelegate</code> 中的 <code>window</code> 属性就是 <code>Application</code> 的主窗口。大多数应用只有一个窗口，除非使用额外的窗口显示其他界面。这个窗口一般在 <code>App</code> 启动的时候创建，作为应用程序的主要入口，即应用程序 <code>window</code> 的 <code>rootViewController</code>。</p></li></ul><p>总结：<code>AppDelegate</code> 的 <code>window</code> 通常是应用启动的主窗口，而 <code>keyWindow</code> 是当前活动的窗口，大多数情况下是同一个窗口，但在诸如弹窗或键盘弹出等情况下，<code>keyWindow</code> 可能就不是 <code>AppDelegate</code> 中的 <code>window</code>。</p></details><hr><h2 id="uiview" tabindex="-1"><a class="header-anchor" href="#uiview" aria-hidden="true">#</a> UIView</h2><h3 id="❓uiview-calayer-是什么关系" tabindex="-1"><a class="header-anchor" href="#❓uiview-calayer-是什么关系" aria-hidden="true">#</a> ❓<code>UIView</code> &amp; <code>CALayer</code> 是什么关系</h3><details class="hint-container details"><summary>💡</summary><p>每个<code>UIView</code>都有一个对应的<code>CALayer</code>，称之为 <code>UIView</code> 的 <code>backing layer</code>（背部层）。<code>UIView</code> 和 <code>CALayer</code> 之间是互相关联的，<code>UIView</code> 负责处理触摸事件，而 <code>CALayer</code> 负责显示视图的内容。</p><ul><li><p><code>UIView</code>：视图的基类，负责处理用户交互（例如触摸事件），也负责管理子视图（包括添加、删除、遍历子视图）。可以使用 <code>UIView</code> 的子类（如<code>UILabel</code>，<code>UIButton</code>等）创建特定的用户界面，也可以创建自定义视图来绘制复杂的界面。</p></li><li><p><code>CALayer</code>：是核心动画库(<code>Core Animation</code>)中的类，它负责呈现视图的内容。<code>UIView</code> 将很多渲染任务委派给 <code>CALayer</code>，例如视图的边框、圆角、阴影、图片等都是由 <code>CALayer</code> 来绘制和渲染的。此外 <code>CALayer</code> 还负责处理动画效果。</p></li></ul></details><blockquote><p>为什么要这样设计？</p></blockquote><details class="hint-container details"><summary>💡</summary><p>这是由于 <code>iOS</code> 系统的历史原因。在早期的 <code>iOS</code> 版本中，只有 <code>CALayer</code>，并没有 <code>UIView</code>，所有的界面渲染和动画都需要通过手动控制 <code>CALayer</code> 来完成。</p><p>后来，苹果引入了 <code>UIView</code>，用以简化界面的创建和管理，并将一些低层的渲染和动画任务委派给 <code>CALayer</code>。</p><p>这样的设计使得开发者可以更高效地创建和管理用户界面，同时也保持了对底层渲染和动画的高级控制能力。</p></details><h3 id="❓在一个视图的正中间实现一个正方形的红色视图有几种方式" tabindex="-1"><a class="header-anchor" href="#❓在一个视图的正中间实现一个正方形的红色视图有几种方式" aria-hidden="true">#</a> ❓在一个视图的正中间实现一个正方形的红色视图有几种方式</h3>`,29),S={class:"hint-container details"},T=n("summary",null,"💡",-1),L=n("p",null,"使用代码布局：",-1),P=n("blockquote",null,[n("p",null,[s("可以通过手动设置 "),n("code",null,"frame"),s(" 或者使用 "),n("code",null,"AutoLayout"),s(" 来完成。以下是使用Swift语言的示例：")])],-1),_=n("div",{class:"language-swift line-numbers-mode","data-ext":"swift"},[n("pre",{class:"language-swift"},[n("code",null,[n("span",{class:"token keyword"},"let"),s(" squareView "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"UIView"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
squareView`),n("span",{class:"token punctuation"},"."),s("backgroundColor "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"."),s(`red
`),n("span",{class:"token keyword"},"let"),s(" sideLength"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"CGFloat"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"100.0"),s(),n("span",{class:"token comment"},"// 正方形的边长"),s(`
squareView`),n("span",{class:"token punctuation"},"."),s("frame "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"CGRect"),n("span",{class:"token punctuation"},"("),s("x"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token punctuation"},"("),s("view"),n("span",{class:"token punctuation"},"."),s("bounds"),n("span",{class:"token punctuation"},"."),s("width "),n("span",{class:"token operator"},"-"),s(" sideLength"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"/"),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(`
                          y`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token punctuation"},"("),s("view"),n("span",{class:"token punctuation"},"."),s("bounds"),n("span",{class:"token punctuation"},"."),s("height "),n("span",{class:"token operator"},"-"),s(" sideLength"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"/"),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(`
                          width`),n("span",{class:"token punctuation"},":"),s(" sideLength"),n("span",{class:"token punctuation"},","),s(`
                          height`),n("span",{class:"token punctuation"},":"),s(" sideLength"),n("span",{class:"token punctuation"},")"),s(`
view`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"addSubview"),n("span",{class:"token punctuation"},"("),s("squareView"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),R=n("div",{class:"language-swift line-numbers-mode","data-ext":"swift"},[n("pre",{class:"language-swift"},[n("code",null,[n("span",{class:"token keyword"},"let"),s(" squareView "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"UIView"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
squareView`),n("span",{class:"token punctuation"},"."),s("backgroundColor "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"."),s(`red
squareView`),n("span",{class:"token punctuation"},"."),s("translatesAutoresizingMaskIntoConstraints "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token boolean"},"false"),s(`
view`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"addSubview"),n("span",{class:"token punctuation"},"("),s("squareView"),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token class-name"},"NSLayoutConstraint"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"activate"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"["),s(`
    squareView`),n("span",{class:"token punctuation"},"."),s("centerXAnchor"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"constraint"),n("span",{class:"token punctuation"},"("),s("equalTo"),n("span",{class:"token punctuation"},":"),s(" view"),n("span",{class:"token punctuation"},"."),s("centerXAnchor"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(`
    squareView`),n("span",{class:"token punctuation"},"."),s("centerYAnchor"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"constraint"),n("span",{class:"token punctuation"},"("),s("equalTo"),n("span",{class:"token punctuation"},":"),s(" view"),n("span",{class:"token punctuation"},"."),s("centerYAnchor"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(`
    squareView`),n("span",{class:"token punctuation"},"."),s("widthAnchor"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"constraint"),n("span",{class:"token punctuation"},"("),s("equalToConstant"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"100"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(`
    squareView`),n("span",{class:"token punctuation"},"."),s("heightAnchor"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"constraint"),n("span",{class:"token punctuation"},"("),s("equalTo"),n("span",{class:"token punctuation"},":"),s(" squareView"),n("span",{class:"token punctuation"},"."),s("widthAnchor"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),D=i("<li><p>使用 <code>Interface Builder</code>:</p><ul><li>在 <code>Interface Builder</code> 中，可以先将一个 <code>UIView</code> 拖拽到画布中，并设置它的背景色为红色。</li><li>选中这个视图后，打开 <code>Utilities</code>- <code>Size Inspector</code>，在 <code>Width</code> 和 <code>Height</code> 中输入相同的值（比如100）来设置正方形的大小。</li><li>然后在 <code>Utilities</code> - <code>Attributes Inspector</code>，点击 <code>+</code> 按钮添加两个中心对齐约束 <code>Align Center X to: Superview</code> 和 <code>Align Center Y to: Superview</code>。</li></ul></li>",1),E=i(`<h3 id="❓直接用-uilabel-和自己用drawrect-画-uilabel-哪个性能好-为什么" tabindex="-1"><a class="header-anchor" href="#❓直接用-uilabel-和自己用drawrect-画-uilabel-哪个性能好-为什么" aria-hidden="true">#</a> ❓直接用 <code>UILabel</code> 和自己用<code>drawRect:</code> 画 <code>UILabel</code>，哪个性能好，为什么</h3><details class="hint-container details"><summary>💡</summary><blockquote><p>性能和内存使用都是需要考虑在相应上下文环境下的，因此，这个问题并没有一个绝对的答案。通常情况下，使用 <code>UIKit</code> 组件（如 <code>UILabel</code>）的性能和内存使用都被优化得很好，除非有特别的需求，一般推荐直接使用这些组件，而不是自己实现。</p></blockquote><p>性能方面： 直接使用 <code>UILabel</code> 的性能通常更好。因为 <code>UILabel</code> 由系统提供并进行了高度优化，包括文本缓存、文本渲染等部分。另一方面 <code>drawRect:</code> 方法是在每次重绘时调用，如果不恰当的使用，可能会导致 <code>CPU</code> 负担增大，性能下降。</p></details><blockquote><p>哪个占用的内存少，为什么</p></blockquote><details class="hint-container details"><summary>💡</summary><p>如果在 <code>drawRect:</code> 中只是简单地绘制文本，可能会比 <code>UILabel</code> 占用更少的内存，因为 <code>UILabel</code> 需要保持一些状态和元数据。但这种差异通常非常小，不必过于关注。如果在 <code>drawRect:</code> 方法中执行了复杂的绘图代码或者创建了大量的临时对象，那么实际的内存占用可能会比 <code>UILabel</code> 更大。</p></details><h3 id="uicontrol" tabindex="-1"><a class="header-anchor" href="#uicontrol" aria-hidden="true">#</a> UIControl</h3><h4 id="❓uicontrol-vs-uiresponder" tabindex="-1"><a class="header-anchor" href="#❓uicontrol-vs-uiresponder" aria-hidden="true">#</a> ❓<code>UIControl</code> vs <code>UIResponder</code></h4><details class="hint-container details"><summary>💡</summary><blockquote><p>继承链：<code>UIControl</code> -&gt; <code>UIView</code> -&gt; <code>UIResponder</code></p></blockquote><ul><li><p><code>UIResponder</code> 是处理和响应事件的基类，它定义了接收和处理事件的接口。实际上，<code>UIApplication</code>、<code>UIView</code>和<code>UIViewController</code> 都是继承自 <code>UIResponder</code>，都可以响应并处理事件。例如当一个触摸事件发生时，<code>iOS</code> 会把事件交给最先接触到的 <code>UIView</code> （也就是被用户触摸的那个），然后沿着响应链向上分发，直到有 <code>UIResponder</code> 子类处理这个事件。</p></li><li><p><code>UIControl</code> 是继承自 <code>UIView</code>，并且添加了一些控制特性的类，用于响应用户交互。<code>UIControl</code> 提供了一种机制，允许你在特定事件发生时发送消息给指定的目标。比如 <code>UIButton</code>、<code>UISlider</code>、<code>UISwitch</code> 等都是 <code>UIControl</code> 的子类。可以为这些子类设置 <code>target-action</code> 来响应用户的交互事件。</p></li></ul><p>总结：<code>UIResponder</code> 负责处理事件，而 <code>UIControl</code> 在此基础上添加了更多用户交互的特性。</p></details><h4 id="❓uibutton-继承链" tabindex="-1"><a class="header-anchor" href="#❓uibutton-继承链" aria-hidden="true">#</a> ❓<code>UIButton</code> 继承链</h4><details class="hint-container details"><summary>💡</summary><blockquote><p>继承链 : <code>UIButton</code> -&gt; <code>UIControl</code> -&gt; <code>UIView</code> -&gt; <code>UIResponder</code> -&gt; <code>NSObject</code></p></blockquote><ul><li><p><code>NSObject</code> 是所有 <code>Objective-C</code> 类的基类，提供了对象的基本行为特征和特性。</p></li><li><p><code>UIResponder</code> 是 <code>iOS</code> 事件传递体系中的一个重要组成部分，此类提供了一种机制来处理和路由在应用程序中发生的触摸事件、手势识别、远程控制等事件。</p></li><li><p><code>UIView</code> 是基本的展示视图和处理视图相关事件的类，几乎所有的 <code>UI</code> 元素都是直接或间接继承自 <code>UIView</code>，此类提供了一种机制以支持在其矩形区域内绘制、布局和处理事件。</p></li><li><p><code>UIControl</code> 是 <code>UIView</code> 的一个直接子类，是一些具有 <code>target-action</code> 机制的 <code>UI</code> 元素的基类，比如按钮(<code>UIButton</code>)、滑块(<code>UISlider</code>)等，能够响应用户的交互行为并向感兴趣的目标发送讯息。</p></li><li><p><code>UIButton</code> 是 <code>UIControl</code> 的一个子类，主要用来制作按钮。它在父类 <code>UIControl</code> 的基础上又添加了一些按钮特有的行为，比如按钮的标题、图片等。</p></li></ul></details><h4 id="❓根据-uicontrol-实现-uibutton" tabindex="-1"><a class="header-anchor" href="#❓根据-uicontrol-实现-uibutton" aria-hidden="true">#</a> ❓根据 <code>UIControl</code> 实现 <code>UIButton</code></h4><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">protocol</span> <span class="token class-name">ButtonProtocol</span> <span class="token punctuation">{</span>
    <span class="token keyword">func</span> <span class="token function-definition function">setTitle</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> title<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">func</span> <span class="token function-definition function">setTitleColor</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> titleColor<span class="token punctuation">:</span> <span class="token class-name">UIColor</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">func</span> <span class="token function-definition function">setTitleEdgeInsets</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> edgeInsets<span class="token punctuation">:</span> <span class="token class-name">UIEdgeInsets</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">func</span> <span class="token function-definition function">setImage</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> image<span class="token punctuation">:</span> <span class="token class-name">UIImage</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">func</span> <span class="token function-definition function">setBackgroundImage</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> image<span class="token punctuation">:</span> <span class="token class-name">UIImage</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">func</span> <span class="token function-definition function">setImageEdgeInsets</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> edgeInsets<span class="token punctuation">:</span> <span class="token class-name">UIEdgeInsets</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">MyButton</span><span class="token punctuation">:</span> <span class="token class-name">UIControl</span><span class="token punctuation">,</span> <span class="token class-name">ButtonProtocol</span> <span class="token punctuation">{</span> 
    <span class="token comment">// todo</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>详情</summary><p><code>UIButton</code>本质上是一个视图（对象），因此它应该包含一些像视图、标签、图片视图等子视图。要求 <code>MyButton</code> 能够具有设置标题、标题颜色、标题边距、题图像、背景图像以及图像边距的能力。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">class</span> <span class="token class-name">MyButton</span><span class="token punctuation">:</span> <span class="token class-name">UIControl</span><span class="token punctuation">,</span> <span class="token class-name">ButtonProtocol</span> <span class="token punctuation">{</span>
    
    <span class="token keyword">let</span> titleLabel<span class="token punctuation">:</span> <span class="token class-name">UILabel</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> label <span class="token operator">=</span> <span class="token class-name">UILabel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        label<span class="token punctuation">.</span>textAlignment <span class="token operator">=</span> <span class="token punctuation">.</span>center
        <span class="token keyword">return</span> label
    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    <span class="token keyword">let</span> imageView<span class="token punctuation">:</span> <span class="token class-name">UIImageView</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> imageView <span class="token operator">=</span> <span class="token class-name">UIImageView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        imageView<span class="token punctuation">.</span>contentMode <span class="token operator">=</span> <span class="token punctuation">.</span>scaleAspectFit
        <span class="token keyword">return</span> imageView
    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    <span class="token keyword">let</span> backgroundImageView<span class="token punctuation">:</span> <span class="token class-name">UIImageView</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> imageView <span class="token operator">=</span> <span class="token class-name">UIImageView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        imageView<span class="token punctuation">.</span>contentMode <span class="token operator">=</span> <span class="token punctuation">.</span>scaleToFill
        <span class="token keyword">return</span> imageView
    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    <span class="token keyword">override</span> <span class="token keyword">init</span><span class="token punctuation">(</span>frame<span class="token punctuation">:</span> <span class="token class-name">CGRect</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>frame<span class="token punctuation">:</span> frame<span class="token punctuation">)</span>
        
        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">addSubview</span><span class="token punctuation">(</span>backgroundImageView<span class="token punctuation">)</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">addSubview</span><span class="token punctuation">(</span>imageView<span class="token punctuation">)</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">addSubview</span><span class="token punctuation">(</span>titleLabel<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">required</span> <span class="token keyword">init</span><span class="token operator">?</span><span class="token punctuation">(</span>coder<span class="token punctuation">:</span> <span class="token class-name">NSCoder</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>coder<span class="token punctuation">:</span> coder<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">layoutSubviews</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">layoutSubviews</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        
        backgroundImageView<span class="token punctuation">.</span>frame <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>bounds
    <span class="token punctuation">}</span>
    
    <span class="token keyword">func</span> <span class="token function-definition function">setTitle</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> title<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        titleLabel<span class="token punctuation">.</span>text <span class="token operator">=</span> title
    <span class="token punctuation">}</span>
    
    <span class="token keyword">func</span> <span class="token function-definition function">setTitleColor</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> titleColor<span class="token punctuation">:</span> <span class="token class-name">UIColor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        titleLabel<span class="token punctuation">.</span>textColor <span class="token operator">=</span> titleColor
    <span class="token punctuation">}</span>
    
    <span class="token keyword">func</span> <span class="token function-definition function">setTitleEdgeInsets</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> edgeInsets<span class="token punctuation">:</span> <span class="token class-name">UIEdgeInsets</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        titleLabel<span class="token punctuation">.</span>frame <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>bounds<span class="token punctuation">.</span><span class="token function">inset</span><span class="token punctuation">(</span>by<span class="token punctuation">:</span> edgeInsets<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">func</span> <span class="token function-definition function">setImage</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> image<span class="token punctuation">:</span> <span class="token class-name">UIImage</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        imageView<span class="token punctuation">.</span>image <span class="token operator">=</span> image
    <span class="token punctuation">}</span>
    
    <span class="token keyword">func</span> <span class="token function-definition function">setBackgroundImage</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> image<span class="token punctuation">:</span> <span class="token class-name">UIImage</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        backgroundImageView<span class="token punctuation">.</span>image <span class="token operator">=</span> image
    <span class="token punctuation">}</span>
    
    <span class="token keyword">func</span> <span class="token function-definition function">setImageEdgeInsets</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> edgeInsets<span class="token punctuation">:</span> <span class="token class-name">UIEdgeInsets</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        imageView<span class="token punctuation">.</span>frame <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>bounds<span class="token punctuation">.</span><span class="token function">inset</span><span class="token punctuation">(</span>by<span class="token punctuation">:</span> edgeInsets<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>为了处理背景图像，标题和图像，需要三个子视图：一个背景图像视图、一个图像视图和一个标签。</p></li><li><p><code>setTitleEdgeInsets</code> 和 <code>setImageEdgeInsets</code> 方法只需要调整 <code>titleLabel</code> 和 <code>imageView</code> 的 <code>frame</code> 即可。</p></li><li><p>在 <code>layoutSubviews()</code> 中设置 <code>backgroundImageView</code> 的 <code>frame</code>，以保证其总是充满整个视图。</p></li></ul><p>注意：“实现 <code>UIButton</code>” 需要更多的特性和设置，例如处理高亮状态和禁用状态，添加点击事件等。按照特定需求，可以进行进一步的扩展和完善。</p></details><hr><h2 id="uiscrollview" tabindex="-1"><a class="header-anchor" href="#uiscrollview" aria-hidden="true">#</a> UIScrollView</h2><h3 id="uiscrollview-1" tabindex="-1"><a class="header-anchor" href="#uiscrollview-1" aria-hidden="true">#</a> UIScrollView</h3><h4 id="❓自己如何设计一个系统的-uiscrollview" tabindex="-1"><a class="header-anchor" href="#❓自己如何设计一个系统的-uiscrollview" aria-hidden="true">#</a> ❓自己如何设计一个系统的 <code>UIScrollView</code></h4><details class="hint-container details"><summary>💡</summary><blockquote><p>设计一个类似<code>UIScrollView</code>的滚动视图系统其实涉及到很多方面，包括但不限于内容的布局、滚动的实现、滚动事件的处理、滚动条的显示等等。</p></blockquote><p>一个简单的设计：</p><ul><li><p>自定义一个视图容器，这个类似于 <code>UIScrollView</code> 的实例。</p><ul><li>存放全部内容：这就需要一个比视图容器大的视图空间（内容视图），并位置在容器中。</li><li>捕获并处理滚动事件：使用触摸事件（如 <code>iOS</code> 的 <code>touchBegan</code>, <code>touchMoved</code> 等）跟踪用户的手势，并据此来改变内容视图的位置。</li><li>根据内容的滚动来显示滚动条：可以添加两个子视图作为水平和垂直滚动条，在内容滚动时改变它们的位置和长度。</li></ul></li><li><p>实现滚动的一种基本方法是在接收到滚动事件后，改变内容视图的位置（比如其在 <code>iOS</code> 中的 <code>frame.origin</code>）。</p></li><li><p>如果要添加滚动的弹性和/或惯性，可能会稍微复杂一些，需要在处理滚动事件时添加一些额外的计算。</p></li></ul></details><h3 id="uitableview" tabindex="-1"><a class="header-anchor" href="#uitableview" aria-hidden="true">#</a> UITableView</h3><h4 id="❓uitableview-的-delegate-和-datasource-代理有什么区别" tabindex="-1"><a class="header-anchor" href="#❓uitableview-的-delegate-和-datasource-代理有什么区别" aria-hidden="true">#</a> ❓<code>UITableView</code> 的 <code>delegate</code> 和 <code>dataSource</code> 代理有什么区别</h4><details class="hint-container details"><summary>💡</summary><ul><li><p><code>dataSource</code> 主要是向 <code>UITableView</code> 提供数据。</p><p>例如数据源中有多少个 <code>section</code>，每个 <code>section</code> 有多少行，以及每一行的具体内容等等。<code>dataSource</code> 必须实现下面两个方法：</p><ul><li><code>func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int</code>：设置每个 section 中的 row 数量。</li><li><code>func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell</code>：提供具体的 cell。</li></ul><p>这两个方法是 <code>UITableViewDataSource</code> 协议的必要方法，没有这两个方法，<code>UITableView</code> 就没办法正常工作。</p></li><li><p><code>delegate</code> 主要是处理 <code>UITableView</code> 的视觉效果以及与用户的交互。</p><p>例如设置 <code>header</code> 和 <code>footer</code>、设置 <code>cell</code> 的高度、处理 <code>cell</code> 的选择和取消选择等等。</p><ul><li><code>func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -&gt; CGFloat</code>：设置 cell 的高度。</li><li><code>func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath)</code>：处理 cell 的选择事件。</li></ul><p>这些方法都不是必须的，不过如果我们想要更加细致地控制 <code>UITableView</code> 的外观和行为，就需要实现这些方法。</p></li></ul><p>总的来说，<code>dataSource</code> 是设置和提供数据，<code>delegate</code> 是控制外观和处理用户交互。</p></details><h4 id="❓uitableview-的-reuse-原理" tabindex="-1"><a class="header-anchor" href="#❓uitableview-的-reuse-原理" aria-hidden="true">#</a> ❓<code>UItableview</code> 的 <code>reuse</code> 原理</h4><details class="hint-container details"><summary>💡</summary><blockquote><p><code>UITableView</code> 的重用机制是为了提高列表滚动的性能。在 <code>iOS</code> 开发中，如果列表包含大量的 <code>cell</code>，那么无止尽地创建新的 <code>UITableViewCell</code> 对象将消耗过多的内存，且过于频繁的内存分配和释放也会影响性能。重用机制使得在滚动大型列表时仍能保持流畅且内存使用率低，实现了列表的高性能渲染。</p></blockquote><p>基本原理：对于屏幕外的 <code>UITableViewCell</code> 对象，不直接释放，而是将其放入 <code>UITableView</code> 的重用池中，当屏幕需要将 <code>UITableViewCell</code> 显示出来时，优先在重用池中寻找可重用的 <code>UITableViewCell</code> 如果找到，则取出，更新内容后使用；如果未找到，才创建新的 <code>UITableViewCell</code>。</p></details><h4 id="❓prepareforreuse-作用" tabindex="-1"><a class="header-anchor" href="#❓prepareforreuse-作用" aria-hidden="true">#</a> ❓<code>prepareForReuse</code> 作用</h4><details class="hint-container details"><summary>💡</summary><blockquote><p><code>prepareForReuse</code> 是 <code>UITableViewCell</code> 的一个方法，当 <code>cell</code> 被加入到 <code>UITableView</code> 的复用队列（<code>reuse queue</code>）之前（即 <code>cell</code> 将被复用进行显示新的数据前）会被调用。</p></blockquote><p>这个方法是用来在一个 <code>cell</code> 被复用之前，把这个 <code>cell</code> 的状态复原或者更新到一个新的状态。复原的内容可以包括例如取消选中效果、隐藏或显示内部的视图、歇后语行为等。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">class</span> <span class="token class-name">CustomTableViewCell</span><span class="token punctuation">:</span> <span class="token class-name">UITableViewCell</span> <span class="token punctuation">{</span>

	<span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">prepareForReuse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">prepareForReuse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 这一句一定要写，用于执行父类的 prepareForReuse 逻辑</span>

	    <span class="token comment">// 在 reuse 前，将内部的某些状态重置或初始化</span>
	    <span class="token keyword">self</span><span class="token punctuation">.</span>imageView<span class="token operator">?</span><span class="token punctuation">.</span>image <span class="token operator">=</span> <span class="token nil constant">nil</span>
	    <span class="token keyword">self</span><span class="token punctuation">.</span>textLabel<span class="token operator">?</span><span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token nil constant">nil</span>
	    <span class="token keyword">self</span><span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token punctuation">.</span>white
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：在此方法中不应该做过于复杂和耗时的操作，不然会影响cell的复用效率，从而影响界面的流畅度。</p></details><h4 id="❓uitableview-如果要删除某个-cell-的动画会怎么设计和实现" tabindex="-1"><a class="header-anchor" href="#❓uitableview-如果要删除某个-cell-的动画会怎么设计和实现" aria-hidden="true">#</a> ❓<code>UITableView</code> 如果要删除某个 <code>Cell</code> 的动画会怎么设计和实现</h4><details class="hint-container details"><summary>💡</summary><ul><li><p>删除 <code>Cell</code></p><blockquote><p>删除 <code>UITableView</code> 中的一个 <code>Cell</code> 需要执行两部分操作：一是删除数据源中对应的数据项，二是更新视图以反映这一变化。</p></blockquote><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token comment">// 1&gt; 删除数据源</span>
<span class="token keyword">self</span><span class="token punctuation">.</span>dataArray<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>at<span class="token punctuation">:</span> indexPath<span class="token punctuation">.</span>row<span class="token punctuation">)</span>
<span class="token comment">// 2&gt; 更新视图</span>
tableView<span class="token punctuation">.</span><span class="token function">beginUpdates</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
tableView<span class="token punctuation">.</span><span class="token function">deleteRows</span><span class="token punctuation">(</span>at<span class="token punctuation">:</span> <span class="token punctuation">[</span>indexPath<span class="token punctuation">]</span><span class="token punctuation">,</span> with<span class="token punctuation">:</span> <span class="token punctuation">.</span>fade<span class="token punctuation">)</span>
tableView<span class="token punctuation">.</span><span class="token function">endUpdates</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>动画效果</p><blockquote><p>在 <code>deleteRows(at:with:)</code> 方法中， <code>with</code> 参数就是用来指定动画效果的。</p></blockquote><ul><li><code>.fade</code>：当插入或删除时，<code>Cell</code> 会自动淡出或淡入。</li><li><code>.right</code> 或 <code>.left</code> ：当插入或删除时，<code>Cell</code> 会从右边或左边划入或划出。</li><li><code>.top</code> 或 <code>.bottom</code>： 当插入或删除时，<code>Cell</code> 会从顶部或底部滑入或滑出。</li><li><code>.none</code> ：无动画效果。</li></ul></li></ul></details><h4 id="❓怎么判定两个-cell-相同" tabindex="-1"><a class="header-anchor" href="#❓怎么判定两个-cell-相同" aria-hidden="true">#</a> ❓怎么判定两个 <code>Cell</code> 相同</h4><details class="hint-container details"><summary>💡</summary><p>判断两个 <code>UITableViewCell</code> 相同可以从两个方面来判断：</p><ul><li><p>视觉：视觉上的判断主要是看 <code>UITableViewCell</code> 的内容是否一模一样，包括文字，图片，颜色和排列的形式等。</p></li><li><p>数据：如果两个 <code>Cell</code> 所对应的数据不一样，那就不能认为这两个 <code>Cell</code> 是一样的。比如在一些带有选中功能的列表中，即使两个 <code>Cell</code> 都显示为 &quot;Option A&quot;，但是一个被选中，另一个没被选中，那么它们的数据层面就是不同的。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">class</span> <span class="token class-name">MyCellModel</span><span class="token punctuation">:</span> <span class="token class-name">NSObject</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> text<span class="token punctuation">:</span> <span class="token class-name">String</span>
    <span class="token keyword">var</span> image<span class="token punctuation">:</span> <span class="token class-name">UIImage</span>
    
    <span class="token keyword">init</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> image<span class="token punctuation">:</span> <span class="token class-name">UIImage</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span>text <span class="token operator">=</span> text
        <span class="token keyword">self</span><span class="token punctuation">.</span>image <span class="token operator">=</span> image
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 重写 isEqual 方法来实现，来判断 Cell 的模型数据一样</span>
    <span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">isEqual</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> object<span class="token punctuation">:</span> <span class="token keyword">Any</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Bool</span> <span class="token punctuation">{</span>
        <span class="token keyword">guard</span> <span class="token keyword">let</span> other <span class="token operator">=</span> object <span class="token keyword">as</span><span class="token operator">?</span> <span class="token class-name">MyCellModel</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">self</span><span class="token punctuation">.</span>text <span class="token operator">==</span> other<span class="token punctuation">.</span>text <span class="token operator">&amp;&amp;</span> <span class="token keyword">self</span><span class="token punctuation">.</span>image <span class="token operator">==</span> other<span class="token punctuation">.</span>image
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></details><h4 id="❓reuse-队列长度怎么调整-属性名是什么" tabindex="-1"><a class="header-anchor" href="#❓reuse-队列长度怎么调整-属性名是什么" aria-hidden="true">#</a> ❓<code>reuse</code> 队列长度怎么调整，属性名是什么</h4><details class="hint-container details"><summary>💡</summary><blockquote><p><code>UITableView</code> 的 <code>reuse</code> 队列长度是由系统自动管理的，无法由开发者手动调整。当 <code>UITableView</code> 需要显示一个新的 <code>Cell</code> 时，它首先会检查 <code>reuse</code> 队列中是否有可重用的 <code>Cell</code>。如果有，<code>UITableView</code> 将会用这个 <code>Cell</code>，并从队列中移除。如果没有，<code>UITableView</code> 将会生成新的 <code>Cell</code>。当某个 <code>Cell</code> 不再被显示（例如用户滑动 <code>UITableView</code> 使得该 <code>Cell</code> 滑出屏幕）时，该 <code>Cell</code> 就会自动被加入到 <code>reuse</code> 队列中。</p></blockquote></details><h4 id="❓每个-cell-如果都有倒计时怎么办-独立的倒计时怎么做" tabindex="-1"><a class="header-anchor" href="#❓每个-cell-如果都有倒计时怎么办-独立的倒计时怎么做" aria-hidden="true">#</a> ❓每个 <code>Cell</code> 如果都有倒计时怎么办，独立的倒计时怎么做</h4><details class="hint-container details"><summary>💡</summary><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token comment">// 1&gt; 定义一个全局的定时器，例如每秒触发一次</span>
<span class="token keyword">private</span> <span class="token keyword">lazy</span> <span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token class-name">Timer</span><span class="token punctuation">.</span><span class="token function">scheduledTimer</span><span class="token punctuation">(</span>timeInterval<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">,</span> selector<span class="token punctuation">:</span> <span class="token other-directive property">#selector</span><span class="token punctuation">(</span>timerDidFire<span class="token punctuation">)</span><span class="token punctuation">,</span> userInfo<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">,</span> repeats<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 2&gt; 根据定时器触发，更新每个 Cell 倒计时数据</span>
<span class="token attribute atrule">@objc</span> <span class="token keyword">private</span> <span class="token keyword">func</span> <span class="token function-definition function">timerDidFire</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> countdown<span class="token punctuation">)</span> <span class="token keyword">in</span> countdownList<span class="token punctuation">.</span><span class="token function">enumerated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 更新countdown</span>
    countdownList<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> countdown <span class="token operator">-</span> <span class="token number">1</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 刷新TableView</span>
  tableView<span class="token punctuation">.</span><span class="token function">reloadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 3&gt; 对每个 Cell 进行更新</span>
<span class="token keyword">func</span> <span class="token function-definition function">tableView</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> tableView<span class="token punctuation">:</span> <span class="token class-name">UITableView</span><span class="token punctuation">,</span> cellForRowAt indexPath<span class="token punctuation">:</span> <span class="token class-name">IndexPath</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">UITableViewCell</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> cell <span class="token operator">=</span> tableView<span class="token punctuation">.</span><span class="token function">dequeueReusableCell</span><span class="token punctuation">(</span>withIdentifier<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Cell&quot;</span></span><span class="token punctuation">,</span> <span class="token keyword">for</span><span class="token punctuation">:</span> indexPath<span class="token punctuation">)</span>
  cell<span class="token punctuation">.</span>textLabel<span class="token operator">?</span><span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">countdownList<span class="token punctuation">[</span>indexPath<span class="token punctuation">.</span>row<span class="token punctuation">]</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span>
  <span class="token keyword">return</span> cell
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h4 id="❓cell-进入-reuse-池-然后重新被激活了-计时器逻辑怎么处理" tabindex="-1"><a class="header-anchor" href="#❓cell-进入-reuse-池-然后重新被激活了-计时器逻辑怎么处理" aria-hidden="true">#</a> ❓<code>Cell</code> 进入 <code>reuse</code> 池，然后重新被激活了，计时器逻辑怎么处理</h4><details class="hint-container details"><summary>💡</summary><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token comment">// 从数据源获取倒计时，然后设置到 Cell 中</span>
<span class="token keyword">func</span> <span class="token function-definition function">tableView</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> tableView<span class="token punctuation">:</span> <span class="token class-name">UITableView</span><span class="token punctuation">,</span> cellForRowAt indexPath<span class="token punctuation">:</span> <span class="token class-name">IndexPath</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">UITableViewCell</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> cell <span class="token operator">=</span> tableView<span class="token punctuation">.</span><span class="token function">dequeueReusableCell</span><span class="token punctuation">(</span>withIdentifier<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;CountdownCell&quot;</span></span><span class="token punctuation">,</span> <span class="token keyword">for</span><span class="token punctuation">:</span> indexPath<span class="token punctuation">)</span> <span class="token keyword">as</span><span class="token operator">!</span> <span class="token class-name">CountdownCell</span>
  cell<span class="token punctuation">.</span>countdownTime <span class="token operator">=</span> durationArray<span class="token punctuation">[</span>indexPath<span class="token punctuation">.</span>row<span class="token punctuation">]</span>
  <span class="token keyword">return</span> cell
<span class="token punctuation">}</span>

<span class="token comment">// 倒计时 Cell</span>
<span class="token keyword">class</span> <span class="token class-name">CountdownCell</span><span class="token punctuation">:</span> <span class="token class-name">UITableViewCell</span> <span class="token punctuation">{</span>
    
  <span class="token keyword">var</span> countdownTime<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span>
    <span class="token keyword">didSet</span> <span class="token punctuation">{</span>
      <span class="token comment">// 停止原有的倒计时</span>
      countdownTimer<span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token comment">// 开始新的倒计时</span>
      countdownTimer <span class="token operator">=</span> <span class="token class-name">Timer</span><span class="token punctuation">.</span><span class="token function">scheduledTimer</span><span class="token punctuation">(</span>timeInterval<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">,</span> selector<span class="token punctuation">:</span> <span class="token other-directive property">#selector</span><span class="token punctuation">(</span>updateCountdown<span class="token punctuation">)</span><span class="token punctuation">,</span> userInfo<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">,</span> repeats<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">private</span> <span class="token keyword">var</span> countdownTimer<span class="token punctuation">:</span> <span class="token class-name">Timer</span><span class="token operator">!</span>

  <span class="token attribute atrule">@objc</span> <span class="token keyword">private</span> <span class="token keyword">func</span> <span class="token function-definition function">updateCountdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    countdownTime <span class="token operator">-=</span> <span class="token number">1</span>
    <span class="token comment">// 更新 Cell 的 UI</span>
  <span class="token punctuation">}</span>
  
  <span class="token comment">// 将原有的倒计时停止，避免重复计时</span>
  <span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">prepareForReuse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">prepareForReuse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    countdownTimer<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    countdownTimer <span class="token operator">=</span> <span class="token nil constant">nil</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="uicollectionview" tabindex="-1"><a class="header-anchor" href="#uicollectionview" aria-hidden="true">#</a> UICollectionView</h3><h4 id="❓uicollectionview-自定义布局如何处理" tabindex="-1"><a class="header-anchor" href="#❓uicollectionview-自定义布局如何处理" aria-hidden="true">#</a> ❓<code>UICollectionView</code> 自定义布局如何处理</h4><details class="hint-container details"><summary>💡</summary><p>自定义 <code>UICollectionView</code> 的布局，首先需要创建一个 <code>UICollectionViewLayout</code> 或 <code>UICollectionViewFlowLayout</code> 的子类，然后重写其中与布局相关的一些方法。</p><ul><li><p><code>prepare()</code></p><blockquote><p>在这个方法中计算出所有 <code>cell</code> 和视图的位置。当布局被无效化并需要更新的时候，会首先调用该方法。</p></blockquote></li><li><p><code>layoutAttributesForElements(in rect: CGRect) -&gt; [UICollectionViewLayoutAttributes]?</code></p><blockquote><p>这个方法返回的是在给定矩形中所有 cell 和视图的布局属性。这个方法负责提供一个布局属性数组，数组中的数据表示了对应位置的 cell 的排布和样式。</p></blockquote></li><li><p><code>layoutAttributesForItem(at indexPath: IndexPath) -&gt; UICollectionViewLayoutAttributes?</code></p><blockquote><p>这个方法返回的是对应于路径的所有项目的布局属性，也就是在 <code>UICollectionView</code> 中指定位置的 <code>cell</code> 的排布和样式。</p></blockquote></li><li><p><code>collectionViewContentSize: CGSize</code></p><blockquote><p>这个方法返回的是整个 <code>UICollectionView</code> 的内容的宽度和高度。 <code>UICollectionView</code> 会使用这个尺寸来配置自己的内容大小，从而实现滚动。</p></blockquote></li></ul><p>创建了自定义布局类之后，就可以在创建 <code>UICollectionView</code> 的时候，将这个布局类的对象作为参数传入 <code>UICollectionView</code> 的初始化方法中，这样创建出来的 <code>UICollectionView</code> 将会按照我们自定义的方式进行布局。</p></details><hr><h2 id="uiviewcontroller" tabindex="-1"><a class="header-anchor" href="#uiviewcontroller" aria-hidden="true">#</a> UIViewController</h2><h3 id="❓uiviewcontroller-的生命周期" tabindex="-1"><a class="header-anchor" href="#❓uiviewcontroller-的生命周期" aria-hidden="true">#</a> ❓<code>UIViewController</code> 的生命周期</h3><details class="hint-container details"><summary>💡</summary><ul><li><p><code>loadView()</code>: 这个方法是用来创建或加载视图控制器的视图层次结构。是视图控制器生命周期的起始。一般不需要去重写或者直接调用它。</p></li><li><p><code>viewDidLoad()</code>: 这个方法会在视图控制器的视图被装载后调用。可以在该方法中实现任何额外的初始化工作。</p></li><li><p><code>viewWillAppear(_:)</code>: 这个方法会在视图控制器的视图被添加到窗口并且即将显示出来的时候调用。</p></li><li><p><code>viewDidAppear(_:)</code>: 这个方法会在视图控制器的视图已经显示出来之后调用。</p></li><li><p><code>viewWillDisappear(_:)</code>: 这个方法会在视图控制器的视图即将从窗口中移除或者被覆盖而消失的时候调用。</p></li></ul><p>-<code>viewDidDisappear(_:)</code>: 这个方法会在视图控制器的视图已经消失、被移除或覆盖的时候调用。</p></details><h3 id="❓uiviewcontroller-只-new-而没用到的时候-uiviewcontroller-的-view-是否加载了-如果没有加载那什么时候加载" tabindex="-1"><a class="header-anchor" href="#❓uiviewcontroller-只-new-而没用到的时候-uiviewcontroller-的-view-是否加载了-如果没有加载那什么时候加载" aria-hidden="true">#</a> ❓<code>UIViewController</code> 只 <code>new</code> 而没用到的时候，<code>UIViewController</code> 的 <code>view</code> 是否加载了，如果没有加载那什么时候加载</h3><details class="hint-container details"><summary>💡</summary><blockquote><p>在 <code>UIViewController</code> 的生命周期中，其视图（<code>View</code>）并不是在 <code>UIViewController</code> 被初始化(<code>alloc/init</code>) 的时候立刻加载的。当首次访问 <code>UIViewController</code> 的 <code>view</code> 属性（如<code>self.view、viewController.view</code> 等）的时候，才会触发 <code>view</code> 的加载，调用 <code>UIViewController</code> 的 <code>loadView</code> 方法。</p></blockquote><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token comment">// 创建了一个新的 UIViewController，但是并不会加载 view</span>
<span class="token keyword">let</span> viewController <span class="token operator">=</span> <span class="token class-name">UIViewController</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 1&gt; 访问 view 属性，会触发 view 的加载</span>
<span class="token keyword">let</span> view <span class="token operator">=</span> viewController<span class="token punctuation">.</span>view
<span class="token comment">// 2&gt; 将这个 UIViewController 添加到另外一个 UIViewController 时，也会触发view的加载</span>
<span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">present</span><span class="token punctuation">(</span>viewController<span class="token punctuation">,</span> animated<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> completion<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="❓loadview-的作用" tabindex="-1"><a class="header-anchor" href="#❓loadview-的作用" aria-hidden="true">#</a> ❓<code>loadView</code> 的作用</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>loadView()</code> 是 UIViewController 的一个生命周期方法，它在访问控制器的 <code>view</code> 属性时，如果该属性当前为 <code>nil</code>，则会被系统自动调用。</p></blockquote><p><code>loadView()</code> 用于创建并加载视图控制器的主视图（即 <code>self.view</code>）。通常情况下，并不需要重写这个方法，因为默认的实现能够处理大部分常规的初始化需求。比如，如果控制器在 <code>Storyboard</code> 中定义，那么 <code>loadView()</code> 会加载和设置来自 <code>Storyboard</code> 的视图。如果有一个同名的 <code>nib</code> 文件，它会加载和设置来自该 <code>nib</code> 文件的视图。</p><p>在需要以编程方式创建视图，或者提供自定义的视图加载机制时，可以通过重写 <code>loadView()</code> 方法来实现。在重写的 <code>loadView()</code> 中，需要手动创建一个 <code>UIView</code> 对象或其子类的实例，并赋值给控制器的 <code>view</code> 属性。</p><p>注意：</p><ul><li>重写 <code>loadView()</code> 方法时，不需要调用 <code>super</code>，并且在方法的最后要确保 <code>self.view</code> 不为 <code>nil</code>。</li><li>除非有特殊需求，否则不建议重写 <code>loadView()</code> 方法。对于大部分情况，可以在 <code>viewDidLoad()</code> 方法中做视图的初始化配置和其他设置，这更为常见。</li></ul></details><h3 id="❓没有使用-ib-时-也没有重写-loadview-这个-viewcontroller-view-如何创建的" tabindex="-1"><a class="header-anchor" href="#❓没有使用-ib-时-也没有重写-loadview-这个-viewcontroller-view-如何创建的" aria-hidden="true">#</a> ❓没有使用 <code>IB</code> 时，也没有重写<code> loadView()</code> 这个 <code>viewController.view</code> 如何创建的</h3><details class="hint-container details"><summary>💡</summary><p>如果没有使用 <code>Interface Builder（IB）</code>来创建和管理视图，并且也没有重写 <code>loadView()</code> 方法，那么在 <code>UIViewController</code> 的 <code>loadView()</code> 方法中会默认创建一个 <code>UIView</code> 实例，然后赋值给 <code>self.view</code>。</p><p>总的来说，无论是使用 <code>IB</code> （storyboard 或 xib），还是重写 <code>loadView()</code> 来自行创建视图，还是直接采用默认的实现，<code>UIViewController</code> 都会确保当其视图被访问时有一个 <code>UIView</code> 的实例被创建并赋值给 <code>self.view</code>。</p></details><h3 id="❓在-init-方法里面设置背景颜色-会生效吗" tabindex="-1"><a class="header-anchor" href="#❓在-init-方法里面设置背景颜色-会生效吗" aria-hidden="true">#</a> ❓在 <code>init</code> 方法里面设置背景颜色，会生效吗</h3><details class="hint-container details"><summary>💡</summary><ul><li><p>对于 <code>UIView</code> 来说，如果在使用 <code>initWithFrame:</code> 初始化方法来创建视图，那么在 <code>init</code> 方法中设置背景色是生效的。但是如果在 <code>Interface Builder</code>（即<code>storyboard</code> 或者 <code>xib</code>）中创建的视图，这个时候初始化方法是 <code>initWithCoder:</code>，同时设置视图属性大多放在 <code>awakeFromNib</code> 方法中。</p></li><li><p>对于 <code>UIViewController</code> 来说，由于控制器的视图 <code>view</code> 在 <code>init</code> 方法调用时还没有被加载，所以在<code>init</code>方法里设置背景颜色是不会生效的。需要在 <code>viewDidLoad</code> 或者 <code>loadView</code> 这样的方法之后设置，这个时候视图已经被初始化并加载完成了。</p></li></ul></details><h3 id="❓自定义导航跳转如何实现" tabindex="-1"><a class="header-anchor" href="#❓自定义导航跳转如何实现" aria-hidden="true">#</a> ❓自定义导航跳转如何实现</h3><details class="hint-container details"><summary>💡</summary><p>自定义导航跳转主要涉及两点，自定义动画及自定义转场方式。</p><ul><li><p>定义一个类遵循 <code>UIViewControllerAnimatedTransitioning</code> 协议，编写自定义的动画逻辑。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">class</span> <span class="token class-name">CustomTransition</span><span class="token punctuation">:</span> <span class="token class-name">NSObject</span><span class="token punctuation">,</span> <span class="token class-name">UIViewControllerAnimatedTransitioning</span> <span class="token punctuation">{</span>
    <span class="token keyword">func</span> <span class="token function-definition function">transitionDuration</span><span class="token punctuation">(</span>using transitionContext<span class="token punctuation">:</span> <span class="token class-name">UIViewControllerContextTransitioning</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">TimeInterval</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">1.0</span> <span class="token comment">// 返回动画时长</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">func</span> <span class="token function-definition function">animateTransition</span><span class="token punctuation">(</span>using transitionContext<span class="token punctuation">:</span> <span class="token class-name">UIViewControllerContextTransitioning</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 这里编写你的动画逻辑</span>
        
        <span class="token comment">// 获取到待呈现的视图</span>
        <span class="token keyword">if</span> <span class="token keyword">let</span> toView <span class="token operator">=</span> transitionContext<span class="token punctuation">.</span><span class="token function">view</span><span class="token punctuation">(</span>forKey<span class="token punctuation">:</span> <span class="token punctuation">.</span>to<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 添加到容器视图中</span>
            transitionContext<span class="token punctuation">.</span>containerView<span class="token punctuation">.</span><span class="token function">addSubview</span><span class="token punctuation">(</span>toView<span class="token punctuation">)</span>
            
            <span class="token comment">// 编写动画逻辑, 以下是一个简单的淡入淡出动画</span>
            toView<span class="token punctuation">.</span>alpha <span class="token operator">=</span> <span class="token number">0.0</span>
            <span class="token class-name">UIView</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span>withDuration<span class="token punctuation">:</span> <span class="token function">transitionDuration</span><span class="token punctuation">(</span>using<span class="token punctuation">:</span> transitionContext<span class="token punctuation">)</span><span class="token punctuation">,</span> animations<span class="token punctuation">:</span> <span class="token punctuation">{</span> 
                toView<span class="token punctuation">.</span>alpha <span class="token operator">=</span> <span class="token number">1.0</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token omit keyword">_</span><span class="token punctuation">)</span> <span class="token keyword">in</span>
                <span class="token comment">// 动画结束时，一定要调用 completeTransition 方法</span>
                transitionContext<span class="token punctuation">.</span><span class="token function">completeTransition</span><span class="token punctuation">(</span><span class="token operator">!</span>transitionContext<span class="token punctuation">.</span>transitionWasCancelled<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在视图控制器中指定转场代理，并在代理方法中返回自定义的转场动画对象。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">class</span> <span class="token class-name">ViewController</span><span class="token punctuation">:</span> <span class="token class-name">UIViewController</span><span class="token punctuation">,</span> <span class="token class-name">UINavigationControllerDelegate</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> customTransition <span class="token operator">=</span> <span class="token class-name">CustomTransition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 初始化自定义转场动画</span>
    
    <span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">viewDidLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">viewDidLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment">// 指定代理</span>
        navigationController<span class="token punctuation">.</span>delegate <span class="token operator">=</span> <span class="token keyword">self</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">func</span> <span class="token function-definition function">navigationController</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> navigationController<span class="token punctuation">:</span> <span class="token class-name">UINavigationController</span><span class="token punctuation">,</span>
                              animationControllerFor operation<span class="token punctuation">:</span> <span class="token class-name">UINavigationController</span><span class="token punctuation">.</span><span class="token class-name">Operation</span><span class="token punctuation">,</span>
                              from fromVC<span class="token punctuation">:</span> <span class="token class-name">UIViewController</span><span class="token punctuation">,</span>
                              to toVC<span class="token punctuation">:</span> <span class="token class-name">UIViewController</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">UIViewControllerAnimatedTransitioning</span><span class="token operator">?</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> customTransition
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></details><hr><h2 id="布局" tabindex="-1"><a class="header-anchor" href="#布局" aria-hidden="true">#</a> 布局</h2><h3 id="尺寸" tabindex="-1"><a class="header-anchor" href="#尺寸" aria-hidden="true">#</a> 尺寸</h3><h4 id="❓sizetofit、sizethatfits-了解吗" tabindex="-1"><a class="header-anchor" href="#❓sizetofit、sizethatfits-了解吗" aria-hidden="true">#</a> ❓<code>sizeToFit</code>、<code>sizeThatFits</code> 了解吗</h4><details class="hint-container details"><summary>💡</summary><blockquote><p><code>sizeToFit</code> 和 <code>sizeThatFits</code> 是 <code>UIKit</code> 中 <code>UIView</code> 的两个方法，涉及到视图的尺寸调整。</p></blockquote><ul><li><p><code>sizeToFit</code>：这是一个无参数的方法，调用这个方法会使得视图的 <code>frame</code> 变为能刚好包裹住它的子视图的大小。具体的行为依赖于视图的 <code>sizeThatFits:</code> 方法的实现。</p><blockquote><p>这个方法并不会修改视图的位置，只会影响到视图的大小。</p></blockquote></li><li><p><code>sizeThatFits:</code>：这个方法需要一个参数，表示期望的尺寸。然后这个方法返回一个适合视图及其子视图的大小。</p><blockquote><p>这个方法并不会改变视图的实际大小，需要调用者根据返回的大小来更新视图的 <code>frame</code>。</p></blockquote></li></ul><p>一般来说，视图的默认行为是返回一个等于当前视图大小或者等于传入参数的值，具体取决于子视图的要求。如果你的自定义视图有特殊的需求，你可以重写 <code>sizeThatFits:</code> 方法来实现特定的尺寸调整行为。</p><p>总的来说，<code>sizeToFit</code> 和 <code>sizeThatFits:</code> 都是用来调整视图尺寸的方法，但具体的行为取决于具体视图的 <code>sizeThatFits:</code> 的实现。</p></details><h4 id="❓intrinsiccontentsize-使用过吗" tabindex="-1"><a class="header-anchor" href="#❓intrinsiccontentsize-使用过吗" aria-hidden="true">#</a> ❓<code>intrinsicContentSize</code> 使用过吗</h4><details class="hint-container details"><summary>💡</summary><blockquote><p><code>intrinsicContentSize</code> 是<code>UIView</code>的一个属性，它表示一个视图的自然大小或者说内在大小。</p></blockquote><p>举例来说，对于一个 <code>UILabel</code> 的 <code>intrinsicContentSize</code> 就是刚好能包裹住它所包含的文本的大小。</p><p>这个属性在使用 <code>AutoLayout</code> 进行布局的时候非常有用。一些需要根据内容自适应大小的控件，比如 <code>UILabel</code>、<code>UIButton</code> 等，都可以通过设置 <code>intrinsicContentSize</code> 来告诉布局系统它们需要的空间大小。</p><p>可以通过重写这个属性的 <code>getter</code> 方法来提供自定义的大小。需要注意的是，当视图的内在内容改变，可能会影响到<code>intrinsicContentSize</code> 时，需要调用 <code>invalidateIntrinsicContentSize</code> 方法来通知布局系统 <code>intrinsicContentSize</code> 发生了变化，这样布局系统就会在下一个布局循环中重新计算布局。</p><p>总的来说，<code>intrinsicContentSize</code> 是在使用 <code>AutoLayout</code> 进行布局时，用于表示视图自适应内容大小的一个重要属性。</p></details><h3 id="布局视图" tabindex="-1"><a class="header-anchor" href="#布局视图" aria-hidden="true">#</a> 布局视图</h3><h4 id="❓layoutsubviews-那些情况下会触发" tabindex="-1"><a class="header-anchor" href="#❓layoutsubviews-那些情况下会触发" aria-hidden="true">#</a> ❓<code>layoutSubviews</code> 那些情况下会触发</h4><details class="hint-container details"><summary>💡</summary><blockquote><p><code>layoutSubviews</code> 在 <code>iOS</code> 的 <code>UIView</code> 的生命周期中，是负责布局及排版子视图的方法。</p></blockquote><ul><li>在初始化 <code>UIView</code> 并添加到界面上时，系统会自动调用 <code>layoutSubviews</code> 方法进行子视图的布局。</li><li>当 <code>UIView</code> 的 <code>bounds</code> 发生变化，如改变宽高、旋转设备时，系统会调用 <code>layoutSubviews</code>。</li><li>当直接调用 <code>UIView</code> 的 <code>setNeedsLayout</code>或者 <code>layoutIfNeeded</code> 方法时，系统会调用 <code>layoutSubviews</code>。 <ul><li><code>setNeedsLayout</code> 会标记当前视图被标记为需要重新布局，然后在接下来的更新周期中，调用 <code>layoutSubviews</code> 对标记进行重新布局</li><li><code>layoutIfNeeded</code> 则会立即对视图进行重新布局，通常在动画的 <code>block</code> 内使用</li></ul></li><li>当视图的某个子视图的 <code>frame</code> 被显式地修改，也会触发父视图的 <code>layoutSubviews</code>。</li><li>添加或者删除子视图的时候，也会触发父视图的 <code>layoutSubviews</code>。</li></ul></details><h4 id="❓viewwilllayoutsubview-的作用" tabindex="-1"><a class="header-anchor" href="#❓viewwilllayoutsubview-的作用" aria-hidden="true">#</a> ❓<code>viewWillLayoutSubView</code> 的作用</h4><details class="hint-container details"><summary>💡</summary><blockquote><p><code>viewWillLayoutSubviews</code> 是 <code>UIViewController</code> 的一个生命周期方法，该方法在视图控制器的视图即将布局其子视图时被调用。这通常发生在视图的尺寸发生改变之后，例如设备的方向发生改变，或者视图被添加到父视图中并且父视图需要调整子视图的位置或大小。</p></blockquote><p>在 <code>layoutSubviews</code> 之前调用 <code>viewWillLayoutSubviews</code>，因此这是在预计的布局之前，可以进行一些特定的设置或者变化。</p><p>注意，因为 <code>viewWillLayoutSubviews</code> 能被多次调用，因此需要避免在该方法中进行一些不必要的高开销计算或者更新操作。</p><p><code>viewWillLayoutSubviews</code> 的主要用途之一是提供了一个时机，允许在更改子视图的大小或位置之前进行一些额外的配置，也可以在此方法中进行一些必要的布局更新。</p></details><h4 id="❓layoutifneeded-vs-setneedslayout" tabindex="-1"><a class="header-anchor" href="#❓layoutifneeded-vs-setneedslayout" aria-hidden="true">#</a> ❓<code>layoutIfNeeded</code> vs <code>setNeedsLayout</code></h4><details class="hint-container details"><summary>💡</summary><blockquote><p><code>layoutIfNeeded</code> 和 <code>setNeedsLayout</code> 是 <code>UIView</code> 的两个方法，都涉及到视图的布局更新，但是使用场景和触发方式不同。</p></blockquote><ul><li><p><code>setNeedsLayout</code>: 这个方法被调用后，并不会立即触发重新布局。</p><blockquote><p>它标记了视图的布局需要更新，然后在下一次视图更新周期（通常是下一次 <code>RunLoop</code>），系统会自动调用 <code>layoutSubviews</code> 方法来进行实际的布局更新。如果期间多次调用 <code>setNeedsLayout</code>，实际上 <code>layoutSubviews</code> 只会被调用一次。</p></blockquote></li><li><p><code>layoutIfNeeded</code>: 这个方法则会立刻触发视图的布局更新。</p><blockquote><p>调用这个方法后，系统会立即执行布局更新，包括调用 <code>layoutSubviews</code> 方法。这个方法通常用于需要立即更新视图布局的情况，比如在 <code>UIView</code> 的动画块中。</p></blockquote></li></ul><p>总结：<code>setNeedsLayout</code> 是标记需要重新布局，具体要等到下一个更新周期自动触发，而 <code>layoutIfNeeded</code> 则是立刻触发重新布局。</p></details><h3 id="绘制视图" tabindex="-1"><a class="header-anchor" href="#绘制视图" aria-hidden="true">#</a> 绘制视图</h3><h4 id="❓drawrect-有使用过吗-调用时机-会有性能影响吗" tabindex="-1"><a class="header-anchor" href="#❓drawrect-有使用过吗-调用时机-会有性能影响吗" aria-hidden="true">#</a> ❓<code>drawRect</code> 有使用过吗，调用时机，会有性能影响吗</h4><details class="hint-container details"><summary>💡</summary><blockquote><p><code>drawRect:</code> 是一个 <code>UIView</code> 类的方法，用于在视图的矩形区域进行绘制。如果自定义视图需要展示一些特殊的展示效果，比如绘制一些自定义的形状、渐变、阴影等，就可以重写这个方法完成这些绘制。</p></blockquote><ul><li><p>调用时机</p><blockquote><p><code>drawRect:</code> 方法并不是时时刻刻都在调用，它的调用时机主要是视图第一次加载和视图的内容需要重绘时。也就是说当 <code>UIView</code> 准备好进行绘制操作的时候，系统会自动调用 <code>drawRect:</code> 方法。</p></blockquote><ul><li>视图第一次出现在屏幕上时，会调用一次 <code>drawRect:</code> 方法进行视图的渲染。</li><li>调用了 <code>setNeedsDisplay</code> 或者 <code>setNeedsDisplayInRect:</code> 方法后，系统会在下一个绘制周期中调用 <code>drawRect:</code> 方法进行视图的重绘。</li></ul></li><li><p>性能影响</p><blockquote><p>由于 <code>drawRect:</code> 方法会占用大量 <code>CPU</code> 资源进行图形的绘制，因此过度使用或者不合理使用 <code>drawRect:</code> 方法会导致 <code>CPU</code> 使用率上升，从而影响应用的性能。</p></blockquote><ul><li>避免在 <code>drawRect:</code> 方法中进行复杂的计算或者耗时的操作，这会降低绘制的效率。</li><li>不要主动直接调用 <code>drawRect:</code>，而是应当通过 <code>setNeedsDisplay</code> 或 <code>setNeedsDisplayInRect:</code> 让系统来决定何时调用 <code>drawRect:</code>。</li><li>如果可能，尽量减少绘制的区域。可以通过 <code>setNeedsDisplayInRect:</code> 只重绘视图中改变的那部分区域，而不是整个视图。</li><li>考虑使用 <code>Core Animation</code> 或者直接操作 <code>CALayer</code>，而不是使用 <code>drawRect:</code>，以提高性能。因为 <code>Core Animation</code> 运行在专门的绘图线程，而不是主线程上，所以它的性能要优于 <code>drawRect:</code>。</li><li>如果视图是静态的，即一旦被绘制就不会改变，那么可以使用 <code>shouldRasterize</code> 属性来缓存视图的绘制结果，以提高性能。</li></ul></li></ul></details><h4 id="❓setneedsdisplay-vs-setneedslayout" tabindex="-1"><a class="header-anchor" href="#❓setneedsdisplay-vs-setneedslayout" aria-hidden="true">#</a> ❓<code>setNeedsDisplay</code> vs <code>setNeedsLayout</code></h4><details class="hint-container details"><summary>💡</summary><ul><li><p><code>setNeedsDisplay</code>：调用此方法会标记视图为脏的，这会导致系统在下一个绘图周期中调用视图的 <code>drawRect:</code> 方法来重绘视图。</p><blockquote><p>通常在视图的内容发生改变时，调用此方法来请求系统重绘视图。</p></blockquote></li><li><p><code>setNeedsLayout</code>：调用此方法会标记视图为需要重新布局，这会导致系统在下一个更新周期中调用视图的<code>layoutSubviews</code> 方法来重新布局视图的子视图。</p><blockquote><p>通常在视图的尺寸或位置发生改变时，调用此方法来请求系统重新布局视图。</p></blockquote></li></ul><p>总结：<code>setNeedsDisplay</code> 和 <code>setNeedsLayout</code> 是异步的和非阻塞性的。<code>setNeedsDisplay</code> 请求系统重新绘制视图，而 <code>setNeedsLayout</code> 则请求系统重新布局视图的子视图。它们通常在视图的状态发生改变时被调用，以确保视图的外观和布局总是最新的。</p></details><h4 id="❓mask-属性如何实现蒙层的" tabindex="-1"><a class="header-anchor" href="#❓mask-属性如何实现蒙层的" aria-hidden="true">#</a> ❓<code>mask</code> 属性如何实现蒙层的</h4><details class="hint-container details"><summary>💡</summary><blockquote><p><code>UIView</code> 的 <code>mask</code> 属性可以用来实现蒙层效果。<code>mask</code> 是一个 <code>UIView</code> 对象，它的 <code>color</code> 属性定义了父 <code>View</code> 的遮罩效果。<code>mask</code> 中的不透明部分对父视图进行了截取，而透明部分会将父视图隐藏掉。</p></blockquote><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>UIView <span class="token operator">*</span>parentView <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>UIView alloc<span class="token punctuation">]</span> initWithFrame<span class="token punctuation">:</span><span class="token function">CGRectMake</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
parentView<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token punctuation">[</span>UIColor redColor<span class="token punctuation">]</span><span class="token punctuation">;</span>

UIView <span class="token operator">*</span>maskView <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>UIView alloc<span class="token punctuation">]</span> initWithFrame<span class="token punctuation">:</span><span class="token function">CGRectMake</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
maskView<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token punctuation">[</span>UIColor blackColor<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token punctuation">(</span>parentView<span class="token punctuation">.</span>mask <span class="token operator">=</span> maskView<span class="token punctuation">;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述代码中，我们创建了两个 <code>UIView</code> 对象：parentView 和 maskView。parentView 是我们需要添加蒙层效果的视图，而 maskView 就是我们的蒙层视图。通过设置 parentView 的 mask 属性为 maskView，我们就可以实现对 parentView 一半区域的遮罩效果。</p><p>为了使用非黑白蒙层，可以使用 CALayer 的 mask 属性，并设置 CALayer 上的具体图形。这样就可以实现更丰富的遮罩效果。</p><p>同样的原理也可用于 UIImageView，UIButton 等其它 UIKit UI 控件。</p></details><h3 id="自动布局" tabindex="-1"><a class="header-anchor" href="#自动布局" aria-hidden="true">#</a> 自动布局</h3><h4 id="❓autolayout-的底层实现" tabindex="-1"><a class="header-anchor" href="#❓autolayout-的底层实现" aria-hidden="true">#</a> ❓<code>AutoLayout</code> 的底层实现</h4><details class="hint-container details"><summary>💡</summary><blockquote><p><code>AutoLayout</code> 是 <code>Apple</code> 为 <code>iOS</code> 和 <code>macOS</code> 开发的一种界面布局系统，它使用一套比较复杂的线性不等式自动计算和调整视图控件的位置和尺寸。它的目标是让开发者能够创建自适应不同屏幕尺寸和设备方向的界面。</p></blockquote><p>在底层，<code>AutoLayout</code> 是通过创建和解决约束来实现的。约束是一种规则，用于定义视图之间的关系，例如一个视图的宽度约束可能规定它要比另一个视图宽两倍。<code>AutoLayout</code> 系统负责收集所有的约束，然后找出满足所有规则的解，即每个视图的正确位置和尺寸。</p><p><code>AutoLayout</code> 使用了一个叫做 <code>Cassowary</code> 的算法来解决约束，这是一种线性约束解决器，目前被广泛用在各种应用中，如动画、游戏和实时模拟中。</p></details><h4 id="❓autolayout-的原理-性能如何" tabindex="-1"><a class="header-anchor" href="#❓autolayout-的原理-性能如何" aria-hidden="true">#</a> ❓<code>AutoLayout</code> 的原理，性能如何</h4><details class="hint-container details"><summary>💡</summary><ul><li><p>原理：</p><blockquote><p><code>AutoLayout</code> 通过制定一组约束来描述用户界面中的一些布局关系和尺寸属性。这些约束代表了视图与其他视图的相对位置关系、视图自身的尺寸以及视图的尺寸和父视图之间的相对关系等等。然后使用数学算法计算出满足所有约束条件下视图的最优位置和大小。</p></blockquote><blockquote><p>当屏幕尺寸、视图层次、约束条件以及设备方向等条件改变时，系统可以自动的通过算法重新计算并调整视图的位置和尺寸。因此，<code>AutoLayout</code> 提供了强大的工具，让开发者能够设计出能在各种尺寸和条件下都能良好显示的界面。</p></blockquote></li><li><p>性能：</p><blockquote><p>使用 <code>AutoLayout</code> 可以省去很多手动计算和调整布局的工作，大大提高了开发效率，同样在处理各种设备尺寸和方向变化时，可以保持良好的界面显示。但是，<code>AutoLayout</code> 的性能并不总是最佳的。因为满足约束条件需要通过数学计算，并且复杂的界面和大量的约束可能使得这个计算过程变得复杂和耗时，特别是在一些动态改变约束和布局的情况下。</p></blockquote></li></ul><p>总结：<code>AutoLayout</code> 是一个功能强大，使用方便的布局工具，适合大多数情况下使用。但如果面临一些复杂和高效能需求的界面，可能需要考虑其他的布局方式，比如手动布局或使用第三方布局库。</p></details><h4 id="❓masonry-的约束应该写在哪里" tabindex="-1"><a class="header-anchor" href="#❓masonry-的约束应该写在哪里" aria-hidden="true">#</a> ❓<code>Masonry</code> 的约束应该写在哪里</h4><details class="hint-container details"><summary>💡</summary><blockquote><p><code>Masonry</code> 是一个轻量级的布局框架，采用链式编程的方式，让 <code>AutoLayout</code> 使用变得更加简单。通常在初始化视图和更新视图布局的地方使用 <code>Masonry</code>。</p></blockquote><p>可以把 <code>Masonry</code> 的约束写在以下地方：</p><ul><li><p>对于 <code>UIView</code> 可以在初始化方法 <code>init</code> 或者 <code>initWithFrame:</code> 中设置约束。</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span> <span class="token punctuation">(</span>instancetype<span class="token punctuation">)</span>init <span class="token punctuation">{</span>
    <span class="token keyword">self</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">super</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">[</span><span class="token keyword">self</span> setupViews<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment">// 完成子视图的添加</span>
        <span class="token punctuation">[</span><span class="token keyword">self</span> setupConstraints<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 设置 Masonry 的约束</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">self</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>对于 <code>UIViewController</code> 可以在 <code>viewDidLoad</code> 方法中设置视图约束。</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>viewDidLoad <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token keyword">super</span> viewDidLoad<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span><span class="token keyword">self</span> setupViews<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span><span class="token keyword">self</span> setupConstraints<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>如果视图布局会在运行时动态改变，那可以在 <code>updateViewConstraints</code> 方法中更新约束。</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>updateViewConstraints <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token keyword">super</span> updateViewConstraints<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// 更新 Masonry 的约束</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></details><h4 id="❓有左右两个-uilable-要让左边内容全部展示-怎么布局" tabindex="-1"><a class="header-anchor" href="#❓有左右两个-uilable-要让左边内容全部展示-怎么布局" aria-hidden="true">#</a> ❓有左右两个 <code>UILable</code>，要让左边内容全部展示，怎么布局</h4><details class="hint-container details"><summary>💡</summary><blockquote><p><code>setContentCompressionResistancePriority</code> 和 <code>setContentHuggingPriority</code> 是两个用于处理 <code>AutoLayout</code>系 统如何确定用户界面的空间分配的不同方法。</p></blockquote><ul><li><p><code>setContentCompressionResistancePriority</code>: 这种优先级决定了在空间不足的情况下，视图是否愿意减少其大小。</p><blockquote><p>如果视图的 <code>Compression Resistance</code> 优先级较高，它就不愿意缩小自己的大小，因此可能导致其他优先级低的视图要缩小自己的大小。换句话说，该优先级值更高的视图会尽量保留其原始大小，甚至可能导致其他视图被压缩。</p></blockquote></li><li><p><code>setContentHuggingPriority</code>: 这种优先级决定了在空间充足的情况下，视图是否愿意增加其大小。</p><blockquote><p>如果视图的 <code>Hugging</code> 优先级较高，它就不愿意增大自己的大小，因此可能导致其他优先级低的视图要增大自己的大小。换句话说，该优先级值更高的视图会尽量保持紧凑，不愿意占用额外的空间，甚至可能放大其他视图的大小。</p></blockquote></li></ul><p>总结：<code>setContentCompressionResistancePriority</code> 控制视图在空间不足时的表现，<code>setContentHuggingPriority</code> 控制视图在空间充足时的表现。这两个优先级可以帮助你更深入地控制具有动态内容大小的视图的表现，以得到符合期望的用户界面布局。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> leftLabel <span class="token operator">=</span> <span class="token class-name">UILabel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
leftLabel<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Left Label Full Text&quot;</span></span>
leftLabel<span class="token punctuation">.</span>numberOfLines <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// 如果希望支持多行的话</span>
<span class="token comment">// 设置左边压缩阻力优先级高，保证内容全部显示</span>
leftLabel<span class="token punctuation">.</span><span class="token function">setContentCompressionResistancePriority</span><span class="token punctuation">(</span><span class="token punctuation">.</span>defaultHigh<span class="token punctuation">,</span> <span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>horizontal<span class="token punctuation">)</span>

<span class="token keyword">let</span> rightLabel <span class="token operator">=</span> <span class="token class-name">UILabel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
rightLabel<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Right Label Text&quot;</span></span>
<span class="token comment">// 设置右边压缩阻力优先级低，内容会为压缩</span>
rightLabel<span class="token punctuation">.</span><span class="token function">setContentCompressionResistancePriority</span><span class="token punctuation">(</span><span class="token punctuation">.</span>defaultLow<span class="token punctuation">,</span> <span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>horizontal<span class="token punctuation">)</span>

<span class="token keyword">let</span> stackView <span class="token operator">=</span> <span class="token class-name">UIStackView</span><span class="token punctuation">(</span>arrangedSubviews<span class="token punctuation">:</span> <span class="token punctuation">[</span>leftLabel<span class="token punctuation">,</span> rightLabel<span class="token punctuation">]</span><span class="token punctuation">)</span>
stackView<span class="token punctuation">.</span>axis <span class="token operator">=</span> <span class="token punctuation">.</span>horizontal
stackView<span class="token punctuation">.</span>spacing <span class="token operator">=</span> <span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><hr><h2 id="图片" tabindex="-1"><a class="header-anchor" href="#图片" aria-hidden="true">#</a> 图片</h2><h3 id="图片读取" tabindex="-1"><a class="header-anchor" href="#图片读取" aria-hidden="true">#</a> 图片读取</h3><h4 id="❓images-xcassets-和直接用图片有什么不一样" tabindex="-1"><a class="header-anchor" href="#❓images-xcassets-和直接用图片有什么不一样" aria-hidden="true">#</a> ❓<code>Images.xcassets</code> 和直接用图片有什么不一样</h4><details class="hint-container details"><summary>💡</summary><ul><li><p>组织: <code>Images.xcassets</code> 可以更方便的管理和组织图片资源。在<code>Images.xcassets</code>中，可以创建各种不同类型的 <code>asset</code>（例如<code>App</code>图标，<code>Launch Images</code>，以及通用的图片等）并且可以为每一个 <code>asset</code> 创建多种尺寸的图片以适应不同的设备和显示屏。</p></li><li><p>自动适应：<code>Images.xcassets</code> 可以为一个图片资源提供多种不同的版本（<code>1x, 2x, 3x</code>），然后系统会根据设备自动选择合适的图片使用，而如果直接使用图片文件，则需要你手动管理这一部分。</p></li><li><p>优化：<code>Images.xcassets</code> 能够自动优化应用的大小。</p><blockquote><p>例如，如果应用安装在一个只支持 <code>1x</code> 分辨率的设备上，那么只有 <code>1x</code> 版本的图片会被包含在应用安装包中，<code>2x</code> 和 <code>3x</code> 版本的图片不会被包含。同样如果使用了 <code>App Thinning</code> 功能，它会根据设备，移除不需要的资源，以减少应用的大小。</p></blockquote></li><li><p>使用效果：<code>Images.xcassets</code> 从代码中获取图片只需要图片的名字，而直接使用图片文件的话，需要知道图片的完整文件名，包括扩展名，这方面 <code>Images.xcassets</code> 更为方便。</p></li></ul><p>总结：使用 <code>Images.xcassets</code> 可以更好地管理和组织你的图片资源，它为图片提供了多分辨率支持，并且可以帮助优化应用的大小。如果直接使用图片文件，可能会导致组织混乱，更难以支持多个分辨率，且可能会浪费存储空间。</p></details><h4 id="❓imagename-vs-imagewithcontentsoffile" tabindex="-1"><a class="header-anchor" href="#❓imagename-vs-imagewithcontentsoffile" aria-hidden="true">#</a> ❓<code>imageName</code> vs <code>imageWithContentsOfFile</code></h4><details class="hint-container details"><summary>💡</summary><p><code>UIImage</code> 的 <code>imageName:</code> 和 <code>imageWithContentsOfFile:</code> 是两种不同的方法，用于从应用的 <code>bundle</code> 中加载图片。</p><ul><li><p><code>imageName:</code> 方法是用于从应用的 <code>主 bundle</code> 中加载图片的，它会自动根据设备的屏幕类型（比如，<code>Retina</code>屏幕）来选择合适的图片（比如，自动选择 <code>@2x</code> 或 <code>@3x</code> 的图片）。</p><blockquote><p>这个方法也会自动地对加载的图片进行缓存，所以如果你使用该方法多次加载同一张图片，实际上只会加载一次，剩下的调用会直接从缓存中获取图片。这就意味着这个方法在加载大量重复图片时，处理速度会很快。</p></blockquote></li><li><p><code>imageWithContentsOfFile:</code> 方法则是直接从指定的文件路径中加载图片，它并不会根据屏幕类型来自动选择图片，也不会对加载的图片进行缓存。</p><blockquote><p>每次调用这个方法时，系统都会从磁盘中读取图片数据，这可能会花费更多的时间。如果想要加载一次性使用并且不需要缓存的大图片，这个方法可能会更适合。</p></blockquote></li></ul><p>总结：<code>imageName:</code> 更适合用来加载经常使用的小图片，而 <code>imageWithContentsOfFile:</code> 则更适合加载一次性使用的大图片。</p></details><h4 id="❓多个相同的图片-会重复加载吗" tabindex="-1"><a class="header-anchor" href="#❓多个相同的图片-会重复加载吗" aria-hidden="true">#</a> ❓多个相同的图片，会重复加载吗</h4><details class="hint-container details"><summary>💡</summary><p>如果使用<code>UIImage</code>的<code>init(named:)</code>或<code>imageNamed:</code>方法来创建一个图片对象，这个方法会先在缓存中查找是否已经存在相同的图片。如果缓存中存在，那么就会直接从缓存中返回，而不会重新加载。因此，这个方法在加载相同图片时不需要加载多次，会直接从缓存中读取，性能更好。</p><p>如果使用<code>UIImage</code>的<code>init(contentsOfFile:)</code>或<code>imageWithContentsOfFile:</code>方法来加载图片，那么每次调用都会从文件中重新读取，即使在前面已经加载过同一个文件的图片。这是因为这种方法不会使用系统的图片缓存。</p><p>因此，如果有多个相同的图片需要加载，且这些图片会频繁使用，那么推荐使用<code>init(named:)</code>或<code>imageNamed:</code>方法，利用系统的缓存机制，避免重复加载图片，提升性能。如果图片仅用一次，或者图片文件非常大，不适合放入缓存，那么可以考虑使用<code>init(contentsOfFile:)</code>或<code>imageWithContentsOfFile:</code>方法。</p></details><h3 id="图片处理" tabindex="-1"><a class="header-anchor" href="#图片处理" aria-hidden="true">#</a> 图片处理</h3><h4 id="❓如何高性能的给-uiimageview-加圆角" tabindex="-1"><a class="header-anchor" href="#❓如何高性能的给-uiimageview-加圆角" aria-hidden="true">#</a> ❓如何高性能的给 <code>UIImageView</code> 加圆角</h4><details class="hint-container details"><summary>💡</summary><p>给 <code>UIImageView</code> 添加圆角有多种方式，但并非所有方法都是高效的。一些常见的方式可能会引入性能问题，例如直接修改视图的 <code>.layer.cornerRadius</code> 属性，因为这会导致离屏渲染，影响到性能。</p><p>以下是一种高效的给 <code>UIImageView</code> 添加圆角的方法，该方法使用了 <code>Core Graphics</code> 框架：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> imageView <span class="token operator">=</span> <span class="token class-name">UIImageView</span><span class="token punctuation">(</span>image<span class="token punctuation">:</span> <span class="token class-name">UIImage</span><span class="token punctuation">(</span>named<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;example&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 圆角半径</span>
<span class="token keyword">let</span> radius<span class="token punctuation">:</span> <span class="token class-name">CGFloat</span> <span class="token operator">=</span> <span class="token number">10.0</span> 
<span class="token comment">// 创建一个CGRect，其尺寸与 UIImageView 的 frame 匹配</span>
<span class="token keyword">let</span> rect <span class="token operator">=</span> <span class="token class-name">CGRect</span><span class="token punctuation">(</span>origin<span class="token punctuation">:</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> size<span class="token punctuation">:</span> imageView<span class="token punctuation">.</span>frame<span class="token punctuation">.</span>size<span class="token punctuation">)</span> 
<span class="token comment">// 创建一个 CGMutablePath，并将该路径添加到一个 CAShapeLayer</span>
<span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token class-name">UIBezierPath</span><span class="token punctuation">(</span>roundedRect<span class="token punctuation">:</span> rect<span class="token punctuation">,</span> cornerRadius<span class="token punctuation">:</span> radius<span class="token punctuation">)</span>
<span class="token keyword">let</span> maskLayer <span class="token operator">=</span> <span class="token class-name">CAShapeLayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
maskLayer<span class="token punctuation">.</span>path <span class="token operator">=</span> path<span class="token punctuation">.</span>cgPath
<span class="token comment">// 将这个 CAShapeLayer 设置为 UIImageView 的遮罩层</span>
imageView<span class="token punctuation">.</span>layer<span class="token punctuation">.</span>mask <span class="token operator">=</span> maskLayer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方式不会导致离屏渲染，只会在合成阶段发生，因此比直接修改视图的 <code>.layer.cornerRadius</code> 属性更为高效。</p></details><h3 id="图片渲染" tabindex="-1"><a class="header-anchor" href="#图片渲染" aria-hidden="true">#</a> 图片渲染</h3><h4 id="❓图片解码发生的时机是什么" tabindex="-1"><a class="header-anchor" href="#❓图片解码发生的时机是什么" aria-hidden="true">#</a> ❓图片解码发生的时机是什么</h4><details class="hint-container details"><summary>💡</summary><blockquote><p>在 <code>iOS</code> 中，图片解码的时机通常在将图片用于绘制前，如在 <code>UIImageView</code> 的 <code>setImage</code> 函数中，或者在自行调用绘制的过程中。</p></blockquote><p>系统默认在载入图片时(通过 <code>[UIImage imageNamed:]</code> 或者 <code>UIImage(contentsOfFile:)</code> 等方法)，并不会立即解码图片，而是将压缩的图片数据保存在内存中。当将这个 <code>UIImage</code> 实例赋值到 <code>UIImageView</code> 或者通过其他方式进行绘制时，会在绘制循环中对其进行解码。</p><p>这种延迟解码帮助系统尽可能的节省内存。这样，系统就可以更智能地管理其 <code>RAM</code>。例如，如果加载了一张图片但是从来没有使用它，那么系统就不会花费时间和资源去进行解码。</p><p>总结：<code>UIImage</code> 只负责管理图片数据，至于这些数据何时解压缩成位图，取决于何时实际绘制这个 <code>UIImage</code>。</p></details><h4 id="❓图片怎么显示的-以及图片缓冲区" tabindex="-1"><a class="header-anchor" href="#❓图片怎么显示的-以及图片缓冲区" aria-hidden="true">#</a> ❓图片怎么显示的，以及图片缓冲区</h4><details class="hint-container details"><summary>💡</summary><p>图片在屏幕上显示流程：</p><ul><li><p><strong>加载</strong>：首先从磁盘或网络上将二进制数据加载入内存，这些二进制数据描述了图像信息。</p></li><li><p><strong>解码</strong>：加载完毕后，图像会被解码成位图（<code>bitmap</code>）。位图是一种非常详细的矩阵，其中每个单元（像素）记录了在对应位置的颜色信息。因此，位图的大小通常比原始的图像文件要大。</p></li><li><p><strong>渲染</strong>：渲染图片就是将位图中的每个像素翻译成屏幕上的每个点，这个过程通常由 <code>GPU</code>（图形处理器）完成。</p></li></ul><blockquote><p>图片缓冲区，通常会通过一些图像库（如<code>SDWebImage</code>）的帮助，将常用图片保存在内存中以备快速访问。这就是所谓的图片缓冲区，也叫做图片缓存。</p></blockquote><p>图片缓存的目的是提高性能和减少网络或磁盘 <code>I/O</code> 的使用。当应用程序需要显示一张图片时，它首先查看缓存，如果缓存中有这张图片，就直接用缓存中的图片，避免了从网络或磁盘上加载。如果缓存中没有，就必须从网络或磁盘加载，加载后的图片会被保存到缓存中，以便下次使用。</p><p>注意：任何缓存策略都需要考虑内存使用和过期策略。缓存太多图片会消耗大量内存，可能影响应用程序的性能或触发内存警告。同时，缓存中的图片可能会过时，应定期清除不再需要的图片。</p></details><h4 id="❓图片渲染怎么优化" tabindex="-1"><a class="header-anchor" href="#❓图片渲染怎么优化" aria-hidden="true">#</a> ❓图片渲染怎么优化</h4><details class="hint-container details"><summary>💡</summary><blockquote><p>优化图片渲染是一门科学</p></blockquote><ul><li><p>图片本身</p><ul><li><strong>避免透明像素</strong>：如果一张图片包含透明像素，那么在混合像素时 <code>GPU</code> 负担会更重。如果图片不需要透明度，最好选择不带 <code>alpha</code> 通道的图片格式，如 <code>JPG</code>。</li><li><strong>使用正确的图片格式</strong>：不同的图片格式有不同的解压缩性能。 <blockquote><p>例如，对于静态图片，<code>PNG</code> 和 <code>JPEG</code> 是常见的格式。通常，<code>JPEG</code> 格式的图片解压缩速度会比 <code>PNG</code> 快，但是 <code>PNG</code> 对透明度的支持更好。</p></blockquote></li></ul></li><li><p>图片获取</p><ul><li><strong>后台线程加载和准备图片</strong>：为了避免阻塞主线程，一定要在后台线程进行图片的加载、解压缩和其他准备工作。</li><li><strong>利用图片缓存</strong>：频繁地从磁盘加载图像是一种昂贵的操作。使用图片缓存可以避免频繁地加载同一张图片。</li><li><strong>合理设置图片分辨率</strong>：<code>@2x</code> 和 <code>@3x</code> 的图片分辨率分别是原始尺寸的2倍和3倍，根据设备屏幕的特性选择合理的图片分辨率，避免不必要的内存消耗。</li></ul></li><li><p>图片加载</p><ul><li><strong>图片预解码</strong>：图片在渲染到屏幕之前，需要被解码成位图。 <blockquote><p>这个操作会在图片第一次显示时进行，并且可能会产生一定的性能消耗。可以通过预解码（在后台线程提前进行解码）的方式把这个消耗提前。</p></blockquote></li><li><strong>图片大小适配</strong>：尽量保持加载的图片大小接近于它在设备屏幕上的显示大小。 <blockquote><p>如果一个很小的 <code>UIImageView</code> 需要显示一个非常大的图片，那么这张图片在显示之前需要被缩放。如果图片实际尺寸过大，会导致额外的内存使用和解压缩成本。</p></blockquote></li></ul></li></ul></details><h4 id="❓图片是什么时候解码的-如何优化" tabindex="-1"><a class="header-anchor" href="#❓图片是什么时候解码的-如何优化" aria-hidden="true">#</a> ❓图片是什么时候解码的，如何优化</h4><details class="hint-container details"><summary>💡</summary><p>当图片被显示在屏幕上时，图片的解码操作通常是在渲染前由 <code>GPU</code> 进行的。然后，解码后的位图像素被存储在内存中，用于显示。此过程可能会对性能产生影响，尤其是在滚动动画或切换动画等场景中。</p><p>如果希望优化图片解码，有一种常用的方法是对图片进行预解码。预解码是在主线程渲染前，提前在后台线程将图片解码，而不是等待 <code>GPU</code> 在显示的时候进行解码。在其进行解码的过程中，<code>CPU</code> 的压力会提高，但同时可以降低 <code>GPU</code> 负载，避免在渲染过程中进行解码导致的帧数下降。</p><p>可以通过使用 <code>Core Graphics</code> 的 <code>API</code> 来对图片进行预解码。具体过程是使用 <code>CGImage</code> 创建一个 <code>CGBitmapContext</code>，然后将图片绘制到这个 <code>context</code> 中。这样，当图片第一次显示在屏幕上时，就无需再进行解码操作。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token comment">// 预解码</span>
<span class="token keyword">func</span> <span class="token function-definition function">predecode</span><span class="token punctuation">(</span>image originalImage<span class="token punctuation">:</span> <span class="token class-name">UIImage</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">UIImage</span><span class="token operator">?</span> <span class="token punctuation">{</span>
    <span class="token class-name">UIGraphicsBeginImageContextWithOptions</span><span class="token punctuation">(</span>originalImage<span class="token punctuation">.</span>size<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> originalImage<span class="token punctuation">.</span>scale<span class="token punctuation">)</span>
    <span class="token keyword">guard</span> <span class="token keyword">let</span> context <span class="token operator">=</span> <span class="token class-name">UIGraphicsGetCurrentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token nil constant">nil</span> <span class="token punctuation">}</span>
    originalImage<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>at<span class="token punctuation">:</span> <span class="token punctuation">.</span>zero<span class="token punctuation">)</span>
    <span class="token keyword">let</span> decodedImage <span class="token operator">=</span> <span class="token class-name">UIGraphicsGetImageFromCurrentImageContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token class-name">UIGraphicsEndImageContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> decodedImage
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于预解码会增加 <code>CPU</code> 压力和内存消耗，所以需要在合适的时机进行，比如在后台线程，用户滚动列表的滑动减速或者停止的时候，或者在图片将要显示之前的闲暇时间。务必要避免在用户滑动列表的过程中进行预解码，因为这个时候进行预解码可能会导致卡顿。另外，过多的预解码也可能导致内存暴涨，所以需要权衡当下的需求和设备性能。</p></details><h3 id="大图渲染" tabindex="-1"><a class="header-anchor" href="#大图渲染" aria-hidden="true">#</a> 大图渲染</h3><h4 id="❓如何用-uiimageview-显示超大分辨率的图-如何支持缩放" tabindex="-1"><a class="header-anchor" href="#❓如何用-uiimageview-显示超大分辨率的图-如何支持缩放" aria-hidden="true">#</a> ❓如何用 <code>UIImageView</code> 显示超大分辨率的图，如何支持缩放</h4><details class="hint-container details"><summary>💡</summary><p><code>UIScrollView</code> 支持在 <code>iOS</code> 设备上进行滚动和缩放操作。如果希望显示一张大图并支持缩放，应该把 <code>UIImageView</code> 作为 <code>UIScrollView</code> 的子视图。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">class</span> <span class="token class-name">ViewController</span><span class="token punctuation">:</span> <span class="token class-name">UIViewController</span><span class="token punctuation">,</span> <span class="token class-name">UIScrollViewDelegate</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> imageView<span class="token punctuation">:</span> <span class="token class-name">UIImageView</span><span class="token operator">!</span>
    <span class="token keyword">var</span> scrollView<span class="token punctuation">:</span> <span class="token class-name">UIScrollView</span><span class="token operator">!</span>

    <span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">viewDidLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">viewDidLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token comment">// 创建一个 UIScrollView 实例</span>
        scrollView <span class="token operator">=</span> <span class="token class-name">UIScrollView</span><span class="token punctuation">(</span>frame<span class="token punctuation">:</span> view<span class="token punctuation">.</span>bounds<span class="token punctuation">)</span>
        <span class="token comment">// 设定 zoom 缩放的最小/最大倍数</span>
        scrollView<span class="token punctuation">.</span>minimumZoomScale <span class="token operator">=</span> <span class="token number">1.0</span>
        scrollView<span class="token punctuation">.</span>maximumZoomScale <span class="token operator">=</span> <span class="token number">6.0</span>

        <span class="token comment">// 加载一张大图(up to you)</span>
        <span class="token keyword">let</span> image <span class="token operator">=</span> <span class="token class-name">UIImage</span><span class="token punctuation">(</span>named<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;LargeImageName&quot;</span></span><span class="token punctuation">)</span>    
        imageView <span class="token operator">=</span> <span class="token class-name">UIImageView</span><span class="token punctuation">(</span>image<span class="token punctuation">:</span> image<span class="token punctuation">)</span>
        imageView<span class="token punctuation">.</span>frame <span class="token operator">=</span> <span class="token class-name">CGRect</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> image<span class="token operator">?</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span>width <span class="token operator">??</span> <span class="token number">0</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> image<span class="token operator">?</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span>height <span class="token operator">??</span> <span class="token number">0</span><span class="token punctuation">)</span>
        
        <span class="token comment">//将 ImageView 添加到 ScrollView 中 </span>
        scrollView<span class="token punctuation">.</span><span class="token function">addSubview</span><span class="token punctuation">(</span>imageView<span class="token punctuation">)</span>
        scrollView<span class="token punctuation">.</span>contentSize <span class="token operator">=</span> imageView<span class="token punctuation">.</span>bounds<span class="token punctuation">.</span>size
        
        <span class="token comment">//设置代理</span>
        scrollView<span class="token punctuation">.</span>delegate <span class="token operator">=</span> <span class="token keyword">self</span>

        <span class="token comment">//添加 ScrollView 到主视图中</span>
        view<span class="token punctuation">.</span><span class="token function">addSubview</span><span class="token punctuation">(</span>scrollView<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">func</span> <span class="token function-definition function">viewForZooming</span><span class="token punctuation">(</span><span class="token keyword">in</span> scrollView<span class="token punctuation">:</span> <span class="token class-name">UIScrollView</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">UIView</span><span class="token operator">?</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> imageView <span class="token comment">// 返回需要缩放的视图</span>
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于极其大的图片还是可能有内存问题。如需处理这种情况，可能需要使用像 <code>CATiledLayer</code> 这样的技术，它可以分块渲染视图，而不是一次性渲染整个大图。</p><p>由于 <code>UIImageView</code> 通过 <code>UIImage</code> 加载图片，是一次性将图片加载到内存，超大图片会引发内存不足的的问题。所以这个时候不能一次全部加载，需要使用分治思想，将图片像素点分块加载，只加载可视区域像素点。使用 <code>Tile Rendering</code> 的解决方案，类似家庭装修贴地砖的方式，先将图片像素按照一定的大小分割成 <code>Tile</code>，然后根据图片显示区域渲染。<code>CATiledLayer</code> 是一种适用于处理大量数据的渲染的 layer，适合处理这种情况。</p><p>缩放功能可以通过将 <code>UIImageView</code> 嵌套在 <code>UIScrollView</code> 里面，根据缩放的代理回调，进行 <code>Tile</code> 的重新绘制。</p></details><h4 id="❓如何将一张内存极大的图片可以像地图一样的加载出来" tabindex="-1"><a class="header-anchor" href="#❓如何将一张内存极大的图片可以像地图一样的加载出来" aria-hidden="true">#</a> ❓如何将一张内存极大的图片可以像地图一样的加载出来</h4><details class="hint-container details"><summary>💡</summary><p>处理极大图片（比如说地图）时，加载整张大图到内存通常是不可行的，因为将会占用太大内存，而手机设备的内存是有限的。为了处理这个问题，通常的做法是分块加载和显示图片——只把当前需要显示在屏幕上的那一部分加载到内存。当用户滚动或缩放图片时，就加载新的部分，同时释放不再需要的部分。这就是所谓的 “切片”（tiling）技术。</p><p>可以使用 <code>CATiledLayer</code> 来实现图片的切片加载。</p><blockquote><p><code>CATiledLayer</code> 是一种特殊的 <code>CALayer</code>，它将内容分成多个小的矩形块或&quot;切片&quot;，并且只在需要的时候绘制这些切片。当提供内容时，只需画出指定的矩形区域即可，其它区域则由 <code>Core Animation</code> 自动处理。此外，<code>CATiledLayer</code> 甚至支持多级别的细节，这使得可以非常容易地实现复杂的地图或图片浏览器功能。</p></blockquote><p>注意：<code>CATiledLayer</code>的使用相对复杂，它需要自行管理图片资源并根据需要进行绘制。<code>MapKit</code> 就是使用这种技术。另外，一些图片浏览器库，如 <code>FastImageCache</code>，也可以处理大图，它实现了自己的切片和缓存机制。</p></details><hr><h2 id="动画" tabindex="-1"><a class="header-anchor" href="#动画" aria-hidden="true">#</a> 动画</h2><h3 id="uikit-动画" tabindex="-1"><a class="header-anchor" href="#uikit-动画" aria-hidden="true">#</a> UIKit 动画</h3><h4 id="❓uikit-animation-vs-core-animation" tabindex="-1"><a class="header-anchor" href="#❓uikit-animation-vs-core-animation" aria-hidden="true">#</a> ❓<code>UIKit Animation</code> vs <code>Core Animation</code></h4><details class="hint-container details"><summary>💡</summary><ul><li><p><code>UIKit Animation</code>: 一个更高的抽象层进行编程操作。</p><blockquote><p>可以简单的使用 <code>UIView</code> 类的动画方法，如 <code>UIView.animate(withDuration:animations:)</code>，轻松实现许多动画，如移动、旋转、改变透明度、改变颜色等。</p></blockquote><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token comment">// 将一个视图在2秒内从屏幕左边移到右边</span>
<span class="token class-name">UIView</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span>withDuration<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    view<span class="token punctuation">.</span>frame<span class="token punctuation">.</span>origin<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>view<span class="token punctuation">.</span>frame<span class="token punctuation">.</span>width <span class="token operator">-</span> view<span class="token punctuation">.</span>frame<span class="token punctuation">.</span>width
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>Core Animation</code>: 提供了更底层和更强大的动画控制。</p><blockquote><p>与 <code>UIKit</code> 动画相比，它可以实现更复杂的动画，如复杂的转换，3D效果，关键帧动画等。</p></blockquote><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token comment">// 使用 Core Animation 创建关键帧动画：使视图在2秒内沿着预定的路径移动</span>

<span class="token comment">// 创建一个 CAKeyframeAnimation 实例</span>
<span class="token keyword">let</span> animation <span class="token operator">=</span> <span class="token class-name">CAKeyframeAnimation</span><span class="token punctuation">(</span>keyPath<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;position&quot;</span></span><span class="token punctuation">)</span>
<span class="token comment">// 设置关键帧</span>
animation<span class="token punctuation">.</span>values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">NSValue</span><span class="token punctuation">(</span>cgPoint<span class="token punctuation">:</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token class-name">NSValue</span><span class="token punctuation">(</span>cgPoint<span class="token punctuation">:</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token class-name">NSValue</span><span class="token punctuation">(</span>cgPoint<span class="token punctuation">:</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token comment">// 动画时间</span>
animation<span class="token punctuation">.</span>duration <span class="token operator">=</span> <span class="token number">2</span>
<span class="token comment">// 将动画添加到视图层</span>
view<span class="token punctuation">.</span>layer<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>animation<span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></details><h4 id="❓uikit-animation-vs-ui-dynamics" tabindex="-1"><a class="header-anchor" href="#❓uikit-animation-vs-ui-dynamics" aria-hidden="true">#</a> ❓<code>UIKit Animation</code> vs <code>UI Dynamics</code></h4><details class="hint-container details"><summary>💡</summary><ul><li><p><code>UIKit Animation</code>：主要用于创建简单，直观和以时间为基础的动画。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token comment">// 在1秒内改变视图的背景颜色和大小</span>
<span class="token class-name">UIView</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span>withDuration<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    view<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token punctuation">.</span>blue
    view<span class="token punctuation">.</span>frame<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token class-name">CGSize</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>UI Dynamics</code>：一种创建物理基础的模拟动画的方法。</p><blockquote><p>可以为视图创建如弹力，碰撞，重力这样的物理特性的动画。当希望视图的动画看起来 “感觉像现实世界中的物体那样移动” 那么 <code>UI Dynamics</code> 是最好的选择。</p></blockquote><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token comment">// 视图会根据重力方向进行动画模拟</span>
<span class="token keyword">let</span> gravity <span class="token operator">=</span> <span class="token class-name">UIGravityBehavior</span><span class="token punctuation">(</span>items<span class="token punctuation">:</span> <span class="token punctuation">[</span>myView<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// 创建重力行为</span>
animator <span class="token operator">=</span> <span class="token class-name">UIDynamicAnimator</span><span class="token punctuation">(</span>referenceView<span class="token punctuation">:</span> view<span class="token punctuation">)</span>
animator<span class="token punctuation">.</span><span class="token function">addBehavior</span><span class="token punctuation">(</span>gravity<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></details><h3 id="核心动画" tabindex="-1"><a class="header-anchor" href="#核心动画" aria-hidden="true">#</a> 核心动画</h3><h4 id="❓隐式动画-vs-显示动画" tabindex="-1"><a class="header-anchor" href="#❓隐式动画-vs-显示动画" aria-hidden="true">#</a> ❓隐式动画 vs 显示动画</h4><details class="hint-container details"><summary>💡</summary><blockquote><p>隐式动画和显示动画是在 <code>Core Animation</code> 框架中用来描述动画类型的两个术语。</p></blockquote><ul><li><p>隐式动画：默认的动画类型。</p><blockquote><p>当修改 <code>CALayer</code> 的可动画属性时，系统会自动创建并运行动画——这就是所谓的隐式动画。</p></blockquote><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token comment">// 图层的位置会以动画的形式移动到新位置，而不是立即跳到那里</span>
layer<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>显示动画：明确地创建一个 <code>CAAnimation</code> 对象，设置它的属性，然后将它添加到图层。显示动画给了开发者对动画行为更精细的控制，包括动画的时间线和动画的进度曲线等。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token comment">// 在1秒内将图层的位置从(100, 100)移动到(200, 200)</span>
<span class="token keyword">let</span> animation <span class="token operator">=</span> <span class="token class-name">CABasicAnimation</span><span class="token punctuation">(</span>keyPath<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;position&quot;</span></span><span class="token punctuation">)</span>
animation<span class="token punctuation">.</span>fromValue <span class="token operator">=</span> <span class="token class-name">NSValue</span><span class="token punctuation">(</span>cgPoint<span class="token punctuation">:</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
animation<span class="token punctuation">.</span>toValue <span class="token operator">=</span> <span class="token class-name">NSValue</span><span class="token punctuation">(</span>cgPoint<span class="token punctuation">:</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
animation<span class="token punctuation">.</span>duration <span class="token operator">=</span> <span class="token number">1</span>
layer<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>animation<span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>总结：隐式动画适用于简单和常规的动画，而显示动画则适用于需要更复杂和定制的动画效果的情况。</p></details><h4 id="❓做一些基于-calayer-的动画时-有时需要设置-layer-的锚点来配合动画-需要注意什么" tabindex="-1"><a class="header-anchor" href="#❓做一些基于-calayer-的动画时-有时需要设置-layer-的锚点来配合动画-需要注意什么" aria-hidden="true">#</a> ❓做一些基于 <code>CALayer</code> 的动画时，有时需要设置 <code>layer</code> 的锚点来配合动画，需要注意什么</h4><details class="hint-container details"><summary>💡</summary><p><code>CALayer</code> 的锚点 (<code>anchorPoint</code>) 属性决定了图层的哪一点会被放在 <code>position</code> 所指的位置，也就是图层的旋转，缩放等变换动画都是围绕这个点进行的。其默认值为(0.5, 0.5)，代表图层的中心点。</p><p>注意点：</p><ul><li><p>位置变化：锚点的改变会导致图层的位置移动，因为系统会自动将图层的 <code>anchorPoint</code> 放到图层的 <code>position</code> 所指的位置。因此，当改变锚点时，可能会看到图层 “跳跃” 到新位置。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token comment">// 如果不希望图层移动，那么就需要在改变 anchorPoint 后，相应地调整图层的 position</span>
layer<span class="token punctuation">.</span>anchorPoint <span class="token operator">=</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span>  
layer<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>布局影响：如果有基于图层的 <code>Auto Layout</code> 约束，改变 <code>anchorPoint</code> 可能会破坏这些约束。</p></li><li><p>动画影响：由于图层的旋转，缩放等变化动画都是围绕 <code>anchorPoint</code> 进行的，修改此点也会影响这些动画的表现。</p></li><li><p>几何形状：<code>anchorPoint</code> 的值的范围是在 <code>[0, 1]</code> 之间，表示在图层的大小中的相对位置，而不是具体的像素点。</p></li></ul></details><h4 id="❓core-animation-的实现原理" tabindex="-1"><a class="header-anchor" href="#❓core-animation-的实现原理" aria-hidden="true">#</a> ❓<code>Core Animation</code> 的实现原理</h4><details class="hint-container details"><summary>💡</summary><p>工作原理：</p><ul><li><p>图层树（<code>Layer Tree</code>）: 所有可见内容的模型，每一个 <code>UIView</code> 都有一个对应的 <code>CALayer</code>。图层树中的元素可以改变，这包括它们的位置、大小、内容等等。</p></li><li><p>呈现树（<code>Presentation Tree</code>）: 当前屏幕上显示的内容的近似模型。它代表了图层树在任何给定的时间点的可视状态。</p></li><li><p>渲染树（<code>Render Tree</code>）: 这是 <code>Core Animation</code> 来创建屏幕上实际像素的模型。渲染树包含了图层树的复制品，并添加了如阴影、形状等等内容。</p></li></ul><p>在动画过程中 <code>Core Animation</code> 会在各个帧之间对图层树的改变进行插值，并更新呈现树和渲染树，然后把最后的结果渲染到屏幕上。这个过程中会尽量复用尽可能多的像素，减少重绘的数量，从而提高动画的流畅度和性能。</p></details><h4 id="❓core-animation-实现交互效果-比如让动画播放一半-点击让它停止" tabindex="-1"><a class="header-anchor" href="#❓core-animation-实现交互效果-比如让动画播放一半-点击让它停止" aria-hidden="true">#</a> ❓<code>Core Animation</code> 实现交互效果(比如让动画播放一半, 点击让它停止)</h4><details class="hint-container details"><summary>💡</summary><p>要使用 <code>Core Animation</code> 来实现交互（如在动画过程中点击停止），需要访问和控制当前正在进行的动画。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">var</span> isPaused <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token comment">// 用于追踪动画是否已暂停</span>

<span class="token keyword">func</span> <span class="token function-definition function">toggleAnimation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> layer <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>myView<span class="token punctuation">.</span>layer
    <span class="token keyword">if</span> isPaused <span class="token punctuation">{</span>
        <span class="token comment">// 恢复动画</span>
        <span class="token keyword">let</span> pausedTime <span class="token operator">=</span> layer<span class="token punctuation">.</span>timeOffset
        layer<span class="token punctuation">.</span>speed <span class="token operator">=</span> <span class="token number">1.0</span>
        layer<span class="token punctuation">.</span>timeOffset <span class="token operator">=</span> <span class="token number">0.0</span>
        layer<span class="token punctuation">.</span>beginTime <span class="token operator">=</span> <span class="token number">0.0</span>
        <span class="token keyword">let</span> timeSincePause <span class="token operator">=</span> layer<span class="token punctuation">.</span><span class="token function">convertTime</span><span class="token punctuation">(</span><span class="token class-name">CACurrentMediaTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> from<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span> <span class="token operator">-</span> pausedTime
        layer<span class="token punctuation">.</span>beginTime <span class="token operator">=</span> timeSincePause
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 暂停动画</span>
        <span class="token keyword">let</span> pausedTime <span class="token operator">=</span> layer<span class="token punctuation">.</span><span class="token function">convertTime</span><span class="token punctuation">(</span><span class="token class-name">CACurrentMediaTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> from<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span>
        layer<span class="token punctuation">.</span>speed <span class="token operator">=</span> <span class="token number">0.0</span>
        layer<span class="token punctuation">.</span>timeOffset <span class="token operator">=</span> pausedTime
    <span class="token punctuation">}</span>
    isPaused <span class="token operator">=</span> <span class="token operator">!</span>isPaused
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><hr><h2 id="渲染" tabindex="-1"><a class="header-anchor" href="#渲染" aria-hidden="true">#</a> 渲染</h2><h3 id="❓ui-的渲染步骤" tabindex="-1"><a class="header-anchor" href="#❓ui-的渲染步骤" aria-hidden="true">#</a> ❓<code>UI</code> 的渲染步骤</h3><details class="hint-container details"><summary>💡</summary><p><code>UI</code> 的渲染步骤：</p><ul><li><p>布局阶段：<code>UIKit</code> 会计算出所有的视图的大小和位置。这个过程涉及到 <code>AutoLayout</code> 和 <code>Core Animation</code>，视图的位置和大小会被更新，同时所有的视图约束也会得到满足。对于 <code>UIView</code>，这一步涉及到了 <code>layoutSubviews</code> 方法。</p></li><li><p>显示阶段：所有需要的视图都会被调用 <code>drawRect:</code> 方法进行绘制。这里会调用 <code>Core Graphics</code> 来进行实际的绘制操作，在视图的 <code>layer</code> 上生成一张 <code>bitmap</code> 图片代表这个视图。</p></li><li><p>准备阶段：这一步主要是将所有的 <code>Core Animation</code> 动画提交给渲染服务器。</p></li><li><p>渲染阶段：</p><ul><li>这一步会进行事务的提交，所有的 <code>layer tree</code> 结构会在主线程中拷贝一份到渲染线程。</li><li>然后，渲染线程会将视图的 <code>layer tree</code> 全部转换为 <code>OpenGL</code> 命令或者 <code>Metal</code> 命令，最后将其提交给 <code>GPU</code>。</li><li><code>GPU</code> 会进行实际的绘制操作，包括光栅化、混合等步骤，最后将渲染结果显示到屏幕上。</li></ul></li></ul><p>在整个渲染过程中，对 <code>CPU</code> 和 <code>GPU</code> 的使用是需要权衡的。对于由 <code>CPU</code> 进行的布局和显示工作，如果过于复杂，可能导致帧率下降，因为 <code>CPU</code> 无法在每帧刷新的时间限制内完成所有工作。对于 <code>GPU</code> 来说，过于复杂的渲染操作也可能导致性能问题，比如复杂的渲染效果或者过深的视图层次都可能导致 <code>GPU</code> 无法及时完成渲染。</p><p>总结：<code>UIKit 布局</code> =&gt; <code>Display</code> =&gt; <code>Prepare</code> =&gt; <code>Core Animation 提交事务</code> =&gt; <code>GPU 渲染</code>。整个过程如果在 16.7ms 之内完成，就能保证界面动画的流畅性。如果超过这个时间，就会出现丢帧卡顿现象。所以在开发中要尽量优化布局和渲染过程，避免过于复杂的操作。</p></details><h3 id="❓什么是屏幕渲染" tabindex="-1"><a class="header-anchor" href="#❓什么是屏幕渲染" aria-hidden="true">#</a> ❓什么是屏幕渲染</h3><details class="hint-container details"><summary>💡</summary><table><thead><tr><th>渲染类型</th><th>说明</th></tr></thead><tbody><tr><td><code>CPU</code> 渲染</td><td>简单视图 <code>CPU</code> 渲染可能高于 <code>GPU</code> (不需要创建缓冲区和上下文切换)</td></tr><tr><td><code>GPU</code> 渲染</td><td><code>GPU</code> 浮点运算能力强于 <code>CPU</code>，所以 <code>GPU</code> 渲染效率高于 <code>CPU</code></td></tr></tbody></table><ul><li><p>屏幕渲染(<code>On-Screen Rendering</code>) : 在当前屏幕的缓冲区进行渲染。</p><blockquote><p>优点：不需要创建新的缓存，也不需要进行上下文切换，性能较好；缺点：缓存大小受限制，无法进行复杂的操作。</p></blockquote></li><li><p>离屏渲染(<code>Off-Screen Rendering</code>) : <code>GPU</code> 在当前屏幕外，新开辟了一个缓冲区进行图片的渲染和合成。</p><blockquote><p>渲染完成之后再放入当前屏幕的缓冲区。这个过程需要 <code>CPU</code> 调度，将任务分配给 <code>GPU</code> 进行渲染然后再将渲染结果返回，需要进行上下文切换和内存读写等操作，对性能影响较大。</p></blockquote></li></ul></details><h3 id="❓哪些场景可以触发离屏渲染" tabindex="-1"><a class="header-anchor" href="#❓哪些场景可以触发离屏渲染" aria-hidden="true">#</a> ❓哪些场景可以触发离屏渲染</h3><details class="hint-container details"><summary>💡</summary><blockquote><p>离屏渲染：图形或文字无法在当前屏幕缓冲区完成渲染，需要额外创建一个图形缓冲区进行操作，完成后再加载到当前屏幕缓冲区显示。</p></blockquote><p><code>iOS</code> 以下几种场景会触发离屏渲染：</p><ul><li><p>使用阴影效果：如果给 <code>UIView</code> 添加阴影效果，会触发离屏渲染。如果可以的话，使用 <code>shadowPath</code> 来指定阴影路径，可以避免离屏渲染。</p><blockquote><p><code>layer.shadowXXX</code></p></blockquote></li><li><p>使用圆角效果：对 <code>UIView</code> 的图层进行圆角裁剪(<code>cornerRadius</code>)时，如果同时设置了 <code>masksToBounds</code> 也会触发离屏渲染。</p><blockquote><p><code>layer.masksToBounds = true &amp; layer.cornerRadius &gt; 0</code></p></blockquote></li><li><p>使用遮罩(mask)：<code>CALayer</code> 的 <code>mask</code> 属性可以设置遮罩，给视图层添加遮罩也会触发离屏渲染。</p><blockquote><p><code>layer.mask</code></p></blockquote></li><li><p>使用光栅化：<code>shouldRasterize</code> 属性可以将图层缓存为位图并在 <code>GPU</code> 中重用，但这同时也会触发离屏渲染。</p><blockquote><p><code>layer.shouldRasterize = true</code></p></blockquote></li><li><p>抗锯齿：设置视图的 <code>layer</code> 的 <code>allowsEdgeAntialiasing</code> 属性为 <code>true</code> 会触发离屏渲染。因为抗锯齿需要对视图的边缘像素进行额外的计算和混合，这些操作不能在当前屏幕的缓冲区完成，因此需要离屏渲染。所以，在大部分情况下，如果不是对视觉效果有非常高要求，通常不推荐开启抗锯齿，因为这会增加GPU压力，降低性能。</p><blockquote><p><code>layer.allowsEdgeAntialiasing = true</code></p></blockquote></li><li><p>不透明度：设置视图的 <code>alpha</code> 值本身不会触发离屏渲染。但是有一种场景需要注意，那就是对有子视图的视图设置 <code>alpha</code> 值，并且该视图的 <code>opaque</code> 属性为 <code>true</code> 时，可能会造成额外的离屏渲染。这是因为系统需要先单独绘制这个视图和它的子视图到一个临时的缓冲区，然后将这个临时的缓冲区以指定的 <code>alpha</code> 值（也就是透明度）绘制到屏幕上。因此，为了避免这种离屏渲染，当你需要设置视图的<code>alpha</code> 值时，应该设置它的 <code>opaque</code> 属性为 <code>false</code>。</p><blockquote><p><code>opacity &amp; opaque = true</code></p></blockquote></li></ul><p>离屏渲染对系统资源消耗比较大，因为它需要创建新的缓冲区，进行上下文切换，最后再把缓冲区的内容载入到屏幕缓冲区。如果在一个视图中使用过多的离屏渲染，可能会导致性能问题，所以在开发过程中需要尽量避免触发离屏渲染。</p></details><h3 id="❓什么是异步渲染" tabindex="-1"><a class="header-anchor" href="#❓什么是异步渲染" aria-hidden="true">#</a> ❓什么是异步渲染</h3><details class="hint-container details"><summary>💡</summary><blockquote><p>异步渲染是 <code>iOS</code> 中一种优化应用性能的技术手段，主要用于长列表或图形密集型应用的性能提升。</p></blockquote><p>在 <code>iOS</code> 应用中，当用户在屏幕上打开了一个应用，系统会以每秒 60 帧的速率将用户界面刷新显示出来。在每一帧的绘制中，通常需要经过以下步骤： 布局计算（<code>layout</code>）、视图绘制(<code>display</code>)、渲染(<code>render</code>)、提交(<code>commit</code>)。这一系列动作默认都在主线程(<code>Main thread</code>)执行，一旦有一帧没有在这个时间段（大约 16.7 ms）内完成，就会出现掉帧现象，用户感受到的就是界面卡顿。</p><p>异步绘制就是将掉在主线程的绘制任务放在其他线程中执行，这样通过分解任务，让主线程有足够的时间处理用户的交互操作，进而提高应用的流畅度。这样做的好处就是可以充分利用多核 <code>CPU</code>，同时避免阻塞主线程。</p><p>注：<code>Texture</code>（原名<code>ASDK</code>）就是 <code>facebook</code> 开源的 <code>iOS</code> 库，提供了一套异步渲染和异步布局的解决方案，可以让开发者更方便地在后台线程完成界面的渲染工作，有效提升了应用的性能。</p></details><hr><h2 id="事件响应" tabindex="-1"><a class="header-anchor" href="#事件响应" aria-hidden="true">#</a> 事件响应</h2><h3 id="❓用户点击屏幕上按钮-整个过程讲一下" tabindex="-1"><a class="header-anchor" href="#❓用户点击屏幕上按钮-整个过程讲一下" aria-hidden="true">#</a> ❓用户点击屏幕上按钮，整个过程讲一下</h3><details class="hint-container details"><summary>💡</summary><ul><li><p>当用户触摸屏幕时，硬件会将触摸事件转化为一个或一系列的 <code>UITouch</code> 对象，并将它们与一次特定的事件(<code>UIEvent</code>对象)关联起来。系统会将触摸事件派发给对应的 <code>UIApplication</code> 对象。</p></li><li><p><code>UIApplication</code> 对象接收到触摸事件后，会将事件传递给合适的 <code>UIWindow</code> 对象。<code>UIWindow</code> 对象再将其分发给正在显示的、并且能够响应事件的 <code>UIView</code> 对象。</p></li><li><p>如果此 <code>UIView</code> 对象就是所点击的视图(如：按钮 <code>UIButton</code> 对象)，那么此按钮会接收到此点击事件。</p></li><li><p><code>UIButton</code> 对象接收到手势事件后，便会根据事件类型来调用对应的方法。</p></li><li><p>若 <code>UIButton</code> 对象存在 <code>UIControl</code> 事件（比如 <code>TouchUpInside</code>）并且挂接有对应的 <code>Action</code>（函数方法），那么系统就会执行这个 <code>Action</code>。</p></li></ul></details><h3 id="响应链" tabindex="-1"><a class="header-anchor" href="#响应链" aria-hidden="true">#</a> 响应链</h3><h4 id="❓第一响应者是谁" tabindex="-1"><a class="header-anchor" href="#❓第一响应者是谁" aria-hidden="true">#</a> ❓第一响应者是谁</h4><details class="hint-container details"><summary>💡</summary><blockquote><p>&quot;第一响应者&quot;：指当前接收并处理用户事件或者用户输入的对象，例如触摸事件、键盘输入等等。可以成为第一响应者的对象主要有 <code>UIView</code>、<code>UIViewController</code> 以及其子类。</p></blockquote><p>🌰 当用户在一个文本框（<code>UITextField</code>）中输入文本的时候，这个文本框就是第一响应者，因为它是当前接收并处理键盘输入的对象。</p><p>同一个时间点上，只能有一个对象是第一响应者。第一响应者可以通过调用 <code>resignFirstResponder</code> 方法来放弃第一响应者的身份，同时其他对象可以通过调用 <code>becomeFirstResponder</code> 方法来成为新的第一响应者。</p><p><code>UIResponder</code> 是负责处理触摸事件、运动事件（如摇晃设备等）以及远程控制事件的基类，<code>UIView</code> 和 <code>UIViewController</code> 都是 <code>UIResponder</code> 的子类。所以，应用中的各种交互和操作的响应，都是由经过了一系列响应者对象链条的传递和处理来完成的，称为 <code>responder chain</code> 第一响应者就是这个链条的起点。</p></details><h4 id="❓uiview-和-uiresponse-的关系是什么" tabindex="-1"><a class="header-anchor" href="#❓uiview-和-uiresponse-的关系是什么" aria-hidden="true">#</a> ❓<code>UIView</code> 和 <code>UIResponse</code> 的关系是什么</h4><details class="hint-container details"><summary>💡</summary><blockquote><p>继承关系，<code>UIView</code> 是 <code>UIResponder</code>的子类。</p></blockquote><ul><li><p><code>UIResponder</code>是一个抽象的基类，它为处理和转发触摸事件、运动事件（例如：摇晃设备）、远程控制事件（例如：耳机控制）等提供了基本的行为。所有能够处理上述事件的类，如 <code>UIView</code>、<code>UIViewController</code>，甚至 <code>UIApplication</code> 都是 <code>UIResponder</code> 的子类。</p></li><li><p><code>UIView</code> 是 <code>iOS</code> 界面元素中最核心的一个类，它继承自 <code>UIResponder</code>，所以 <code>UIView</code> 除了具有显示视图的功能之外，同时也能够接收并处理用户的触摸事件，或者将它转发出去。</p></li></ul><p>总结：<code>UIView</code> 是一个既可以视觉呈现，又可以接收和处理用户触摸事件的类，这种特性就是由于继承了 <code>UIResponder</code> 而来。</p></details><h4 id="❓如何通过一个-uiview-如何快速拿到显示它的控制器" tabindex="-1"><a class="header-anchor" href="#❓如何通过一个-uiview-如何快速拿到显示它的控制器" aria-hidden="true">#</a> ❓如何通过一个 <code>UIView</code> 如何快速拿到显示它的控制器</h4>`,143),B={class:"hint-container details"},O=i("<summary>💡</summary><blockquote><p>在 <code>iOS</code> 开发中，<code>UIView</code> 没有直接的属性或者方法可以获取到其所在的 <code>UIViewController</code>。但可以通过响应者链条（<code>Responder Chain</code>）遍历获取到当前 <code>View</code> 的 <code>controller</code>。</p></blockquote>",2),G=n("div",{class:"language-swift line-numbers-mode","data-ext":"swift"},[n("pre",{class:"language-swift"},[n("code",null,[n("span",{class:"token keyword"},"extension"),s(),n("span",{class:"token class-name"},"UIView"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"var"),s(" viewController"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"UIViewController"),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"var"),s(" next"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"UIResponder"),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"self"),s(`
        `),n("span",{class:"token keyword"},"while"),s(" next "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token nil constant"},"nil"),s(),n("span",{class:"token punctuation"},"{"),s(`
            next `),n("span",{class:"token operator"},"="),s(" next"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),s(`next
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token keyword"},"let"),s(" vc "),n("span",{class:"token operator"},"="),s(" next "),n("span",{class:"token keyword"},"as"),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token class-name"},"UIViewController"),s(),n("span",{class:"token punctuation"},"{"),s(`
                `),n("span",{class:"token keyword"},"return"),s(` vc
            `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token nil constant"},"nil"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),F=i(`<h4 id="❓传递链-vs-响应链" tabindex="-1"><a class="header-anchor" href="#❓传递链-vs-响应链" aria-hidden="true">#</a> ❓传递链 vs 响应链</h4><details class="hint-container details"><summary>💡</summary><ul><li><p>事件传递链：一次用户交互（比如点击、滑动等）触发的事件会从顶级视图开始，沿着视图层级结构传递，直到有视图响应该事件，这就构成了一条事件传递链。</p><blockquote><p>事件的传递顺序为：<code>UIWindow --&gt; 顶部视图 --&gt; 子视图 --&gt; ...直到找到能够处理此事件的最合适的视图</code></p></blockquote><ul><li>当用户触摸屏幕产生一个触摸事件，事件首先会被发送到 <code>UIApplication</code> 对象。</li><li><code>UIApplication</code> 对象会将事件发送给 <code>keyWindow</code>，这是传递链的顶层。</li><li><code>UIWindow</code> 对象会判断是否需要自身处理该事件，如果需要处理，事件就停止传递，进入响应链进行处理。否则，<code>UIWindow</code> 对象会将事件传递给它的子视图。</li><li>子视图按从上到下的顺序依次接收事件，检查是否需要自己来处理。如果需要，它就停止传递并进行处理。否则，继续向它的子视图传递。</li><li>最后，这个过程不断递归，直到找到一个能处理此事件的视图或所有可能的视图都被检查过。</li><li>如果没有任何视图处理这个事件，事件将会被丢弃。</li></ul></li><li><p>事件响应链(<code>Event Responder Chain</code>)：一旦有视图开始响应事件，那么这个事件就会从这个视图开始，沿着 <code>UIKit</code> 框架的响应者链条向上传递，至于响应者链条的结束位置，取决于当前视图的 <code>nextResponder</code> 是谁，最后会到达 <code>UIApplication</code>，如果 <code>UIApplication</code> 也不能处理该事件，那么事件将被丢弃。</p><blockquote><p>事件的响应顺序为：<code>响应视图 --&gt; 父视图 --&gt; ... --&gt; 控制器 --&gt; UIWindow --&gt; UIApplication --&gt; 丢弃</code></p></blockquote></li></ul></details><h4 id="❓响应者链条-一个视图不响应的原因" tabindex="-1"><a class="header-anchor" href="#❓响应者链条-一个视图不响应的原因" aria-hidden="true">#</a> ❓响应者链条，一个视图不响应的原因</h4><details class="hint-container details"><summary>💡</summary><blockquote><p>响应者链条（<code>Responder Chain</code>）是 <code>iOS</code> 中用来处理界面的 <code>touch</code>、<code>motion</code>、键盘事件的机制。每个事件有一个接收者，叫做第一响应者 (<code>First Responder</code>)，由 <code>UIApplication</code> 管理。如果该对象不能处理这个事件，那么它会沿着响应者链向上查找可以处理这个事件的响应者。</p></blockquote><p>一个视图不响应的原因：</p><ul><li><p><code>userInteractionEnabled</code> 属性被设置为 <code>false</code>。</p><blockquote><p>默认情况下，所有 <code>UIView</code> 对象的 <code>userInteractionEnabled</code> 属性为 <code>true</code>。但是如果手动设置为 <code>false</code>，这个视图和它的所有子视图都不能再响应用户的操作。</p></blockquote></li><li><p>视图隐藏或者透明度极低</p><blockquote><p>视图的 <code>hidden</code> 属性设为 <code>YES</code> 或者 <code>alpha</code> 的值小于 0.01，这个视图除非成为第一响应者，否则对事件无响应。</p></blockquote></li><li><p>视图被其它视图遮挡。</p><blockquote><p>如果视图 A 被视图 B 完全或者部分遮挡，并且覆盖部分位于用户点击的位置，那么这个事件将被视图 B 捕获。</p></blockquote></li><li><p>视图超出超视图 <code>bounds</code>。</p><blockquote><p>当视图自身超出其父视图的区域范围，超出部分不再响应事件。</p></blockquote></li><li><p>视图不在视图层级中。</p><blockquote><p>如果视图还未被添加（或被移除）到视图层级中，那么它将不能响应事件。</p></blockquote></li></ul></details><h4 id="❓叠在一起的两个-view-哪个会响应" tabindex="-1"><a class="header-anchor" href="#❓叠在一起的两个-view-哪个会响应" aria-hidden="true">#</a> ❓叠在一起的两个 <code>View</code> 哪个会响应</h4><details class="hint-container details"><summary>💡</summary><ul><li><p>视图的层次结构：如果两个视图A和B叠在一起，那么对事件的响应权取决于这两个视图在其父视图中的添加顺序。</p><blockquote><p><code>UIView</code> 的子视图是按照数组的顺序存放的，后添加的子视图会在数组的后面，而响应事件的优先级则是从数组的后面向前遍历的。所以如果视图A是后添加到其父视图中，那么视图A会遮挡住视图B，并捕获并处理用户的触摸事件。</p></blockquote></li><li><p>z 轴的高度：如果为视图设置了<code>layer.zPosition</code>，可以改变视图在z轴上的位置，<code>zPosition</code> 值越大，视图越靠前，更可能接收到事件。</p></li></ul></details><blockquote><p>❓如果不想让上面的 <code>View</code> 响应，怎么解决</p></blockquote><details class="hint-container details"><summary>💡</summary><ul><li><p>设置<code>userInteractionEnabled</code>属性为<code>false</code>。</p><blockquote><p>这将禁用用户在上面的视图上的交互，把事件传递到它下面的视图。</p></blockquote><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code>topView<span class="token punctuation">.</span>userInteractionEnabled <span class="token operator">=</span> <span class="token boolean">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>重载上面视图的 <code>hitTest:withEvent:</code> 方法。</p><blockquote><p>它的目的是找到能响应事件的最佳视图。你可以重写这个方法，让它返回下面的视图。</p></blockquote><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">hitTest</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> point<span class="token punctuation">:</span> <span class="token class-name">CGPoint</span><span class="token punctuation">,</span> with event<span class="token punctuation">:</span> <span class="token class-name">UIEvent</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">UIView</span><span class="token operator">?</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> hitView <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">hitTest</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> with<span class="token punctuation">:</span> event<span class="token punctuation">)</span>
    <span class="token keyword">if</span> hitView <span class="token operator">==</span> <span class="token keyword">self</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> beneathView
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> hitView
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>重写视图的 <code>pointInside:withEvent:</code> 方法，此方法用于检查触摸点是否在视图内。</p><blockquote><p>如果点在上面的视图外，触摸事件就会传递给它的底层视图。</p></blockquote><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">point</span><span class="token punctuation">(</span>inside point<span class="token punctuation">:</span> <span class="token class-name">CGPoint</span><span class="token punctuation">,</span> with event<span class="token punctuation">:</span> <span class="token class-name">UIEvent</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Bool</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在这里检查点是否在你想要的区域内</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></details><blockquote><p>❓如果两个 <code>View</code> 都要响应呢</p></blockquote><details class="hint-container details"><summary>💡</summary><ul><li><p>自定义 <code>UIView</code> 子类并重写 <code>hitTest</code> 方法或者 <code>pointInside:withEvent:</code> 方法来决定哪个视图需要处理接收到的触摸事件。</p></li><li><p>在一个父视图中进行触摸事件的处理并在适当的时候传递给子视图。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">hitTest</span><span class="token punctuation">(</span>point<span class="token punctuation">:</span> <span class="token class-name">CGPoint</span><span class="token punctuation">,</span> withEvent event<span class="token punctuation">:</span> <span class="token class-name">UIEvent</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">UIView</span><span class="token operator">?</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> view <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">hitTest</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> withEvent<span class="token punctuation">:</span> event<span class="token punctuation">)</span>
    <span class="token keyword">if</span> view <span class="token operator">==</span> <span class="token keyword">self</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> otherView<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> view
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></details><h3 id="hittest" tabindex="-1"><a class="header-anchor" href="#hittest" aria-hidden="true">#</a> hitTest</h3><h4 id="❓hittest-和-pointinside-的关系" tabindex="-1"><a class="header-anchor" href="#❓hittest-和-pointinside-的关系" aria-hidden="true">#</a> ❓<code>hitTest</code> 和 <code>pointInside</code> 的关系</h4><details class="hint-container details"><summary>💡</summary><ul><li><p><code>hitTest:withEvent:</code> 是用来确定触摸事件应该由哪个子视图处理的方法。</p><blockquote><p>当用户触摸屏幕时，<code>UIKit</code> 会询问顶级视图来找出正确的视图处理事件。它会调用 <code>hitTest:withEvent:</code> 把触摸点的坐标和触摸事件作为参数传入。</p></blockquote></li><li><p><code>hitTest:withEvent:</code> 方法的实现通常会调用 <code>pointInside:withEvent:</code> 来检查触摸点是否在视图的 <code>bounds</code> 内。</p><blockquote><p>如果 <code>pointInside:withEvent:</code> 返回 <code>true</code>，那么 <code>hitTest:withEvent:</code> 就会返回这个视图，表示这个视图可以接收并处理这个触摸事件。</p></blockquote></li><li><p>如果视图是一个容器视图，并且包含其他子视图，<code>hitTest:withEvent:</code> 的实现通常会遍历所有的子视图，并且这个遍历通常是按照反序进行（也就是从顶层子视图到底层子视图）。</p><ul><li>对于每个子视图，都会调用 <code>hitTest:withEvent:</code>。如果这个方法返回了一个非 <code>nil</code> 的视图，那么遍历就会立即停止，并且这个被返回的视图会被认为是最合适处理这次触摸事件的视图。</li><li>如果 <code>pointInside:withEvent:</code> 对所有子视图都返回 <code>false</code>，那么 <code>hitTest:withEvent:</code> 也就会返回 <code>nil</code>，表示这个视图和它的子视图都没有接收这次触摸事件。</li></ul></li></ul></details><h4 id="❓hittest-有重写吗" tabindex="-1"><a class="header-anchor" href="#❓hittest-有重写吗" aria-hidden="true">#</a> ❓<code>hitTest</code> 有重写吗</h4><details class="hint-container details"><summary>💡</summary><p><code>hitTest:withEvent:</code> 可以在子类中重新实现，以更改触摸事件处理的默认行为。默认的实现会遍历视图层次结构，找出在给定点的视图，可以通过重写这个方法来定制这一行为。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token comment">// 扩大了一个视图的触摸区域</span>
<span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">hitTest</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> point<span class="token punctuation">:</span> <span class="token class-name">CGPoint</span><span class="token punctuation">,</span> with event<span class="token punctuation">:</span> <span class="token class-name">UIEvent</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">UIView</span><span class="token operator">?</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> biggerRect <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>bounds<span class="token punctuation">.</span><span class="token function">insetBy</span><span class="token punctuation">(</span>dx<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">,</span> dy<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> biggerRect<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">self</span> <span class="token punctuation">:</span> <span class="token nil constant">nil</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="情景题" tabindex="-1"><a class="header-anchor" href="#情景题" aria-hidden="true">#</a> 情景题</h3><h4 id="❓a-的子视图-b-b-里有一个按钮-c-c-的显示范围超出了-b-点击超出范围的-b-会有响应吗" tabindex="-1"><a class="header-anchor" href="#❓a-的子视图-b-b-里有一个按钮-c-c-的显示范围超出了-b-点击超出范围的-b-会有响应吗" aria-hidden="true">#</a> ❓A 的子视图 B，B 里有一个按钮 C，C 的显示范围超出了 B，点击超出范围的 B 会有响应吗</h4><details class="hint-container details"><summary>💡</summary><p>视图的用户交互区域默认只限制在其范围内，也就是说，如果一个子视图的部分被绘制在其父视图的范围之外，那么只有在子视图范围内的部分能接收到用户的触摸事件。</p><p>按钮 C 的一部分超出了其父视图 B 的范围，那么对于这部分超出范围的区域，即使用户点击了，也不会触发按钮 C 的点击事件。也就是说，当点击超出 B 视图范围的 C 按钮部分时，按钮 C 不会响应。</p><p>注：有一种例外情况，即当父视图重写了 <code>-(UIView *)hitTest:withEvent:</code> 或者 <code>- (BOOL)pointInside:withEvent:</code> 方法，可以让超出父视图范围的子视图接收到触摸事件。在默认情况下，一个视图只能在其 <code>frame</code> 之内接收和响应用户的触摸事件。但如果重写了上述方法，就可以手动改变这个行为。</p></details>`,18);function N(z,W){const e=l("ExternalLinkIcon"),p=l("CodeTabs");return r(),k("div",null,[d(" more "),v,n("ul",null,[n("li",null,[n("a",b,[s("2015-12-08 如何正确地写好一个界面"),a(e)])]),n("li",null,[n("a",h,[s("2015-05-25 如何设计一个 iOS 控件?(iOS 控件完全解析)"),a(e)])]),n("li",null,[n("a",w,[s("2015-05-17 优化"),y,s("高度计算的那些事"),a(e)])]),n("li",null,[n("a",g,[s("2014-12-25 "),f,s(" 实践经验"),a(e)])])]),d(" 事件传递 "),n("ul",null,[n("li",null,[I,n("a",U,[s("2020-12-14 iOS | 响应链及手势识别"),a(e)])]),n("li",null,[V,n("a",C,[s("2020-11-13 iOS | 事件传递及响应链"),a(e)])]),n("li",null,[q,n("a",x,[s("2017-11-17 iOS 触摸事件全家桶"),a(e)])])]),A,n("details",S,[T,n("ul",null,[n("li",null,[L,P,a(p,{id:"479",data:[{id:"手动设置 frame"},{id:"AutoLayout:"}]},{title0:o(({value:t,isActive:c})=>[s("手动设置 frame")]),title1:o(({value:t,isActive:c})=>[s("AutoLayout:")]),tab0:o(({value:t,isActive:c})=>[_]),tab1:o(({value:t,isActive:c})=>[R]),_:1})]),D])]),E,n("details",B,[O,a(p,{id:"2248",data:[{id:"swift"}]},{title0:o(({value:t,isActive:c})=>[s("swift")]),tab0:o(({value:t,isActive:c})=>[G]),_:1})]),F])}const j=u(m,[["render",N],["__file","0x03.uikit.html.vue"]]);export{j as default};
