import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as d,c as o,a,f as c}from"./app--AVddLJq.js";const i={},r=c('<hr><h2 id="综合性问题" tabindex="-1"><a class="header-anchor" href="#综合性问题" aria-hidden="true">#</a> 综合性问题</h2><h3 id="❓ios-设备获取唯一设备号的历史变迁" tabindex="-1"><a class="header-anchor" href="#❓ios-设备获取唯一设备号的历史变迁" aria-hidden="true">#</a> ❓<code>iOS</code> 设备获取唯一设备号的历史变迁</h3><details class="hint-container details"><summary>💡</summary><ul><li><p><code>UDID</code>（Unique Device Identifier）：在<code>iOS 5</code>之前，可以直接使用 <code>[UIDevice currentDevice].uniqueIdentifier</code> 来获取设备的 <code>UDID</code>，它是一个40位的十六进制序列，由设备的各种硬件信息生成，每台设备唯一。然而，由于隐私问题，<code>Apple</code> 在 <code>iOS 5</code> 及以后的版本中废弃了这个 <code>API</code>。</p></li><li><p><code>MAC</code> 地址：因为 <code>UDID</code> 被废弃，部分开发者开始使用设备的 <code>Wi-Fi chip</code> 的 <code>MAC</code> 地址作为替代。然而在 <code>iOS 7</code> 以后，<code>Apple</code> 也禁止了获取 <code>MAC</code> 地址，所有尝试获取的行为都会返回固定的&quot;02:00:00:00:00:00&quot;。</p></li><li><p><code>UUID</code>（Universally Unique Identifier）：<code>UUID</code> 是每次生成都不同的一串字符。在 <code>UDID</code> 和 <code>MAC</code> 地址都不能使用后，部分开发者开始产生一个 <code>UUID</code> 并将其存储在应用的 <code>KeyChain</code> 中，这样就可以保证同一台设备上不同的安装过程中获取的 <code>UUID</code> 相同。但是，如果应用被彻底删除后或者设备被重置后，之前的 <code>UUID</code> 将无法再被获取到。</p></li><li><p><code>IDFA</code>（Identifier for Advertisers）：在 <code>iOS 6</code> 及以后的版本中，<code>Apple</code> 引入了广告标识符 <code>IDFA</code>，主要用于广告商跟踪和标识用户。用户可以在设置中重置自己的 <code>IDFA</code>，或者完全关闭这个功能。</p></li><li><p><code>IDFV</code>（Identifier for Vendor）：在 <code>iOS 6</code> 及以后的版本中，<code>Apple</code> 也引入了 <code>IDFV</code>，这是一个针对同一开发者（<code>Vendor</code>）下的所有应用都相同的标识符。只有当用户将该厂商的所有应用全部删除后，这个标识符才会被重置。</p></li></ul><p>总结：为了保护用户隐私，<code>Apple</code> 不断的改变标识设备的方式，开发者必须适应这些变化并尊重用户的隐私。</p></details><h3 id="❓沙盒目录的每个文件夹划分的作用" tabindex="-1"><a class="header-anchor" href="#❓沙盒目录的每个文件夹划分的作用" aria-hidden="true">#</a> ❓沙盒目录的每个文件夹划分的作用</h3><details class="hint-container details"><summary>💡</summary><blockquote><p>沙盒(Sandbox)，每个应用都有一个自己的沙盒目录，其他应用应用或者外部环境无法访问该应用的沙盒。这是 <code>iOS</code> 保证用户数据隐私和安全的机制之一。在应用的沙盒内，又划分了一些目录文件夹，不同的目录有着不同的作用：</p></blockquote><ul><li><p><code>Documents</code>：用来存储用户创建或应用程序运行需要持久化的数据。<code>iTunes</code> 同步设备时会备份该目录内容。</p></li><li><p><code>tmp</code>：用于存放临时文件，当应用退出后，这个目录下的文件会被删除。所以有些临时产生的文件，如缓存的图片或者下载的临时的文件可以放在这里。</p></li><li><p><code>Library</code>：Library目录下有两个子目录，<code>Caches</code> 和 <code>Preferences</code>。其中 <code>Caches</code> 目录主要存放缓存文件，<code>Preferences</code> 目录主要存放应用的配置信息，这些数据在设备的设置应用中设置。此外，<code>Library</code> 还可以存放应用的其他一些持久性的文件。</p></li><li><p><code>Library/Caches</code>：保存应用程序使用时产生的需要持久化的数据，<code>iTunes</code> 不会备份该目录，此目录下文件不会在应用退出后删除。</p></li></ul></details><h3 id="❓苹果使用证书的目的是什么" tabindex="-1"><a class="header-anchor" href="#❓苹果使用证书的目的是什么" aria-hidden="true">#</a> ❓苹果使用证书的目的是什么</h3><details class="hint-container details"><summary>💡</summary><p>苹果使用证书的主要目的：为了保护开发者和用户的安全，以及确保应用的完整性和权威性。</p><ul><li><p><strong>身份验证：</strong> 给开发者提供了一种手段以证明自己的身份。证书包含了开发者的信息，因此可以被用于表示开发者的身份。</p></li><li><p><strong>数据加密：</strong> 证书包含了公钥，可以用于加密信息以保证数据的安全传输。</p></li><li><p><strong>代码签名：</strong> 开发者可以使用私钥来签名应用，用户可以使用开发者公钥来验证签名，确保应用没有被篡改并且确实来自预期的开发者。</p></li><li><p><strong>权限申请：</strong> 通过证书，开发者可以申请使用一些特定的功能，如推送通知、使用苹果支付等。</p></li><li><p><strong>应用分发：</strong> 在将应用提交给 <code>App Store</code> 审核或企业内部分发时，都需要对应用进行签名。并且，只有有效证书签名的应用才能被安装在 <code>iOS</code> 设备上。</p></li></ul></details><h3 id="❓apn-的基本原理" tabindex="-1"><a class="header-anchor" href="#❓apn-的基本原理" aria-hidden="true">#</a> ❓<code>APN</code> 的基本原理</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>APN</code>(<code>Apple Push Notification service</code>)是苹果公司开发的一套远程推送服务。其基本原理可以归纳如下几步：</p></blockquote><ul><li><p><strong>注册设备标识符 Device Token</strong>：当用户启动应用时，通过调用推送注册接口，注册设备推送标识符，然后调用服务器接口提交这个设备标识符。</p></li><li><p><strong>应用服务器向 Apple Push Notification Service 发送通知请求：</strong> 当应用需要向用户设备发送通知时，服务器会生成一个通知请求，包括设备标识符（<code>Device Token</code>）和通知内容，并将请求发送至苹果的推送通知服务。</p></li><li><p><strong>Apple Push Notification Service 将通知推送给目标设备：</strong> 当苹果的推送通知服务收到来自应用服务器的推送请求后，会根据提供的设备标识符将通知传送到目标设备。</p></li><li><p><strong>目标设备接收到通知：</strong> 当设备接收到苹果推送的通知后，会根据用户的设置和应用的状态来显示通知。</p><blockquote><p>例如，设备锁屏时，通知会显示在锁屏界面；设备解锁时，通知会显示在通知中心；如果应用正在前台运行，可以自定义是否显示通知。</p></blockquote></li><li><p><strong>用户点击通知：</strong> 用户在收到通知后可以选择直接点击打开，此时应用会收到一个打开通知的事件，可以根据需要做出相应的反应。</p></li></ul></details><h3 id="❓appstore-安装-app-时的认证流程" tabindex="-1"><a class="header-anchor" href="#❓appstore-安装-app-时的认证流程" aria-hidden="true">#</a> ❓<code>AppStore</code> 安装 <code>app</code> 时的认证流程</h3><details class="hint-container details"><summary>💡</summary><p>认证流程：</p><ul><li><p>开发者提交应用：开发者完成应用编写后，使用开发者证书进行代码签名，并提交给App Store进行审核。这个证书由苹果提供，并和开发者账户绑定，可以确保应用来源的可靠性。</p></li><li><p><code>App Store</code> 审核应用：苹果会对提交的应用进行审核，以确保应用的质量和安全性。这包括对应用的功能、性能、安全性、隐私保护等多个方面的评审。</p></li><li><p>用户下载和安装应用：审核通过后，应用就会出现在 <code>App Store</code> 上。用户在下载和安装应用时，<code>iOS</code> 系统会检查应用的签名和证书。这既包括开发者的证书，也包括 <code>App Store</code> 的证书，它们可以确保应用的来源和完整性。</p></li><li><p>应用运行：应用在安装后首次运行时，系统会进行一次额外的签名检查。此外，运行时的应用也需要遵守一些权限和用户设定的规范，否则可能会被系统限制其行为。</p></li></ul></details><hr><h2 id="xcode" tabindex="-1"><a class="header-anchor" href="#xcode" aria-hidden="true">#</a> Xcode</h2><h3 id="❓xcode-证书校验流程" tabindex="-1"><a class="header-anchor" href="#❓xcode-证书校验流程" aria-hidden="true">#</a> ❓<code>Xcode</code> 证书校验流程</h3><details class="hint-container details"><summary>💡</summary><p>在使用<code>Xcode</code>进行开发并打包应用进行发布时，证书（<code>Certificate</code>）和配置文件（<code>Provisioning Profile</code>）是必要的步骤。证书和配置文件能够验证开发者和应用的身份，并限制应用能够运行在哪些设备上。</p><p><code>Xcode</code> 进行应用打包的证书校验流程：</p><ul><li><p><strong>注册 Apple Developer 帐户：</strong> 首先需要在苹果开发者网站注册一名开发者帐户。</p></li><li><p><strong>创建开发者（Developer）和分发（Distribution）证书：</strong> 在苹果开发者网站里，需要创建一对开发者和分发用途的证书。开发者证书会在进行开发和调试应用时用到，分发证书将会在需要将应用提交到 <code>App Store</code> 或者 <code>Ad Hoc</code> 分发时用到。</p></li><li><p><strong>从 Keychain Access 中导出 .cer 文件：</strong> 在开发者网站中创建好证书后，会得到一个 <code>.cer</code> 文件。这个文件需要在<code>Keychain Access</code> （钥匙串访问）中进行安装。</p></li><li><p><strong>创建 App ID：</strong> 每一个应用都需要一个唯一的标识符，也就是 <code>App ID</code>。需要在开发者网站创建一个 <code>App ID</code>，并且连接到你的证书。</p></li><li><p><strong>创建配置文件（Provisioning Profile）：</strong> 这个文件包含了你的证书，<code>App ID</code> 以及能够调试的设备列表。开发版和分发版的配置文件都需要创建。</p></li><li><p><strong>在 Xcode 中安装证书和配置文件：</strong> 将从开发者网站下载的配置文件直接拖入到 <code>Xcode</code> 中，<code>Xcode</code> 会自动安装并将它与你的证书进行关联。</p></li><li><p><strong>在 Xcode 中选择正确的证书和配置文件进行打包：</strong> 在进行打包（<code>Archive</code>）操作之前，需要设置正确的 <code>bundle ID</code>，然后 <code>Xcode</code> 会自动选择相匹配的证书和配置文件等设置。</p></li><li><p><strong>分发应用：</strong> 如果证书和配置文件没有问题，那么 <code>Xcode</code> 会顺利的打包出应用，并且能够提交到 <code>App Store</code> 或 <code>Ad Hoc</code> 设备中进行安装。</p></li></ul></details><h3 id="❓xcode-打包流程" tabindex="-1"><a class="header-anchor" href="#❓xcode-打包流程" aria-hidden="true">#</a> ❓<code>Xcode</code> 打包流程</h3><details class="hint-container details"><summary>💡</summary><ul><li><p><strong>清理 Build 目录：</strong> 在点击 <code>Xcode</code> 顶部菜单栏的 <code>Product</code> 选项下面，选择 <code>Clean</code> 开始进行清理。这样做的目的是确保可以从干净的状态开始打包。</p></li><li><p><strong>编译：</strong> 切换到需要发布的 <code>Schema</code>（比如 <code>Release</code> 模式或者 <code>Debug</code> 模式），选择需要打包的 <code>Scheme</code>，然后再点击 <code>Product</code> 选择 <code>Build</code> 开始进行编译。</p></li><li><p><strong>归档：</strong> 编译成功后，选择 <code>Product</code> 下的 <code>Archive</code> 开始进行归档。归档过程会生成一个 <code>.xcarchive</code> 文件，这个文件包含了应用的可执行文件和其他一些资源文件。</p></li><li><p><strong>导出 ipa 包：</strong> 归档结束后，<code>Organizer</code> 窗口将会自动弹出，里面会列出生成的所有归档文件。选择需要的归档，点击右侧的<code>Export</code> 按钮，然后可以选择需要的打包方式（比如<code>App Store</code>, <code>Ad-Hoc</code>, <code>Enterprise</code>等），之后会要求选择一个存放 <code>ipa</code> 包的位置，等待进度条完成就签名导出完成了。</p></li><li><p><strong>验证：</strong> 如果想将应用上传到 <code>App Store</code>，那么在导出 <code>ipa</code> 包之后，可以再点击一次 <code>Validate App</code> 进行验证，看看是否符合苹果的标准。</p></li><li><p><strong>上传至 App Store：</strong> 如果一切顺利，最后点击 <code>Upload to App Store.</code> 提交应用给苹果审查。</p></li><li><p><strong>查看 App Connect：</strong> 上传结束后，过几分钟登陆 <code>App Connect</code> 网站，就可以看到你上传的应用。</p></li></ul></details><hr><h2 id="cocoapods" tabindex="-1"><a class="header-anchor" href="#cocoapods" aria-hidden="true">#</a> Cocoapods</h2><h3 id="❓pod-对应的产物是什么" tabindex="-1"><a class="header-anchor" href="#❓pod-对应的产物是什么" aria-hidden="true">#</a> ❓<code>pod</code> 对应的产物是什么</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>CocoaPods</code> 是一个用于管理 <code>iOS</code> 和 <code>macOS</code> 应用中的依赖库的工具。</p></blockquote><p>主要产物：</p><ul><li><p>项目的 <code>Podfile.lock </code>文件：这个文件记录了项目的所有 <code>Pod</code> 依赖以及它们的版本信息。它确保了不同开发者在同一个项目中使用同样版本的依赖库，保持了库版本的一致性。</p></li><li><p><code>Pods</code> 文件夹：所有的 <code>Pod</code> 依赖库的源代码都会被保存在这个文件夹中。包括在 <code>Podfile</code> 中直接声明的依赖以及它们的子依赖。</p></li><li><p><code>.xcworkspace</code> 文件：<code>Pod</code> 会生成一个 <code>.xcworkspace</code> 文件，可以通过打开这个文件来使用 <code>Xcode</code> 访问项目以及所有的 <code>Pod</code> 依赖。</p></li><li><p><code>libXXX.a</code> 或者 <code>XXX.framework</code> 文件：这是 <code>Pod</code> 依赖库编译后的产物，它包含了库中所有的编译代码。这个文件会被链接到应用中，可以在应用中调用库中的函数或者类。</p></li></ul></details><hr><h2 id="开源库" tabindex="-1"><a class="header-anchor" href="#开源库" aria-hidden="true">#</a> 开源库</h2><h3 id="❓说说你最熟悉的第三方-知晓其原理吗" tabindex="-1"><a class="header-anchor" href="#❓说说你最熟悉的第三方-知晓其原理吗" aria-hidden="true">#</a> ❓说说你最熟悉的第三方，知晓其原理吗</h3><details class="hint-container details"><summary>💡</summary></details><h3 id="❓rxswift-的实现原理" tabindex="-1"><a class="header-anchor" href="#❓rxswift-的实现原理" aria-hidden="true">#</a> ❓<code>RxSwift</code> 的实现原理</h3><details class="hint-container details"><summary>💡</summary></details><h3 id="afnetworking" tabindex="-1"><a class="header-anchor" href="#afnetworking" aria-hidden="true">#</a> AFNetworking</h3><h4 id="❓afnetworking-2-0-中常驻线程设计是为了解决什么问题" tabindex="-1"><a class="header-anchor" href="#❓afnetworking-2-0-中常驻线程设计是为了解决什么问题" aria-hidden="true">#</a> ❓<code>AFNetworking</code> 2.0 中常驻线程设计是为了解决什么问题</h4><details class="hint-container details"><summary>💡</summary><p><code>AFNetworking 2.0</code> 中的 <code>AFURLConnectionOperation</code> 类中存在一个常驻线程的设计。其是为了解决 <code>NSURLConnection</code> 的异步操作的线程问题。</p><p>如果在线程中创建一个异步 <code>NSURLConnection</code> 网络请求，这个请求只有在 <code>runloop</code> 运行的时候才会进行。如果线程的工作一旦完成就退出了，那么 <code>NSURLConnection</code> 的异步请求就被中断了，所以在网络请求期间这个线程必须被保活，保证其 <code>runloop</code> 在请求完成之前一直是在运行状态。</p><p>所以，<code>AFNetworking</code> 创建了一个常驻线程，把所有的网络请求的操作（<code>NSURLConnection</code>）都放到这个线程的 <code>runloop</code> 中，完全避免了新建线程的开销以及由于线程退出导致的网络请求被中断问题。这样，无论发起多少个网络请求，都只有一个线程在执行，避免了频繁的线程切换和大量线程并发所带来的性能问题。</p></details><h4 id="❓afnetworking-的底层原理" tabindex="-1"><a class="header-anchor" href="#❓afnetworking-的底层原理" aria-hidden="true">#</a> ❓<code>AFNetworking</code> 的底层原理</h4><details class="hint-container details"><summary>💡</summary></details><h4 id="❓alamofire-的实现原理" tabindex="-1"><a class="header-anchor" href="#❓alamofire-的实现原理" aria-hidden="true">#</a> ❓<code>Alamofire</code> 的实现原理</h4><details class="hint-container details"><summary>💡</summary></details><h3 id="sdwebimage" tabindex="-1"><a class="header-anchor" href="#sdwebimage" aria-hidden="true">#</a> SDWebImage</h3><h4 id="❓sdwebimage-的缓存机制" tabindex="-1"><a class="header-anchor" href="#❓sdwebimage-的缓存机制" aria-hidden="true">#</a> ❓<code>SDWebImage</code> 的缓存机制</h4><details class="hint-container details"><summary>💡</summary></details><h4 id="❓sdwebimage-的清除缓存策略" tabindex="-1"><a class="header-anchor" href="#❓sdwebimage-的清除缓存策略" aria-hidden="true">#</a> ❓<code>SDWebImage</code> 的清除缓存策略</h4><details class="hint-container details"><summary>💡</summary></details><h4 id="❓如何从磁盘快速显示图片-sdwebimage-做了什么" tabindex="-1"><a class="header-anchor" href="#❓如何从磁盘快速显示图片-sdwebimage-做了什么" aria-hidden="true">#</a> ❓如何从磁盘快速显示图片，<code>SDWebImage</code> 做了什么</h4><details class="hint-container details"><summary>💡</summary></details><h4 id="❓sdwebimage-是如何解决-uitableviewcell-复用时出现图片错乱问题" tabindex="-1"><a class="header-anchor" href="#❓sdwebimage-是如何解决-uitableviewcell-复用时出现图片错乱问题" aria-hidden="true">#</a> ❓<code>SDWebImage</code> 是如何解决 <code>UITableViewCell</code> 复用时出现图片错乱问题</h4><details class="hint-container details"><summary>💡</summary></details><h3 id="yykit" tabindex="-1"><a class="header-anchor" href="#yykit" aria-hidden="true">#</a> YYKit</h3><h4 id="❓yymodel-的实现原理" tabindex="-1"><a class="header-anchor" href="#❓yymodel-的实现原理" aria-hidden="true">#</a> ❓<code>YYModel</code> 的实现原理</h4><details class="hint-container details"><summary>💡</summary></details><h4 id="❓yyasynclayer-如何异步绘制" tabindex="-1"><a class="header-anchor" href="#❓yyasynclayer-如何异步绘制" aria-hidden="true">#</a> ❓<code>YYAsyncLayer</code> 如何异步绘制</h4><details class="hint-container details"><summary>💡</summary></details><h3 id="jspatch" tabindex="-1"><a class="header-anchor" href="#jspatch" aria-hidden="true">#</a> JSPatch</h3><h4 id="❓jspatch、aspects" tabindex="-1"><a class="header-anchor" href="#❓jspatch、aspects" aria-hidden="true">#</a> ❓<code>JSPatch</code>、<code>Aspects</code></h4><details class="hint-container details"><summary>💡</summary></details><h4 id="❓jspatch-是如何处理-block-的" tabindex="-1"><a class="header-anchor" href="#❓jspatch-是如何处理-block-的" aria-hidden="true">#</a> ❓<code>JSPatch</code> 是如何处理 <code>block</code> 的</h4><details class="hint-container details"><summary>💡</summary></details><hr><h2 id="web" tabindex="-1"><a class="header-anchor" href="#web" aria-hidden="true">#</a> Web</h2><h3 id="❓web-登录时怎么保持会话状态的" tabindex="-1"><a class="header-anchor" href="#❓web-登录时怎么保持会话状态的" aria-hidden="true">#</a> ❓<code>Web</code> 登录时怎么保持会话状态的</h3><details class="hint-container details"><summary>💡</summary></details><h3 id="❓web-渲染和-native-渲染有什么异同点" tabindex="-1"><a class="header-anchor" href="#❓web-渲染和-native-渲染有什么异同点" aria-hidden="true">#</a> ❓<code>Web</code> 渲染和 <code>Native</code> 渲染有什么异同点</h3><details class="hint-container details"><summary>💡</summary></details><h3 id="❓web-和-native-怎么共享-cookie" tabindex="-1"><a class="header-anchor" href="#❓web-和-native-怎么共享-cookie" aria-hidden="true">#</a> ❓<code>Web</code> 和 <code>Native</code> 怎么共享 <code>cookie</code></h3><details class="hint-container details"><summary>💡</summary></details><hr><h2 id="开放性问题" tabindex="-1"><a class="header-anchor" href="#开放性问题" aria-hidden="true">#</a> 开放性问题</h2><h3 id="❓平常有看过什么技术书籍吗" tabindex="-1"><a class="header-anchor" href="#❓平常有看过什么技术书籍吗" aria-hidden="true">#</a> ❓平常有看过什么技术书籍吗</h3><details class="hint-container details"><summary>💡</summary></details><h3 id="❓什么时候接触ios开发-学习路径" tabindex="-1"><a class="header-anchor" href="#❓什么时候接触ios开发-学习路径" aria-hidden="true">#</a> ❓什么时候接触<code>iOS</code>开发，学习路径</h3><details class="hint-container details"><summary>💡</summary></details><h3 id="❓你是如何学习提升-ios-相关知识技能" tabindex="-1"><a class="header-anchor" href="#❓你是如何学习提升-ios-相关知识技能" aria-hidden="true">#</a> ❓你是如何学习提升 <code>iOS</code> 相关知识技能</h3><details class="hint-container details"><summary>💡</summary></details>',70);function s(t,n){return d(),o("div",null,[a(" more "),r])}const p=e(i,[["render",s],["__file","0x16.other.html.vue"]]);export{p as default};
