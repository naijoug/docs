import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as d,a as r,f as i}from"./app-os89vFKI.js";const h={},o=i('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>“有道无术，术尚可求也，有术无道，止于术”。</p><blockquote><p>📚 《代码精进之路：从码农到工匠》 —— 编程技艺 “术” 层面 📚 《程序员的底层思维》 —— 编程背后的底层思维 “道” 层面</p></blockquote><p>一朵具体的花虽然看得见、摸得着，但总会有凋零消亡的时候，而“花”这个字作为精神实体将永不会消亡。</p><p>抽象的花和具体的花到底哪个才是本真呢？这是一个哲学问题。</p><blockquote><p>📚 “思维本身就能解决问题，我们所要做的，就是观察它是如何做到的。” - 维特根斯坦《逻辑哲学论》</p></blockquote><p>认知四层次：“不知道自己不知道、知道自己不知道、知道自己知道、不知道自己知道”。</p><blockquote><p>🎤 “没有好的思维模型，再多的知识积累也是低水平的重复。成人学习的目的不是获取更多的信息量，而是学习更好的思维模型。” —— 李善友（混沌大学创始人）</p></blockquote><p>本书目的：打破 “不知道自己不知道” 的思维禁锢</p><h2 id="基础思维能力" tabindex="-1"><a class="header-anchor" href="#基础思维能力" aria-hidden="true">#</a> 基础思维能力</h2><h3 id="抽象思维" tabindex="-1"><a class="header-anchor" href="#抽象思维" aria-hidden="true">#</a> 抽象思维</h3><blockquote><p>🎤 “若想捉大鱼，就得潜入深渊。深渊里的鱼更有力，也更纯净。硕大而抽象，且非常美丽。” —— 大卫·林奇</p></blockquote><p>软件技术的本质就是一门抽象的艺术。</p><p>软件工程师解决问题的抽象思维：<code>分析、归纳、综合、判断、推理</code> -&gt; <code>抽象、挖掘、关联</code> -&gt; <code>建模、实现</code></p><ul><li>抽象 = 抽离 + 具象</li></ul><blockquote><p>📚 “至于什么是时间，在没人问我时，我非常清楚；可一旦要向别人解释，我就有点糊涂了。” —— 奥古斯丁《西方哲学史》</p></blockquote><p>英文 <code>abstract</code>，来自拉丁文 <code>abstractio</code>，原意是排除、抽出。</p><p>抽象概念更接近问题的本质</p><ul><li><p>抽象是哲学思维的基础</p><blockquote><p>🎤 “道生一，一生二，二生三，三生万物” —— 老子</p></blockquote><blockquote><p>📚 洞穴之喻 —— 柏拉图《理想国》</p></blockquote></li><li><p>语言的抽象性</p><p>抽象思维（词的思维）：用词（概念）进行判断、推理并得出结论的过程。</p><p>语言和抽象是一体的</p><p>开会要求：通用语言(Ubiquitous Language)</p><p>代码审查(Code Review)：特别关注命名合理性</p><blockquote><p>🎤 “Creating good names is hard，but it should be hard，because a great name captures essential meaning in just one or two words.”（起一个好名字应该很难，因为，一个好名字需要把要义浓缩在一到两个词中。）—— Joel Spolsky (Stack Overflow 创始人)</p></blockquote></li><li><p>软件设计中的抽象</p><p>面向对象(<code>OO - Object Oriented</code>)</p><ul><li>面向对象分析(<code>OOA - Object Oriented Analysis</code>)</li><li>面向对象设计(<code>OOD - Object Oriented Design</code>)</li><li>面向对象编程(<code>OOP - Object Oriented Programming</code>)</li></ul><p>如何评判某个类的抽象设计是否良好？</p><ul><li>耦合性：强耦合使系统变得复杂。“组合优于继承”</li><li>内聚性：单个模块（类、包、组件）内各个元素的联系程度。</li><li>充分性：类或模块应该记录某个抽象设计足够多的特征，从而允许有意义的交互，否则将使组件变得无用。</li><li>完整性：类或模块的接口记录了某个抽象全部有意义的特征。</li></ul><blockquote><p>📚 基础类型偏执(Primitive Obsession) “使用了太多的基础类型，导致有些应该被抽象成实体类的概念，却以基础类的形式散落在代码各处，这是一种典型的抽象缺失。” —— Martin Fowler《重构：改善既有代码的设计》</p></blockquote><p>🌰 图书馆信息管理系统，<code>ISBN</code>(International Standard Book Number)：国际标准书号，这个字段的设计。不好的设计：使用字符串基础类型，这样创建、校验、转换等逻辑将散落在很多地方；好的设计：设计一个 <code>ISBN</code> 来抽象封装相关处理。</p><p>🌰 转账功能，抽象出转账的组合概念 <code>Money</code> (金额 + 货币)</p><p>提取重复代码只是重构工作的第一步。对重复代码进行概念抽象，寻找有意义的命名才是我们工作的重点。</p><p>好的抽象设计是内聚而完整的。</p><p>🌰 <code>JDK 1.1</code> 中的 <code>javax.swing.ButtonModel</code> 不完整接口的设计，没有提供 <code>getGroup()</code>。</p><p>一种检查抽象设计是否完整的方法，是查看接口或类是否缺少 “互补和对称”。</p><p>🌰 设计栈类，操作 <code>push</code> 和 <code>pop</code></p><p>不合理地抽象比没有抽象对系统的伤害更大。</p><p>🌰 过渡设计例子：将电商和电影订单中心合并，是实现订单中台。不同的业务模块，并不适用于中台。</p></li><li><p>抽象过程：归纳概括 -&gt; 寻找共性 -&gt; 提炼概念</p></li></ul><h3 id="逻辑思维" tabindex="-1"><a class="header-anchor" href="#逻辑思维" aria-hidden="true">#</a> 逻辑思维</h3><h3 id="结构化思维" tabindex="-1"><a class="header-anchor" href="#结构化思维" aria-hidden="true">#</a> 结构化思维</h3><h3 id="批判性思维" tabindex="-1"><a class="header-anchor" href="#批判性思维" aria-hidden="true">#</a> 批判性思维</h3><h3 id="维度思维" tabindex="-1"><a class="header-anchor" href="#维度思维" aria-hidden="true">#</a> 维度思维</h3><h3 id="分类思维" tabindex="-1"><a class="header-anchor" href="#分类思维" aria-hidden="true">#</a> 分类思维</h3><h3 id="分治思维" tabindex="-1"><a class="header-anchor" href="#分治思维" aria-hidden="true">#</a> 分治思维</h3><h3 id="简单思维" tabindex="-1"><a class="header-anchor" href="#简单思维" aria-hidden="true">#</a> 简单思维</h3><h3 id="成长型思维" tabindex="-1"><a class="header-anchor" href="#成长型思维" aria-hidden="true">#</a> 成长型思维</h3><hr><h2 id="专业思维能力" tabindex="-1"><a class="header-anchor" href="#专业思维能力" aria-hidden="true">#</a> 专业思维能力</h2><h3 id="解耦思维" tabindex="-1"><a class="header-anchor" href="#解耦思维" aria-hidden="true">#</a> 解耦思维</h3><h3 id="契约思维" tabindex="-1"><a class="header-anchor" href="#契约思维" aria-hidden="true">#</a> 契约思维</h3><h3 id="模型思维" tabindex="-1"><a class="header-anchor" href="#模型思维" aria-hidden="true">#</a> 模型思维</h3><h3 id="工具化思维" tabindex="-1"><a class="header-anchor" href="#工具化思维" aria-hidden="true">#</a> 工具化思维</h3><h3 id="量化思维" tabindex="-1"><a class="header-anchor" href="#量化思维" aria-hidden="true">#</a> 量化思维</h3><h3 id="数据思维" tabindex="-1"><a class="header-anchor" href="#数据思维" aria-hidden="true">#</a> 数据思维</h3><h3 id="产品思维" tabindex="-1"><a class="header-anchor" href="#产品思维" aria-hidden="true">#</a> 产品思维</h3><ul><li>产品三要素：用户 &amp; 需求 &amp; 场景</li></ul><hr><h2 id="思维能的综合应用" tabindex="-1"><a class="header-anchor" href="#思维能的综合应用" aria-hidden="true">#</a> 思维能的综合应用</h2><h3 id="商品团队之旅" tabindex="-1"><a class="header-anchor" href="#商品团队之旅" aria-hidden="true">#</a> 商品团队之旅</h3><h3 id="cola-的演进过程" tabindex="-1"><a class="header-anchor" href="#cola-的演进过程" aria-hidden="true">#</a> COLA 的演进过程</h3><blockquote><p>1.0 -&gt; 2.0 -&gt; 3.0 -&gt; 4.0</p></blockquote><hr><h2 id="格言" tabindex="-1"><a class="header-anchor" href="#格言" aria-hidden="true">#</a> 格言</h2><blockquote><p>🎤 “思维本身就能解决问题，我们所要做的，就是观察它是如何做到的。” - 维特根斯坦《逻辑哲学论》</p></blockquote>',45);function c(t,n){return a(),d("div",null,[r(" more "),o])}const s=e(h,[["render",c],["__file","读《程序员的底层思维》.html.vue"]]);export{s as default};
