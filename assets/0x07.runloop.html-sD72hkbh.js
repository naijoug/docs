import{_ as c}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o as t,c as d,a,b as n,e as o,d as s,f as i}from"./app-RaYFGKX0.js";const l={},u=n("blockquote",null,[n("p",null,"RunLoop： 运行循环")],-1),r=n("h2",{id:"reference",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reference","aria-hidden":"true"},"#"),o(" reference")],-1),k={href:"http://blog.ibireme.com/2015/05/18/runloop/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/ming1016/study/wiki/CFRunLoop",target:"_blank",rel:"noopener noreferrer"},h={href:"https://juejin.cn/post/7081932582576717831",target:"_blank",rel:"noopener noreferrer"},v={href:"https://juejin.cn/post/7082739417370066974",target:"_blank",rel:"noopener noreferrer"},b={href:"https://juejin.cn/post/6850418117169840135",target:"_blank",rel:"noopener noreferrer"},L=i(`<hr><h2 id="runloop" tabindex="-1"><a class="header-anchor" href="#runloop" aria-hidden="true">#</a> RunLoop</h2><h3 id="❓runloop-底层数据结构" tabindex="-1"><a class="header-anchor" href="#❓runloop-底层数据结构" aria-hidden="true">#</a> ❓<code>Runloop</code> 底层数据结构</h3><details class="hint-container details"><summary>💡</summary><p><code>Runloop</code> 的底层实现集中在 <code>NSRunLoop</code>（<code>Objective-C</code>）和 <code>CFRunLoop</code>（<code>C</code>）两个类中。它们在结构上是一样的，只是提供给开发者使用的接口不同。在这里我们讨论的是 <code>CFRunLoop</code> 的结构，因为 <code>NSRunLoop</code> 实际上是对它的一层封装。</p><p>底层数据结构：</p><ul><li><p><strong>Runloop</strong>：每一个线程都可以有一个对应的 <code>RunLoop</code>，但是 <code>RunLoop</code> 必须在自己的线程中运行。<code>RunLoop</code> 对象包含了一组 <code>RunLoopMode</code>，<code>Mode</code> 之间是互斥的，同时只能运行在一个 <code>Mode</code>。</p></li><li><p><strong>Mode</strong>：每一个 <code>RunLoopMode</code> 包含了一组 <code>Source</code>、<code>Timer</code>、以及 <code>Observer</code>。</p><ul><li><strong>Source</strong>：源是 <code>RunLoop</code> 事件的产生者。<code>Source</code> 分为两种类型：<code>Source0</code> 和 <code>Source1</code>。 <ul><li><code>Source0</code> 只包含了一个回调（函数指针）。</li><li><code>Source1</code> 还包含了一个 <code>mach_port</code> 和一个回调，并且 <code>Source1</code> 能主动唤醒 <code>RunLoop</code>。</li></ul></li><li><strong>Timer</strong>：基于时间的触发器，它和 <code>NSTimer</code> 是一一对应的。给 <code>NSTimer</code> 设置的 <code>RunLoopMode</code> 实质上是设置了 <code>Timer</code> 所在的 <code>Mode</code>。</li><li><strong>Observer</strong>：观察者，一种可以插入 <code>RunLoop</code> 中以方便开发者在特定时机做额外处理的东西，比如常用的 <code>beforeWaiting</code>、<code>afterWaiting</code> 等。</li></ul></li><li><p><strong>ModeItems</strong>：<code>Mode</code> 中 <code>Source</code>、<code>Timer</code> 和 <code>Observer</code> 统称为 <code>ModeItems</code>，当它们被注册到 <code>RunLoop</code> 中，他们就会被添加到当前 <code>RunLoop</code> 的当前 <code>Mode</code> 下。当一个 <code>Mode</code> 的所有 <code>Items</code> 都被执行完毕，此时 <code>RunLoop</code> 就会进行通知或者是进入睡眠等待下一个消息的处理。</p></li><li><p><strong>CommonModes</strong>：为了可以让一些 <code>ModeItems</code> 在多个 <code>Mode</code> 中共享，<code>RunLoop</code> 提供了 <code>CommonModes</code> 这种模式，它是一组 <code>Mode</code> 的集合。我们可以将 <code>ModeItems</code> 添加进 <code>CommonModes</code> 中。</p></li></ul></details><h3 id="❓runloop-有几种事件源-有几种模式" tabindex="-1"><a class="header-anchor" href="#❓runloop-有几种事件源-有几种模式" aria-hidden="true">#</a> ❓<code>RunLoop</code> 有几种事件源，有几种模式</h3><details class="hint-container details"><summary>💡</summary><p><code>RunLoop</code> 是用来管理事件和处理 <code>IO</code> 的基本架构</p><p>事件源：</p><ul><li><p><code>Timer</code>：定时器事件</p><blockquote><p><code>RunLoop</code> 按照设定的时间区间接收定时器事件。</p></blockquote></li><li><p><code>Source</code>：输入源事件</p><blockquote><p>包括两种类型：<code>source0 &amp; source1</code></p></blockquote><ul><li><code>source0</code> : 自定义的输入源，需要程序员自己生成和管理。</li><li><code>source1</code> ： 基于 <code>Port</code> 的输入源，接收来自其他线程或进程的消息，然后在当前线程上调用指定的处理方法。</li></ul></li><li><p><code>Observer</code>：观察者事件</p><blockquote><p>可以设置在 <code>RunLoop</code> 各个运行阶段接收的事件。</p></blockquote></li></ul><p>运行模式：</p><ul><li><p><code>NSDefaultRunLoopMode</code>（<code>kCFRunLoopDefaultMode</code>）：默认模式</p><blockquote><p>如果不手动指定模式，<code>RunLoop</code> 就在这个模式下运行。</p></blockquote></li><li><p><code>UITrackingRunLoopMode</code>：界面跟踪模式</p><blockquote><p>用于 <code>ScrollView</code> 滚动时。</p></blockquote></li><li><p><code>UIInitializationRunLoopMode</code>：启动 App 时第进入的模式</p><blockquote><p>启动完成后就不再使用。</p></blockquote></li><li><p><code>NSRunLoopCommonModes</code>（<code>kCFRunLoopCommonModes</code>）：这是一个占位模式，不是一种真正的 Mode。</p><blockquote><p>可以将事件源（<code>Timer/Observer/Source</code>）添加到 <code>CommonModes</code> 中，<code>RunLoop</code> 运行在哪种 <code>Mode</code> 时，只要这种 <code>Mode</code> 被标记为 <code>Common</code> 的属性，则 <code>RunLoop</code> 就会处理相应的事件。</p></blockquote></li></ul></details><h3 id="❓runloop-中的事件源-sources-详细说说" tabindex="-1"><a class="header-anchor" href="#❓runloop-中的事件源-sources-详细说说" aria-hidden="true">#</a> ❓<code>Runloop</code> 中的事件源(<code>Sources</code>)，详细说说</h3><details class="hint-container details"><summary>💡</summary><p>源（<code>Sources</code>）是 <code>RunLoop</code>中的事件产生源，可以分为两种：<code>source0</code> 和 <code>source1</code>。</p><ul><li><p><code>source0</code>：需要应用程序主动触发的。</p><blockquote><p>比如，调用 <code>performSelector: withObject: afterDelay:</code> 方法后，在 <code>RunLoop</code> 中注册的是 <code>source0</code> ，需要主动去触发这个方法。</p></blockquote><p>处理 <code>source0</code> 的过程：</p><ul><li>可能是用户或者应用程序自行调用 <code>CFRunLoopSourceSignal</code>(<code>source0</code>)进行标记。</li><li>手动切入到指定的RL模式中执行 <code>CFRunLoopWakeUp</code>(RL)。</li><li>在源事件 <code>Fire</code> 的时候，回调对应的 <code>CFRunLoopSourceContext</code> 中的回调（<code>perform</code>）进行执行。</li></ul></li><li><p><code>source1</code>：内核事件，由系统内核自动触发的。比如 <code>Port-based sources</code>，<code>custom input sources</code>，以及 <code>Cocoa performSelector sources</code>。</p><p>处理 <code>source1</code> 的过程：</p><ul><li>内核事件发生，由系统帮我们触发，然后唤醒 <code>RunLoop</code>。</li><li>如果内核事件已经准备好，那么就会调用定义的回调函数处理这些事件。 <blockquote><p>例如，键盘输入、鼠标事件，或者是来自其他进程或者线程的事件。</p></blockquote></li></ul></li></ul><p>处理优先级：<code>source1</code> &gt; <code>source0</code></p></details><h3 id="❓source0-和-source1的区别-触摸事件跟它俩有什么关系" tabindex="-1"><a class="header-anchor" href="#❓source0-和-source1的区别-触摸事件跟它俩有什么关系" aria-hidden="true">#</a> ❓<code>source0</code> 和 <code>source1</code>的区别，触摸事件跟它俩有什么关系</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>source0</code> 和 <code>source1</code> 是 <code>RunLoop</code> 的两个内部元素，使用 <code>CFRunLoopSourceRef</code> 来引用。在 <code>Cocoa</code> 框架中，所有来自用户交互的事件，如：屏幕触摸，<code>shake motion</code>，加速计，都会先加入到一个用于处理触摸的线程 <code>RunLoop</code> 中。</p></blockquote><ul><li><p><code>source0</code>（非基于 <code>Port</code> 的源）：需要程序主动去调用 <code>CFRunLoopSourceSignal(source0);</code> 来触发回调。用于用户主动触发的事件，如 <code>PerformSelector</code> 等。</p></li><li><p><code>source1</code>（基于 <code>Port</code> 的源）：系统内核会自动来处理并触发。用于处理系统事件，包括 <code>UIEvent</code> (包括触摸)、<code>UIGestureRecognizer</code> 识别到一个手势、界面的绘制更新。</p></li></ul><p>总结：触摸事件是在主线程的 <code>RunLoop</code> 中注册的一种 <code>Port based Source1</code>，当一个触摸事件发生，首先它会发送给 <code>UIApplication</code> 进行分发，<code>UIApplication</code> 会把事件分发给发送事件的 <code>UIWindow</code>，然后 <code>UIWindow</code> 会调用 <code>hitTest:withEvent:</code> 来找到用户实际点击的 <code>UIView</code>，最后调用 <code>UIView</code> 的 <code>touches</code> 方法。在实现上，当在触摸屏幕时，首先将事件加入到 <code>IOHID</code> 事件队列，然后 <code>source1</code> 会触发回调，<code>UIApplicationRun</code> 会 <code>ProceedEvent</code> 来处理事件，并调用 <code>SpringBoard</code> 开始进行应用内的消息调度。事件顺序由难以确定。</p></details><h3 id="❓runloop-监听状态有哪几种" tabindex="-1"><a class="header-anchor" href="#❓runloop-监听状态有哪几种" aria-hidden="true">#</a> ❓<code>Runloop</code> 监听状态有哪几种</h3><details class="hint-container details"><summary>💡</summary><p>通过使用 <code>CFRunLoopObserver</code> 可以监听以下几种状态：</p><ul><li><p><strong>kCFRunLoopEntry</strong> (即将进入 Loop)：即将进入运行循环状态。</p></li><li><p><strong>kCFRunLoopBeforeTimers</strong> (即将处理 Timer)：即将处理 Timer 回调。</p></li><li><p><strong>kCFRunLoopBeforeSources</strong> (即将处理 Source)：即将处理 Source。</p></li><li><p><strong>kCFRunLoopBeforeWaiting</strong> (即将进入休眠)：即将进入等待状态。</p></li><li><p><strong>kCFRunLoopAfterWaiting</strong> (被唤醒，但在处理事件之前)：被唤醒并即将开始处理事件。</p></li><li><p><strong>kCFRunLoopExit</strong> (即将退出 Loop)：即将退出。</p></li></ul></details><h3 id="❓runloop-内部实现逻辑" tabindex="-1"><a class="header-anchor" href="#❓runloop-内部实现逻辑" aria-hidden="true">#</a> ❓<code>Runloop</code> 内部实现逻辑</h3><details class="hint-container details"><summary>💡</summary><p><code>RunLoop</code> 的内部实现可以简单地概括为一个 <code>while</code> 循环，在这个循环中处理各种输入源的事件。<code>RunLoop</code> 在开启后会一直在这个循环中执行，直到接收到停止 <code>RunLoop</code> 的消息。</p><ul><li><p><code>RunLoop</code> 在启动时会从预设的 <code>Mode</code> 中选择一个，然后进入 <code>RunLoop</code> 的循环。</p></li><li><p>进入循环周期</p><ul><li>首先，处理所有到期的定时器事件。</li><li>然后，处理所有的输入源事件。输入源的事件包括来自 <code>Port</code> 的消息，以及用户定义的其他事件。</li><li>然后，如果有观察者的话，<code>RunLoop</code> 会通知观察者当前 <code>RunLoop</code> 的状态。</li><li>最后，如果在处理事件的过程中没有任何源需要处理，那么 <code>RunLoop</code> 会进入休眠等待被唤醒。</li></ul></li><li><p>继续下一次循环，直到接收到结束 <code>RunLoop</code> 的消息。</p></li></ul></details><h3 id="❓runloop-的工作流程" tabindex="-1"><a class="header-anchor" href="#❓runloop-的工作流程" aria-hidden="true">#</a> ❓<code>Runloop</code> 的工作流程</h3><details class="hint-container details"><summary>💡</summary><p><code>RunLoop</code> 的工作流程是一个循环，在循环内部不断地检查和处理来自源（<code>Source</code>）、定时器（<code>Timer</code>）和观察者（<code>Observer</code>）的事件或消息。</p><p>工作流程</p><ul><li><p>通知所有观察者，<code>RunLoop</code> 已经启动（<code>kCFRunLoopEntry</code>）。</p></li><li><p>通知所有观察者，即将处理定时器事件（<code>kCFRunLoopBeforeTimers</code>）。</p></li><li><p>通知所有观察者，即将处理输入源事件（<code>kCFRunLoopBeforeSources</code>）。</p></li><li><p>如果在处理输入源的时候，有输入源将其标记为 &quot;待唤醒&quot;，<code>RunLoop</code> 就会跳转到第二步。如果没有，则进入下一个阶段。</p></li><li><p>通知所有观察者，即将开始休眠（<code>kCFRunLoopBeforeWaiting</code>）。</p></li><li><p>然后 <code>RunLoop</code> 进入休眠状态，等待被唤醒。</p></li><li><p>如果 <code>RunLoop</code> 被唤醒，通知所有观察者，<code>RunLoop</code> 已经被唤醒且在处理事件之前（<code>kCFRunLoopAfterWaiting</code>）。然后处理唤醒它的事件（可能是定时器事件或者输入源事件），处理完成后，进入第二步。</p></li><li><p>通知所有观察者，<code>RunLoop</code> 即将退出（<code>kCFRunLoopExit</code>）。</p></li></ul></details><h3 id="❓runloop-的实际用用" tabindex="-1"><a class="header-anchor" href="#❓runloop-的实际用用" aria-hidden="true">#</a> ❓<code>Runloop</code> 的实际用用</h3><details class="hint-container details"><summary>💡</summary><p>在 <code>iOS</code> 开发中 <code>RunLoop</code> 有许多常见的应用，像是处理用户触摸事件、处理计时器事件、进行网络请求以及其他一些关键的系统事件。</p><p>以下列出一些具体的应用场景：</p><ul><li><strong>定时器</strong></li></ul><pre><code>&gt; 定时器的实现依托于 \`RunLoop\`。如果一个 \`NSTimer\` 没有添加到 \`RunLoop\`，那么定时器事件则不会被触发。因此能够用 \`RunLoop\` 来控制定时器的触发频率。
</code></pre><ul><li><p><strong>UI 刷新</strong></p><blockquote><p>当更改 <code>UIView</code> 的属性（比如 <code>frame</code>）以重新布局视图时，实际上更改并不会立即生效，而是会被放在一个 <code>UI</code> 更新队列里，然后在下一次 <code>RunLoop</code> 时，系统会从队列中取出这些更改并一次性全部渲染到屏幕上。</p></blockquote></li><li><p><strong>延迟显示</strong></p><blockquote><p><code>RunLoop</code> 也可以用于控制 <code>UI</code> 的延迟显示。</p></blockquote><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token punctuation">[</span><span class="token keyword">self</span> performSelector<span class="token punctuation">:</span><span class="token attribute atrule">@selector</span><span class="token punctuation">(</span>myMethod<span class="token punctuation">)</span> withObject<span class="token punctuation">:</span><span class="token nil constant">nil</span> afterDelay<span class="token punctuation">:</span><span class="token number">3.0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>常驻线程</strong></p><blockquote><p>线程一旦完成任务，它就会退出。这就意味着，如果在这个线程上做的所有设置（例如初始化变量，打开数据库等），都会随着线程的退出而失效。但是，可以通过让 <code>RunLoop</code> 去运行，使得这个线程能一直存在，不会结束，这就是常驻线程。这种技巧常常用于网络请求或者后台任务。</p></blockquote></li><li><p><strong>处理触摸事件</strong></p><blockquote><p>在 <code>iOS</code> 应用程序中，<code>RunLoop</code> 也被用来处理用户的触摸事件。当用户触摸屏幕时，系统会将触摸事件加入到主 <code>RunLoop</code> 中，这样可以保证用户的触摸事件得到及时的响应。</p></blockquote></li><li><p><strong>图片懒加载与大量数据处理</strong></p><blockquote><p>例如在滚动 loading 大图时，为了保证流畅性，通常图片的加载和解码操作会在后台进行，然后在 <code>RunLoop</code> 的空闲时间，把解码后的图片显示出来。</p></blockquote></li></ul></details><hr><h2 id="线程" tabindex="-1"><a class="header-anchor" href="#线程" aria-hidden="true">#</a> 线程</h2><h3 id="❓runloop-与-线程-的关系" tabindex="-1"><a class="header-anchor" href="#❓runloop-与-线程-的关系" aria-hidden="true">#</a> ❓RunLoop 与 线程 的关系</h3><details class="hint-container details"><summary>💡</summary><p><code>RunLoop</code> 和 <code>Thread</code> 之间的关系是一对一的。每个 <code>Thread</code> 都可以拥有一个与之关联的 <code>RunLoop</code>，但也可以没有。<code>RunLoop</code> 负责管理 <code>Thread</code> 上的各种事件，如网络请求、触摸事件、定时器等。</p><p><code>RunLoop</code> 实际上是一个事件处理循环，在这个循环中，系统会在无事件处理时让 <code>Thread</code> 进入休眠状态，从而节约系统资源。一旦有事件需要处理，<code>RunLoop</code> 就会立即唤醒 <code>Thread</code>。</p><p>由于主线程需要不断地响应各种用户界面事件，所以系统默认为主线程创建了一个 <code>RunLoop</code>（主 <code>RunLoop</code>）。而对于子线程，系统并没有默认创建 <code>RunLoop</code>，这是因为在很多情况下，子线程只需要执行一些后台任务然后就结束，不需要处理事件。如果需要在子线程上处理事件，如网络请求，那么需要手动为子线程创建 <code>RunLoop</code>。</p><p>总结：<code>RunLoop</code> 是线程的核心，它负责处理线程上的所有事件和消息。而每个线程只能有一个 <code>RunLoop</code>，每个 <code>RunLoop</code> 只服务于特定的线程。</p></details><h3 id="❓ios-线程启动-必须要启动-runloop-吗" tabindex="-1"><a class="header-anchor" href="#❓ios-线程启动-必须要启动-runloop-吗" aria-hidden="true">#</a> ❓iOS 线程启动，必须要启动 Runloop 吗</h3><details class="hint-container details"><summary>💡</summary><p>在 <code>iOS</code> 中，线程启动并不一定需要启动 <code>RunLoop</code>。<code>RunLoop</code> 并不是一个强制性的组件，只有当需要在这个线程中进行某些特定的任务，如等待用户输入、定时任务、网络请求等时才需要启动。</p><p>除了主线程，新创建的子线程默认是没有开启 <code>RunLoop</code> 的。主线程之所以有 <code>RunLoop</code>，是因为在应用启动时 <code>UIKit</code> 自动帮你创建和启动了。<code>RunLoop</code> 是<code> Objective-C</code> 和 <code>Swift</code> 的运行时环境在主线程默默开启了的一个事件处理循环，来处理各种事件。</p><p>若需要实时刷新 <code>UI</code>，更新 <code>UI</code> 状态或者完成较为复杂的网络交互任务，很多时候就需要开启子线程的 <code>RunLoop</code>。例如，在新线程中使用定时器，是需要开启 <code>RunLoop</code> 的。因为 <code>NSTimer</code> 实际上是注册到 <code>RunLoop</code> 上的，通过 <code>RunLoop</code> 来监控时间变化并调度任务的。</p></details><h3 id="❓哪些情况下-线程需要启动-runloop" tabindex="-1"><a class="header-anchor" href="#❓哪些情况下-线程需要启动-runloop" aria-hidden="true">#</a> ❓哪些情况下，线程需要启动 RunLoop</h3><details class="hint-container details"><summary>💡</summary><ul><li><p>定时器：如果在一个线程中使用定时器（<code>NSTimer</code>），那么这个线程的 <code>RunLoop</code> 需要被启动。因为定时器事件是由 <code>RunLoop</code> 调度和处理的。</p></li><li><p>异步任务：当在一个线程中处理异步任务时，可能需要 <code>RunLoop</code> 来帮助等待或者驱动某些事件发生。</p></li><li><p>网络请求：当使用某些网络 <code>API</code>（如 <code>NSURLConnection</code>）时，需要在线程的 <code>RunLoop</code> 中运行请求。</p></li><li><p>界面更新：当你需要定期更新 <code>UI</code> 或者处理用户交互时，也需要启动 <code>RunLoop</code>。</p></li><li><p>系统内部的一些任务：比如说监听 <code>NSObject</code> 对象的 <code>performSelector:withObject:afterDelay:</code> 方法，<code>RunLoop</code> 就需要启动来监听和处理这个消息。</p></li><li><p>使用 <code>GCD</code> 或者 <code>NSOperation</code> 将任务放入到其他线程的时候，如果这个任务和用户交互、定时器等有关，那么就需要启动 <code>RunLoop</code>。</p></li><li><p>在子线程中需要长连接的时候，需要启动 <code>RunLoop</code> 来保持线程的存活。</p></li><li><p>文本输入：滑动视图等响应用户交互事件时，需要进行大量计算（例如文本布局），需把任务放在子线程处理，这个时候也需要启动线程的 <code>RunLoop</code>。</p></li></ul></details><h3 id="❓runloop-什么时候释放内存" tabindex="-1"><a class="header-anchor" href="#❓runloop-什么时候释放内存" aria-hidden="true">#</a> ❓<code>RunLoop</code> 什么时候释放内存</h3><details class="hint-container details"><summary>💡</summary><p><code>RunLoop</code> 的生命周期与其所在的线程生命周期一致。当线程结束，其关联的 <code>RunLoop</code> 同样也会被销毁。<code>RunLoop</code> 并不像对象实例那样在不再需要时就能被释放。<code>RunLoop</code> 本身就是一个循环，用来在一个线程中处理各种事件。</p><ul><li><p>对于主线程来说，其关联的 <code>RunLoop</code> 几乎是始终存在的，只有当应用结束时，主线程的 <code>RunLoop</code> 才会被销毁。</p></li><li><p>对于子线程，如果创建了 <code>RunLoop</code>，在线程执行完任务退出时，<code>RunLoop</code> 也会随着线程一起销毁。如果在子线程中不创建 <code>RunLoop</code>，那么这个线程就不关联 <code>RunLoop</code>，只在执行完任务后直接退出，同样也不会产生 <code>RunLoop</code>。</p></li></ul></details><hr><h2 id="performselector" tabindex="-1"><a class="header-anchor" href="#performselector" aria-hidden="true">#</a> performSelector</h2><h3 id="❓runloop-与-performselector-的关系" tabindex="-1"><a class="header-anchor" href="#❓runloop-与-performselector-的关系" aria-hidden="true">#</a> ❓<code>runloop</code> 与 <code>performSelector</code> 的关系</h3><details class="hint-container details"><summary>💡</summary><p><code>RunLoop</code> 和 <code>performSelector</code> 之间的关系是密切的。<code>RunLoop</code> 在 <code>iOS</code> 中可以被看作是一个事件处理循环，在这个循环中不断地处理各种事件，如 <code>UI</code> 触摸事件，定时器事件，<code>selector</code> 事件等。<code>performSelector</code> 就是 <code>RunLoop</code> 的一种应用方式。</p><p><code>performSelector</code> 是 <code>NSObject</code> 的一个实例方法，用于在当前线程或指定线程上执行一个指定的方法。运行这个方法会向 <code>Runloop</code> 添加一个 <code>selector</code>，<code>Runloop</code> 在处理的时候会检查所有待处理的 <code>selector</code> 并逐个执行。</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token punctuation">[</span><span class="token keyword">self</span> performSelector<span class="token punctuation">:</span><span class="token keyword">@selector</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span> withObject<span class="token punctuation">:</span>nil afterDelay<span class="token punctuation">:</span><span class="token number">3.0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果某个线程的运行循环不被启动或者已经退出，那么在这个线程上执行的 <code>performSelector</code> 方法就不会被执行。例如在子线程中，默认是没有启动 <code>RunLoop</code> 的，所以需要手动启动 <code>RunLoop</code>。</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>NSThread <span class="token operator">*</span>thread <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>NSThread alloc<span class="token punctuation">]</span> initWithTarget<span class="token punctuation">:</span><span class="token keyword">self</span> selector<span class="token punctuation">:</span><span class="token keyword">@selector</span><span class="token punctuation">(</span>testThread<span class="token punctuation">)</span> object<span class="token punctuation">:</span>nil<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>thread start<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>testThread <span class="token punctuation">{</span>
    <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;Enter Thread&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 定时器需要添加到 RunLoop 后才会运行</span>
    NSTimer <span class="token operator">*</span>timer <span class="token operator">=</span> <span class="token punctuation">[</span>NSTimer timerWithTimeInterval<span class="token punctuation">:</span><span class="token number">1.0</span> target<span class="token punctuation">:</span><span class="token keyword">self</span> selector<span class="token punctuation">:</span><span class="token keyword">@selector</span><span class="token punctuation">(</span>timerRun<span class="token punctuation">)</span> userInfo<span class="token punctuation">:</span>nil repeats<span class="token punctuation">:</span>YES<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span><span class="token punctuation">[</span>NSRunLoop currentRunLoop<span class="token punctuation">]</span> addTimer<span class="token punctuation">:</span>timer forMode<span class="token punctuation">:</span>NSDefaultRunLoopMode<span class="token punctuation">]</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 在没有 timer 或者 performSelector 情况下可以通过如下方式保持 runloop 运行</span>
    <span class="token comment">// [[NSRunloop currentRunLoop] runMode:NSDefaultRunLoopMode beforeDate:[NSDate distantFuture]];</span>
    
    <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;Exit Thread&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="❓performselector-的实现原理" tabindex="-1"><a class="header-anchor" href="#❓performselector-的实现原理" aria-hidden="true">#</a> ❓<code>performSelector</code> 的实现原理</h3><details class="hint-container details"><summary>💡</summary><p><code>performSelector</code> 方法是 <code>Objective-C</code> 里面动态方法选择机制的一个体现。实现原理主要是基于 <code>Objective-C</code> 的消息传递机制。当调用一个对象的方法时，实际上是在向这个对象发送一种叫做 <code>selector</code> 的消息。</p><ul><li><p>通过 <code>SEL</code> 类型的参数（也就是 <code>selector</code>，它本质上是个字符串）找到方法的实现（<code>IMP</code>，也可以理解为是函数指针）。</p></li><li><p>然后根据这个函数指针和传入的参数，动态调用对应的方法。</p></li></ul><p>在过程中，如果进行了 <code>performSelector:withObject:afterDelay:</code> 调用，实际上内部实现是把这个调用包装为了一个 <code>Timer</code>，添加到了当前的 <code>RunLoop</code> 中。然后在 <code>RunLoop</code> 轮询的过程中碰到了预设的时间点，就会调用对应的 <code>selector</code>。另外如传入的 <code>SEL</code> 对象无法找到对应的方法，会异常崩溃，所以在使用时，要特别注意方法匹配问题。</p><p>这种动态调用方法的方式让 <code>Objective-C</code> 的灵活性大大提升，可以更好地适应各种变化的需求，在 <code>Objective-C</code> 中再提到的 “鸭子类型” 就是这块灵活性的一种体现。</p></details><h3 id="❓performselector-vs-nsinvocation" tabindex="-1"><a class="header-anchor" href="#❓performselector-vs-nsinvocation" aria-hidden="true">#</a> ❓<code>performSelector</code> vs <code>NSInvocation</code></h3><details class="hint-container details"><summary>💡</summary><p><code>performSelector</code> 方法和 <code>NSInvocation</code> 这两个都可以用于在运行时动态地调用方法，但它们之间有一些明显的区别。</p><ul><li><p><strong>参数的个数和类型</strong>：<code>performSelector</code> 只能接受最多两个参数，并且这两个参数都必须是对象类型。如果你要调用的方法有更多的参数，或者参数类型不是对象，那么就必须使用 <code>NSInvocation</code>。</p></li><li><p><strong>返回值</strong>：<code>performSelector</code> 的返回值固定为 <code>id</code> 类型，对于返回值为基础数据类型的函数，使用 <code>performSelector</code> 可能出现歧义。而对于 <code>NSInvocation</code> 来说，返回值的类型可以根据你传入的 <code>Method Signature</code> 来确定，在任何情况下都能正常工作。</p></li><li><p><strong>可读性</strong>： <code>performSelector</code> 可读性更好，而 <code>NSInvocation</code> 的参数、返回值的处理以及方法调用过程相对复杂，会影响代码的可读性。</p></li><li><p><strong>性能</strong>：<code>performSelector</code> 相比于 <code>NSInvocation</code> 在性能上更优些，因为 <code>NSInvocation</code> 在设置返回值、获取返回值、参数设置等方面需要经过包装和转换。</p></li></ul><p>注意：使用 <code>performSelector</code> 已经可以满足大部分的需求，对于一些更复杂的情况，比如函数参数个数不定，有基础数据类型参数或返回值等，我们会使用到 <code>NSInvocation</code>。</p></details><hr><h2 id="定时器" tabindex="-1"><a class="header-anchor" href="#定时器" aria-hidden="true">#</a> 定时器</h2><h3 id="❓nstimer-vs-cadisplaylink-vs-dispatch-source-t" tabindex="-1"><a class="header-anchor" href="#❓nstimer-vs-cadisplaylink-vs-dispatch-source-t" aria-hidden="true">#</a> ❓<code>NSTimer</code> vs <code>CADisplayLink</code> vs <code>dispatch_source_t</code></h3><details class="hint-container details"><summary>💡</summary><p><code>NSTimer</code>、<code>CADisplayLink</code>和<code>dispatch_source_t</code>都是用来执行定时任务的方法，以下是各自的优劣：</p><ul><li><p><code>NSTimer</code>：</p><ul><li>优点：使用简单，可以设置重复和非重复的定时任务，可以控制定时器的开始和暂停。</li><li>缺点：精度较低，延迟情况可能比较严重；由于 <code>NSTimer</code> 在 <code>RunLoop</code> 中被添加，如果 <code>RunLoop</code> 被阻塞则 <code>NSTimer</code> 无法准时响应；由于存在强引用关系会导致循环引用问题。</li></ul></li><li><p><code>CADisplayLink</code>：</p><ul><li>优点：精度非常高，可以保证在每一帧刷新时都会被调用，非常适合用于界面的动画以及重绘。</li><li>缺点：<code>CPU</code> 占用率较高，如果在执行的任务过于复杂，可能会影响界面的流畅性。</li></ul></li><li><p><code>dispatch_source_t</code>：</p><ul><li>优点：<code>GCD</code> 的定时器，精度较高，不受 <code>RunLoop</code> 的影响，可以避免 <code>NSTimer</code> 的循环引用问题，可以在任何线程使用，非常灵活。</li><li>缺点：<code>API</code> 复杂，使用相对复杂。</li></ul></li></ul><p>应用场景：</p><ul><li>如果需要做一些动画或者界面重绘等UI相关的操作，可以使用 <code>CADisplayLink</code>。</li><li>如果只是简单的定时任务，可以考虑使用 <code>NSTimer</code>。</li><li>如果有较高的精度要求或者需要在非主线程执行定时任务，可以选择 <code>dispatch_source_t</code>。</li></ul></details><h3 id="❓nstimer-的循环引用如何解决" tabindex="-1"><a class="header-anchor" href="#❓nstimer-的循环引用如何解决" aria-hidden="true">#</a> ❓<code>NSTimer</code> 的循环引用如何解决</h3><details class="hint-container details"><summary>💡</summary><p>用 <code>weak</code> 对象来避免 <code>NSTimer</code> 的循环引用：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">@interface</span> <span class="token function">ViewController</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    NSTimer <span class="token operator">*</span>timer<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">@end</span>
 
<span class="token keyword">@implementation</span> ViewController

<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>viewDidLoad <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token keyword">super</span> viewDidLoad<span class="token punctuation">]</span><span class="token punctuation">;</span>
 
    __weak <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">)</span> weakSelf <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">;</span>
    timer <span class="token operator">=</span> <span class="token punctuation">[</span>NSTimer scheduledTimerWithTimeInterval<span class="token punctuation">:</span><span class="token number">1.0</span> repeats<span class="token punctuation">:</span>YES block<span class="token punctuation">:</span><span class="token operator">^</span><span class="token punctuation">(</span>NSTimer <span class="token operator">*</span> _Nonnull timer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">[</span>weakSelf doSomething<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>dealloc <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>timer invalidate<span class="token punctuation">]</span><span class="token punctuation">;</span>
    timer <span class="token operator">=</span> nil<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>doSomething <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
<span class="token keyword">@end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="❓timer-定时器准确吗-怎样实现一个精确的-timer" tabindex="-1"><a class="header-anchor" href="#❓timer-定时器准确吗-怎样实现一个精确的-timer" aria-hidden="true">#</a> ❓<code>Timer</code> 定时器准确吗，怎样实现一个精确的 <code>Timer</code></h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>Timer</code> 的定时并不会非常精确，因为它依赖于 <code>RunLoop</code> 的执行情况，如果 <code>RunLoop</code> 处于除 <code>Default</code> 模式之外的状态或 <code>RunLoop</code> 是忙于其它事情，那么 <code>Timer</code> 是不会被执行的。因此，如果你启动了一个每秒触发一次的 <code>Timer</code>，实际上它触发的时间间隔可能会稍微大于一秒。</p></blockquote><p>更精确的定时器方案：</p><ul><li><p><code>RunLoop - common</code> 模式 : 将 <code>Timer</code> 加入 <code>RunLoop</code> 中的 <code>.common</code> 模式。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token class-name">Timer</span><span class="token punctuation">.</span><span class="token function">scheduledTimer</span><span class="token punctuation">(</span>withTimeInterval<span class="token punctuation">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span> repeats<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> timer <span class="token keyword">in</span>
 <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>timestamp</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token class-name">RunLoop</span><span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>timer<span class="token punctuation">,</span> forMode<span class="token punctuation">:</span> <span class="token punctuation">.</span>common<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在自定义线程中使用 <code>Timer</code></p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">var</span> thread <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>target<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">,</span> selector<span class="token punctuation">:</span> <span class="token other-directive property">#selector</span><span class="token punctuation">(</span>newThread<span class="token punctuation">)</span><span class="token punctuation">,</span> object<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span>
thread<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token attribute atrule">@objc</span> <span class="token keyword">func</span> <span class="token function-definition function">newThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  autoreleasepool <span class="token punctuation">{</span>
      timer <span class="token operator">=</span> <span class="token class-name">Timer</span><span class="token punctuation">.</span><span class="token function">scheduledTimer</span><span class="token punctuation">(</span>timeInterval<span class="token punctuation">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">,</span> selector<span class="token punctuation">:</span> <span class="token other-directive property">#selector</span><span class="token punctuation">(</span><span class="token function">timerAction</span><span class="token punctuation">(</span><span class="token omit keyword">_</span><span class="token punctuation">:</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userInfo<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">,</span> repeats<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
      <span class="token class-name">RunLoop</span><span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 启动子线程的 RunLoop</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>CADisplayLink</code>: 这是一个和屏幕刷新率同步的定时器，每一帧刷新都会被调用，精度很高，常用于做动画。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token comment">// 与屏幕刷新同步刷新调用 render 函数</span>
<span class="token keyword">var</span> displayLink<span class="token punctuation">:</span> <span class="token class-name">CADisplayLink</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token class-name">CADisplayLink</span><span class="token punctuation">(</span>target<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">,</span> selector<span class="token punctuation">:</span> <span class="token other-directive property">#selector</span><span class="token punctuation">(</span>render<span class="token punctuation">)</span><span class="token punctuation">)</span>
displayLink<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> <span class="token class-name">RunLoop</span><span class="token punctuation">.</span>current<span class="token punctuation">,</span> forMode<span class="token punctuation">:</span> <span class="token punctuation">.</span>common<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>GCD</code>：使用 <code>dispatch_after</code> 来实现定时器功能</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token class-name">DispatchQueue</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token function">asyncAfter</span><span class="token punctuation">(</span>deadline<span class="token punctuation">:</span> <span class="token class-name">DispatchTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1.0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>timestamp</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>GCD</code>：使用 <code>DispatchSourceTimer</code> 来实现定时器</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token class-name">DispatchQueue</span><span class="token punctuation">.</span><span class="token function">global</span><span class="token punctuation">(</span>qos<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> gcdTimer<span class="token punctuation">:</span> <span class="token class-name">DispatchSourceTimer</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token class-name">DispatchSource</span><span class="token punctuation">.</span><span class="token function">makeTimerSource</span><span class="token punctuation">(</span>flags<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> queue<span class="token punctuation">:</span> queue<span class="token punctuation">)</span>
gcdTimer<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span>deadline<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> repeating<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
gcdTimer<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">setEventHandler</span><span class="token punctuation">(</span>handler<span class="token punctuation">:</span> <span class="token punctuation">{</span>
  <span class="token class-name">DispatchQueue</span><span class="token punctuation">.</span><span class="token function">global</span><span class="token punctuation">(</span>qos<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">async</span> <span class="token punctuation">{</span>
      <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>timestamp</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
gcdTimer<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></details>`,44);function R(f,g){const e=p("ExternalLinkIcon");return t(),d("div",null,[u,a(" more "),r,a(" 经典 "),n("ul",null,[n("li",null,[n("a",k,[o("2015-05-18 深入理解 RunLoop - 郭曜源"),s(e)])]),n("li",null,[n("a",m,[o("2015-03-20 CFRunLoop - 戴铭"),s(e)])])]),a(" 分割线 "),n("ul",null,[n("li",null,[n("a",h,[o("2022-04-02 当面试官问 Runloop 时，想听到的答案是什么？"),s(e)])]),n("li",null,[n("a",v,[o("2022-04-04 由点入面吃透 RunLoop"),s(e)])]),n("li",null,[n("a",b,[o("2020-07-15 秒杀面试官的 RunLoop 底层原理"),s(e)])])]),L])}const w=c(l,[["render",R],["__file","0x07.runloop.html.vue"]]);export{w as default};
