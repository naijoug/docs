import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o as c,c as l,b as n,e as s,d as e,f as t}from"./app-3jL1FZzb.js";const i={},u=n("h2",{id:"runtime-是什么",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#runtime-是什么","aria-hidden":"true"},"#"),s(),n("code",null,"runtime"),s(" 是什么")],-1),r={href:"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ObjCRuntimeGuide",target:"_blank",rel:"noopener noreferrer"},d=n("p",null,"Objective-C 语言尽可能地将许多决策从编译时间和链接时间推迟到运行时。它就会尽可能地动态地执行任务。 这意味着该语言不仅需要一个编译器，而且还需要一个运行时系统来执行编译过的代码。 运行时系统就像是 Objective-C 语言的操作系统；这是语言运行工作的原理所在。",-1),k=t(`<p>这段说明可以分三段理解</p><ul><li><code>OC</code> 的设计者为了让它具备动态能力，所以将只要可以动态处理的任务都迁移到运行时。</li><li>编译器只完成了部分代码编译链接工作，还剩一部分需要运行时处理，所以需要设计这个 <code>runtime</code> 来进行代码的动态处理。</li><li>将 <code>runtime</code> 看做 <code>OC</code> 语言的操作系统。操作系统是计算机运行的核心，用来进行系统资源分配，各种任务调度，是计算机可以正常运行的关键。说明了 <code>runtime</code> 对于 <code>OC</code> 语言的重要性，也是必不可少的一部分。</li></ul><p>这也很好地解释了“为什么是 OC 是一个动态语言？”。</p><h2 id="nsobject" tabindex="-1"><a class="header-anchor" href="#nsobject" aria-hidden="true">#</a> <code>NSObject</code></h2><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// file: NSObject.h</span>
<span class="token comment">// line:53 NSObject 头文件定义</span>
<span class="token keyword">@interface</span> NSObject <span class="token operator">&lt;</span>NSObject<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    Class isa  OBJC_ISA_AVAILABILITY<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="内存模型" tabindex="-1"><a class="header-anchor" href="#内存模型" aria-hidden="true">#</a> 内存模型</h2>`,6),m={href:"https://github.com/apple-oss-distributions/objc4/blob/objc4-906/runtime",target:"_blank",rel:"noopener noreferrer"},v=t(`<blockquote><p>类型定义</p></blockquote><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// file: runtime.h</span>
<span class="token comment">/// An opaque type that represents a method in a class definition.</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> objc_method <span class="token operator">*</span>Method<span class="token punctuation">;</span> <span class="token comment">// 一个非透明类型，表示一个类定义中的方法</span>

<span class="token comment">/// An opaque type that represents an instance variable.</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> objc_ivar <span class="token operator">*</span>Ivar<span class="token punctuation">;</span> <span class="token comment">// 表示一个实例变量</span>

<span class="token comment">/// An opaque type that represents a category.</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> objc_category <span class="token operator">*</span>Category<span class="token punctuation">;</span> <span class="token comment">// 表示一个分类</span>

<span class="token comment">/// An opaque type that represents an Objective-C declared property.</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> objc_property <span class="token operator">*</span>objc_property_t<span class="token punctuation">;</span> <span class="token comment">// 表示 OC 中定义属性</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__OBJC__ </span></span>
<span class="token keyword">@class</span> Protocol<span class="token punctuation">;</span> <span class="token comment">// OC 环境下是一个类的提前引用声明</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span> </span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> objc_object Protocol<span class="token punctuation">;</span> <span class="token comment">// 非 OC 环境下是 objc_object 的别名</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>isa</code>、<code>Class</code>、<code>id</code>都是啥？</p></blockquote><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// file: objc-private.h</span>
<span class="token comment">// line:82</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> objc_class <span class="token operator">*</span>Class<span class="token punctuation">;</span>   <span class="token comment">// OC 中的类对象</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> objc_object <span class="token operator">*</span>id<span class="token punctuation">;</span>     <span class="token comment">// OC 中的实例对象</span>

<span class="token comment">// line:92 </span>
<span class="token keyword">union</span> isa_t <span class="token punctuation">{</span>
    <span class="token function">isa_t</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
    <span class="token function">isa_t</span><span class="token punctuation">(</span>uintptr_t value<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token function">bits</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

    uintptr_t bits<span class="token punctuation">;</span>
private<span class="token punctuation">:</span> <span class="token comment">// 访问类需要自定义 ptrauth 操作，将它设为私有，这样就可以强制客户端通过 setClass/getClass 来访问</span>
    <span class="token comment">// Accessing the class requires custom ptrauth operations, so force clients to go through setClass/getClass by making this private.</span>
    Class cls<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// line:128 OC 中的类实例定义</span>
<span class="token keyword">struct</span> objc_object <span class="token punctuation">{</span>
private<span class="token punctuation">:</span>
    <span class="token keyword">char</span> isa_storage<span class="token punctuation">[</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>isa_t<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// reinterpret_cast : C++中的一种强制类型转换运算符，允许讲任意指针类型转化为其它类型指针 </span>
    isa_t <span class="token operator">&amp;</span><span class="token function">isa</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">*</span>reinterpret_cast<span class="token operator">&lt;</span>isa_t <span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>isa_storage<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">const</span> isa_t <span class="token operator">&amp;</span><span class="token function">isa</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">*</span>reinterpret_cast<span class="token operator">&lt;</span><span class="token keyword">const</span> isa_t <span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>isa_storage<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// file: objc-runtime-new.h</span>
<span class="token comment">// line:1414 OC 中类定义</span>
<span class="token keyword">struct</span> objc_class <span class="token punctuation">:</span> objc_object <span class="token punctuation">{</span>
    <span class="token comment">// \`= delete\` : c++ 11 语法，禁止编译器生成构造函数、赋值运算符，保证 objc_class 操作安全性</span>
    <span class="token function">objc_class</span><span class="token punctuation">(</span><span class="token keyword">const</span> objc_class<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> delete<span class="token punctuation">;</span>
    <span class="token function">objc_class</span><span class="token punctuation">(</span>objc_class<span class="token operator">&amp;&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> delete<span class="token punctuation">;</span>
    <span class="token keyword">void</span> operator<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> objc_class<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> delete<span class="token punctuation">;</span>
    <span class="token keyword">void</span> operator<span class="token operator">=</span><span class="token punctuation">(</span>objc_class<span class="token operator">&amp;&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> delete<span class="token punctuation">;</span>
    <span class="token comment">// Class ISA;</span>
    Class superclass<span class="token punctuation">;</span>
    cache_t cache<span class="token punctuation">;</span>             <span class="token comment">// formerly cache pointer and vtable         缓存指针和虚函数表(优化性能)</span>
    class_data_bits_t bits<span class="token punctuation">;</span>    <span class="token comment">// class_rw_t * plus custom rr/alloc flags   存放类数据</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>id</code> 是一个 <code>objc_object</code> 的指针，可以指向 OC 中的任意对象</li><li><code>Class</code> 是 一个 <code>objc_class</code> 的指针，可以这项 OC 中的任意类。而 <code>objc_class</code> 又是继承于 <code>objc_object</code>，这也说明了 <code>Class</code> 也是一个对象，也印证了 <code>OC 中一切皆对象</code>。</li><li><code>isa</code> 是一个联合体，包含一个指向类的指针 <code>cls</code>，</li></ul><blockquote><p><code>OC</code> 中的实例变量、属性、方法、协议都存放在哪？</p></blockquote><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// file: objc-runtime-new.h</span>
<span class="token comment">// line:1693 只读类结构定义</span>
<span class="token keyword">struct</span> class_ro_t <span class="token punctuation">{</span>
    uint32_t flags<span class="token punctuation">;</span>
    uint32_t instanceStart<span class="token punctuation">;</span> <span class="token comment">// 实例内存开始位置</span>
    uint32_t instanceSize<span class="token punctuation">;</span>  <span class="token comment">// 实例内存大小</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__LP64__</span></span>
    uint32_t reserved<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

    <span class="token keyword">union</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> uint8_t <span class="token operator">*</span> ivarLayout<span class="token punctuation">;</span>
        Class nonMetaclass<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// 类名</span>
    explicit_atomic<span class="token operator">&lt;</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">&gt;</span> name<span class="token punctuation">;</span>
    <span class="token comment">// 基础的方法列表</span>
    objc<span class="token punctuation">:</span><span class="token punctuation">:</span>PointerUnion<span class="token operator">&lt;</span>method_list_t<span class="token punctuation">,</span> relative_list_list_t<span class="token operator">&lt;</span>method_list_t<span class="token operator">&gt;</span><span class="token punctuation">,</span> method_list_t<span class="token punctuation">:</span><span class="token punctuation">:</span>Ptrauth<span class="token punctuation">,</span> method_list_t<span class="token punctuation">:</span><span class="token punctuation">:</span>Ptrauth<span class="token operator">&gt;</span> baseMethods<span class="token punctuation">;</span>
    <span class="token comment">// 基础的协议列表</span>
    objc<span class="token punctuation">:</span><span class="token punctuation">:</span>PointerUnion<span class="token operator">&lt;</span>protocol_list_t<span class="token punctuation">,</span> relative_list_list_t<span class="token operator">&lt;</span>protocol_list_t<span class="token operator">&gt;</span><span class="token punctuation">,</span> PtrauthRaw<span class="token punctuation">,</span> PtrauthRaw<span class="token operator">&gt;</span> baseProtocols<span class="token punctuation">;</span>
    <span class="token comment">// 实例变量列表</span>
    <span class="token keyword">const</span> ivar_list_t <span class="token operator">*</span> ivars<span class="token punctuation">;</span>
    <span class="token comment">// 弱引用实例变量</span>
    <span class="token keyword">const</span> uint8_t <span class="token operator">*</span> weakIvarLayout<span class="token punctuation">;</span>
    <span class="token comment">// 基础的属性列表</span>
    objc<span class="token punctuation">:</span><span class="token punctuation">:</span>PointerUnion<span class="token operator">&lt;</span>property_list_t<span class="token punctuation">,</span> relative_list_list_t<span class="token operator">&lt;</span>property_list_t<span class="token operator">&gt;</span><span class="token punctuation">,</span> PtrauthRaw<span class="token punctuation">,</span> PtrauthRaw<span class="token operator">&gt;</span> baseProperties<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// line:2294 可读可写类扩展信息</span>
<span class="token keyword">struct</span> class_rw_ext_t <span class="token punctuation">{</span>
    <span class="token function">DECLARE_AUTHED_PTR_TEMPLATE</span><span class="token punctuation">(</span>class_ro_t<span class="token punctuation">)</span>
    class_ro_t_authed_ptr<span class="token operator">&lt;</span><span class="token keyword">const</span> class_ro_t<span class="token operator">&gt;</span> ro<span class="token punctuation">;</span> <span class="token comment">// 指向只读类的指针</span>
    method_array_t methods<span class="token punctuation">;</span>         <span class="token comment">// 方法列表</span>
    property_array_t properties<span class="token punctuation">;</span>    <span class="token comment">// 属性列表 </span>
    protocol_array_t protocols<span class="token punctuation">;</span>     <span class="token comment">// 协议列表</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>demangledName<span class="token punctuation">;</span>
    uint32_t version<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 可读可写类结构定义</span>
<span class="token keyword">struct</span> class_rw_t <span class="token punctuation">{</span> 
    <span class="token comment">// Be warned that Symbolication knows the layout of this structure.</span>
    uint32_t flags<span class="token punctuation">;</span>
    uint16_t witness<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">SUPPORT_INDEXED_ISA</span></span>
    uint16_t index<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

    explicit_atomic<span class="token operator">&lt;</span>uintptr_t<span class="token operator">&gt;</span> ro_or_rw_ext<span class="token punctuation">;</span> <span class="token comment">// 原子操作指针，用于指向只读类或者类扩展</span>

    Class firstSubclass<span class="token punctuation">;</span>    <span class="token comment">// 第一个子类      </span>
    Class nextSiblingClass<span class="token punctuation">;</span> <span class="token comment">// 下一个兄弟类</span>
    
private<span class="token punctuation">:</span> <span class="token comment">// 联合指针，指向 class_ro_t 或者 class_rw_ext_t</span>
    using ro_or_rw_ext_t <span class="token operator">=</span> objc<span class="token punctuation">:</span><span class="token punctuation">:</span>PointerUnion<span class="token operator">&lt;</span><span class="token keyword">const</span> class_ro_t<span class="token punctuation">,</span> class_rw_ext_t<span class="token punctuation">,</span> <span class="token function">PTRAUTH_STR</span><span class="token punctuation">(</span><span class="token string">&quot;class_ro_t&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">PTRAUTH_STR</span><span class="token punctuation">(</span><span class="token string">&quot;class_rw_ext_t&quot;</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">struct</span> objc_class <span class="token punctuation">:</span> objc_object <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token comment">// line:2749 类数据读取函数 </span>
    class_rw_t <span class="token operator">*</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token comment">// 获取类数据(可读可写)</span>
        <span class="token keyword">return</span> bits<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> class_ro_t <span class="token operator">*</span><span class="token function">safe_ro</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token comment">// 获取的安全的只读数据</span>
        <span class="token keyword">return</span> bits<span class="token punctuation">.</span><span class="token function">safe_ro</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先回答问题，通过 <code>objc_class</code> 读取数据函数返回 <code>class_rw_t</code> 类型，还有安全读取数据返回 <code>class_ro_t</code>。可以得知类中实例变量、属性、方法存放在 <code>class_rw_t</code> 和 <code>class_ro_t</code> 中。</p><p>然后需要明白 <code>class_ro_t</code> 与 <code>class_rw_t</code> 的区别</p><ul><li><code>class_ro_t</code> : 这个是编译期间可以确定的，包括类名、实例变量，弱引用实例，基本的属性、方法、协议。</li><li><code>class_rw_t</code> : 这是运行时期间可以确定的，里面包含一个指向 <code>class_ro_t</code>。就是说运行时还会添加一下属性、方法、协议。</li></ul><blockquote><p><code>ivar</code>(实例变量)与 <code>property</code>(属性)</p></blockquote><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// file: objc-runtime-new.h</span>
<span class="token comment">// line:1290 实例变量定义</span>
<span class="token keyword">struct</span> ivar_t <span class="token punctuation">{</span>
    int32_t <span class="token operator">*</span>offset<span class="token punctuation">;</span>    <span class="token comment">// 相对于对象内存起始位置偏移</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>   <span class="token comment">// 变量名</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>type<span class="token punctuation">;</span>   <span class="token comment">// 变量类型</span>
    <span class="token comment">// alignment is sometimes -1; use alignment() instead</span>
    uint32_t alignment_raw<span class="token punctuation">;</span> <span class="token comment">// 内存对齐</span>
    uint32_t size<span class="token punctuation">;</span>          <span class="token comment">// 变量内存尺寸</span>

    uint32_t <span class="token function">alignment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>  <span class="token comment">// 内存对齐</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>alignment_raw <span class="token operator">==</span> <span class="token operator">~</span><span class="token punctuation">(</span>uint32_t<span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1U</span> <span class="token operator">&lt;&lt;</span> WORD_SHIFT<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> alignment_raw<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 属性定义</span>
<span class="token keyword">struct</span> property_t <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>       <span class="token comment">// 属性名</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>attributes<span class="token punctuation">;</span> <span class="token comment">// 特性</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>class_copyIvarList()</code> vs <code>class_copyPropertyList()</code></p></blockquote><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// file: objc-runtime-new.m</span>
<span class="token comment">// line: 6082 获取类的实例变量列表</span>
Ivar <span class="token operator">*</span> <span class="token function">class_copyIvarList</span><span class="token punctuation">(</span>Class cls<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>outCount<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">const</span> ivar_list_t <span class="token operator">*</span>ivars<span class="token punctuation">;</span>
    Ivar <span class="token operator">*</span>result <span class="token operator">=</span> nil<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cls<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>outCount<span class="token punctuation">)</span> <span class="token operator">*</span>outCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> nil<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 互斥锁，加锁</span>
    mutex_locker_t <span class="token function">lock</span><span class="token punctuation">(</span>runtimeLock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 校验类是否已实现</span>
    <span class="token function">ASSERT</span><span class="token punctuation">(</span>cls<span class="token operator">-&gt;</span><span class="token function">isRealized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 从 ro 中获取所有实例变量</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ivars <span class="token operator">=</span> cls<span class="token operator">-&gt;</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">ro</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>ivars<span class="token punctuation">)</span>  <span class="token operator">&amp;&amp;</span>  ivars<span class="token operator">-&gt;</span>count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        result <span class="token operator">=</span> <span class="token punctuation">(</span>Ivar <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ivars<span class="token operator">-&gt;</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Ivar<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> ivar <span class="token punctuation">:</span> <span class="token operator">*</span>ivars<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 遍历所有实例变量放入结果数组</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ivar<span class="token punctuation">.</span>offset<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>  <span class="token comment">// anonymous bitfield</span>
            result<span class="token punctuation">[</span>count<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>ivar<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        result<span class="token punctuation">[</span>count<span class="token punctuation">]</span> <span class="token operator">=</span> nil<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>outCount<span class="token punctuation">)</span> <span class="token operator">*</span>outCount <span class="token operator">=</span> count<span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 获取类属性列表</span>
objc_property_t <span class="token operator">*</span> <span class="token function">class_copyPropertyList</span><span class="token punctuation">(</span>Class cls<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>outCount<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cls<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>outCount<span class="token punctuation">)</span> <span class="token operator">*</span>outCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> nil<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 互斥锁，加锁</span>
    mutex_locker_t <span class="token function">lock</span><span class="token punctuation">(</span>runtimeLock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 校验类是否已实现</span>
    <span class="token function">checkIsKnownClass</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ASSERT</span><span class="token punctuation">(</span>cls<span class="token operator">-&gt;</span><span class="token function">isRealized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 获取类数据</span>
    <span class="token keyword">auto</span> rw <span class="token operator">=</span> cls<span class="token operator">-&gt;</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    property_t <span class="token operator">*</span><span class="token operator">*</span>result <span class="token operator">=</span> nil<span class="token punctuation">;</span>
    <span class="token keyword">auto</span> <span class="token keyword">const</span> properties <span class="token operator">=</span> rw<span class="token operator">-&gt;</span><span class="token function">properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从 rw 中获取所有属性</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> count <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 存在属性，遍历所有属性放入结果数组中</span>
        result <span class="token operator">=</span> <span class="token punctuation">(</span>property_t <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>property_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> prop <span class="token punctuation">:</span> properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            result<span class="token punctuation">[</span>count<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>prop<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        result<span class="token punctuation">[</span>count<span class="token punctuation">]</span> <span class="token operator">=</span> nil<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>outCount<span class="token punctuation">)</span> <span class="token operator">*</span>outCount <span class="token operator">=</span> count<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>objc_property_t <span class="token operator">*</span><span class="token punctuation">)</span>result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>OC</code> 中 <code>Method</code>、<code>SEL</code>、<code>IMP</code> 是什么关系？</p></blockquote><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// file: runtime.h</span>
<span class="token comment">// line:43 Method 定义</span>
<span class="token comment">/// An opaque type that represents a method in a class definition.</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> objc_method <span class="token operator">*</span>Method<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// file: objc-runtime-new.h</span>
<span class="token comment">// line:200 SEL 定义</span>
<span class="token keyword">typedef</span> uintptr_t SEL<span class="token punctuation">;</span>
<span class="token comment">// line:919 方法定义</span>
<span class="token keyword">struct</span> method_t <span class="token punctuation">{</span>
    <span class="token function">method_t</span><span class="token punctuation">(</span><span class="token keyword">const</span> method_t <span class="token operator">&amp;</span>other<span class="token punctuation">)</span> <span class="token operator">=</span> delete<span class="token punctuation">;</span>
    <span class="token comment">// The representation of a &quot;big&quot; method. This is the traditional representation of three pointers storing the selector, types and implementation.</span>
    <span class="token keyword">struct</span> big <span class="token punctuation">{</span> <span class="token comment">// 大型方法，传统的表示法</span>
        SEL name<span class="token punctuation">;</span>
        <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>types<span class="token punctuation">;</span>
        MethodListIMP imp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// A &quot;big&quot; method, but name is signed. Used for method lists created at runtime.</span>
    <span class="token keyword">struct</span> bigSigned <span class="token punctuation">{</span> <span class="token comment">// 名字被签名的大型方法，用于在运行时创建方法列表</span>
        SEL __ptrauth_objc_sel name<span class="token punctuation">;</span>
        <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> ptrauth_method_list_types types<span class="token punctuation">;</span>
        MethodListIMP imp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// 方法类型</span>
    <span class="token keyword">enum</span> class Kind <span class="token punctuation">{</span>
        <span class="token comment">// Note: method_invoke detects small methods by detecting 1 in the low bit. Any change to that will require a corresponding change to method_invoke.</span>
        <span class="token comment">// 提示：method_invoke 通过检测低位的 1 来检测是否是小型方法。如果修改这个枚举 method_invoke 也需要相应修改。</span>
        big <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> 
        <span class="token comment">// \`small\` encompasses both small and small direct methods. We distinguish those cases by doing a range check against the shared cache.</span>
        small <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 包括小型方法和直接访问小型方法。我们通过检查共享缓存区的一个范围来区分这些情况。</span>
        bigSigned <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
private<span class="token punctuation">:</span>
    <span class="token keyword">static</span> <span class="token keyword">const</span> uintptr_t kindMask <span class="token operator">=</span> <span class="token number">0x3</span><span class="token punctuation">;</span> <span class="token comment">// 方法类型掩码</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// file: objc.h</span>
<span class="token comment">// line:49 </span>
<span class="token comment">/// An opaque type that represents a method selector.</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> objc_selector <span class="token operator">*</span>SEL<span class="token punctuation">;</span> <span class="token comment">// 一个不透明类型，表示一个方法选择器</span>

<span class="token comment">/// A pointer to the function of a method implementation. </span>
<span class="token comment">// 一个指向方法实现的指针</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token operator">!</span>OBJC_OLD_DISPATCH_PROTOTYPES</span></span>
<span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>IMP<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token comment">/* id, SEL, ... */</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
<span class="token keyword">typedef</span> id <span class="token function">_Nullable</span> <span class="token punctuation">(</span><span class="token operator">*</span>IMP<span class="token punctuation">)</span><span class="token punctuation">(</span>id _Nonnull<span class="token punctuation">,</span> SEL _Nonnull<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>SEL</code> 是一个指向方法选择器的指针，表示方法名 <code>IMP</code> 方法实现的指针，表示方法实现。</p><blockquote><p>方法的调用</p></blockquote><blockquote><p><code>metaClass</code> 是什么？</p></blockquote><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// file: objc-runtime.mm</span>
<span class="token comment">// line:192 通过类名获取 metaClass</span>
<span class="token comment">/***********************************************************************
* objc_getMetaClass.  Return the id of the meta class the named class.
* Warning: doesn&#39;t work if aClassName is the name of a posed-for class&#39;s isa!
**********************************************************************/</span>
Class <span class="token function">objc_getMetaClass</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>aClassName<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Class cls<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>aClassName<span class="token punctuation">)</span> <span class="token keyword">return</span> Nil<span class="token punctuation">;</span>

    cls <span class="token operator">=</span> <span class="token function">objc_getClass</span> <span class="token punctuation">(</span>aClassName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cls<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">_objc_inform</span> <span class="token punctuation">(</span><span class="token string">&quot;class \`%s&#39; not linked into application&quot;</span><span class="token punctuation">,</span> aClassName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> Nil<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> cls<span class="token operator">-&gt;</span><span class="token function">ISA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>OC</code> 对象继承原型链</p></blockquote><h2 id="协议" tabindex="-1"><a class="header-anchor" href="#协议" aria-hidden="true">#</a> 协议</h2><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// file: objc-runtime-new.h</span>
<span class="token comment">// line:1613 协议定义</span>
<span class="token keyword">struct</span> protocol_t <span class="token punctuation">:</span> objc_object <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>mangledName<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> protocol_list_t <span class="token operator">*</span>protocols<span class="token punctuation">;</span>
    method_list_t <span class="token operator">*</span>instanceMethods<span class="token punctuation">;</span>
    method_list_t <span class="token operator">*</span>classMethods<span class="token punctuation">;</span>
    method_list_t <span class="token operator">*</span>optionalInstanceMethods<span class="token punctuation">;</span>
    method_list_t <span class="token operator">*</span>optionalClassMethods<span class="token punctuation">;</span>
    property_list_t <span class="token operator">*</span>instanceProperties<span class="token punctuation">;</span>
    uint32_t size<span class="token punctuation">;</span>   <span class="token comment">// sizeof(protocol_t)</span>
    uint32_t flags<span class="token punctuation">;</span>
    <span class="token comment">// Fields below this point are not always present on disk.</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>_extendedMethodTypes<span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>_demangledName<span class="token punctuation">;</span>
    property_list_t <span class="token operator">*</span>_classProperties<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">struct</span> protocol_list_t <span class="token punctuation">{</span>
    <span class="token comment">// count is pointer-sized by accident.</span>
    uintptr_t count<span class="token punctuation">;</span>
    protocol_ref_t list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// variable-size</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="category-分类" tabindex="-1"><a class="header-anchor" href="#category-分类" aria-hidden="true">#</a> <code>Category</code> - “分类”</h2><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// line:3256</span>
<span class="token keyword">struct</span> category_t <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>   <span class="token comment">// 分类名</span>
    classref_t cls<span class="token punctuation">;</span>     <span class="token comment">// 引用类</span>
    WrappedPtr<span class="token operator">&lt;</span>method_list_t<span class="token punctuation">,</span> method_list_t<span class="token punctuation">:</span><span class="token punctuation">:</span>Ptrauth<span class="token operator">&gt;</span> instanceMethods<span class="token punctuation">;</span>  <span class="token comment">// 实例方法</span>
    WrappedPtr<span class="token operator">&lt;</span>method_list_t<span class="token punctuation">,</span> method_list_t<span class="token punctuation">:</span><span class="token punctuation">:</span>Ptrauth<span class="token operator">&gt;</span> classMethods<span class="token punctuation">;</span>     <span class="token comment">// 类方法列表</span>
    <span class="token keyword">struct</span> protocol_list_t <span class="token operator">*</span>protocols<span class="token punctuation">;</span>              <span class="token comment">// 协议列表</span>
    <span class="token keyword">struct</span> property_list_t <span class="token operator">*</span>instanceProperties<span class="token punctuation">;</span>     <span class="token comment">// 实例属性列表</span>
    <span class="token comment">// Fields below this point are not always present on disk.</span>
    <span class="token keyword">struct</span> property_list_t <span class="token operator">*</span>_classProperties<span class="token punctuation">;</span>       <span class="token comment">// 类属性列表</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="associated-object-关联对象" tabindex="-1"><a class="header-anchor" href="#associated-object-关联对象" aria-hidden="true">#</a> <code>Associated Object</code> - “关联对象”</h2><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// file: objc-runtime.mm</span>
<span class="token comment">// line:706 获取关联对象</span>
id <span class="token function">objc_getAssociatedObject</span><span class="token punctuation">(</span>id object<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">_object_get_associative_reference</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 设置关联对象</span>
<span class="token keyword">void</span> <span class="token function">objc_setAssociatedObject</span><span class="token punctuation">(</span>id object<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">,</span> id value<span class="token punctuation">,</span> objc_AssociationPolicy policy<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">_object_set_associative_reference</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> policy<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 移除关联对象</span>
<span class="token keyword">void</span> <span class="token function">objc_removeAssociatedObjects</span><span class="token punctuation">(</span>id object<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>object <span class="token operator">&amp;&amp;</span> object<span class="token operator">-&gt;</span><span class="token function">hasAssociatedObjects</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">_object_remove_associations</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> <span class="token comment">/*deallocating*/</span>false<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> reference</h2>`,31),b={href:"https://github.com/apple-oss-distributions/objc4",target:"_blank",rel:"noopener noreferrer"},_={href:"https://github.com/RetVal/objc-runtime",target:"_blank",rel:"noopener noreferrer"},y=n("hr",null,null,-1),h={href:"https://nemocdz.github.io/post/why-is-metaclass-in-objective-c/",target:"_blank",rel:"noopener noreferrer"},w=t("<blockquote><p>作者从自己遇到的一个面试题出发，按照第一性原理进行问题推导。 👉🏻 首先去研究了 <code>OC</code> 中的源码，梳理了 <code>isa</code>、<code>MetaClass</code> 关系。 👉🏻 在搜索 <code>MetaClass</code> 的过程，发现了 <code>Python</code> 中也有这个设计。进而了解到是源于 <code>Smalltalk</code> 的设计，而 <code>OC</code> 就是借鉴的 <code>Smalltalk</code> 的设计思想。 👉🏻 进一步思考如果没有 <code>MetaClass</code> 是否可行。在宏观成面思考了面向对象的两种设计思想，以 <code>C++</code> (借鉴 <code>Simula</code>)为代表的<em>类的划分</em>，还有以 <code>OC</code> (借鉴 <code>Smalltalk</code>)为代表的<code>消息传递</code>。</p></blockquote>",1);function g(f,j){const a=p("ExternalLinkIcon");return c(),l("div",null,[u,n("blockquote",null,[n("p",null,[n("a",r,[s("Objective-C Runtime Programming Guide"),e(a)]),s(" The Objective-C language defers as many decisions as it can from compile time and link time to runtime. Whenever possible, it does things dynamically. This means that the language requires not just a compiler, but also a runtime system to execute the compiled code. The runtime system acts as a kind of operating system for the Objective-C language; it’s what makes the language work.")]),d]),k,n("blockquote",null,[n("p",null,[n("a",m,[s("runtime 源码"),e(a)])])]),v,n("ul",null,[n("li",null,[n("a",b,[s("objc4"),e(a)])]),n("li",null,[n("a",_,[s("A debuggable objc runtime"),e(a)])])]),y,n("ul",null,[n("li",null,[n("a",h,[s("2017-09-15 Why is MetaClass in Objective-C？"),e(a)]),s(" 💯 "),w])])])}const O=o(i,[["render",g],["__file","runtime.html.vue"]]);export{O as default};
