import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as c,c as d,a as l,b as n,e as t,d as a,f as i}from"./app-O_TOWqul.js";const r={},p=n("h2",{id:"reference",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reference","aria-hidden":"true"},"#"),t(" reference")],-1),u={href:"https://github.com/apple-oss-distributions/objc4",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/nst/iOS-Runtime-Headers",target:"_blank",rel:"noopener noreferrer"},m=n("blockquote",null,[n("p",null,"iOS Objective-C headers as derived from runtime introspection")],-1),b={href:"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ObjCRuntimeGuide",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/steipete/Aspects",target:"_blank",rel:"noopener noreferrer"},h=n("blockquote",null,[n("p",null,"Delightful, simple library for aspect oriented programming in Objective-C and Swift.")],-1),_=n("hr",null,null,-1),g={href:"https://blog.ibireme.com/2013/11/26/objective-c-messaging/",target:"_blank",rel:"noopener noreferrer"},f={href:"http://yulingtianxia.com/blog/2014/11/05/objective-c-runtime/",target:"_blank",rel:"noopener noreferrer"},S={href:"https://blog.sunnyxx.com/2014/11/06/runtime-nuts",target:"_blank",rel:"noopener noreferrer"},y={href:"http://yulingtianxia.com/blog/2016/06/15/Objective-C-Message-Sending-and-Forwarding/",target:"_blank",rel:"noopener noreferrer"},j={href:"https://shannonchenchn.github.io/2018/03/16/objc-runtime-learning-notes/",target:"_blank",rel:"noopener noreferrer"},w=i(`<h2 id="concept" tabindex="-1"><a class="header-anchor" href="#concept" aria-hidden="true">#</a> concept</h2><ul><li><p><code>instance -&gt; class -&gt; method -&gt; SEL -&gt; IMP -&gt; 实现函数</code></p></li><li><p><code>objc_msgSend</code> : Objective-C 消息传递函数 <code>id objc_msgSend(id self, SEL op, ... );</code></p></li><li><p>SEL &amp; IMP</p></li></ul><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>SEL</code></td><td>方法选择器 (方法的 ID)</td></tr><tr><td><code>IMP</code></td><td>函数指针，方法实现的指针</td></tr></tbody></table><ul><li>反射</li></ul><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">/** SEL 反射 */</span>
<span class="token comment">//  String -&gt; SEL</span>
SEL selector <span class="token operator">=</span> <span class="token function">NSSelectorFromString</span><span class="token punctuation">(</span><span class="token string">@&quot;setName:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>stu performSelector<span class="token punctuation">:</span>selector withObject<span class="token punctuation">:</span><span class="token string">@&quot;Kobe&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//  SEL -&gt; String</span>
<span class="token function">NSStringFromSelector</span><span class="token punctuation">(</span><span class="token keyword">@selector</span><span class="token punctuation">(</span>setName<span class="token punctuation">:</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/**  Class 反射 */</span>
<span class="token comment">//  String -&gt; Class</span>
Class class <span class="token operator">=</span> <span class="token function">NSClassFromString</span><span class="token punctuation">(</span><span class="token string">@&quot;Student&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Student <span class="token operator">*</span>student <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>class alloc<span class="token punctuation">]</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span> 
<span class="token comment">//  Class -&gt; String</span>
Class class <span class="token operator">=</span> <span class="token punctuation">[</span>Student class<span class="token punctuation">]</span><span class="token punctuation">;</span>
NSString <span class="token operator">*</span>className <span class="token operator">=</span> <span class="token function">NSStringFromClass</span><span class="token punctuation">(</span>class<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/** Protocol 反射 */</span>
<span class="token comment">//  String -&gt; Protocol</span>
Protocol protocol <span class="token operator">=</span> <span class="token function">NSProtocolFromString</span><span class="token punctuation">(</span><span class="token string">@&quot;People&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//  Protocol -&gt; String</span>
NSString <span class="token operator">*</span>protocolName <span class="token operator">=</span> <span class="token function">NSStringFromProtocol</span><span class="token punctuation">(</span>protocol<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="oc-的动态特性" tabindex="-1"><a class="header-anchor" href="#oc-的动态特性" aria-hidden="true">#</a> OC 的动态特性</h2><ul><li><p>动态类型（Dynamic typing）</p><ul><li><code>isKindOfClass:</code> : 判断某一对象是否是某个类或其子类的实例</li><li><code>isMemberOfClass:</code> : 判断某一对象是否是某个类的实例</li></ul></li><li><p>动态绑定（Dynamic binding）</p><ul><li>传统函数 : 编译时期，将函数参数和实现打包到源码</li><li>OC的消息机制 : 运行时，才去动态查找与实例绑定的属性和方法</li></ul></li><li><p>动态加载（Dynamic loading）</p><ul><li>根据需求动态加载资源(如 : @2x,@3x图片的加载)\`</li></ul></li></ul><h2 id="runtime-struct" tabindex="-1"><a class="header-anchor" href="#runtime-struct" aria-hidden="true">#</a> Runtime Struct</h2><table><thead><tr><th>结构体</th><th>说明</th></tr></thead><tbody><tr><td><code>objc_object</code></td><td>objc 对象 <code>id</code>，isa 指针包含指向对象的地址</td></tr><tr><td><code>objc_class</code></td><td>objc 对象的类 <code>Class</code></td></tr><tr><td><code>class_data_bits_t</code></td><td>包含 <code>class_rw_t</code> 信息</td></tr><tr><td><code>class_rw_t</code></td><td>rw : 可读可写，类在运行时才确定的方法、属性、协议 (包含指向 <code>class_ro_t</code>的指针)</td></tr><tr><td><code>class_ro_t</code></td><td>ro : 只读，类在编译期间就确定的方法、属性、协议</td></tr><tr><td><code>cache_t</code></td><td>缓存已经使用过的方法</td></tr><tr><td><code>bucket_t</code></td><td>缓存使用的哈希表结构体 (<code>key: SEL ; value: IMP</code>)</td></tr></tbody></table><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">struct</span> class_rw_t <span class="token punctuation">{</span> <span class="token comment">// 可读可写</span>
    uint32_t flags<span class="token punctuation">;</span>
    uint32_t version<span class="token punctuation">;</span>

    <span class="token keyword">const</span> class_ro_t <span class="token operator">*</span>ro<span class="token punctuation">;</span>           <span class="token comment">// 指向只读的结构体,存放类初始信息</span>
    
    method_array_t methods<span class="token punctuation">;</span>         <span class="token comment">// 方法列表（类对象存放对象方法，元类对象存放类方法）</span>
    property_array_t properties<span class="token punctuation">;</span>    <span class="token comment">// 属性列表</span>
    protocol_array_t protocols<span class="token punctuation">;</span>     <span class="token comment">// 协议列表</span>

    Class firstSubclass<span class="token punctuation">;</span>
    Class nextSiblingClass<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">struct</span> class_ro_t <span class="token punctuation">{</span> <span class="token comment">// 只读 </span>
    uint32_t flags<span class="token punctuation">;</span>
    uint32_t instanceStart<span class="token punctuation">;</span>
    uint32_t instanceSize<span class="token punctuation">;</span>
    uint32_t reserved<span class="token punctuation">;</span>

    <span class="token keyword">const</span> uint8_t <span class="token operator">*</span> ivarLayout<span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> name<span class="token punctuation">;</span>
    method_list_t <span class="token operator">*</span> baseMethodList<span class="token punctuation">;</span>     <span class="token comment">// 方法列表</span>
    protocol_list_t <span class="token operator">*</span> baseProtocols<span class="token punctuation">;</span>    <span class="token comment">// 协议列表</span>
    <span class="token keyword">const</span> ivar_list_t <span class="token operator">*</span> ivars<span class="token punctuation">;</span>          <span class="token comment">// 成员变量列表</span>

    <span class="token keyword">const</span> uint8_t <span class="token operator">*</span> weakIvarLayout<span class="token punctuation">;</span>
    property_list_t <span class="token operator">*</span>baseProperties<span class="token punctuation">;</span>    <span class="token comment">// 属性列表</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="runtime-function" tabindex="-1"><a class="header-anchor" href="#runtime-function" aria-hidden="true">#</a> Runtime Function</h2><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td><em>Class</em></td><td></td></tr><tr><td><code>class_getName</code></td><td>获取类名</td></tr><tr><td><code>class_getSuperclass</code></td><td>获取父类</td></tr><tr><td><code>class_getInstanceSize</code></td><td>获取实例尺寸</td></tr><tr><td><code>class_getInstanceVariable</code></td><td>获取实例变量的信息</td></tr><tr><td><code>class_getClassVariable</code></td><td>获取类成员变量的信息</td></tr><tr><td><code>class_getVersion</code></td><td>获取类版本号</td></tr><tr><td><code>class_setVersion</code></td><td>设置类版本号</td></tr><tr><td><code>class_isMetaClass</code></td><td>是否是一个元类</td></tr><tr><td><em>Ivar</em></td><td></td></tr><tr><td><code>class_addIvar</code></td><td>添加成员变量</td></tr><tr><td><code>class_copyIvarList</code></td><td>获取整个成员变量列表</td></tr><tr><td><em>Property</em></td><td></td></tr><tr><td><code>class_addProperty</code></td><td>为类添加属性</td></tr><tr><td><code>class_replaceProperty</code></td><td>替换类属性</td></tr><tr><td><code>class_getProperty</code></td><td>获取指定的属性</td></tr><tr><td><code>class_copyPropertyList</code></td><td>获取属性列表</td></tr><tr><td><em>Method</em></td><td></td></tr><tr><td><code>class_addMethod</code></td><td>添加方法</td></tr><tr><td><code>class_replaceMethod</code></td><td>替换方法实现</td></tr><tr><td><code>class_getInstanceMethod</code></td><td>获取实例方法</td></tr><tr><td><code>class_getClassMethod</code></td><td>获取类方法</td></tr><tr><td><code>class_copyMethodList</code></td><td>获取所有方法的数组</td></tr><tr><td><code>class_getMethodImplementation</code></td><td>返回方法实现</td></tr><tr><td><code>class_respondsToSelector</code></td><td>类实例是否响应指定的 selector</td></tr><tr><td><em>Protocol</em></td><td></td></tr><tr><td><code>class_addProtocol</code></td><td>添加协议</td></tr><tr><td><code>class_conformsToProtocol</code></td><td>是否实现指定的协议</td></tr></tbody></table><h2 id="message-forward" tabindex="-1"><a class="header-anchor" href="#message-forward" aria-hidden="true">#</a> Message Forward</h2><blockquote><p>消息转发 : <code>resolveInstanceMethod: -&gt; forwardingTargetForSelector: -&gt; methodSignatureForSelector: -&gt; forwardInvocation:</code></p></blockquote><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td><code>resolveInstanceMethod:</code></td><td>实例方法是否为动态添加</td></tr><tr><td><code>resolveClassMethod</code></td><td>类方法是否为动态添加</td></tr><tr><td><code>forwardingTargetForSelector:</code></td><td>指定那个对象响应消息</td></tr><tr><td><code>methodSignatureForSelector:</code></td><td>进行方法签名</td></tr><tr><td><code>forwardInvocation:</code></td><td>根据签名创建 NSInvocation</td></tr></tbody></table><h2 id="associated-object" tabindex="-1"><a class="header-anchor" href="#associated-object" aria-hidden="true">#</a> Associated Object</h2><blockquote><p>关联对象</p></blockquote><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">@interface</span> <span class="token function">NSObject</span> <span class="token punctuation">(</span>Extension<span class="token punctuation">)</span>
<span class="token keyword">@property</span> <span class="token punctuation">(</span>nonatomic<span class="token punctuation">,</span> copy<span class="token punctuation">)</span> NSString <span class="token operator">*</span>name<span class="token punctuation">;</span>
<span class="token keyword">@end</span>
<span class="token keyword">@implementation</span> <span class="token function">NSObject</span> <span class="token punctuation">(</span>Extension<span class="token punctuation">)</span>
<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>setName<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>name <span class="token punctuation">{</span>   
    <span class="token function">objc_setAssociatedObject</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">,</span> <span class="token keyword">@selector</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> OBJC_ASSOCIATION_COPY_NONATOMIC<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token operator">-</span> <span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>name <span class="token punctuation">{</span>   
    <span class="token keyword">return</span> <span class="token function">objc_getAssociatedObject</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">,</span><span class="token keyword">@selector</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">@end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="method-swizzling" tabindex="-1"><a class="header-anchor" href="#method-swizzling" aria-hidden="true">#</a> Method Swizzling</h2><blockquote><p>方法交换</p></blockquote><h2 id="type-encoding" tabindex="-1"><a class="header-anchor" href="#type-encoding" aria-hidden="true">#</a> Type Encoding</h2><blockquote><p>类型编码</p></blockquote>`,22);function C(O,x){const s=o("ExternalLinkIcon");return c(),d("div",null,[l(" more "),p,n("ul",null,[n("li",null,[n("a",u,[t("objc4"),a(s)])]),n("li",null,[n("a",k,[t("iOS-Runtime-Headers"),a(s)]),t(" : iOS 运行时头文件(包括私有 API) "),m]),n("li",null,[n("a",b,[t("Objective-C Runtime Programming Guide"),a(s)])]),n("li",null,[n("a",v,[t("Aspects"),a(s)]),h])]),_,n("ul",null,[n("li",null,[n("a",g,[t("2013.11.26 Objective-C 中的消息与消息转发"),a(s)])]),n("li",null,[n("a",f,[t("2014.11.05 Objective-C Runtime"),a(s)])]),n("li",null,[n("a",S,[t("2014.11.06 神经病院objc runtime入院考试"),a(s)])]),n("li",null,[n("a",y,[t("2016.06.15 Objective-C 消息发送与转发机制原理"),a(s)])]),n("li",null,[n("a",j,[t("2018.03.16 读 objc4 源码，深入理解 Objective-C Runtime"),a(s)])])]),w])}const P=e(r,[["render",C],["__file","index.html.vue"]]);export{P as default};
