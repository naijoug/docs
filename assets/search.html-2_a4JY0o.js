import{_ as l}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as r,c,a as i,b as e,e as n,d as s,f as t}from"./app-KOLbvikU.js";const d={},u=t('<h2 id="顺序搜素" tabindex="-1"><a class="header-anchor" href="#顺序搜素" aria-hidden="true">#</a> 顺序搜素</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code></code></pre><div class="line-numbers" aria-hidden="true"></div></div><h2 id="binary-search-二分搜索" tabindex="-1"><a class="header-anchor" href="#binary-search-二分搜索" aria-hidden="true">#</a> <code>Binary Search</code> - “二分搜索”</h2><p>二分搜索的前提条件是有序的数组，依赖数组的有序性。每次通过搜素区间的中间元素判断大小，从而缩小一半的搜索范围，搜索的范围成指数级别缩小。</p>',4),p={href:"https://leetcode.cn/problems/binary-search",target:"_blank",rel:"noopener noreferrer"},h=e("blockquote",null,[e("p",null,"给定一个升序数组和一个目标值，如果目标值在数组中返回目标值索引，如果不存在返回 -1。")],-1),v=e("div",{class:"language-java line-numbers-mode","data-ext":"java"},[e("pre",{class:"language-java"},[e("code",null,`
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),_={href:"https://leetcode.cn/problems/search-insert-position",target:"_blank",rel:"noopener noreferrer"},b=e("blockquote",null,[e("p",null,"给定一个升序数组和一个目标值，如果目标值在数组中存在返回目标值索引，如果不存在返回插入位置索引。")],-1),m=e("div",{class:"language-java line-numbers-mode","data-ext":"java"},[e("pre",{class:"language-java"},[e("code",null,`
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),k={href:"https://leetcode.cn/problems/first-bad-version",target:"_blank",rel:"noopener noreferrer"},g=e("blockquote",null,[e("p",null,[n("软件已经发行版本号 [1, 2, 3, ..., n]，通过函数 "),e("code",null,"bool isBadVersion(version)"),n(" 可以判断该版本是否发生该错误，现在需要查找到第一个发生该错误的版本。")])],-1),f=e("div",{class:"language-java line-numbers-mode","data-ext":"java"},[e("pre",{class:"language-java"},[e("code",null,`
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),j={href:"https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array",target:"_blank",rel:"noopener noreferrer"},x=t(`<blockquote><p>给定一个非递减数组和一个目标值，查找该目标值在数组中的开始位置和结束位置，如果存在则返回 [start, end]，如果不存在返回 [-1, -1]。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">searchRange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),y=e("h2",{id:"binary-search-tree-二叉搜索树",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#binary-search-tree-二叉搜索树","aria-hidden":"true"},"#"),n(),e("code",null,"Binary Search Tree"),n(" - “二叉搜索树”")],-1);function B(C,L){const a=o("ExternalLinkIcon");return r(),c("div",null,[i(" more "),u,e("ul",null,[e("li",null,[e("p",null,[e("a",p,[n("LeetCode 704"),s(a)])]),h,v]),e("li",null,[e("p",null,[n("变形版 "),e("a",_,[n("LeetCode 35"),s(a)])]),b,m]),e("li",null,[e("p",null,[n("升级版 "),e("a",k,[n("LeetCode 278 : 第一个错误的版本"),s(a)])]),g,f]),e("li",null,[e("p",null,[n("进阶版 "),e("a",j,[n("LeetCode 34 : 在排序数组中查找元素的第一个和最后一个位置"),s(a)])]),x])]),y])}const w=l(d,[["render",B],["__file","search.html.vue"]]);export{w as default};
