import{_ as r}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as c,o as u,c as p,a as d,b as n,e as s,d as e,w as t,f as h}from"./app--gyPjc9T.js";const _={},k=h('<h2 id="_0000" tabindex="-1"><a class="header-anchor" href="#_0000" aria-hidden="true">#</a> 0000</h2><p>// #region 0000</p><ul><li><a href="">🟢🟠🔴 - </a></li></ul><details class="hint-container details"><summary>💡</summary></details><p>// #endregion 0000</p><h2 id="_0001" tabindex="-1"><a class="header-anchor" href="#_0001" aria-hidden="true">#</a> 0001</h2><p>// #region 0001</p>',7),m={href:"https://leetcode.cn/problems/two-sum",target:"_blank",rel:"noopener noreferrer"},b={class:"hint-container details"},v=n("summary",null,"💡",-1),f=n("p",null,"【思路1】暴力法，两次遍历，外层循环固定其中一个值，内层循环遍历元素进行求和比较 【思路2】哈希表，遍历元素 num 时，将 target - num 作为键，值为索引，存入哈希表；继续遍历下一个元素，判断哈希表中是否存在与该元素键相等的数据存在，如果存在则返回结果 【思路3】双指针，这种方案需要先排序，然后首尾指针进行大小调整与 target 值进行比对，不过最后还需要通过结果值去原数组中找到目标索引。这种方法比较适用于直接求解目标值。",-1),g=n("div",{class:"language-swift line-numbers-mode","data-ext":"swift"},[n("pre",{class:"language-swift"},[n("code",null,[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Solution"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"func"),s(),n("span",{class:"token function-definition function"},"twoSum"),n("span",{class:"token punctuation"},"("),n("span",{class:"token omit keyword"},"_"),s(" nums"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token class-name"},"Int"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token omit keyword"},"_"),s(" target"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"Int"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"->"),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token class-name"},"Int"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"for"),s(" i "),n("span",{class:"token keyword"},"in"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token operator"},"..<"),s("nums"),n("span",{class:"token punctuation"},"."),s("count "),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"for"),s(" j "),n("span",{class:"token keyword"},"in"),s(" i"),n("span",{class:"token operator"},"+"),n("span",{class:"token number"},"1"),n("span",{class:"token operator"},"..<"),s("nums"),n("span",{class:"token punctuation"},"."),s("count "),n("span",{class:"token punctuation"},"{"),s(`
                `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("nums"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"+"),s(" nums"),n("span",{class:"token punctuation"},"["),s("j"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"=="),s(" target"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},","),s(" j"),n("span",{class:"token punctuation"},"]"),s(`
                `),n("span",{class:"token punctuation"},"}"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),y=n("div",{class:"language-swift line-numbers-mode","data-ext":"swift"},[n("pre",{class:"language-swift"},[n("code",null,[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Solution"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"func"),s(),n("span",{class:"token function-definition function"},"twoSum"),n("span",{class:"token punctuation"},"("),n("span",{class:"token omit keyword"},"_"),s(" nums"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token class-name"},"Int"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token omit keyword"},"_"),s(" target"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"Int"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"->"),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token class-name"},"Int"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"let"),s(" nums "),n("span",{class:"token operator"},"="),s(` nums
        `),n("span",{class:"token keyword"},"var"),s(" map "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token class-name"},"Int"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"Int"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token keyword"},"for"),s(" i "),n("span",{class:"token keyword"},"in"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token operator"},"..<"),s("nums"),n("span",{class:"token punctuation"},"."),s("count "),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"let"),s(" num "),n("span",{class:"token operator"},"="),s(" nums"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(`
            `),n("span",{class:"token keyword"},"guard"),s(),n("span",{class:"token keyword"},"let"),s(" index "),n("span",{class:"token operator"},"="),s(" map"),n("span",{class:"token punctuation"},"["),s("num"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
                map`),n("span",{class:"token punctuation"},"["),s("target "),n("span",{class:"token operator"},"-"),s(" num"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(` i
                `),n("span",{class:"token keyword"},"continue"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(` 
            `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"["),s("index"),n("span",{class:"token punctuation"},","),s(" i"),n("span",{class:"token punctuation"},"]"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),w=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Solution"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"int"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token function"},"twoSum"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(" nums"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"int"),s(" target"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token class-name"},"HashMap"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"Integer"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Integer"),n("span",{class:"token punctuation"},">")]),s(" map "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"HashMap"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" nums"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"int"),s(" num "),n("span",{class:"token operator"},"="),s(" nums"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("map"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"containsKey"),n("span",{class:"token punctuation"},"("),s("num"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token keyword"},"int"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token punctuation"},"{"),s(" map"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("num"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(" i "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
                map`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"put"),n("span",{class:"token punctuation"},"("),s("target "),n("span",{class:"token operator"},"-"),s(" num"),n("span",{class:"token punctuation"},","),s(" i"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token keyword"},"int"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),x=n("div",{class:"language-swift line-numbers-mode","data-ext":"swift"},[n("pre",{class:"language-swift"},[n("code",null,[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Solution"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"func"),s(),n("span",{class:"token function-definition function"},"twoSum"),n("span",{class:"token punctuation"},"("),n("span",{class:"token omit keyword"},"_"),s(" nums"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token class-name"},"Int"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token omit keyword"},"_"),s(" target"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"Int"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"->"),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token class-name"},"Int"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// 先对数组进行排序"),s(`
        `),n("span",{class:"token keyword"},"let"),s(" sortedNums "),n("span",{class:"token operator"},"="),s(" nums"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"sorted"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token keyword"},"var"),s(),n("span",{class:"token keyword"},"left"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),s(`
        `),n("span",{class:"token keyword"},"var"),s(),n("span",{class:"token keyword"},"right"),s(),n("span",{class:"token operator"},"="),s(" sortedNums"),n("span",{class:"token punctuation"},"."),s("count "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),s(`
        `),n("span",{class:"token comment"},"// 双指针定位前后值"),s(`
        `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token keyword"},"left"),s(),n("span",{class:"token operator"},"<"),s(),n("span",{class:"token keyword"},"right"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"let"),s(" sum "),n("span",{class:"token operator"},"="),s(" sortedNums"),n("span",{class:"token punctuation"},"["),n("span",{class:"token keyword"},"left"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"+"),s(" sortedNums"),n("span",{class:"token punctuation"},"["),n("span",{class:"token keyword"},"right"),n("span",{class:"token punctuation"},"]"),s(`
            `),n("span",{class:"token keyword"},"if"),s(" sum "),n("span",{class:"token operator"},"=="),s(" target "),n("span",{class:"token punctuation"},"{"),s(`
                `),n("span",{class:"token keyword"},"break"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token keyword"},"if"),s(" sum "),n("span",{class:"token operator"},"<"),s(" target "),n("span",{class:"token punctuation"},"{"),s(`
                `),n("span",{class:"token comment"},"// 和小于目标值，调整左边范围"),s(`
                `),n("span",{class:"token keyword"},"left"),s(),n("span",{class:"token operator"},"+="),s(),n("span",{class:"token number"},"1"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token comment"},"// sum > target"),s(`
                `),n("span",{class:"token comment"},"// 和大于目标值，调整右边范围"),s(`
                `),n("span",{class:"token keyword"},"right"),s(),n("span",{class:"token operator"},"-="),s(),n("span",{class:"token number"},"1"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token comment"},"// 获取值索引"),s(`
        `),n("span",{class:"token keyword"},"var"),s(" leftIndex"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"Int"),n("span",{class:"token operator"},"?"),s(`
        `),n("span",{class:"token keyword"},"var"),s(" rightIndex"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"Int"),n("span",{class:"token operator"},"?"),s(`
        `),n("span",{class:"token keyword"},"for"),s(" i "),n("span",{class:"token keyword"},"in"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token operator"},"..<"),s("nums"),n("span",{class:"token punctuation"},"."),s("count "),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"if"),s(" leftIndex "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token nil constant"},"nil"),n("span",{class:"token punctuation"},","),s(" sortedNums"),n("span",{class:"token punctuation"},"["),n("span",{class:"token keyword"},"left"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"=="),s(" nums"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token punctuation"},"{"),s(`
                leftIndex `),n("span",{class:"token operator"},"="),s(` i
            `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token keyword"},"if"),s(" sortedNums"),n("span",{class:"token punctuation"},"["),n("span",{class:"token keyword"},"right"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"=="),s(" nums"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token punctuation"},"{"),s(`
                rightIndex `),n("span",{class:"token operator"},"="),s(` i
            `),n("span",{class:"token punctuation"},"}"),s(`
            `),n("span",{class:"token keyword"},"guard"),s(),n("span",{class:"token keyword"},"let"),s(" leftIndex "),n("span",{class:"token operator"},"="),s(" leftIndex"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"let"),s(" rightIndex "),n("span",{class:"token operator"},"="),s(" rightIndex "),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
                `),n("span",{class:"token keyword"},"continue"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
            `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"["),s("leftIndex"),n("span",{class:"token punctuation"},","),s(" rightIndex"),n("span",{class:"token punctuation"},"]"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`

        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token keyword"},"left"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"right"),n("span",{class:"token punctuation"},"]"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),N=n("p",null,"// #endregion 0001",-1),L=n("h2",{id:"_0002",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0002","aria-hidden":"true"},"#"),s(" 0002")],-1),I=n("p",null,"// #region 0002",-1),j={href:"https://leetcode.cn/problems/add-two-numbers",target:"_blank",rel:"noopener noreferrer"},q=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),A=n("p",null,"// #endregion 0002",-1),S=n("h2",{id:"_0003",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0003","aria-hidden":"true"},"#"),s(" 0003")],-1),Q=n("p",null,"// #region 0003",-1),H={href:"https://leetcode.cn/problems/longest-substring-without-repeating-characters",target:"_blank",rel:"noopener noreferrer"},D=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),T=n("p",null,"// #endregion 0003",-1),C=n("h2",{id:"_0004",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0004","aria-hidden":"true"},"#"),s(" 0004")],-1),E=n("p",null,"// #region 0004",-1),K={href:"https://leetcode.cn/problems/median-of-two-sorted-arrays",target:"_blank",rel:"noopener noreferrer"},V=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),z=n("p",null,"// #endregion 0004",-1),B=n("h2",{id:"_0005",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0005","aria-hidden":"true"},"#"),s(" 0005")],-1),F=n("p",null,"// #region 0005",-1),M={href:"https://leetcode.cn/problems/longest-palindromic-substring/",target:"_blank",rel:"noopener noreferrer"},P=n("blockquote",null,[n("p",null,"给定一个字符串，返回该字符串中最长的回文串。")],-1),G=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),J=n("p",null,"// #endregion 0005",-1),O=n("h2",{id:"_0006",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0006","aria-hidden":"true"},"#"),s(" 0006")],-1),R=n("p",null,"// #region 0006",-1),U={href:"https://leetcode.cn/problems/zigzag-conversion",target:"_blank",rel:"noopener noreferrer"},W=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),X=n("p",null,"// #endregion 0006",-1),Y=n("h2",{id:"_0007",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0007","aria-hidden":"true"},"#"),s(" 0007")],-1),Z=n("p",null,"// #region 0007",-1),$={href:"https://leetcode.cn/problems/reverse-integer",target:"_blank",rel:"noopener noreferrer"},nn=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),sn=n("p",null,"// #endregion 0007",-1),en=n("h2",{id:"_0008",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0008","aria-hidden":"true"},"#"),s(" 0008")],-1),an=n("p",null,"// #region 0008",-1),tn={href:"https://leetcode.cn/problems/string-to-integer-atoi",target:"_blank",rel:"noopener noreferrer"},on=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),ln=n("p",null,"// #endregion 0008",-1),cn=n("h2",{id:"_0009",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0009","aria-hidden":"true"},"#"),s(" 0009")],-1),rn=n("p",null,"// #region 0009",-1),un={href:"https://leetcode.cn/problems/palindrome-number",target:"_blank",rel:"noopener noreferrer"},pn=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),dn=n("p",null,"// #endregion 0009",-1),hn=n("h2",{id:"_0010",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0010","aria-hidden":"true"},"#"),s(" 0010")],-1),_n=n("p",null,"// #region 0010",-1),kn={href:"https://leetcode.cn/problems/regular-expression-matching",target:"_blank",rel:"noopener noreferrer"},mn=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),bn=n("p",null,"// #endregion 0010",-1),vn=n("h2",{id:"_0011",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0011","aria-hidden":"true"},"#"),s(" 0011")],-1),fn=n("p",null,"// #region 0011",-1),gn={href:"https://leetcode.cn/problems/container-with-most-water",target:"_blank",rel:"noopener noreferrer"},yn=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),wn=n("p",null,"// #endregion 0011",-1),xn=n("h2",{id:"_0012",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0012","aria-hidden":"true"},"#"),s(" 0012")],-1),Nn=n("p",null,"// #region 0012",-1),Ln={href:"https://leetcode.cn/problems/integer-to-roman",target:"_blank",rel:"noopener noreferrer"},In=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),jn=n("p",null,"// #endregion 0012",-1),qn=n("h2",{id:"_0013",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0013","aria-hidden":"true"},"#"),s(" 0013")],-1),An=n("p",null,"// #region 0013",-1),Sn={href:"https://leetcode.cn/problems/roman-to-integer",target:"_blank",rel:"noopener noreferrer"},Qn=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Hn=n("p",null,"// #endregion 0013",-1),Dn=n("h2",{id:"_0014",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0014","aria-hidden":"true"},"#"),s(" 0014")],-1),Tn=n("p",null,"// #region 0014",-1),Cn={href:"https://leetcode.cn/problems/longest-common-prefix",target:"_blank",rel:"noopener noreferrer"},En=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Kn=n("p",null,"// #endregion 0014",-1),Vn=n("h2",{id:"_0015",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0015","aria-hidden":"true"},"#"),s(" 0015")],-1),zn=n("p",null,"// #region 0015",-1),Bn={href:"https://leetcode.cn/problems/3sum",target:"_blank",rel:"noopener noreferrer"},Fn=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Mn=n("p",null,"// #endregion 0015",-1),Pn=n("h2",{id:"_0016",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0016","aria-hidden":"true"},"#"),s(" 0016")],-1),Gn=n("p",null,"// #region 0016",-1),Jn={href:"https://leetcode.cn/problems/3sum-closest",target:"_blank",rel:"noopener noreferrer"},On=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Rn=n("p",null,"// #endregion 0016",-1),Un=n("h2",{id:"_0017",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0017","aria-hidden":"true"},"#"),s(" 0017")],-1),Wn=n("p",null,"// #region 0017",-1),Xn={href:"https://leetcode.cn/problems/letter-combinations-of-a-phone-number",target:"_blank",rel:"noopener noreferrer"},Yn=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Zn=n("p",null,"// #endregion 0017",-1),$n=n("h2",{id:"_0018",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0018","aria-hidden":"true"},"#"),s(" 0018")],-1),ns=n("p",null,"// #region 0018",-1),ss={href:"https://leetcode.cn/problems/4sum",target:"_blank",rel:"noopener noreferrer"},es=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),as=n("p",null,"// #endregion 0018",-1),ts=n("h2",{id:"_0019-✅",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0019-✅","aria-hidden":"true"},"#"),s(" 0019 ✅")],-1),os=n("p",null,"// #region 0019",-1),ls={href:"https://leetcode.cn/problems/remove-nth-node-from-end-of-list/",target:"_blank",rel:"noopener noreferrer"},is=n("blockquote",null,[n("p",null,"删除单链表的倒数第 N 个节点，并返回头结点。")],-1),cs={class:"hint-container details"},rs=n("summary",null,"💡",-1),us=n("p",null,"【思路1】遍历一次链表得到链表长度 len，第二次就能遍历到 len - n 的节点，进行删除操作即可。",-1),ps=n("p",null,"【思路2】栈，先将所有链表节点入栈，出栈时进行计数，当到第 n 个元素时进行删除处理。",-1),ds=n("p",null,"【思路3】快慢指针，快指针先走 n 步之后，快慢指针开始同时向前走，当快指针走到链表尾部，这慢指针刚好指向要删除的节点。",-1),hs=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token doc-comment comment"},[s(`/**
 * Definition for singly-linked list.
 * public class ListNode `),n("span",{class:"token punctuation"},"{"),s(`
 *     int val;
 *     ListNode next;
 *     ListNode() `),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),s(`
 *     ListNode(int val) `),n("span",{class:"token punctuation"},"{"),s(" this.val = val; "),n("span",{class:"token punctuation"},"}"),s(`
 *     ListNode(int val, ListNode next) `),n("span",{class:"token punctuation"},"{"),s(" this.val = val; this.next = next; "),n("span",{class:"token punctuation"},"}"),s(`
 * `),n("span",{class:"token punctuation"},"}"),s(`
 */`)]),s(`
`),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Solution"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"ListNode"),s(),n("span",{class:"token function"},"removeNthFromEnd"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"ListNode"),s(" head"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"int"),s(" n"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// 创建虚头节点，解决删除后链表为空的特殊情况，减少判断逻辑"),s(`
        `),n("span",{class:"token class-name"},"ListNode"),s(" dummy "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        dummy`),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(" head"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token class-name"},"ListNode"),s(" p "),n("span",{class:"token operator"},"="),s(" dummy"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token class-name"},"ListNode"),s(" target "),n("span",{class:"token operator"},"="),s(" dummy"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token comment"},"// p 指针先走 n 步"),s(`
        `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" n"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            p `),n("span",{class:"token operator"},"="),s(" p"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token comment"},"// p 指针和目标指针开始同时走"),s(`
        `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("p"),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            p `),n("span",{class:"token operator"},"="),s(" p"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
            target `),n("span",{class:"token operator"},"="),s(" target"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token comment"},"// 删除目标节点后面节点"),s(`
        target`),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(" target"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"return"),s(" dummy"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),_s=n("div",{class:"language-swift line-numbers-mode","data-ext":"swift"},[n("pre",{class:"language-swift"},[n("code",null,[n("span",{class:"token comment"},`/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init() { self.val = 0; self.next = nil; }
 *     public init(_ val: Int) { self.val = val; self.next = nil; }
 *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }
 * }
 */`),s(`
`),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Solution"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"func"),s(),n("span",{class:"token function-definition function"},"removeNthFromEnd"),n("span",{class:"token punctuation"},"("),n("span",{class:"token omit keyword"},"_"),s(" head"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token omit keyword"},"_"),s(" n"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"Int"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"->"),s(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"let"),s(" dummy "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(" head"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token keyword"},"var"),s(" p1"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token operator"},"="),s(` head
        `),n("span",{class:"token keyword"},"var"),s(" p2"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token operator"},"="),s(` dummy
        `),n("span",{class:"token keyword"},"var"),s(" count "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),s(`
        `),n("span",{class:"token keyword"},"while"),s(" p1"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token nil constant"},"nil"),s(),n("span",{class:"token punctuation"},"{"),s(`
            p1 `),n("span",{class:"token operator"},"="),s(" p1"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),s(`next
            count `),n("span",{class:"token operator"},"+="),s(),n("span",{class:"token number"},"1"),s(`
            `),n("span",{class:"token keyword"},"guard"),s(" count "),n("span",{class:"token operator"},">="),s(" n "),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token keyword"},"continue"),s(),n("span",{class:"token punctuation"},"}"),s(`
            p2 `),n("span",{class:"token operator"},"="),s(" p2"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),s(`next
        `),n("span",{class:"token punctuation"},"}"),s(`
        p2`),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(" p2"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),s(`next
        `),n("span",{class:"token keyword"},"return"),s(" dummy"),n("span",{class:"token punctuation"},"."),s(`next
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),ks=n("p",null,"// #endregion 0019",-1),ms=n("h2",{id:"_0020",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0020","aria-hidden":"true"},"#"),s(" 0020")],-1),bs=n("p",null,"// #region 0020",-1),vs={href:"https://leetcode.cn/problems/valid-parentheses",target:"_blank",rel:"noopener noreferrer"},fs=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),gs=n("p",null,"// #endregion 0020",-1),ys=n("h2",{id:"_0021-✅",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0021-✅","aria-hidden":"true"},"#"),s(" 0021 ✅")],-1),ws=n("p",null,"// #region 0021",-1),xs={href:"https://leetcode.cn/problems/merge-two-sorted-lists",target:"_blank",rel:"noopener noreferrer"},Ns=n("blockquote",null,[n("p",null,"合并两个有序的链表。")],-1),Ls={class:"hint-container details"},Is=n("summary",null,"💡",-1),js=n("p",null,"【思路】创建一个结果链表头，并用一个指针指向这个结果链表用于指向添加位置。然后分别使用两个指针指向两个链表，每次比较比较链表中的值，将较小的链表中的节点添加到结果链表中。直到其中一个链表中已为空，最后将剩下不为空的链表全部添加到结果链表中。",-1),qs=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token doc-comment comment"},[s(`/**
 * Definition for singly-linked list.
 * public class ListNode `),n("span",{class:"token punctuation"},"{"),s(`
 *     int val;
 *     ListNode next;
 *     ListNode() `),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),s(`
 *     ListNode(int val) `),n("span",{class:"token punctuation"},"{"),s(" this.val = val; "),n("span",{class:"token punctuation"},"}"),s(`
 *     ListNode(int val, ListNode next) `),n("span",{class:"token punctuation"},"{"),s(" this.val = val; this.next = next; "),n("span",{class:"token punctuation"},"}"),s(`
 * `),n("span",{class:"token punctuation"},"}"),s(`
 */`)]),s(`
`),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Solution"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"ListNode"),s(),n("span",{class:"token function"},"mergeTwoLists"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"ListNode"),s(" list1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"ListNode"),s(" list2"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// 头结点：指向结果链表头部"),s(`
        `),n("span",{class:"token class-name"},"ListNode"),s(" head "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token class-name"},"ListNode"),s(" p "),n("span",{class:"token operator"},"="),s(" head"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token class-name"},"ListNode"),s(" p1 "),n("span",{class:"token operator"},"="),s(" list1"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token class-name"},"ListNode"),s(" p2 "),n("span",{class:"token operator"},"="),s(" list2"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s(" p1 "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"null"),s(),n("span",{class:"token operator"},"&&"),s(" p2 "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"null"),s(),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token comment"},"// 比较两个链表中值小的添加到结果链表中"),s(`
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s(" p1"),n("span",{class:"token punctuation"},"."),s("val "),n("span",{class:"token operator"},"<="),s(" p2"),n("span",{class:"token punctuation"},"."),s("val "),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                p`),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(" p1"),n("span",{class:"token punctuation"},";"),s(`
                p1 `),n("span",{class:"token operator"},"="),s(" p1"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
                p`),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(" p2"),n("span",{class:"token punctuation"},";"),s(`
                p2 `),n("span",{class:"token operator"},"="),s(" p2"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
            p `),n("span",{class:"token operator"},"="),s(" p"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token comment"},"// 将不为空的链表添加到结果链表尾部"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s(" p1 "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"null"),s(),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            p`),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(" p1"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s(" p2 "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"null"),s(),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            p`),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(" p2"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"return"),s(" head"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),As=n("div",{class:"language-swift line-numbers-mode","data-ext":"swift"},[n("pre",{class:"language-swift"},[n("code",null,[n("span",{class:"token comment"},`/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.next = nil
 *     }
 * }
 */`),s(`
`),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Solution"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"func"),s(),n("span",{class:"token function-definition function"},"mergeTwoLists"),n("span",{class:"token punctuation"},"("),n("span",{class:"token omit keyword"},"_"),s(" l1"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token omit keyword"},"_"),s(" l2"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"->"),s(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"guard"),s(),n("span",{class:"token keyword"},"let"),s(" l1 "),n("span",{class:"token operator"},"="),s(" l1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"let"),s(" l2 "),n("span",{class:"token operator"},"="),s(" l2 "),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"return"),s(" l1 "),n("span",{class:"token operator"},"??"),s(` l2
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"let"),s(" head "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token keyword"},"var"),s(" p"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token operator"},"="),s(` head
        `),n("span",{class:"token keyword"},"var"),s(" op1"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token operator"},"="),s(` l1
        `),n("span",{class:"token keyword"},"var"),s(" op2"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token operator"},"="),s(` l2
        `),n("span",{class:"token comment"},"// 遍历两个链表，并将较小值节点添加到结果链表"),s(`
        `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token keyword"},"let"),s(" p1 "),n("span",{class:"token operator"},"="),s(" op1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"let"),s(" p2 "),n("span",{class:"token operator"},"="),s(" op2 "),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"if"),s(" p1"),n("span",{class:"token punctuation"},"."),s("val "),n("span",{class:"token operator"},"<="),s(" p2"),n("span",{class:"token punctuation"},"."),s("val "),n("span",{class:"token punctuation"},"{"),s(`
                p`),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(` p1
                op1 `),n("span",{class:"token operator"},"="),s(" op1"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),s(`next
            `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
                p`),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(` p2
                op2 `),n("span",{class:"token operator"},"="),s(" op2"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),s(`next
            `),n("span",{class:"token punctuation"},"}"),s(`
            p `),n("span",{class:"token operator"},"="),s(" p"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),s(`next
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token comment"},"// 将不为空的链表添加到结果链表后面"),s(`
        p`),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(" op1 "),n("span",{class:"token operator"},"??"),s(` op2
        `),n("span",{class:"token keyword"},"return"),s(" head"),n("span",{class:"token punctuation"},"."),s(`next
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Ss=n("p",null,"// #endregion 0021",-1),Qs=n("h2",{id:"_0022",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0022","aria-hidden":"true"},"#"),s(" 0022")],-1),Hs=n("p",null,"// #region 0022",-1),Ds={href:"https://leetcode.cn/problems/generate-parentheses",target:"_blank",rel:"noopener noreferrer"},Ts=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Cs=n("p",null,"// #endregion 0022",-1),Es=n("h2",{id:"_0023-✅",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0023-✅","aria-hidden":"true"},"#"),s(" 0023 ✅")],-1),Ks=n("p",null,"// #region 0023",-1),Vs={href:"https://leetcode.cn/problems/merge-k-sorted-lists",target:"_blank",rel:"noopener noreferrer"},zs=n("blockquote",null,[n("p",null,"给定一个升序链表数组，合并得到一个升序链表，并返回头结点。")],-1),Bs={class:"hint-container details"},Fs=n("summary",null,"💡",-1),Ms=n("p",null,"【思路1】合并两个升序链表比较容易解决。合并多个链表，可以先两个两个合并，最后就合并成一个了。",-1),Ps=n("p",null,"【思路2】分治思想，类似归并排序，两两合并，最后合并成为结果链表。",-1),Gs=n("p",null,"【思路3】优先级队列，每次将 K 个链表的头结点放入优先级队列中，那么可以每次从优先级队列中取出最小值节点放入结果链表，然后再将该节点的下一个节点放入优先级队列，直到合并完成。",-1),Js=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token doc-comment comment"},[s(`/**
 * Definition for singly-linked list.
 * public class ListNode `),n("span",{class:"token punctuation"},"{"),s(`
 *     int val;
 *     ListNode next;
 *     ListNode() `),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),s(`
 *     ListNode(int val) `),n("span",{class:"token punctuation"},"{"),s(" this.val = val; "),n("span",{class:"token punctuation"},"}"),s(`
 *     ListNode(int val, ListNode next) `),n("span",{class:"token punctuation"},"{"),s(" this.val = val; this.next = next; "),n("span",{class:"token punctuation"},"}"),s(`
 * `),n("span",{class:"token punctuation"},"}"),s(`
 */`)]),s(`
`),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Solution"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"ListNode"),s(),n("span",{class:"token function"},"mergeKLists"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(" lists"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s(" lists"),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s(" lists"),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token keyword"},"return"),s(" lists"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token comment"},"// 遍历链表数组，每次取出一个链表，进行两条链表合并"),s(`
        `),n("span",{class:"token class-name"},"ListNode"),s(" l1 "),n("span",{class:"token operator"},"="),s(" lists"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),s(),n("span",{class:"token keyword"},"int"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" lists"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),s(),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token class-name"},"ListNode"),s(" l2 "),n("span",{class:"token operator"},"="),s(" lists"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
            l1 `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"mergeTwoLists"),n("span",{class:"token punctuation"},"("),s("l1"),n("span",{class:"token punctuation"},","),s(" l2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"return"),s(" l1"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token comment"},"// 合并两个升序链表"),s(`
    `),n("span",{class:"token class-name"},"ListNode"),s(),n("span",{class:"token function"},"mergeTwoLists"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"ListNode"),s(" l1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"ListNode"),s(" l2"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token class-name"},"ListNode"),s(" head "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token class-name"},"ListNode"),s(" p "),n("span",{class:"token operator"},"="),s(" head"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token class-name"},"ListNode"),s(" p1 "),n("span",{class:"token operator"},"="),s(" l1"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token class-name"},"ListNode"),s(" p2 "),n("span",{class:"token operator"},"="),s(" l2"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s(" p1 "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"null"),s(),n("span",{class:"token operator"},"&&"),s(" p2 "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"null"),s(),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s(" p1"),n("span",{class:"token punctuation"},"."),s("val "),n("span",{class:"token operator"},"<="),s(" p2"),n("span",{class:"token punctuation"},"."),s("val "),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                p`),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(" p1"),n("span",{class:"token punctuation"},";"),s(`
                p1 `),n("span",{class:"token operator"},"="),s(" p1"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
                p`),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(" p2"),n("span",{class:"token punctuation"},";"),s(`
                p2 `),n("span",{class:"token operator"},"="),s(" p2"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
            p `),n("span",{class:"token operator"},"="),s(" p"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s(" p1 "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"null"),s(),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            p`),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(" p1"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s(" p2 "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"null"),s(),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            p`),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(" p2"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"return"),s(" head"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Os=n("p",null,"// #endregion 0023",-1),Rs=n("h2",{id:"_0024",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0024","aria-hidden":"true"},"#"),s(" 0024")],-1),Us=n("p",null,"// #region 0024",-1),Ws={href:"https://leetcode.cn/problems/swap-nodes-in-pairs",target:"_blank",rel:"noopener noreferrer"},Xs=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Ys=n("p",null,"// #endregion 0024",-1),Zs=n("h2",{id:"_0025",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0025","aria-hidden":"true"},"#"),s(" 0025")],-1),$s=n("p",null,"// #region 0025",-1),ne={href:"https://leetcode.cn/problems/reverse-nodes-in-k-group",target:"_blank",rel:"noopener noreferrer"},se=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),ee=n("p",null,"// #endregion 0025",-1),ae=n("h2",{id:"_0026",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0026","aria-hidden":"true"},"#"),s(" 0026")],-1),te=n("p",null,"// #region 0026",-1),oe={href:"https://leetcode.cn/problems/remove-duplicates-from-sorted-array",target:"_blank",rel:"noopener noreferrer"},le=n("blockquote",null,[n("p",null,"给定一个有序数组，删除数组中的重复项，并返回数组新长度。")],-1),ie=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),ce=n("p",null,"// #endregion 0026",-1),re=n("h2",{id:"_0027",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0027","aria-hidden":"true"},"#"),s(" 0027")],-1),ue=n("p",null,"// #region 0027",-1),pe={href:"https://leetcode.cn/problems/remove-element",target:"_blank",rel:"noopener noreferrer"},de=n("blockquote",null,[n("p",null,"给定一个数组和目标值，需要将数组中的与目标值相等的元素移除，返回数组新长度。")],-1),he=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),_e=n("p",null,"// #endregion 0027",-1),ke=n("h2",{id:"_0028",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0028","aria-hidden":"true"},"#"),s(" 0028")],-1),me=n("p",null,"// #region 0028",-1),be={href:"https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string",target:"_blank",rel:"noopener noreferrer"},ve=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),fe=n("p",null,"// #endregion 0028",-1),ge=n("h2",{id:"_0029",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0029","aria-hidden":"true"},"#"),s(" 0029")],-1),ye=n("p",null,"// #region 0029",-1),we={href:"https://leetcode.cn/problems/divide-two-integers",target:"_blank",rel:"noopener noreferrer"},xe=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Ne=n("p",null,"// #endregion 0029",-1),Le=n("h2",{id:"_0030",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0030","aria-hidden":"true"},"#"),s(" 0030")],-1),Ie=n("p",null,"// #region 0030",-1),je={href:"https://leetcode.cn/problems/substring-with-concatenation-of-all-words",target:"_blank",rel:"noopener noreferrer"},qe=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Ae=n("p",null,"// #endregion 0030",-1),Se=n("h2",{id:"_0031",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0031","aria-hidden":"true"},"#"),s(" 0031")],-1),Qe=n("p",null,"// #region 0031",-1),He={href:"https://leetcode.cn/problems/next-permutation",target:"_blank",rel:"noopener noreferrer"},De=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Te=n("p",null,"// #endregion 0031",-1),Ce=n("h2",{id:"_0032",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0032","aria-hidden":"true"},"#"),s(" 0032")],-1),Ee=n("p",null,"// #region 0032",-1),Ke={href:"https://leetcode.cn/problems/longest-valid-parentheses",target:"_blank",rel:"noopener noreferrer"},Ve=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),ze=n("p",null,"// #endregion 0032",-1),Be=n("h2",{id:"_0033",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0033","aria-hidden":"true"},"#"),s(" 0033")],-1),Fe=n("p",null,"// #region 0033",-1),Me={href:"https://leetcode.cn/problems/search-in-rotated-sorted-array",target:"_blank",rel:"noopener noreferrer"},Pe=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Ge=n("p",null,"// #endregion 0033",-1),Je=n("h2",{id:"_0034",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0034","aria-hidden":"true"},"#"),s(" 0034")],-1),Oe=n("p",null,"// #region 0034",-1),Re={href:"https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array",target:"_blank",rel:"noopener noreferrer"},Ue=n("blockquote",null,[n("p",null,"给定一个非递减数组和一个目标值，查找该目标值在数组中的开始位置和结束位置，如果存在则返回 [start, end]，如果不存在返回 [-1, -1]。")],-1),We=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Xe=n("p",null,"// #endregion 0034",-1),Ye=n("h2",{id:"_0035",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0035","aria-hidden":"true"},"#"),s(" 0035")],-1),Ze=n("p",null,"// #region 0035",-1),$e={href:"https://leetcode.cn/problems/search-insert-position",target:"_blank",rel:"noopener noreferrer"},na=n("blockquote",null,[n("p",null,"给定一个升序数组和一个目标值，如果目标值在数组中存在返回目标值索引，如果不存在返回插入位置索引。")],-1),sa=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),ea=n("p",null,"// #endregion 0035",-1),aa=n("h2",{id:"_0036",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0036","aria-hidden":"true"},"#"),s(" 0036")],-1),ta=n("p",null,"// #region 0036",-1),oa={href:"https://leetcode.cn/problems/valid-sudoku",target:"_blank",rel:"noopener noreferrer"},la=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),ia=n("p",null,"// #endregion 0036",-1),ca=n("h2",{id:"_0037",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0037","aria-hidden":"true"},"#"),s(" 0037")],-1),ra=n("p",null,"// #region 0037",-1),ua={href:"https://leetcode.cn/problems/sudoku-solver",target:"_blank",rel:"noopener noreferrer"},pa=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),da=n("p",null,"// #endregion 0037",-1),ha=n("h2",{id:"_0038",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0038","aria-hidden":"true"},"#"),s(" 0038")],-1),_a=n("p",null,"// #region 0038",-1),ka={href:"https://leetcode.cn/problems/count-and-say",target:"_blank",rel:"noopener noreferrer"},ma=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),ba=n("p",null,"// #endregion 0038",-1),va=n("h2",{id:"_0039",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0039","aria-hidden":"true"},"#"),s(" 0039")],-1),fa=n("p",null,"// #region 0039",-1),ga={href:"https://leetcode.cn/problems/combination-sum",target:"_blank",rel:"noopener noreferrer"},ya=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),wa=n("p",null,"// #endregion 0039",-1),xa=n("h2",{id:"_0040",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0040","aria-hidden":"true"},"#"),s(" 0040")],-1),Na=n("p",null,"// #region 0040",-1),La={href:"https://leetcode.cn/problems/combination-sum-ii",target:"_blank",rel:"noopener noreferrer"},Ia=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),ja=n("p",null,"// #endregion 0040",-1),qa=n("h2",{id:"_0041",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0041","aria-hidden":"true"},"#"),s(" 0041")],-1),Aa=n("p",null,"// #region 0041",-1),Sa={href:"https://leetcode.cn/problems/first-missing-positive",target:"_blank",rel:"noopener noreferrer"},Qa=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Ha=n("p",null,"// #endregion 0041",-1),Da=n("h2",{id:"_0042",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0042","aria-hidden":"true"},"#"),s(" 0042")],-1),Ta=n("p",null,"// #region 0042",-1),Ca={href:"https://leetcode.cn/problems/trapping-rain-water",target:"_blank",rel:"noopener noreferrer"},Ea=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Ka=n("p",null,"// #endregion 0042",-1),Va=n("h2",{id:"_0043",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0043","aria-hidden":"true"},"#"),s(" 0043")],-1),za=n("p",null,"// #region 0043",-1),Ba={href:"https://leetcode.cn/problems/multiply-strings",target:"_blank",rel:"noopener noreferrer"},Fa=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Ma=n("p",null,"// #endregion 0043",-1),Pa=n("h2",{id:"_0044",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0044","aria-hidden":"true"},"#"),s(" 0044")],-1),Ga=n("p",null,"// #region 0044",-1),Ja={href:"https://leetcode.cn/problems/wildcard-matching",target:"_blank",rel:"noopener noreferrer"},Oa=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Ra=n("p",null,"// #endregion 0044",-1),Ua=n("h2",{id:"_0045",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0045","aria-hidden":"true"},"#"),s(" 0045")],-1),Wa=n("p",null,"// #region 0045",-1),Xa={href:"https://leetcode.cn/problems/jump-game-ii",target:"_blank",rel:"noopener noreferrer"},Ya=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Za=n("p",null,"// #endregion 0045",-1),$a=n("h2",{id:"_0046",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0046","aria-hidden":"true"},"#"),s(" 0046")],-1),nt=n("p",null,"// #region 0046",-1),st={href:"https://leetcode.cn/problems/permutations",target:"_blank",rel:"noopener noreferrer"},et=n("blockquote",null,[n("p",null,"给定一个没有重复数字的数组，返回其所有可能的全排列。")],-1),at=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),tt=n("p",null,"// #endregion 0046",-1),ot=n("h2",{id:"_0047",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0047","aria-hidden":"true"},"#"),s(" 0047")],-1),lt=n("p",null,"// #region 0047",-1),it={href:"https://leetcode.cn/problems/permutations-ii",target:"_blank",rel:"noopener noreferrer"},ct=n("blockquote",null,[n("p",null,"给定一个包含重复数字的数组，返回所有不重复的全排列。")],-1),rt=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),ut=n("p",null,"// #endregion 0047",-1),pt=n("h2",{id:"_0048",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0048","aria-hidden":"true"},"#"),s(" 0048")],-1),dt=n("p",null,"// #region 0048",-1),ht={href:"https://leetcode.cn/problems/rotate-image",target:"_blank",rel:"noopener noreferrer"},_t=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),kt=n("p",null,"// #endregion 0048",-1),mt=n("h2",{id:"_0049",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0049","aria-hidden":"true"},"#"),s(" 0049")],-1),bt=n("p",null,"// #region 0049",-1),vt={href:"https://leetcode.cn/problems/group-anagrams",target:"_blank",rel:"noopener noreferrer"},ft=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),gt=n("p",null,"// #endregion 0049",-1),yt=n("h2",{id:"_0050",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0050","aria-hidden":"true"},"#"),s(" 0050")],-1),wt=n("p",null,"// #region 0050",-1),xt={href:"https://leetcode.cn/problems/powx-n",target:"_blank",rel:"noopener noreferrer"},Nt=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Lt=n("p",null,"// #endregion 0050",-1),It=n("h2",{id:"_0051",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0051","aria-hidden":"true"},"#"),s(" 0051")],-1),jt=n("p",null,"// #region 0051",-1),qt={href:"https://leetcode.cn/problems/n-queens",target:"_blank",rel:"noopener noreferrer"},At=n("blockquote",null,[n("p",null,"将 n 个皇后棋子，放置在 nxn 的棋盘中。'Q'代表皇后，'.'代表空位，返回所有的不同的解决方案。")],-1),St=n("pre",null,[n("code",null,`  示例：
      输入：n = 4
      输出：[[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]
      输入：n = 1
      输出：[["Q"]]
`)],-1),Qt=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Ht=n("p",null,"// #endregion 0051",-1),Dt=n("h2",{id:"_0052",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0052","aria-hidden":"true"},"#"),s(" 0052")],-1),Tt=n("p",null,"// #region 0052",-1),Ct={href:"https://leetcode.cn/problems/n-queens-ii",target:"_blank",rel:"noopener noreferrer"},Et=n("blockquote",null,[n("p",null,"返回 N 皇后问题的解决方案数量")],-1),Kt=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Vt=n("p",null,"// #endregion 0052",-1),zt=n("h2",{id:"_0053",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0053","aria-hidden":"true"},"#"),s(" 0053")],-1),Bt=n("p",null,"// #region 0053",-1),Ft={href:"https://leetcode.cn/problems/maximum-subarray",target:"_blank",rel:"noopener noreferrer"},Mt=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Pt=n("p",null,"// #endregion 0053",-1),Gt=n("h2",{id:"_0054",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0054","aria-hidden":"true"},"#"),s(" 0054")],-1),Jt=n("p",null,"// #region 0054",-1),Ot={href:"https://leetcode.cn/problems/spiral-matrix",target:"_blank",rel:"noopener noreferrer"},Rt=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Ut=n("p",null,"// #endregion 0054",-1),Wt=n("h2",{id:"_0055",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0055","aria-hidden":"true"},"#"),s(" 0055")],-1),Xt=n("p",null,"// #region 0055",-1),Yt={href:"https://leetcode.cn/problems/jump-game",target:"_blank",rel:"noopener noreferrer"},Zt=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),$t=n("p",null,"// #endregion 0055",-1),no=n("h2",{id:"_0056",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0056","aria-hidden":"true"},"#"),s(" 0056")],-1),so=n("p",null,"// #region 0056",-1),eo={href:"https://leetcode.cn/problems/merge-intervals",target:"_blank",rel:"noopener noreferrer"},ao=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),to=n("p",null,"// #endregion 0056",-1),oo=n("h2",{id:"_0057",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0057","aria-hidden":"true"},"#"),s(" 0057")],-1),lo=n("p",null,"// #region 0057",-1),io={href:"https://leetcode.cn/problems/insert-interval",target:"_blank",rel:"noopener noreferrer"},co=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),ro=n("p",null,"// #endregion 0057",-1),uo=n("h2",{id:"_0058",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0058","aria-hidden":"true"},"#"),s(" 0058")],-1),po=n("p",null,"// #region 0058",-1),ho={href:"https://leetcode.cn/problems/length-of-last-word",target:"_blank",rel:"noopener noreferrer"},_o=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),ko=n("p",null,"// #endregion 0058",-1),mo=n("h2",{id:"_0059",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0059","aria-hidden":"true"},"#"),s(" 0059")],-1),bo=n("p",null,"// #region 0059",-1),vo={href:"https://leetcode.cn/problems/spiral-matrix-ii",target:"_blank",rel:"noopener noreferrer"},fo=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),go=n("p",null,"// #endregion 0059",-1),yo=n("h2",{id:"_0060",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0060","aria-hidden":"true"},"#"),s(" 0060")],-1),wo=n("p",null,"// #region 0060",-1),xo={href:"https://leetcode.cn/problems/permutation-sequence",target:"_blank",rel:"noopener noreferrer"},No=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Lo=n("p",null,"// #endregion 0060",-1),Io=n("h2",{id:"_0061",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0061","aria-hidden":"true"},"#"),s(" 0061")],-1),jo=n("p",null,"// #region 0061",-1),qo={href:"https://leetcode.cn/problems/rotate-list",target:"_blank",rel:"noopener noreferrer"},Ao=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),So=n("p",null,"// #endregion 0061",-1),Qo=n("h2",{id:"_0062",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0062","aria-hidden":"true"},"#"),s(" 0062")],-1),Ho=n("p",null,"// #region 0062",-1),Do={href:"https://leetcode.cn/problems/unique-paths",target:"_blank",rel:"noopener noreferrer"},To=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Co=n("p",null,"// #endregion 0062",-1),Eo=n("h2",{id:"_0063",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0063","aria-hidden":"true"},"#"),s(" 0063")],-1),Ko=n("p",null,"// #region 0063",-1),Vo={href:"https://leetcode.cn/problems/unique-paths-ii",target:"_blank",rel:"noopener noreferrer"},zo=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Bo=n("p",null,"// #endregion 0063",-1),Fo=n("h2",{id:"_0064",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0064","aria-hidden":"true"},"#"),s(" 0064")],-1),Mo=n("p",null,"// #region 0064",-1),Po={href:"https://leetcode.cn/problems/minimum-path-sum",target:"_blank",rel:"noopener noreferrer"},Go=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Jo=n("p",null,"// #endregion 0064",-1),Oo=n("h2",{id:"_0065",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0065","aria-hidden":"true"},"#"),s(" 0065")],-1),Ro=n("p",null,"// #region 0065",-1),Uo={href:"https://leetcode.cn/problems/valid-number",target:"_blank",rel:"noopener noreferrer"},Wo=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Xo=n("p",null,"// #endregion 0065",-1),Yo=n("h2",{id:"_0066",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0066","aria-hidden":"true"},"#"),s(" 0066")],-1),Zo=n("p",null,"// #region 0066",-1),$o={href:"https://leetcode.cn/problems/plus-one",target:"_blank",rel:"noopener noreferrer"},nl=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),sl=n("p",null,"// #endregion 0066",-1),el=n("h2",{id:"_0067",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0067","aria-hidden":"true"},"#"),s(" 0067")],-1),al=n("p",null,"// #region 0067",-1),tl={href:"https://leetcode.cn/problems/add-binary",target:"_blank",rel:"noopener noreferrer"},ol=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),ll=n("p",null,"// #endregion 0067",-1),il=n("h2",{id:"_0068",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0068","aria-hidden":"true"},"#"),s(" 0068")],-1),cl=n("p",null,"// #region 0068",-1),rl={href:"https://leetcode.cn/problems/text-justification",target:"_blank",rel:"noopener noreferrer"},ul=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),pl=n("p",null,"// #endregion 0068",-1),dl=n("h2",{id:"_0069",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0069","aria-hidden":"true"},"#"),s(" 0069")],-1),hl=n("p",null,"// #region 0069",-1),_l={href:"https://leetcode.cn/problems/sqrtx",target:"_blank",rel:"noopener noreferrer"},kl=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),ml=n("p",null,"// #endregion 0069",-1),bl=n("h2",{id:"_0070",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0070","aria-hidden":"true"},"#"),s(" 0070")],-1),vl=n("p",null,"// #region 0070",-1),fl={href:"https://leetcode.cn/problems/climbing-stairs",target:"_blank",rel:"noopener noreferrer"},gl=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),yl=n("p",null,"// #endregion 0070",-1),wl=n("h2",{id:"_0071",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0071","aria-hidden":"true"},"#"),s(" 0071")],-1),xl=n("p",null,"// #region 0071",-1),Nl={href:"https://leetcode.cn/problems/simplify-path",target:"_blank",rel:"noopener noreferrer"},Ll=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Il=n("p",null,"// #endregion 0071",-1),jl=n("h2",{id:"_0072",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0072","aria-hidden":"true"},"#"),s(" 0072")],-1),ql=n("p",null,"// #region 0072",-1),Al={href:"https://leetcode.cn/problems/edit-distance",target:"_blank",rel:"noopener noreferrer"},Sl=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Ql=n("p",null,"// #endregion 0072",-1),Hl=n("h2",{id:"_0073",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0073","aria-hidden":"true"},"#"),s(" 0073")],-1),Dl=n("p",null,"// #region 0073",-1),Tl={href:"https://leetcode.cn/problems/set-matrix-zeroes",target:"_blank",rel:"noopener noreferrer"},Cl=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),El=n("p",null,"// #endregion 0073",-1),Kl=n("h2",{id:"_0074",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0074","aria-hidden":"true"},"#"),s(" 0074")],-1),Vl=n("p",null,"// #region 0074",-1),zl={href:"https://leetcode.cn/problems/search-a-2d-matrix",target:"_blank",rel:"noopener noreferrer"},Bl=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Fl=n("p",null,"// #endregion 0074",-1),Ml=n("h2",{id:"_0075",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0075","aria-hidden":"true"},"#"),s(" 0075")],-1),Pl=n("p",null,"// #region 0075",-1),Gl={href:"https://leetcode.cn/problems/sort-colors",target:"_blank",rel:"noopener noreferrer"},Jl=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Ol=n("p",null,"// #endregion 0075",-1),Rl=n("h2",{id:"_0076",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0076","aria-hidden":"true"},"#"),s(" 0076")],-1),Ul=n("p",null,"// #region 0076",-1),Wl={href:"https://leetcode.cn/problems/minimum-window-substring",target:"_blank",rel:"noopener noreferrer"},Xl=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Yl=n("p",null,"// #endregion 0076",-1),Zl=n("h2",{id:"_0077",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0077","aria-hidden":"true"},"#"),s(" 0077")],-1),$l=n("p",null,"// #region 0077",-1),ni={href:"https://leetcode.cn/problems/combinations",target:"_blank",rel:"noopener noreferrer"},si=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),ei=n("p",null,"// #endregion 0077",-1),ai=n("h2",{id:"_0078",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0078","aria-hidden":"true"},"#"),s(" 0078")],-1),ti=n("p",null,"// #region 0078",-1),oi={href:"https://leetcode.cn/problems/subsets",target:"_blank",rel:"noopener noreferrer"},li=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),ii=n("p",null,"// #endregion 0078",-1),ci=n("h2",{id:"_0079",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0079","aria-hidden":"true"},"#"),s(" 0079")],-1),ri=n("p",null,"// #region 0079",-1),ui={href:"https://leetcode.cn/problems/word-search",target:"_blank",rel:"noopener noreferrer"},pi=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),di=n("p",null,"// #endregion 0079",-1),hi=n("h2",{id:"_0080",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0080","aria-hidden":"true"},"#"),s(" 0080")],-1),_i=n("p",null,"// #region 0080",-1),ki={href:"https://leetcode.cn/problems/remove-duplicates-from-sorted-array-ii",target:"_blank",rel:"noopener noreferrer"},mi=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),bi=n("p",null,"// #endregion 0080",-1),vi=n("h2",{id:"_0081",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0081","aria-hidden":"true"},"#"),s(" 0081")],-1),fi=n("p",null,"// #region 0081",-1),gi={href:"https://leetcode.cn/problems/search-in-rotated-sorted-array-ii",target:"_blank",rel:"noopener noreferrer"},yi=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),wi=n("p",null,"// #endregion 0081",-1),xi=n("h2",{id:"_0082",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0082","aria-hidden":"true"},"#"),s(" 0082")],-1),Ni=n("p",null,"// #region 0082",-1),Li={href:"https://leetcode.cn/problems/remove-duplicates-from-sorted-list-ii",target:"_blank",rel:"noopener noreferrer"},Ii=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),ji=n("p",null,"// #endregion 0082",-1),qi=n("h2",{id:"_0083",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0083","aria-hidden":"true"},"#"),s(" 0083")],-1),Ai=n("p",null,"// #region 0083",-1),Si={href:"https://leetcode.cn/problems/remove-duplicates-from-sorted-list",target:"_blank",rel:"noopener noreferrer"},Qi=n("blockquote",null,[n("p",null,"给定一个已排序的链表，删除链表中的重复元素。")],-1),Hi=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Di=n("p",null,"// #endregion 0083",-1),Ti=n("h2",{id:"_0084",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0084","aria-hidden":"true"},"#"),s(" 0084")],-1),Ci=n("p",null,"// #region 0084",-1),Ei={href:"https://leetcode.cn/problems/largest-rectangle-in-histogram",target:"_blank",rel:"noopener noreferrer"},Ki=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Vi=n("p",null,"// #endregion 0084",-1),zi=n("h2",{id:"_0085",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0085","aria-hidden":"true"},"#"),s(" 0085")],-1),Bi=n("p",null,"// #region 0085",-1),Fi={href:"https://leetcode.cn/problems/maximal-rectangle",target:"_blank",rel:"noopener noreferrer"},Mi=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Pi=n("p",null,"// #endregion 0085",-1),Gi=n("h2",{id:"_0086-✅",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0086-✅","aria-hidden":"true"},"#"),s(" 0086 ✅")],-1),Ji=n("p",null,"// #region 0086",-1),Oi={href:"https://leetcode.cn/problems/partition-list",target:"_blank",rel:"noopener noreferrer"},Ri=n("blockquote",null,[n("p",null,"根据给定值将链表元素分割为小于和大于等于该值的两部分。并保持节点元素相对位置。")],-1),Ui={class:"hint-container details"},Wi=n("summary",null,"💡",-1),Xi=n("p",null,"【思路】将原链表按照值大小分隔成两条链表，最后合并成结果链表。",-1),Yi=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token doc-comment comment"},[s(`/**
 * Definition for singly-linked list.
 * public class ListNode `),n("span",{class:"token punctuation"},"{"),s(`
 *     int val;
 *     ListNode next;
 *     ListNode() `),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),s(`
 *     ListNode(int val) `),n("span",{class:"token punctuation"},"{"),s(" this.val = val; "),n("span",{class:"token punctuation"},"}"),s(`
 *     ListNode(int val, ListNode next) `),n("span",{class:"token punctuation"},"{"),s(" this.val = val; this.next = next; "),n("span",{class:"token punctuation"},"}"),s(`
 * `),n("span",{class:"token punctuation"},"}"),s(`
 */`)]),s(`
`),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Solution"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"ListNode"),s(),n("span",{class:"token function"},"partition"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"ListNode"),s(" head"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"int"),s(" x"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token class-name"},"ListNode"),s(" l1 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 小于 x 链表"),s(`
        `),n("span",{class:"token class-name"},"ListNode"),s(" l2 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 大于 x 链表"),s(`
        `),n("span",{class:"token class-name"},"ListNode"),s(" p1 "),n("span",{class:"token operator"},"="),s(" l1"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token class-name"},"ListNode"),s(" p2 "),n("span",{class:"token operator"},"="),s(" l2"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token comment"},"// 遍历链表，按照大小将原链表分成两条链表，分解时需要注意分解节点与原链表的断开问题。"),s(`
        `),n("span",{class:"token class-name"},"ListNode"),s(" p "),n("span",{class:"token operator"},"="),s(" head"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s(" p "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"null"),s(),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s(" p"),n("span",{class:"token punctuation"},"."),s("val "),n("span",{class:"token operator"},"<"),s(" x "),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                p1`),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(" p"),n("span",{class:"token punctuation"},";"),s("    "),n("span",{class:"token comment"},"// 将节点添加到小于 x 链表"),s(`
                p `),n("span",{class:"token operator"},"="),s(" p"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s("     "),n("span",{class:"token comment"},"// 链表指针前进"),s(`
                p1 `),n("span",{class:"token operator"},"="),s(" p1"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s("   "),n("span",{class:"token comment"},"// 小于 x 链表指针前进"),s(`
                p1`),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 并将小于 x 链表与原链表断开"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
                p2`),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(" p"),n("span",{class:"token punctuation"},";"),s(`    
                p `),n("span",{class:"token operator"},"="),s(" p"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
                p2 `),n("span",{class:"token operator"},"="),s(" p2"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
                p2`),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token comment"},"// 合并成一条"),s(`
        p1`),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(" l2"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"return"),s(" l1"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(` 
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Zi=n("div",{class:"language-swift line-numbers-mode","data-ext":"swift"},[n("pre",{class:"language-swift"},[n("code",null,[n("span",{class:"token comment"},`/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.next = nil
 *     }
 * }
 */`),s(`
`),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Solution"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"func"),s(),n("span",{class:"token function-definition function"},"partition"),n("span",{class:"token punctuation"},"("),n("span",{class:"token omit keyword"},"_"),s(" head"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token omit keyword"},"_"),s(" x"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"Int"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"->"),s(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"let"),s(" minHead "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token keyword"},"var"),s(" min"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token operator"},"="),s(` minHead
        `),n("span",{class:"token keyword"},"let"),s(" maxHead "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token keyword"},"var"),s(" max"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token operator"},"="),s(` maxHead
        `),n("span",{class:"token keyword"},"var"),s(" node "),n("span",{class:"token operator"},"="),s(` head
        `),n("span",{class:"token comment"},"// 根据值大小创建了两条新链表，最后合并。这样不需要处理链表断开的问题。"),s(`
        `),n("span",{class:"token keyword"},"while"),s(" node "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token nil constant"},"nil"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"guard"),s(),n("span",{class:"token keyword"},"let"),s(" n "),n("span",{class:"token operator"},"="),s(" node  "),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token keyword"},"break"),s(),n("span",{class:"token punctuation"},"}"),s(`
            `),n("span",{class:"token keyword"},"if"),s(" n"),n("span",{class:"token punctuation"},"."),s("val "),n("span",{class:"token operator"},"<"),s(" x "),n("span",{class:"token punctuation"},"{"),s(`
                min`),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token punctuation"},"("),s("n"),n("span",{class:"token punctuation"},"."),s("val"),n("span",{class:"token punctuation"},")"),s(`
                min `),n("span",{class:"token operator"},"="),s(" min"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),s(`next
            `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
                max`),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token punctuation"},"("),s("n"),n("span",{class:"token punctuation"},"."),s("val"),n("span",{class:"token punctuation"},")"),s(`
                max `),n("span",{class:"token operator"},"="),s(" max"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),s(`next
            `),n("span",{class:"token punctuation"},"}"),s(`
            node `),n("span",{class:"token operator"},"="),s(" n"),n("span",{class:"token punctuation"},"."),s(`next
        `),n("span",{class:"token punctuation"},"}"),s(`
        min`),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(" maxHead"),n("span",{class:"token punctuation"},"."),s(`next
        `),n("span",{class:"token keyword"},"return"),s(" minHead"),n("span",{class:"token punctuation"},"."),s(`next
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),$i=n("p",null,"// #endregion 0086",-1),nc=n("h2",{id:"_0087",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0087","aria-hidden":"true"},"#"),s(" 0087")],-1),sc=n("p",null,"// #region 0087",-1),ec={href:"https://leetcode.cn/problems/scramble-string",target:"_blank",rel:"noopener noreferrer"},ac=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),tc=n("p",null,"// #endregion 0087",-1),oc=n("h2",{id:"_0088",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0088","aria-hidden":"true"},"#"),s(" 0088")],-1),lc=n("p",null,"// #region 0088",-1),ic={href:"https://leetcode.cn/problems/merge-sorted-array",target:"_blank",rel:"noopener noreferrer"},cc=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),rc=n("p",null,"// #endregion 0088",-1),uc=n("h2",{id:"_0089",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0089","aria-hidden":"true"},"#"),s(" 0089")],-1),pc=n("p",null,"// #region 0089",-1),dc={href:"https://leetcode.cn/problems/gray-code",target:"_blank",rel:"noopener noreferrer"},hc=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),_c=n("p",null,"// #endregion 0089",-1),kc=n("h2",{id:"_0090",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0090","aria-hidden":"true"},"#"),s(" 0090")],-1),mc=n("p",null,"// #region 0090",-1),bc={href:"https://leetcode.cn/problems/subsets-ii",target:"_blank",rel:"noopener noreferrer"},vc=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),fc=n("p",null,"// #endregion 0090",-1),gc=n("h2",{id:"_0091",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0091","aria-hidden":"true"},"#"),s(" 0091")],-1),yc=n("p",null,"// #region 0091",-1),wc={href:"https://leetcode.cn/problems/decode-ways",target:"_blank",rel:"noopener noreferrer"},xc=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Nc=n("p",null,"// #endregion 0091",-1),Lc=n("h2",{id:"_0092",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0092","aria-hidden":"true"},"#"),s(" 0092")],-1),Ic=n("p",null,"// #region 0092",-1),jc={href:"https://leetcode.cn/problems/reverse-linked-list-ii/",target:"_blank",rel:"noopener noreferrer"},qc=n("blockquote",null,[n("p",null,"通过单链表的头结点 head 和两个整数 left 和 right (left <= right)，反转链表从 left 到 right 位置的链表节点，返回反转后的链表。")],-1),Ac=n("details",{class:"hint-container details"},[n("summary",null,"💡"),n("blockquote",null,[n("p",null,"如果使用迭代，上面两个题应该怎么处理？")])],-1),Sc=n("p",null,"// #endregion 0092",-1),Qc=n("h2",{id:"_0093",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0093","aria-hidden":"true"},"#"),s(" 0093")],-1),Hc=n("p",null,"// #region 0093",-1),Dc={href:"https://leetcode.cn/problems/restore-ip-addresses",target:"_blank",rel:"noopener noreferrer"},Tc=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Cc=n("p",null,"// #endregion 0093",-1),Ec=n("h2",{id:"_0094",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0094","aria-hidden":"true"},"#"),s(" 0094")],-1),Kc=n("p",null,"// #region 0094",-1),Vc={href:"https://leetcode.cn/problems/binary-tree-inorder-traversal",target:"_blank",rel:"noopener noreferrer"},zc=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Bc=n("p",null,"// #endregion 0094",-1),Fc=n("h2",{id:"_0095",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0095","aria-hidden":"true"},"#"),s(" 0095")],-1),Mc=n("p",null,"// #region 0095",-1),Pc={href:"https://leetcode.cn/problems/unique-binary-search-trees-ii",target:"_blank",rel:"noopener noreferrer"},Gc=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Jc=n("p",null,"// #endregion 0095",-1),Oc=n("h2",{id:"_0096",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0096","aria-hidden":"true"},"#"),s(" 0096")],-1),Rc=n("p",null,"// #region 0096",-1),Uc={href:"https://leetcode.cn/problems/unique-binary-search-trees",target:"_blank",rel:"noopener noreferrer"},Wc=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Xc=n("p",null,"// #endregion 0096",-1),Yc=n("h2",{id:"_0097",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0097","aria-hidden":"true"},"#"),s(" 0097")],-1),Zc=n("p",null,"// #region 0097",-1),$c={href:"https://leetcode.cn/problems/interleaving-string",target:"_blank",rel:"noopener noreferrer"},nr=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),sr=n("p",null,"// #endregion 0097",-1),er=n("h2",{id:"_0098",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0098","aria-hidden":"true"},"#"),s(" 0098")],-1),ar=n("p",null,"// #region 0098",-1),tr={href:"https://leetcode.cn/problems/validate-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},or=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),lr=n("p",null,"// #endregion 0098",-1),ir=n("h2",{id:"_0099",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0099","aria-hidden":"true"},"#"),s(" 0099")],-1),cr=n("p",null,"// #region 0099",-1),rr={href:"https://leetcode.cn/problems/recover-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},ur=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),pr=n("p",null,"// #endregion 0099",-1);function dr(hr,_r){const a=c("ExternalLinkIcon"),i=c("CodeTabs");return u(),p("div",null,[d(" more "),k,n("ul",null,[n("li",null,[n("a",m,[s("🟢 1 - 两数之和"),e(a)])])]),n("details",b,[v,f,e(i,{id:"36",data:[{id:"swift 解法1"},{id:"swift 解法2"},{id:"java 解法2"},{id:"swift 解法3"}]},{title0:t(({value:o,isActive:l})=>[s("swift 解法1")]),title1:t(({value:o,isActive:l})=>[s("swift 解法2")]),title2:t(({value:o,isActive:l})=>[s("java 解法2")]),title3:t(({value:o,isActive:l})=>[s("swift 解法3")]),tab0:t(({value:o,isActive:l})=>[g]),tab1:t(({value:o,isActive:l})=>[y]),tab2:t(({value:o,isActive:l})=>[w]),tab3:t(({value:o,isActive:l})=>[x]),_:1})]),N,L,I,n("ul",null,[n("li",null,[n("a",j,[s("🟠 2 - 两数相加"),e(a)])])]),q,A,S,Q,n("ul",null,[n("li",null,[n("a",H,[s("🟠 3 - 无重复字符的最长子串"),e(a)])])]),D,T,C,E,n("ul",null,[n("li",null,[n("a",K,[s("🔴 4 - 寻找两个正序数组的中位数"),e(a)])])]),V,z,B,F,n("ul",null,[n("li",null,[n("a",M,[s("🟠 5 - 最长回文子串"),e(a)]),P])]),G,J,O,R,n("ul",null,[n("li",null,[n("a",U,[s("🟠 6 - N 字形变换"),e(a)])])]),W,X,Y,Z,n("ul",null,[n("li",null,[n("a",$,[s("🟠 7 - 整数反转"),e(a)])])]),nn,sn,en,an,n("ul",null,[n("li",null,[n("a",tn,[s("🟠 8 - 字符串转换整数 (atoi)"),e(a)])])]),on,ln,cn,rn,n("ul",null,[n("li",null,[n("a",un,[s("🟢 9 - 回文数"),e(a)])])]),pn,dn,hn,_n,n("ul",null,[n("li",null,[n("a",kn,[s("🔴 10 - 正则表达式匹配"),e(a)])])]),mn,bn,vn,fn,n("ul",null,[n("li",null,[n("a",gn,[s("🟠 11 - 盛最多水的容器"),e(a)])])]),yn,wn,xn,Nn,n("ul",null,[n("li",null,[n("a",Ln,[s("🟠 12 - 整数转罗马数字"),e(a)])])]),In,jn,qn,An,n("ul",null,[n("li",null,[n("a",Sn,[s("🟢 13 - 罗马数字转整数"),e(a)])])]),Qn,Hn,Dn,Tn,n("ul",null,[n("li",null,[n("a",Cn,[s("🟢 14 - 最长公共前缀"),e(a)])])]),En,Kn,Vn,zn,n("ul",null,[n("li",null,[n("a",Bn,[s("🟠 15 - 三数之和"),e(a)])])]),Fn,Mn,Pn,Gn,n("ul",null,[n("li",null,[n("a",Jn,[s("🟠 16 - 最接近的三数之和"),e(a)])])]),On,Rn,Un,Wn,n("ul",null,[n("li",null,[n("a",Xn,[s("🟠 17 - 电话号码的字母组合"),e(a)])])]),Yn,Zn,$n,ns,n("ul",null,[n("li",null,[n("a",ss,[s("🟠 18 - 四数之和"),e(a)])])]),es,as,ts,os,n("ul",null,[n("li",null,[n("a",ls,[s("🟢 19 - 删除链表的倒数第 N 个结点"),e(a)]),is])]),n("details",cs,[rs,us,ps,ds,e(i,{id:"393",data:[{id:"java"},{id:"swift"}]},{title0:t(({value:o,isActive:l})=>[s("java")]),title1:t(({value:o,isActive:l})=>[s("swift")]),tab0:t(({value:o,isActive:l})=>[hs]),tab1:t(({value:o,isActive:l})=>[_s]),_:1})]),ks,ms,bs,n("ul",null,[n("li",null,[n("a",vs,[s("🟢 20 - 有效的括号"),e(a)])])]),fs,gs,ys,ws,n("ul",null,[n("li",null,[n("a",xs,[s("🟢 21 - 合并两个有序链表"),e(a)]),Ns])]),n("details",Ls,[Is,js,e(i,{id:"445",data:[{id:"java"},{id:"swift"}]},{title0:t(({value:o,isActive:l})=>[s("java")]),title1:t(({value:o,isActive:l})=>[s("swift")]),tab0:t(({value:o,isActive:l})=>[qs]),tab1:t(({value:o,isActive:l})=>[As]),_:1})]),Ss,Qs,Hs,n("ul",null,[n("li",null,[n("a",Ds,[s("🟠 22 - 括号生成"),e(a)])])]),Ts,Cs,Es,Ks,n("ul",null,[n("li",null,[n("a",Vs,[s("🔴 23 - 合并 K 个升序链表"),e(a)]),zs])]),n("details",Bs,[Fs,Ms,Ps,Gs,e(i,{id:"503",data:[{id:"解法1"}]},{title0:t(({value:o,isActive:l})=>[s("解法1")]),tab0:t(({value:o,isActive:l})=>[Js]),_:1})]),Os,Rs,Us,n("ul",null,[n("li",null,[n("a",Ws,[s("🟠 24 - 两两交换链表中的节点"),e(a)])])]),Xs,Ys,Zs,$s,n("ul",null,[n("li",null,[n("a",ne,[s("🔴 - K 个一组翻转链表"),e(a)])])]),se,ee,ae,te,n("ul",null,[n("li",null,[n("a",oe,[s("🟢 26 - 删除有序数组中的重复项"),e(a)]),le])]),ie,ce,re,ue,n("ul",null,[n("li",null,[n("a",pe,[s("🟢 27 - 移除元素"),e(a)]),de])]),he,_e,ke,me,n("ul",null,[n("li",null,[n("a",be,[s("🟢 28 - 找出字符串中第一个匹配项的下标"),e(a)])])]),ve,fe,ge,ye,n("ul",null,[n("li",null,[n("a",we,[s("🟠 29 - 两数相除"),e(a)])])]),xe,Ne,Le,Ie,n("ul",null,[n("li",null,[n("a",je,[s("🔴 30 - 串联所有单词的子串"),e(a)])])]),qe,Ae,Se,Qe,n("ul",null,[n("li",null,[n("a",He,[s("🟠 31 - 下一个排列"),e(a)])])]),De,Te,Ce,Ee,n("ul",null,[n("li",null,[n("a",Ke,[s("🔴 32 - 最长有效括号"),e(a)])])]),Ve,ze,Be,Fe,n("ul",null,[n("li",null,[n("a",Me,[s("🟠 33 - 搜索旋转排序数组"),e(a)])])]),Pe,Ge,Je,Oe,n("ul",null,[n("li",null,[n("a",Re,[s("🟢 34 - 在排序数组中查找元素的第一个和最后一个位置"),e(a)]),Ue])]),We,Xe,Ye,Ze,n("ul",null,[n("li",null,[n("a",$e,[s("🟢 35 - 搜索插入位置"),e(a)]),na])]),sa,ea,aa,ta,n("ul",null,[n("li",null,[n("a",oa,[s("🟠 36 - 有效的数独"),e(a)])])]),la,ia,ca,ra,n("ul",null,[n("li",null,[n("a",ua,[s("🔴 37 - 解数独"),e(a)])])]),pa,da,ha,_a,n("ul",null,[n("li",null,[n("a",ka,[s("🟠 38 - 外观数列"),e(a)])])]),ma,ba,va,fa,n("ul",null,[n("li",null,[n("a",ga,[s("🟠 39 - 组合总和"),e(a)])])]),ya,wa,xa,Na,n("ul",null,[n("li",null,[n("a",La,[s("🟠 40 - 组合总和 II"),e(a)])])]),Ia,ja,qa,Aa,n("ul",null,[n("li",null,[n("a",Sa,[s("🔴 41 - 缺失的第一个正数"),e(a)])])]),Qa,Ha,Da,Ta,n("ul",null,[n("li",null,[n("a",Ca,[s("🔴 42 - 接雨水"),e(a)])])]),Ea,Ka,Va,za,n("ul",null,[n("li",null,[n("a",Ba,[s("🟠 43 - 字符串相乘"),e(a)])])]),Fa,Ma,Pa,Ga,n("ul",null,[n("li",null,[n("a",Ja,[s("🔴 44 - 通配符匹配"),e(a)])])]),Oa,Ra,Ua,Wa,n("ul",null,[n("li",null,[n("a",Xa,[s("🟠 45 - 跳跃游戏 II"),e(a)])])]),Ya,Za,$a,nt,n("ul",null,[n("li",null,[n("a",st,[s("🟠 46 - 全排列"),e(a)]),et])]),at,tt,ot,lt,n("ul",null,[n("li",null,[n("a",it,[s("🟠 47 - 全排列 II"),e(a)]),ct])]),rt,ut,pt,dt,n("ul",null,[n("li",null,[n("a",ht,[s("🟠 48 - 旋转图像"),e(a)])])]),_t,kt,mt,bt,n("ul",null,[n("li",null,[n("a",vt,[s("🟠 49 - 字母异位词分组"),e(a)])])]),ft,gt,yt,wt,n("ul",null,[n("li",null,[n("a",xt,[s("🟠 50 - Pow(x, n)"),e(a)])])]),Nt,Lt,It,jt,n("ul",null,[n("li",null,[n("p",null,[n("a",qt,[s("🔴 51 - N 皇后"),e(a)])]),At,St])]),Qt,Ht,Dt,Tt,n("ul",null,[n("li",null,[n("a",Ct,[s("🔴 52 - N 皇后 II"),e(a)]),Et])]),Kt,Vt,zt,Bt,n("ul",null,[n("li",null,[n("a",Ft,[s("🟠 53 - 最大子数组和"),e(a)])])]),Mt,Pt,Gt,Jt,n("ul",null,[n("li",null,[n("a",Ot,[s("🟠 54 - 螺旋矩阵"),e(a)])])]),Rt,Ut,Wt,Xt,n("ul",null,[n("li",null,[n("a",Yt,[s("🟠 55 - 跳跃游戏"),e(a)])])]),Zt,$t,no,so,n("ul",null,[n("li",null,[n("a",eo,[s("🟠 56 - 合并区间"),e(a)])])]),ao,to,oo,lo,n("ul",null,[n("li",null,[n("a",io,[s("🟠 57 - 插入区间"),e(a)])])]),co,ro,uo,po,n("ul",null,[n("li",null,[n("a",ho,[s("🟢 58 - 最后一个单词的长度"),e(a)])])]),_o,ko,mo,bo,n("ul",null,[n("li",null,[n("a",vo,[s("🟠 59 - 螺旋矩阵 II"),e(a)])])]),fo,go,yo,wo,n("ul",null,[n("li",null,[n("a",xo,[s("🔴 60 - 排列序列"),e(a)])])]),No,Lo,Io,jo,n("ul",null,[n("li",null,[n("a",qo,[s("🟠 61 - 旋转链表"),e(a)])])]),Ao,So,Qo,Ho,n("ul",null,[n("li",null,[n("a",Do,[s("🟠 62 - 不同路径"),e(a)])])]),To,Co,Eo,Ko,n("ul",null,[n("li",null,[n("a",Vo,[s("🟠 63 - 不同路径 II"),e(a)])])]),zo,Bo,Fo,Mo,n("ul",null,[n("li",null,[n("a",Po,[s("🟠 64 - 最小路径和"),e(a)])])]),Go,Jo,Oo,Ro,n("ul",null,[n("li",null,[n("a",Uo,[s("🔴 65 - 有效数字"),e(a)])])]),Wo,Xo,Yo,Zo,n("ul",null,[n("li",null,[n("a",$o,[s("🟢 66 - 加一"),e(a)])])]),nl,sl,el,al,n("ul",null,[n("li",null,[n("a",tl,[s("🟢 67 - 二进制求和"),e(a)])])]),ol,ll,il,cl,n("ul",null,[n("li",null,[n("a",rl,[s("🔴 68 - 文本左右对齐"),e(a)])])]),ul,pl,dl,hl,n("ul",null,[n("li",null,[n("a",_l,[s("🟢 69 - x 的平方根"),e(a)])])]),kl,ml,bl,vl,n("ul",null,[n("li",null,[n("a",fl,[s("🟢 70 - 爬楼梯"),e(a)])])]),gl,yl,wl,xl,n("ul",null,[n("li",null,[n("a",Nl,[s("🟠 71 - 简化路径"),e(a)])])]),Ll,Il,jl,ql,n("ul",null,[n("li",null,[n("a",Al,[s("🔴 72 - 编辑距离"),e(a)])])]),Sl,Ql,Hl,Dl,n("ul",null,[n("li",null,[n("a",Tl,[s("🟠 73 - 矩阵置零"),e(a)])])]),Cl,El,Kl,Vl,n("ul",null,[n("li",null,[n("a",zl,[s("🟠 74 - 搜索二维矩阵"),e(a)])])]),Bl,Fl,Ml,Pl,n("ul",null,[n("li",null,[n("a",Gl,[s("🟠 75 - 颜色分类"),e(a)])])]),Jl,Ol,Rl,Ul,n("ul",null,[n("li",null,[n("a",Wl,[s("🔴 76 - 最小覆盖子串"),e(a)])])]),Xl,Yl,Zl,$l,n("ul",null,[n("li",null,[n("a",ni,[s("🟠 77 - 组合"),e(a)])])]),si,ei,ai,ti,n("ul",null,[n("li",null,[n("a",oi,[s("🟠 78 - 子集"),e(a)])])]),li,ii,ci,ri,n("ul",null,[n("li",null,[n("a",ui,[s("🟠 79 - 单词搜索"),e(a)])])]),pi,di,hi,_i,n("ul",null,[n("li",null,[n("a",ki,[s("🟠 80 - 删除有序数组中的重复项 II"),e(a)])])]),mi,bi,vi,fi,n("ul",null,[n("li",null,[n("a",gi,[s("🟠 81 - 搜索旋转排序数组 II"),e(a)])])]),yi,wi,xi,Ni,n("ul",null,[n("li",null,[n("a",Li,[s("🟠 82 - 删除排序链表中的重复元素 II"),e(a)])])]),Ii,ji,qi,Ai,n("ul",null,[n("li",null,[n("a",Si,[s("🟠 83 - 删除排序链表中的重复元素"),e(a)]),Qi])]),Hi,Di,Ti,Ci,n("ul",null,[n("li",null,[n("a",Ei,[s("🔴 84 - 柱状图中最大的矩形"),e(a)])])]),Ki,Vi,zi,Bi,n("ul",null,[n("li",null,[n("a",Fi,[s("🔴 85 - 最大矩形"),e(a)])])]),Mi,Pi,Gi,Ji,n("ul",null,[n("li",null,[n("a",Oi,[s("🟠 86 - 分隔链表"),e(a)]),Ri])]),n("details",Ui,[Wi,Xi,e(i,{id:"1696",data:[{id:"java"},{id:"swift"}]},{title0:t(({value:o,isActive:l})=>[s("java")]),title1:t(({value:o,isActive:l})=>[s("swift")]),tab0:t(({value:o,isActive:l})=>[Yi]),tab1:t(({value:o,isActive:l})=>[Zi]),_:1})]),$i,nc,sc,n("ul",null,[n("li",null,[n("a",ec,[s("🔴 87 - 扰乱字符串"),e(a)])])]),ac,tc,oc,lc,n("ul",null,[n("li",null,[n("a",ic,[s("🟢 88 - 合并两个有序数组"),e(a)])])]),cc,rc,uc,pc,n("ul",null,[n("li",null,[n("a",dc,[s("🟠 89 - 格雷编码"),e(a)])])]),hc,_c,kc,mc,n("ul",null,[n("li",null,[n("a",bc,[s("🟠 90 - 子集 II"),e(a)])])]),vc,fc,gc,yc,n("ul",null,[n("li",null,[n("a",wc,[s("🟠 91 - 解码方法"),e(a)])])]),xc,Nc,Lc,Ic,n("ul",null,[n("li",null,[n("a",jc,[s("🟠 92 - 反转链表 II"),e(a)]),qc])]),Ac,Sc,Qc,Hc,n("ul",null,[n("li",null,[n("a",Dc,[s("🟠 93 - 复原 IP 地址"),e(a)])])]),Tc,Cc,Ec,Kc,n("ul",null,[n("li",null,[n("a",Vc,[s("🟢 94 - 二叉树的中序遍历"),e(a)])])]),zc,Bc,Fc,Mc,n("ul",null,[n("li",null,[n("a",Pc,[s("🟠 95 - 不同的二叉搜索树 II"),e(a)])])]),Gc,Jc,Oc,Rc,n("ul",null,[n("li",null,[n("a",Uc,[s("🟠 96 - 不同的二叉搜索树"),e(a)])])]),Wc,Xc,Yc,Zc,n("ul",null,[n("li",null,[n("a",$c,[s("🟠 97 - 交错字符串"),e(a)])])]),nr,sr,er,ar,n("ul",null,[n("li",null,[n("a",tr,[s("🟠 98 - 验证二叉搜索树"),e(a)])])]),or,lr,ir,cr,n("ul",null,[n("li",null,[n("a",rr,[s("🟠 99 - 恢复二叉搜索树"),e(a)])])]),ur,pr])}const br=r(_,[["render",dr],["__file","0x0000.html.vue"]]);export{br as default};
