import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as h,c as e,f as o}from"./app-b_rSVNxV.js";const a={},l=o('<h2 id="_1-数组与字符串-8" tabindex="-1"><a class="header-anchor" href="#_1-数组与字符串-8" aria-hidden="true">#</a> 1 数组与字符串 (8)</h2><ul><li><p>1.1 确定字符互异</p><blockquote><p>实现一个算法，确定一个字符串的所有字符是否全都不同。假设不允许使用额外的数据结构，又该如何处理？</p></blockquote><table><thead><tr><th>解法</th><th>空间复杂度</th><th>时间复杂度</th><th>思路</th></tr></thead><tbody><tr><td>1</td><td>O(n)</td><td>O(n)</td><td>使用哈希表，存储每个字符的个数，判断个数是否大于1</td></tr><tr><td>2</td><td>O(1)</td><td>O(?)</td><td></td></tr></tbody></table></li><li><p>1.2 原串翻转</p><blockquote><p>用 C 或 C++ 实现<code>void reverse(char* str)</code>函数，即反转一个<code>null</code>结尾的字符串。</p></blockquote><table><thead><tr><th>解法</th><th>空间复杂度</th><th>时间复杂度</th><th>思路</th></tr></thead></table></li><li><p>1.3 确定两串乱序同构</p><blockquote><p>给定两个字符串，请编写程序，确定其中一个字符串的字符重新排列后，能否变成另一个字符串。</p></blockquote><table><thead><tr><th>解法</th><th>空间复杂度</th><th>时间复杂度</th><th>思路</th></tr></thead></table></li><li><p>1.4 空格替换</p><blockquote><p>编写一个方法，将字符串中的空格全部替换为&quot;%20&quot;。假设该字符串尾部有足够的空间存放新增字符，并且知道字符串的&quot;真实&quot;长度。(注：用 Java 实现的话，请使用字符数组实现，以便在数组上操作。) 示例 输入: &quot;Mr John Smith&quot; 输出: &quot;Mr%20John%20Smith&quot;</p></blockquote><table><thead><tr><th>解法</th><th>空间复杂度</th><th>时间复杂度</th><th>思路</th></tr></thead></table></li><li><p>1.5 基本字符串压缩</p><blockquote><p>利用字符重复出现的次数，编写一个方法，实现基本的字符串压缩功能。比如，字符串 &quot;aabcccccaaa&quot; 会变为 &quot;a2b1c5a3&quot;。若&quot;压缩&quot;后的字符串没有变短，则返回原先的字符串。</p></blockquote><table><thead><tr><th>解法</th><th>空间复杂度</th><th>时间复杂度</th><th>思路</th></tr></thead></table></li><li><p>1.6 像素翻转</p><blockquote><p>给定一幅由 N x N 矩阵表示的图像，其中每个像素的大小为 4 字节，编写一个方法，将图像旋转90度。不占用额外内存空间能否做到？</p></blockquote><table><thead><tr><th>解法</th><th>空间复杂度</th><th>时间复杂度</th><th>思路</th></tr></thead></table></li><li><p>1.7 清零行列</p><blockquote><p>编写一个算法，若 M x N 矩阵中某个元素为0，则将其所在的行与列清零。</p></blockquote><table><thead><tr><th>解法</th><th>空间复杂度</th><th>时间复杂度</th><th>思路</th></tr></thead></table></li><li><p>1.8 翻转子串</p><blockquote><p>假定有一个方法<code>isSubstring</code>，可检查一个单词是否为其他字符串的子串。给定两个字符串 s1 和 s2，请编写代码检查 s2 是否为 s1 旋转而成，要求只能调用一次<code>isSubstring</code>。（比如，waterbottle是erbottlewat旋转后的字符串。）</p></blockquote><table><thead><tr><th>解法</th><th>空间复杂度</th><th>时间复杂度</th><th>思路</th></tr></thead></table></li></ul>',2),d=[l];function r(c,b){return h(),e("div",null,d)}const p=t(a,[["render",r],["__file","0x01.array-string.html.vue"]]);export{p as default};
