import{_ as c}from"./plugin-vue_export-helper-x3n3nnut.js";import{r,o as d,c as u,a as p,b as n,e,d as s,w as a,f as h}from"./app-nOqLU-Iw.js";const _={},k=n("h2",{id:"_0100",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0100","aria-hidden":"true"},"#"),e(" 0100")],-1),m=n("p",null,"// #region 0100",-1),b={href:"https://leetcode.cn/problems/same-tree",target:"_blank",rel:"noopener noreferrer"},f=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),v=n("p",null,"// #endregion 0100",-1),g=n("h2",{id:"_0101",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0101","aria-hidden":"true"},"#"),e(" 0101")],-1),y=n("p",null,"// #region 0101",-1),w={href:"https://leetcode.cn/problems/symmetric-tree",target:"_blank",rel:"noopener noreferrer"},x=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),I=n("p",null,"// #endregion 0101",-1),N=n("h2",{id:"_0102",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0102","aria-hidden":"true"},"#"),e(" 0102")],-1),A=n("p",null,"// #region 0102",-1),L={href:"https://leetcode.cn/problems/binary-tree-level-order-traversal",target:"_blank",rel:"noopener noreferrer"},j=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),q=n("p",null,"// #endregion 0102",-1),C=n("h2",{id:"_0103",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0103","aria-hidden":"true"},"#"),e(" 0103")],-1),B=n("p",null,"// #region 0103",-1),O={href:"https://leetcode.cn/problems/binary-tree-zigzag-level-order-traversal",target:"_blank",rel:"noopener noreferrer"},S=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),D=n("p",null,"// #endregion 0103",-1),V=n("h2",{id:"_0104",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0104","aria-hidden":"true"},"#"),e(" 0104")],-1),z=n("p",null,"// #region 0104",-1),E={href:"https://leetcode.cn/problems/maximum-depth-of-binary-tree",target:"_blank",rel:"noopener noreferrer"},T=n("blockquote",null,[n("p",null,"给定一个二叉树根节点，返回该二叉树的最大深度。")],-1),P=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),R=n("p",null,"// #endregion 0104",-1),U=n("h2",{id:"_0105",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0105","aria-hidden":"true"},"#"),e(" 0105")],-1),F=n("p",null,"// #region 0105",-1),G={href:"https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal",target:"_blank",rel:"noopener noreferrer"},H=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),J=n("p",null,"// #endregion 0105",-1),K=n("h2",{id:"_0106",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0106","aria-hidden":"true"},"#"),e(" 0106")],-1),M=n("p",null,"// #region 0106",-1),Q={href:"https://leetcode.cn/problems/construct-binary-tree-from-inorder-and-postorder-traversal",target:"_blank",rel:"noopener noreferrer"},W=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),X=n("p",null,"// #endregion 0106",-1),Y=n("h2",{id:"_0107",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0107","aria-hidden":"true"},"#"),e(" 0107")],-1),Z=n("p",null,"// #region 0107",-1),$={href:"https://leetcode.cn/problems/binary-tree-level-order-traversal-ii",target:"_blank",rel:"noopener noreferrer"},nn=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),en=n("p",null,"// #endregion 0107",-1),sn=n("h2",{id:"_0108",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0108","aria-hidden":"true"},"#"),e(" 0108")],-1),tn=n("p",null,"// #region 0108",-1),an={href:"https://leetcode.cn/problems/convert-sorted-array-to-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},ln=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),on=n("p",null,"// #endregion 0108",-1),rn=n("h2",{id:"_0109",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0109","aria-hidden":"true"},"#"),e(" 0109")],-1),cn=n("p",null,"// #region 0109",-1),dn={href:"https://leetcode.cn/problems/convert-sorted-list-to-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},un=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),pn=n("p",null,"// #endregion 0109",-1),hn=n("h2",{id:"_0110",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0110","aria-hidden":"true"},"#"),e(" 0110")],-1),_n=n("p",null,"// #region 0110",-1),kn={href:"https://leetcode.cn/problems/balanced-binary-tree",target:"_blank",rel:"noopener noreferrer"},mn=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),bn=n("p",null,"// #endregion 0110",-1),fn=n("h2",{id:"_0111",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0111","aria-hidden":"true"},"#"),e(" 0111")],-1),vn=n("p",null,"// #region 0111",-1),gn={href:"https://leetcode.cn/problems/minimum-depth-of-binary-tree",target:"_blank",rel:"noopener noreferrer"},yn=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),wn=n("p",null,"// #endregion 0111",-1),xn=n("h2",{id:"_0112",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0112","aria-hidden":"true"},"#"),e(" 0112")],-1),In=n("p",null,"// #region 0112",-1),Nn={href:"https://leetcode.cn/problems/path-sum",target:"_blank",rel:"noopener noreferrer"},An=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Ln=n("p",null,"// #endregion 0112",-1),jn=n("h2",{id:"_0113",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0113","aria-hidden":"true"},"#"),e(" 0113")],-1),qn=n("p",null,"// #region 0113",-1),Cn={href:"https://leetcode.cn/problems/path-sum-ii",target:"_blank",rel:"noopener noreferrer"},Bn=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),On=n("p",null,"// #endregion 0113",-1),Sn=n("h2",{id:"_0114",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0114","aria-hidden":"true"},"#"),e(" 0114")],-1),Dn=n("p",null,"// #region 0114",-1),Vn={href:"https://leetcode.cn/problems/flatten-binary-tree-to-linked-list",target:"_blank",rel:"noopener noreferrer"},zn=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),En=n("p",null,"// #endregion 0114",-1),Tn=n("h2",{id:"_0115",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0115","aria-hidden":"true"},"#"),e(" 0115")],-1),Pn=n("p",null,"// #region 0115",-1),Rn={href:"https://leetcode.cn/problems/distinct-subsequences",target:"_blank",rel:"noopener noreferrer"},Un=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Fn=n("p",null,"// #endregion 0115",-1),Gn=n("h2",{id:"_0116",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0116","aria-hidden":"true"},"#"),e(" 0116")],-1),Hn=n("p",null,"// #region 0116",-1),Jn={href:"https://leetcode.cn/problems/populating-next-right-pointers-in-each-node",target:"_blank",rel:"noopener noreferrer"},Kn=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Mn=n("p",null,"// #endregion 0116",-1),Qn=n("h2",{id:"_0117",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0117","aria-hidden":"true"},"#"),e(" 0117")],-1),Wn=n("p",null,"// #region 0117",-1),Xn={href:"https://leetcode.cn/problems/populating-next-right-pointers-in-each-node-ii",target:"_blank",rel:"noopener noreferrer"},Yn=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Zn=n("p",null,"// #endregion 0117",-1),$n=n("h2",{id:"_0118",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0118","aria-hidden":"true"},"#"),e(" 0118")],-1),ne=n("p",null,"// #region 0118",-1),ee={href:"https://leetcode.cn/problems/pascals-triangle",target:"_blank",rel:"noopener noreferrer"},se=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),te=n("p",null,"// #endregion 0118",-1),ae=n("h2",{id:"_0119",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0119","aria-hidden":"true"},"#"),e(" 0119")],-1),le=n("p",null,"// #region 0119",-1),oe={href:"https://leetcode.cn/problems/pascals-triangle-ii",target:"_blank",rel:"noopener noreferrer"},ie=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),re=n("p",null,"// #endregion 0119",-1),ce=n("h2",{id:"_0120",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0120","aria-hidden":"true"},"#"),e(" 0120")],-1),de=n("p",null,"// #region 0120",-1),ue={href:"https://leetcode.cn/problems/triangle",target:"_blank",rel:"noopener noreferrer"},pe=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),he=n("p",null,"// #endregion 0120",-1),_e=n("h2",{id:"_0121",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0121","aria-hidden":"true"},"#"),e(" 0121")],-1),ke=n("p",null,"// #region 0121",-1),me={href:"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock",target:"_blank",rel:"noopener noreferrer"},be=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),fe=n("p",null,"// #endregion 0121",-1),ve=n("h2",{id:"_0122",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0122","aria-hidden":"true"},"#"),e(" 0122")],-1),ge=n("p",null,"// #region 0122",-1),ye={href:"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii",target:"_blank",rel:"noopener noreferrer"},we=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),xe=n("p",null,"// #endregion 0122",-1),Ie=n("h2",{id:"_0123",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0123","aria-hidden":"true"},"#"),e(" 0123")],-1),Ne=n("p",null,"// #region 0123",-1),Ae={href:"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iii",target:"_blank",rel:"noopener noreferrer"},Le=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),je=n("p",null,"// #endregion 0123",-1),qe=n("h2",{id:"_0124",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0124","aria-hidden":"true"},"#"),e(" 0124")],-1),Ce=n("p",null,"// #region 0124",-1),Be={href:"https://leetcode.cn/problems/binary-tree-maximum-path-sum",target:"_blank",rel:"noopener noreferrer"},Oe=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Se=n("p",null,"// #endregion 0124",-1),De=n("h2",{id:"_0125-✅",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0125-✅","aria-hidden":"true"},"#"),e(" 0125 ✅")],-1),Ve=n("p",null,"// #region 0125",-1),ze={href:"https://leetcode.cn/problems/valid-palindrome",target:"_blank",rel:"noopener noreferrer"},Ee=n("blockquote",null,[n("p",null,"判断字符串中的字母(大小不敏感，大写字母与小字可以看作相等)和数字是否为回文串，字符中的的其它字符不参与回文串校验。")],-1),Te={class:"hint-container details"},Pe=n("summary",null,"💡",-1),Re=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"class"),e(),n("span",{class:"token class-name"},"Solution"),e(`
  `),n("span",{class:"token keyword"},"public"),e(),n("span",{class:"token keyword"},"boolean"),e(),n("span",{class:"token function"},"isPalindrome"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),e(" s"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
    `),n("span",{class:"token keyword"},"int"),e(" left "),n("span",{class:"token operator"},"="),e(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),e(`
    `),n("span",{class:"token keyword"},"int"),e(" right "),n("span",{class:"token operator"},"="),e(" s"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"length"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token operator"},"-"),e(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),e(`
    `),n("span",{class:"token keyword"},"while"),e(),n("span",{class:"token punctuation"},"("),e(" left "),n("span",{class:"token operator"},"<"),e(" right "),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
        `),n("span",{class:"token comment"},"// 寻找左边第一个字母或数字"),e(`
        `),n("span",{class:"token keyword"},"while"),e(),n("span",{class:"token punctuation"},"("),e(" left "),n("span",{class:"token operator"},"<"),e(" right "),n("span",{class:"token operator"},"&&"),e(),n("span",{class:"token operator"},"!"),n("span",{class:"token class-name"},"Character"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"isLetterOrDigit"),n("span",{class:"token punctuation"},"("),e("s"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"charAt"),n("span",{class:"token punctuation"},"("),e("left"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
            left `),n("span",{class:"token operator"},"+="),e(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),e(`
        `),n("span",{class:"token punctuation"},"}"),e(`
        `),n("span",{class:"token comment"},"// 寻找右边第一个字母或数字"),e(`
        `),n("span",{class:"token keyword"},"while"),e(),n("span",{class:"token punctuation"},"("),e(" left "),n("span",{class:"token operator"},"<"),e(" right "),n("span",{class:"token operator"},"&&"),e(),n("span",{class:"token operator"},"!"),n("span",{class:"token class-name"},"Character"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"isLetterOrDigit"),n("span",{class:"token punctuation"},"("),e("s"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"charAt"),n("span",{class:"token punctuation"},"("),e("right"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
            right `),n("span",{class:"token operator"},"-="),e(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),e(`
        `),n("span",{class:"token punctuation"},"}"),e(`
        `),n("span",{class:"token keyword"},"if"),e(),n("span",{class:"token punctuation"},"("),e(" left "),n("span",{class:"token operator"},">="),e(" right "),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(),n("span",{class:"token keyword"},"return"),e(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},";"),e(),n("span",{class:"token punctuation"},"}"),e(`
        `),n("span",{class:"token comment"},"// 左右指针，判断字符是否相等"),e(`
        `),n("span",{class:"token keyword"},"if"),e(),n("span",{class:"token punctuation"},"("),e(),n("span",{class:"token class-name"},"Character"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"toLowerCase"),n("span",{class:"token punctuation"},"("),e("s"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"charAt"),n("span",{class:"token punctuation"},"("),e("left"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token operator"},"!="),e(),n("span",{class:"token class-name"},"Character"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"toLowerCase"),n("span",{class:"token punctuation"},"("),e("s"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"charAt"),n("span",{class:"token punctuation"},"("),e("right"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
            `),n("span",{class:"token keyword"},"return"),e(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},";"),e(),n("span",{class:"token comment"},"// 不相等，则表明不是回文串"),e(`
        `),n("span",{class:"token punctuation"},"}"),e(` 
        `),n("span",{class:"token comment"},"// 相等，跳转到下一个字符进行匹配"),e(`
        left `),n("span",{class:"token operator"},"+="),e(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),e(`
        right `),n("span",{class:"token operator"},"-="),e(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),e(`
    `),n("span",{class:"token punctuation"},"}"),e(`
    `),n("span",{class:"token keyword"},"return"),e(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},";"),e(`
  `),n("span",{class:"token punctuation"},"}"),e(`
`),n("span",{class:"token punctuation"},"}"),e(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Ue=n("p",null,"// #endregion 0125",-1),Fe=n("h2",{id:"_0126",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0126","aria-hidden":"true"},"#"),e(" 0126")],-1),Ge=n("p",null,"// #region 0126",-1),He={href:"https://leetcode.cn/problems/word-ladder-ii",target:"_blank",rel:"noopener noreferrer"},Je=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Ke=n("p",null,"// #endregion 0126",-1),Me=n("h2",{id:"_0127",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0127","aria-hidden":"true"},"#"),e(" 0127")],-1),Qe=n("p",null,"// #region 0127",-1),We={href:"https://leetcode.cn/problems/word-ladder",target:"_blank",rel:"noopener noreferrer"},Xe=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Ye=n("p",null,"// #endregion 0127",-1),Ze=n("h2",{id:"_0128",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0128","aria-hidden":"true"},"#"),e(" 0128")],-1),$e=n("p",null,"// #region 0128",-1),ns={href:"https://leetcode.cn/problems/longest-consecutive-sequence",target:"_blank",rel:"noopener noreferrer"},es=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),ss=n("p",null,"// #endregion 0128",-1),ts=n("h2",{id:"_0129",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0129","aria-hidden":"true"},"#"),e(" 0129")],-1),as=n("p",null,"// #region 0129",-1),ls={href:"https://leetcode.cn/problems/sum-root-to-leaf-numbers",target:"_blank",rel:"noopener noreferrer"},os=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),is=n("p",null,"// #endregion 0129",-1),rs=n("h2",{id:"_0130",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0130","aria-hidden":"true"},"#"),e(" 0130")],-1),cs=n("p",null,"// #region 0130",-1),ds={href:"https://leetcode.cn/problems/surrounded-regions",target:"_blank",rel:"noopener noreferrer"},us=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),ps=n("p",null,"// #endregion 0130",-1),hs=n("h2",{id:"_0131",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0131","aria-hidden":"true"},"#"),e(" 0131")],-1),_s=n("p",null,"// #region 0131",-1),ks={href:"https://leetcode.cn/problems/palindrome-partitioning",target:"_blank",rel:"noopener noreferrer"},ms=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),bs=n("p",null,"// #endregion 0131",-1),fs=n("h2",{id:"_0132",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0132","aria-hidden":"true"},"#"),e(" 0132")],-1),vs=n("p",null,"// #region 0132",-1),gs={href:"https://leetcode.cn/problems/palindrome-partitioning-ii",target:"_blank",rel:"noopener noreferrer"},ys=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),ws=n("p",null,"// #endregion 0132",-1),xs=n("h2",{id:"_0133",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0133","aria-hidden":"true"},"#"),e(" 0133")],-1),Is=n("p",null,"// #region 0133",-1),Ns={href:"https://leetcode.cn/problems/clone-graph",target:"_blank",rel:"noopener noreferrer"},As=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Ls=n("p",null,"// #endregion 0133",-1),js=n("h2",{id:"_0134",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0134","aria-hidden":"true"},"#"),e(" 0134")],-1),qs=n("p",null,"// #region 0134",-1),Cs={href:"https://leetcode.cn/problems/gas-station",target:"_blank",rel:"noopener noreferrer"},Bs=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Os=n("p",null,"// #endregion 0124",-1),Ss=n("h2",{id:"_0135",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0135","aria-hidden":"true"},"#"),e(" 0135")],-1),Ds=n("p",null,"// #region 0135",-1),Vs={href:"https://leetcode.cn/problems/candy",target:"_blank",rel:"noopener noreferrer"},zs=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Es=n("p",null,"// #endregion 0135",-1),Ts=n("h2",{id:"_0136",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0136","aria-hidden":"true"},"#"),e(" 0136")],-1),Ps=n("p",null,"// #region 0136",-1),Rs={href:"https://leetcode.cn/problems/single-number/",target:"_blank",rel:"noopener noreferrer"},Us=n("blockquote",null,[n("p",null,"一个非空的整数数组，除了某个元素只出现一次外，其余元素均出现两次。找出只出现一次的数字")],-1),Fs=n("details",{class:"hint-container details"},[n("summary",null,"💡"),n("p",null,[e("【思路】 由于存在相同的元素均出现两次，刚好可以使用 "),n("code",null,"x ^ x = 0"),e(" 的特性。将所有数字进行异或操作，则相同的数字异或结果为 0，只出现一次的数与 0 进行异或结果就是只出现一次的数。 时间复杂度: O(n) 空间复杂度: O(1)")])],-1),Gs=n("p",null,"// #endregion 0136",-1),Hs=n("h2",{id:"_0137",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0137","aria-hidden":"true"},"#"),e(" 0137")],-1),Js=n("p",null,"// #region 0137",-1),Ks={href:"https://leetcode.cn/problems/single-number-ii",target:"_blank",rel:"noopener noreferrer"},Ms=n("blockquote",null,[n("p",null,"一个非空的整数数组中，除了某个元素只出现一次外，其余元素均出现三次。找出只出现一次的数字 时间复杂度: O(n) 空间复杂度: O(1)")],-1),Qs=n("details",{class:"hint-container details"},[n("summary",null,"💡"),n("p",null,[e("【思路】 这道题是 136 的变形版本，不能使用 "),n("code",null,"x ^ x = 0"),e(" 特性。但是但是还是可以使用位运算的特性进行求解。")])],-1),Ws=n("p",null,"// #endregion 0137",-1),Xs=n("h2",{id:"_0138",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0138","aria-hidden":"true"},"#"),e(" 0138")],-1),Ys=n("p",null,"// #region 0138",-1),Zs={href:"https://leetcode.cn/problems/copy-list-with-random-pointer",target:"_blank",rel:"noopener noreferrer"},$s=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),nt=n("p",null,"// #endregion 0138",-1),et=n("h2",{id:"_0139",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0139","aria-hidden":"true"},"#"),e(" 0139")],-1),st=n("p",null,"// #region 0139",-1),tt={href:"https://leetcode.cn/problems/word-break",target:"_blank",rel:"noopener noreferrer"},at=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),lt=n("p",null,"// #endregion 0139",-1),ot=n("h2",{id:"_0140",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0140","aria-hidden":"true"},"#"),e(" 0140")],-1),it=n("p",null,"// #region 0140",-1),rt={href:"https://leetcode.cn/problems/word-break-ii",target:"_blank",rel:"noopener noreferrer"},ct=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),dt=n("p",null,"// #endregion 0140",-1),ut=n("h2",{id:"_0141-✅",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0141-✅","aria-hidden":"true"},"#"),e(" 0141 ✅")],-1),pt=n("p",null,"// #region 0141",-1),ht={href:"https://leetcode.cn/problems/linked-list-cycle",target:"_blank",rel:"noopener noreferrer"},_t=n("blockquote",null,[n("p",null,"判断单链表是否有环？")],-1),kt={class:"hint-container details"},mt=n("summary",null,"💡",-1),bt=n("p",null,"【技巧】使用快慢指针，fast 指针每次走两步，slow 指针每次走一步，如果两个指针相遇，则表明链表有环。如果没有相遇，fast 直接走到链表最后 nil 空指针，则表明链表没有环。",-1),ft=n("p",null,"【原理】",-1),vt=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token doc-comment comment"},[e(`/**
 * Definition for singly-linked list.
 * class ListNode `),n("span",{class:"token punctuation"},"{"),e(`
 *     int val;
 *     ListNode next;
 *     ListNode(int x) `),n("span",{class:"token punctuation"},"{"),e(`
 *         val = x;
 *         next = null;
 *     `),n("span",{class:"token punctuation"},"}"),e(`
 * `),n("span",{class:"token punctuation"},"}"),e(`
 */`)]),e(`
`),n("span",{class:"token keyword"},"public"),e(),n("span",{class:"token keyword"},"class"),e(),n("span",{class:"token class-name"},"Solution"),e(),n("span",{class:"token punctuation"},"{"),e(`
    `),n("span",{class:"token keyword"},"public"),e(),n("span",{class:"token keyword"},"boolean"),e(),n("span",{class:"token function"},"hasCycle"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"ListNode"),e(" head"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
        `),n("span",{class:"token class-name"},"ListNode"),e(" fast "),n("span",{class:"token operator"},"="),e(" head"),n("span",{class:"token punctuation"},";"),e(`
        `),n("span",{class:"token class-name"},"ListNode"),e(" slow "),n("span",{class:"token operator"},"="),e(" head"),n("span",{class:"token punctuation"},";"),e(`
        `),n("span",{class:"token comment"},"// 需要校验 fast.next 为空，非环行链表的情况下，表明已经是最后节点"),e(`
        `),n("span",{class:"token keyword"},"while"),e(),n("span",{class:"token punctuation"},"("),e(" fast "),n("span",{class:"token operator"},"!="),e(),n("span",{class:"token keyword"},"null"),e(),n("span",{class:"token operator"},"&&"),e(" fast"),n("span",{class:"token punctuation"},"."),e("next "),n("span",{class:"token operator"},"!="),e(),n("span",{class:"token keyword"},"null"),e(),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
            `),n("span",{class:"token comment"},"// 快指针走两步，慢指针走一步"),e(`
            fast `),n("span",{class:"token operator"},"="),e(" fast"),n("span",{class:"token punctuation"},"."),e("next"),n("span",{class:"token punctuation"},"."),e("next"),n("span",{class:"token punctuation"},";"),e(`
            slow `),n("span",{class:"token operator"},"="),e(" slow"),n("span",{class:"token punctuation"},"."),e("next"),n("span",{class:"token punctuation"},";"),e(`
            `),n("span",{class:"token keyword"},"if"),e(),n("span",{class:"token punctuation"},"("),e(" fast "),n("span",{class:"token operator"},"=="),e(" slow "),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
                `),n("span",{class:"token keyword"},"return"),e(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},";"),e(`
            `),n("span",{class:"token punctuation"},"}"),e(`
        `),n("span",{class:"token punctuation"},"}"),e(`
        `),n("span",{class:"token keyword"},"return"),e(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},";"),e(`
    `),n("span",{class:"token punctuation"},"}"),e(`
`),n("span",{class:"token punctuation"},"}"),e(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),gt=n("div",{class:"language-swift line-numbers-mode","data-ext":"swift"},[n("pre",{class:"language-swift"},[n("code",null,[n("span",{class:"token comment"},`/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.next = nil
 *     }
 * }
 */`),e(`

`),n("span",{class:"token keyword"},"class"),e(),n("span",{class:"token class-name"},"Solution"),e(),n("span",{class:"token punctuation"},"{"),e(`
    `),n("span",{class:"token keyword"},"func"),e(),n("span",{class:"token function-definition function"},"hasCycle"),n("span",{class:"token punctuation"},"("),n("span",{class:"token omit keyword"},"_"),e(" head"),n("span",{class:"token punctuation"},":"),e(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token operator"},"->"),e(),n("span",{class:"token class-name"},"Bool"),e(),n("span",{class:"token punctuation"},"{"),e(`
        `),n("span",{class:"token keyword"},"var"),e(" fast "),n("span",{class:"token operator"},"="),e(` head
        `),n("span",{class:"token keyword"},"var"),e(" slow "),n("span",{class:"token operator"},"="),e(` head
        `),n("span",{class:"token comment"},"// swift 可选类型，简化了 java 中的为空判断"),e(`
        `),n("span",{class:"token keyword"},"while"),e(" fast"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),e("next "),n("span",{class:"token operator"},"!="),e(),n("span",{class:"token nil constant"},"nil"),e(),n("span",{class:"token punctuation"},"{"),e(`
            fast `),n("span",{class:"token operator"},"="),e(" fast"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),e("next"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),e(`next
            slow `),n("span",{class:"token operator"},"="),e(" slow"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),e(`next
            `),n("span",{class:"token keyword"},"guard"),e(" fast "),n("span",{class:"token operator"},"==="),e(" slow "),n("span",{class:"token keyword"},"else"),e(),n("span",{class:"token punctuation"},"{"),e(),n("span",{class:"token keyword"},"continue"),e(),n("span",{class:"token punctuation"},"}"),e(`
            `),n("span",{class:"token keyword"},"return"),e(),n("span",{class:"token boolean"},"true"),e(`
        `),n("span",{class:"token punctuation"},"}"),e(`
        `),n("span",{class:"token keyword"},"return"),e(),n("span",{class:"token boolean"},"false"),e(`
    `),n("span",{class:"token punctuation"},"}"),e(`
`),n("span",{class:"token punctuation"},"}"),e(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),yt=n("p",null,"// #endregion 0141",-1),wt=n("h2",{id:"_0142",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0142","aria-hidden":"true"},"#"),e(" 0142")],-1),xt=n("p",null,"// #region 0142",-1),It={href:"https://leetcode.cn/problems/linked-list-cycle-ii",target:"_blank",rel:"noopener noreferrer"},Nt=n("blockquote",null,[n("p",null,"求环形链表入环位置的节点？")],-1),At={class:"hint-container details"},Lt=n("summary",null,"💡",-1),jt=n("p",null,"【结论】相遇点 ~ 连接点 = 头指针 ~ 连接点",-1),qt=n("p",null,"数学公式推导",-1),Ct=n("blockquote",null,[n("p",null,"求环形链表的环长？")],-1),Bt=n("p",null,"【思路1】slow 指针视角，记录第一次相遇点位置，之后使用计数器记录步长，当 slow 指针再次走到该位置时，则计数器步长就是环长。",-1),Ot=n("p",null,"【思路2】fast 指针视角，由于 fast 刚好比 slow 指针多走一倍，所以当两个指针再次相遇时，则 fast 刚好走了环长的两倍。",-1),St=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,`
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),Dt=n("div",{class:"language-swift line-numbers-mode","data-ext":"swift"},[n("pre",{class:"language-swift"},[n("code",null,`
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),Vt=n("p",null,"// #endregion 0142",-1),zt=n("h2",{id:"_0143",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0143","aria-hidden":"true"},"#"),e(" 0143")],-1),Et=n("p",null,"// #region 0143",-1),Tt={href:"https://leetcode.cn/problems/reorder-list",target:"_blank",rel:"noopener noreferrer"},Pt=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Rt=n("p",null,"// #endregion 0143",-1),Ut=n("h2",{id:"_0144",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0144","aria-hidden":"true"},"#"),e(" 0144")],-1),Ft=n("p",null,"// #region 0144",-1),Gt={href:"https://leetcode.cn/problems/binary-tree-preorder-traversal",target:"_blank",rel:"noopener noreferrer"},Ht=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Jt=n("p",null,"// #endregion 0144",-1),Kt=n("h2",{id:"_0145",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0145","aria-hidden":"true"},"#"),e(" 0145")],-1),Mt=n("p",null,"// #region 0145",-1),Qt={href:"https://leetcode.cn/problems/binary-tree-postorder-traversal",target:"_blank",rel:"noopener noreferrer"},Wt=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Xt=n("p",null,"// #endregion 0145",-1),Yt=n("h2",{id:"_0146",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0146","aria-hidden":"true"},"#"),e(" 0146")],-1),Zt=n("p",null,"// #region 0146",-1),$t={href:"https://leetcode.cn/problems/lru-cache",target:"_blank",rel:"noopener noreferrer"},na=n("blockquote",null,[n("p",null,[n("code",null,"get"),e(),n("code",null,"put"),e(" 操作需要 O(1) 的平均时间复杂度")])],-1),ea=h('<details class="hint-container details"><summary>💡</summary><p>【思路】: 哈希表 + 双向链表</p><ul><li>首先解决数据的缓存问题。由于需要 O(1) 的时间复杂度，所以应该很自然的想到了使用哈希表来保存数据。这样保存和查询都可以做到 O(1) 的时间复杂度。</li><li>再来解决最近最少使用的问题。这需要使用双向链表的结构来保存数据，链表头部为最少使用的数据，链表尾部为最近使用的数据。 <ul><li>查询数据时，这个查询过的数据为最近使用，也就是需要移除就之前链表中的这个数据，将这个数据重新加入到链表尾部。</li><li>添加数据时，如果这个 key 已存在，则移除旧数据，将新数据加入链表尾部；如果 key 不存在，需要判断缓存是否已满，如果已满则移除链表头部最少使用数据，添加新数据到链表尾部，如果未满则直接添加新数据到链表尾部。</li></ul></li></ul></details><p>// #endregion 0146</p><h2 id="_0147" tabindex="-1"><a class="header-anchor" href="#_0147" aria-hidden="true">#</a> 0147</h2><p>// #region 0147</p>',4),sa={href:"https://leetcode.cn/problems/insertion-sort-list",target:"_blank",rel:"noopener noreferrer"},ta=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),aa=n("p",null,"// #endregion 0147",-1),la=n("h2",{id:"_0148",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0148","aria-hidden":"true"},"#"),e(" 0148")],-1),oa=n("p",null,"// #region 0148",-1),ia={href:"https://leetcode.cn/problems/sort-list",target:"_blank",rel:"noopener noreferrer"},ra=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),ca=n("p",null,"// #endregion 0148",-1),da=n("h2",{id:"_0149",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0149","aria-hidden":"true"},"#"),e(" 0149")],-1),ua=n("p",null,"// #region 0149",-1),pa={href:"https://leetcode.cn/problems/max-points-on-a-line",target:"_blank",rel:"noopener noreferrer"},ha=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),_a=n("p",null,"// #endregion 0149",-1),ka=n("h2",{id:"_0150",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0150","aria-hidden":"true"},"#"),e(" 0150")],-1),ma=n("p",null,"// #region 0150",-1),ba={href:"https://leetcode.cn/problems/evaluate-reverse-polish-notation",target:"_blank",rel:"noopener noreferrer"},fa=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),va=n("p",null,"// #endregion 0150",-1),ga=n("h2",{id:"_0151",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0151","aria-hidden":"true"},"#"),e(" 0151")],-1),ya=n("p",null,"// #region 0151",-1),wa={href:"https://leetcode.cn/problems/reverse-words-in-a-string",target:"_blank",rel:"noopener noreferrer"},xa=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Ia=n("p",null,"// #endregion 0151",-1),Na=n("h2",{id:"_0160-✅",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0160-✅","aria-hidden":"true"},"#"),e(" 0160 ✅")],-1),Aa=n("p",null,"// #region 0160",-1),La={href:"https://leetcode.cn/problems/intersection-of-two-linked-lists",target:"_blank",rel:"noopener noreferrer"},ja=n("blockquote",null,[n("p",null,[e("求两个单链表是否存在交点？如果存在返回相交起始节点，不存在返回 "),n("code",null,"null"),e("？(已确定不存在环结构)")])],-1),qa=n("pre",null,[n("code",null,`  🌰例子
        a1 -> a2 
                \\
                  -> c1 -> c2 -> c3
                /
  b1 -> b2 -> b3
  
  c1 为交点
`)],-1),Ca={class:"hint-container details"},Ba=n("summary",null,"💡",-1),Oa=n("p",null,[e("【思路1】遍历两个链表，变量的同时将节点放入 "),n("code",null,"Set"),e(" 中，如果存入时已存在 "),n("code",null,"Set"),e(" 中，则表明是交点。这种解法时间复杂度 O(n), 需要使用额外空间 ，空间复杂度 O(n)。")],-1),Sa=n("p",null,"【思路2】由于相交之后内容相同，这可以先计算两个链表长度，先让长一点的链表先走两个链表差值。然后两个链表指针同时向前走，然后比较节点是否相同，如果相同就是交点。",-1),Da=n("p",null,"【思路3】扩展思路3，核心点在于对齐链表，然后就可以开始比较。如果将两个链表前后相加(A+B B+A) 这样也起到了对齐效果，代码实现并不需要真正相加，两个指针，只需要先遍历一个链表然后再从另外一个链表头开始往遍历。",-1),Va=n("pre",null,[n("code",null,`    [a1 -> a2 -> c1 -> c2 -> c3] -> b1 -> b2 -> b3 -> {c1} -> c2 -> c3
    [b1 -> b2 -> b3 -> c1 -> c2 -> c3] -> a1 -> a2 -> {c1} -> c2 -> c3
`)],-1),za=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token doc-comment comment"},[e(`/**
 * Definition for singly-linked list.
 * public class ListNode `),n("span",{class:"token punctuation"},"{"),e(`
 *     int val;
 *     ListNode next;
 *     ListNode(int x) `),n("span",{class:"token punctuation"},"{"),e(`
 *         val = x;
 *         next = null;
 *     `),n("span",{class:"token punctuation"},"}"),e(`
 * `),n("span",{class:"token punctuation"},"}"),e(`
 */`)]),e(`
 
`),n("span",{class:"token keyword"},"public"),e(),n("span",{class:"token keyword"},"class"),e(),n("span",{class:"token class-name"},"Solution"),e(),n("span",{class:"token punctuation"},"{"),e(`
    `),n("span",{class:"token keyword"},"public"),e(),n("span",{class:"token class-name"},"ListNode"),e(),n("span",{class:"token function"},"getIntersectionNode"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"ListNode"),e(" headA"),n("span",{class:"token punctuation"},","),e(),n("span",{class:"token class-name"},"ListNode"),e(" headB"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
        `),n("span",{class:"token class-name"},"ListNode"),e(" pa "),n("span",{class:"token operator"},"="),e(" headA"),n("span",{class:"token punctuation"},";"),e(`
        `),n("span",{class:"token class-name"},"ListNode"),e(" pb "),n("span",{class:"token operator"},"="),e(" headB"),n("span",{class:"token punctuation"},";"),e(`
        `),n("span",{class:"token keyword"},"while"),e(),n("span",{class:"token punctuation"},"("),e(" pa "),n("span",{class:"token operator"},"!="),e(" pb "),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
            `),n("span",{class:"token keyword"},"if"),e(),n("span",{class:"token punctuation"},"("),e(" pa "),n("span",{class:"token operator"},"=="),e(),n("span",{class:"token keyword"},"null"),e(),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
                pa `),n("span",{class:"token operator"},"="),e(" headB"),n("span",{class:"token punctuation"},";"),e(`
            `),n("span",{class:"token punctuation"},"}"),e(),n("span",{class:"token keyword"},"else"),e(),n("span",{class:"token punctuation"},"{"),e(`
                pa `),n("span",{class:"token operator"},"="),e(" pa"),n("span",{class:"token punctuation"},"."),e("next"),n("span",{class:"token punctuation"},";"),e(`
            `),n("span",{class:"token punctuation"},"}"),e(`
            `),n("span",{class:"token keyword"},"if"),e(),n("span",{class:"token punctuation"},"("),e(" pb "),n("span",{class:"token operator"},"=="),e(),n("span",{class:"token keyword"},"null"),e(),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
                pb `),n("span",{class:"token operator"},"="),e(" headA"),n("span",{class:"token punctuation"},";"),e(`
            `),n("span",{class:"token punctuation"},"}"),e(),n("span",{class:"token keyword"},"else"),e(),n("span",{class:"token punctuation"},"{"),e(`
                pb `),n("span",{class:"token operator"},"="),e(" pb"),n("span",{class:"token punctuation"},"."),e("next"),n("span",{class:"token punctuation"},";"),e(`
            `),n("span",{class:"token punctuation"},"}"),e(`
        `),n("span",{class:"token punctuation"},"}"),e(`
        `),n("span",{class:"token keyword"},"return"),e(" pa"),n("span",{class:"token punctuation"},";"),e(`
    `),n("span",{class:"token punctuation"},"}"),e(`
`),n("span",{class:"token punctuation"},"}"),e(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Ea=n("div",{class:"language-swift line-numbers-mode","data-ext":"swift"},[n("pre",{class:"language-swift"},[n("code",null,[n("span",{class:"token comment"},`/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.next = nil
 *     }
 * }
 */`),e(`

`),n("span",{class:"token keyword"},"class"),e(),n("span",{class:"token class-name"},"Solution"),e(),n("span",{class:"token punctuation"},"{"),e(`
    `),n("span",{class:"token keyword"},"func"),e(),n("span",{class:"token function-definition function"},"getIntersectionNode"),n("span",{class:"token punctuation"},"("),n("span",{class:"token omit keyword"},"_"),e(" headA"),n("span",{class:"token punctuation"},":"),e(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},","),e(),n("span",{class:"token omit keyword"},"_"),e(" headB"),n("span",{class:"token punctuation"},":"),e(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token operator"},"->"),e(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token operator"},"?"),e(),n("span",{class:"token punctuation"},"{"),e(`
        `),n("span",{class:"token keyword"},"var"),e(" pa "),n("span",{class:"token operator"},"="),e(` headA
        `),n("span",{class:"token keyword"},"var"),e(" pb "),n("span",{class:"token operator"},"="),e(` headB
        `),n("span",{class:"token keyword"},"while"),e(" pa "),n("span",{class:"token operator"},"!=="),e(" pb "),n("span",{class:"token punctuation"},"{"),e(),n("span",{class:"token comment"},"// swift 中需要使用 !== 判断两个对象是否相等"),e(`
            `),n("span",{class:"token comment"},"// 遍历完一个链表后，开始遍历另一个链表"),e(`
            pa `),n("span",{class:"token operator"},"="),e(" pa "),n("span",{class:"token operator"},"=="),e(),n("span",{class:"token nil constant"},"nil"),e(),n("span",{class:"token operator"},"?"),e(" headB "),n("span",{class:"token punctuation"},":"),e(" pa"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),e(`next
            pb `),n("span",{class:"token operator"},"="),e(" pb "),n("span",{class:"token operator"},"=="),e(),n("span",{class:"token nil constant"},"nil"),e(),n("span",{class:"token operator"},"?"),e(" headA "),n("span",{class:"token punctuation"},":"),e(" pb"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),e(`next
        `),n("span",{class:"token punctuation"},"}"),e(`
        `),n("span",{class:"token keyword"},"return"),e(` pa
    `),n("span",{class:"token punctuation"},"}"),e(`
`),n("span",{class:"token punctuation"},"}"),e(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Ta=n("p",null,"// #endregion 0160",-1),Pa=n("h2",{id:"_0167-✅",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0167-✅","aria-hidden":"true"},"#"),e(" 0167 ✅")],-1),Ra=n("p",null,"// #region 0167",-1),Ua={href:"https://leetcode.cn/problems/two-sum-ii-input-array-is-sorted",target:"_blank",rel:"noopener noreferrer"},Fa=n("blockquote",null,[n("p",null,"给定目标值，在有序数组中查找两个索引对应的值相加等于目标值。")],-1),Ga={class:"hint-container details"},Ha=n("summary",null,"💡",-1),Ja=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"class"),e(),n("span",{class:"token class-name"},"Solution"),e(),n("span",{class:"token punctuation"},"{"),e(`
    `),n("span",{class:"token keyword"},"public"),e(),n("span",{class:"token keyword"},"int"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),e(),n("span",{class:"token function"},"twoSum"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),e(" numbers"),n("span",{class:"token punctuation"},","),e(),n("span",{class:"token keyword"},"int"),e(" target"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
        `),n("span",{class:"token keyword"},"int"),e(" left "),n("span",{class:"token operator"},"="),e(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),e(`
        `),n("span",{class:"token keyword"},"int"),e(" right "),n("span",{class:"token operator"},"="),e(" numbers"),n("span",{class:"token punctuation"},"."),e("length "),n("span",{class:"token operator"},"-"),e(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),e(`
        `),n("span",{class:"token keyword"},"while"),e(),n("span",{class:"token punctuation"},"("),e(" left "),n("span",{class:"token operator"},"<"),e(" right "),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
            `),n("span",{class:"token keyword"},"int"),e(" sum "),n("span",{class:"token operator"},"="),e(" numbers"),n("span",{class:"token punctuation"},"["),e("left"),n("span",{class:"token punctuation"},"]"),e(),n("span",{class:"token operator"},"+"),e(" numbers"),n("span",{class:"token punctuation"},"["),e("right"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),e(`
            `),n("span",{class:"token keyword"},"if"),e(),n("span",{class:"token punctuation"},"("),e(" sum "),n("span",{class:"token operator"},"=="),e(" target "),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(` 
                `),n("span",{class:"token keyword"},"return"),e(),n("span",{class:"token keyword"},"new"),e(),n("span",{class:"token keyword"},"int"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),e(),n("span",{class:"token punctuation"},"{"),e("left "),n("span",{class:"token operator"},"+"),e(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),e(" right "),n("span",{class:"token operator"},"+"),e(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),e(`
            `),n("span",{class:"token punctuation"},"}"),e(),n("span",{class:"token keyword"},"else"),e(),n("span",{class:"token keyword"},"if"),e(),n("span",{class:"token punctuation"},"("),e(" sum "),n("span",{class:"token operator"},"<"),e(" target "),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
                `),n("span",{class:"token comment"},"// 小于目标值，调整左边"),e(`
                left `),n("span",{class:"token operator"},"+="),e(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),e(`
            `),n("span",{class:"token punctuation"},"}"),e(),n("span",{class:"token keyword"},"else"),e(),n("span",{class:"token punctuation"},"{"),e(),n("span",{class:"token comment"},"// sum > target"),e(`
                `),n("span",{class:"token comment"},"// 大于目标值，调整右边"),e(`
                right `),n("span",{class:"token operator"},"-="),e(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),e(`
            `),n("span",{class:"token punctuation"},"}"),e(`
        `),n("span",{class:"token punctuation"},"}"),e(`
        `),n("span",{class:"token keyword"},"return"),e(),n("span",{class:"token keyword"},"new"),e(),n("span",{class:"token keyword"},"int"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),e(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),e(`
    `),n("span",{class:"token punctuation"},"}"),e(`
`),n("span",{class:"token punctuation"},"}"),e(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Ka=n("p",null,"// #endregion 0167",-1),Ma=n("h2",{id:"_0172",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0172","aria-hidden":"true"},"#"),e(" 0172")],-1),Qa=n("p",null,"// #region 0172",-1),Wa={href:"https://leetcode.cn/problems/factorial-trailing-zeroes",target:"_blank",rel:"noopener noreferrer"},Xa=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Ya=n("p",null,"// #endregion 0172",-1),Za=n("h2",{id:"_0174",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0174","aria-hidden":"true"},"#"),e(" 0174")],-1),$a=n("p",null,"// #region 0174",-1),nl={href:"https://leetcode.cn/problems/dungeon-game",target:"_blank",rel:"noopener noreferrer"},el=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),sl=n("p",null,"// #endregion 0174",-1),tl=n("h2",{id:"_0187",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0187","aria-hidden":"true"},"#"),e(" 0187")],-1),al=n("p",null,"// #region 0187",-1),ll={href:"https://leetcode.cn/problems/repeated-dna-sequences",target:"_blank",rel:"noopener noreferrer"},ol=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),il=n("p",null,"// #endregion 0187",-1),rl=n("h2",{id:"_0188",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0188","aria-hidden":"true"},"#"),e(" 0188")],-1),cl=n("p",null,"// #region 0188",-1),dl={href:"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iv",target:"_blank",rel:"noopener noreferrer"},ul=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),pl=n("p",null,"// #endregion 0188",-1),hl=n("h2",{id:"_0189",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0189","aria-hidden":"true"},"#"),e(" 0189")],-1),_l=n("p",null,"// #region 0189",-1),kl={href:"https://leetcode.cn/problems/house-robber",target:"_blank",rel:"noopener noreferrer"},ml=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),bl=n("p",null,"// #endregion 0189",-1),fl=n("h2",{id:"_0191",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0191","aria-hidden":"true"},"#"),e(" 0191")],-1),vl=n("p",null,"// #region 0191",-1),gl={href:"https://leetcode.cn/problems/number-of-1-bits",target:"_blank",rel:"noopener noreferrer"},yl=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),wl=n("p",null,"// #endregion 0191",-1);function xl(Il,Nl){const t=r("ExternalLinkIcon"),i=r("CodeTabs");return d(),u("div",null,[p(" more "),k,m,n("ul",null,[n("li",null,[n("a",b,[e("🟢 100 - 相同的树"),s(t)])])]),f,v,g,y,n("ul",null,[n("li",null,[n("a",w,[e("🟢 101 - 对称二叉树"),s(t)])])]),x,I,N,A,n("ul",null,[n("li",null,[n("a",L,[e("🟠 102 - 二叉树的层序遍历"),s(t)])])]),j,q,C,B,n("ul",null,[n("li",null,[n("a",O,[e("🟠 103 - 二叉树的锯齿形层序遍历"),s(t)])])]),S,D,V,z,n("ul",null,[n("li",null,[n("a",E,[e("🟢 104 - 二叉树的最大深度"),s(t)]),T])]),P,R,U,F,n("ul",null,[n("li",null,[n("a",G,[e("🟠 105 - 从前序与中序遍历序列构造二叉树"),s(t)])])]),H,J,K,M,n("ul",null,[n("li",null,[n("a",Q,[e("🟠 106 - 从中序与后序遍历序列构造二叉树"),s(t)])])]),W,X,Y,Z,n("ul",null,[n("li",null,[n("a",$,[e("🟠 107 - 二叉树的层序遍历 II"),s(t)])])]),nn,en,sn,tn,n("ul",null,[n("li",null,[n("a",an,[e("🟢 108 - 将有序数组转换为二叉搜索树"),s(t)])])]),ln,on,rn,cn,n("ul",null,[n("li",null,[n("a",dn,[e("🟠 109 - 有序链表转换二叉搜索树"),s(t)])])]),un,pn,hn,_n,n("ul",null,[n("li",null,[n("a",kn,[e("🟢 110 - 平衡二叉树"),s(t)])])]),mn,bn,fn,vn,n("ul",null,[n("li",null,[n("a",gn,[e("🟢 111 - 二叉树的最小深度"),s(t)])])]),yn,wn,xn,In,n("ul",null,[n("li",null,[n("a",Nn,[e("🟢 112 - 路径总和"),s(t)])])]),An,Ln,jn,qn,n("ul",null,[n("li",null,[n("a",Cn,[e("🟠 113 - 路径总和 II"),s(t)])])]),Bn,On,Sn,Dn,n("ul",null,[n("li",null,[n("a",Vn,[e("🟠 114 - 二叉树展开为链表"),s(t)])])]),zn,En,Tn,Pn,n("ul",null,[n("li",null,[n("a",Rn,[e("🔴 115 - 不同的子序列"),s(t)])])]),Un,Fn,Gn,Hn,n("ul",null,[n("li",null,[n("a",Jn,[e("🟠 116 - 填充每个节点的下一个右侧节点指针"),s(t)])])]),Kn,Mn,Qn,Wn,n("ul",null,[n("li",null,[n("a",Xn,[e("🟠 117 - 填充每个节点的下一个右侧节点指针 II"),s(t)])])]),Yn,Zn,$n,ne,n("ul",null,[n("li",null,[n("a",ee,[e("🟢 118 - 杨辉三角"),s(t)])])]),se,te,ae,le,n("ul",null,[n("li",null,[n("a",oe,[e("🟢 119 - 杨辉三角 II"),s(t)])])]),ie,re,ce,de,n("ul",null,[n("li",null,[n("a",ue,[e("🟠 120 - 三角形最小路径和"),s(t)])])]),pe,he,_e,ke,n("ul",null,[n("li",null,[n("a",me,[e("🟢 121 - 买卖股票的最佳时机"),s(t)])])]),be,fe,ve,ge,n("ul",null,[n("li",null,[n("a",ye,[e("🟠 122 - 买卖股票的最佳时机 II"),s(t)])])]),we,xe,Ie,Ne,n("ul",null,[n("li",null,[n("a",Ae,[e("🔴 123 - 买卖股票的最佳时机 III"),s(t)])])]),Le,je,qe,Ce,n("ul",null,[n("li",null,[n("a",Be,[e("🔴 124 - 二叉树中的最大路径和"),s(t)])])]),Oe,Se,De,Ve,n("ul",null,[n("li",null,[n("a",ze,[e("🟢 125 - 验证回文串"),s(t)]),Ee])]),n("details",Te,[Pe,s(i,{id:"475",data:[{id:"java"}]},{title0:a(({value:l,isActive:o})=>[e("java")]),tab0:a(({value:l,isActive:o})=>[Re]),_:1})]),Ue,Fe,Ge,n("ul",null,[n("li",null,[n("a",He,[e("🔴 126 - 单词接龙 II"),s(t)])])]),Je,Ke,Me,Qe,n("ul",null,[n("li",null,[n("a",We,[e("🔴 - 单词接龙"),s(t)])])]),Xe,Ye,Ze,$e,n("ul",null,[n("li",null,[n("a",ns,[e("🟠 128 - 最长连续序列"),s(t)])])]),es,ss,ts,as,n("ul",null,[n("li",null,[n("a",ls,[e("🟠 129 - 求根节点到叶节点数字之和"),s(t)])])]),os,is,rs,cs,n("ul",null,[n("li",null,[n("a",ds,[e("🟠 130 - 被围绕的区域"),s(t)])])]),us,ps,hs,_s,n("ul",null,[n("li",null,[n("a",ks,[e("🟠 131 - 分割回文串"),s(t)])])]),ms,bs,fs,vs,n("ul",null,[n("li",null,[n("a",gs,[e("🔴 132 - 分割回文串 II"),s(t)])])]),ys,ws,xs,Is,n("ul",null,[n("li",null,[n("a",Ns,[e("🟠 133 - 克隆图"),s(t)])])]),As,Ls,js,qs,n("ul",null,[n("li",null,[n("a",Cs,[e("🟠 134 - 加油站"),s(t)])])]),Bs,Os,Ss,Ds,n("ul",null,[n("li",null,[n("a",Vs,[e("🔴 135 - 分发糖果"),s(t)])])]),zs,Es,Ts,Ps,n("ul",null,[n("li",null,[n("a",Rs,[e("🟢 136 - 只出现一次的数字"),s(t)]),Us])]),Fs,Gs,Hs,Js,n("ul",null,[n("li",null,[n("a",Ks,[e("🟠 137 - 只出现一次的数字 II"),s(t)]),Ms])]),Qs,Ws,Xs,Ys,n("ul",null,[n("li",null,[n("a",Zs,[e("🟠 138 - 随机链表的复制"),s(t)])])]),$s,nt,et,st,n("ul",null,[n("li",null,[n("a",tt,[e("🟠 139 - 单词拆分"),s(t)])])]),at,lt,ot,it,n("ul",null,[n("li",null,[n("a",rt,[e("🔴 140 - 单词拆分 II"),s(t)])])]),ct,dt,ut,pt,n("ul",null,[n("li",null,[n("a",ht,[e("🟢 141 - 环形链表"),s(t)]),_t])]),n("details",kt,[mt,bt,ft,s(i,{id:"795",data:[{id:"java"},{id:"swift"}]},{title0:a(({value:l,isActive:o})=>[e("java")]),title1:a(({value:l,isActive:o})=>[e("swift")]),tab0:a(({value:l,isActive:o})=>[vt]),tab1:a(({value:l,isActive:o})=>[gt]),_:1})]),yt,wt,xt,n("ul",null,[n("li",null,[n("a",It,[e("🟠 142 - 环形链表 II"),s(t)]),Nt])]),n("details",At,[Lt,jt,qt,Ct,Bt,Ot,s(i,{id:"843",data:[{id:"java"},{id:"swift"}]},{title0:a(({value:l,isActive:o})=>[e("java")]),title1:a(({value:l,isActive:o})=>[e("swift")]),tab0:a(({value:l,isActive:o})=>[St]),tab1:a(({value:l,isActive:o})=>[Dt]),_:1})]),Vt,zt,Et,n("ul",null,[n("li",null,[n("a",Tt,[e("🟠 143 - 重排链表"),s(t)])])]),Pt,Rt,Ut,Ft,n("ul",null,[n("li",null,[n("a",Gt,[e("🟢 144 - 二叉树的前序遍历"),s(t)])])]),Ht,Jt,Kt,Mt,n("ul",null,[n("li",null,[n("a",Qt,[e("🟢 145 - 二叉树的后序遍历"),s(t)])])]),Wt,Xt,Yt,Zt,n("ul",null,[n("li",null,[n("a",$t,[e("🟠 146 - LRU 缓存"),s(t)]),na])]),ea,n("ul",null,[n("li",null,[n("a",sa,[e("🟠 147 - 对链表进行插入排序"),s(t)])])]),ta,aa,la,oa,n("ul",null,[n("li",null,[n("a",ia,[e("🟠 148 - 排序链表"),s(t)])])]),ra,ca,da,ua,n("ul",null,[n("li",null,[n("a",pa,[e("🔴 149 - 直线上最多的点数"),s(t)])])]),ha,_a,ka,ma,n("ul",null,[n("li",null,[n("a",ba,[e("🟠 150 - 逆波兰表达式求值"),s(t)])])]),fa,va,ga,ya,n("ul",null,[n("li",null,[n("a",wa,[e("🟠 151 - 反转字符串中的单词"),s(t)])])]),xa,Ia,Na,Aa,n("ul",null,[n("li",null,[n("p",null,[n("a",La,[e("🟢 160 - 相交链表"),s(t)])]),ja,qa])]),n("details",Ca,[Ba,Oa,Sa,Da,Va,s(i,{id:"1079",data:[{id:"java"},{id:"swift"}]},{title0:a(({value:l,isActive:o})=>[e("java")]),title1:a(({value:l,isActive:o})=>[e("swift")]),tab0:a(({value:l,isActive:o})=>[za]),tab1:a(({value:l,isActive:o})=>[Ea]),_:1})]),Ta,Pa,Ra,n("ul",null,[n("li",null,[n("a",Ua,[e("🟠 167 - 两数之和 II - 输入有序数组"),s(t)]),Fa])]),n("details",Ga,[Ha,s(i,{id:"1110",data:[{id:"java"}]},{title0:a(({value:l,isActive:o})=>[e("java")]),tab0:a(({value:l,isActive:o})=>[Ja]),_:1})]),Ka,Ma,Qa,n("ul",null,[n("li",null,[n("a",Wa,[e("🟠 172 - 阶乘后的零"),s(t)])])]),Xa,Ya,Za,$a,n("ul",null,[n("li",null,[n("a",nl,[e("🔴 714 - 地下城游戏"),s(t)])])]),el,sl,tl,al,n("ul",null,[n("li",null,[n("a",ll,[e("🟠 187 - 重复的DNA序列"),s(t)])])]),ol,il,rl,cl,n("ul",null,[n("li",null,[n("a",dl,[e("🔴 188 - 买卖股票的最佳时机 IV"),s(t)])])]),ul,pl,hl,_l,n("ul",null,[n("li",null,[n("a",kl,[e("🟠 189 - 打家劫舍"),s(t)])])]),ml,bl,fl,vl,n("ul",null,[n("li",null,[n("a",gl,[e("🟢 191 - 位1的个数"),s(t)])])]),yl,wl])}const jl=c(_,[["render",xl],["__file","0x0100.html.vue"]]);export{jl as default};
