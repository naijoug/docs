import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as t,a as s,f as e}from"./app-CNQd9OBN.js";const o={},i=e(`<h2 id="uiview" tabindex="-1"><a class="header-anchor" href="#uiview" aria-hidden="true">#</a> UIView</h2><ul><li><p><code>UIView</code> vs <code>CALayer</code></p><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>UIView</td><td>用户交互，<code>UIView = CALayer.delegate</code></td></tr><tr><td>CALayer</td><td>图像和动画的渲染</td></tr></tbody></table></li><li><p><code>bounds</code> &amp; <code>frame</code> &amp; <code>anchorPoint</code> &amp; <code>position</code></p><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>bounds</code></td><td>相对于自身控件</td></tr><tr><td><code>frame</code></td><td>相对于父控件</td></tr><tr><td><code>anchorPoint</code></td><td>锚点; 范围 : 0.0 (layer 左上角) ~ 1.0 (layer 右下角); 默认为 : (0.5, 0.5)</td></tr><tr><td><code>position</code></td><td>layer 中的 anchorPoint 点在 superLayer 中的位置坐标</td></tr></tbody></table><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// frame、position 与 anchorPoint 的关系</span>
frame<span class="token punctuation">.</span>origin<span class="token punctuation">.</span>x <span class="token operator">=</span> position<span class="token punctuation">.</span>x <span class="token operator">-</span> anchorPoint<span class="token punctuation">.</span>x <span class="token operator">*</span> bounds<span class="token punctuation">.</span>size<span class="token punctuation">.</span>width；  
frame<span class="token punctuation">.</span>origin<span class="token punctuation">.</span>y <span class="token operator">=</span> position<span class="token punctuation">.</span>y <span class="token operator">-</span> anchorPoint<span class="token punctuation">.</span>y <span class="token operator">*</span> bounds<span class="token punctuation">.</span>size<span class="token punctuation">.</span>height；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>layout</code> vs <code>display</code></p><table><thead><tr><th>概念</th><th>标记函数</th><th>自动调用函数</th><th>功能说明</th></tr></thead><tbody><tr><td>layout (布局)</td><td><code>setNeedsLayout</code></td><td><code>layoutSubViews</code></td><td>将元素位置进行重新排列布局</td></tr><tr><td>display (绘图)</td><td><code>setNeedsDisplay</code></td><td><code>drawRect:</code></td><td>将元素绘制显示出来</td></tr></tbody></table></li><li><p><code>setNeedsDisplay</code> vs <code>layoutIfNeeded</code></p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>setNeedsDisplay</code></td><td>给视图添加标记，需要重新布局</td></tr><tr><td><code>layoutIfNeeded</code></td><td>检查是否有视图被标记，有标记立即刷新布局</td></tr></tbody></table></li><li><p><code>xib</code> vs <code>storyboard</code></p><ul><li><code>xib</code> 加载流程 <blockquote><p><code>initWithCoder:</code> -&gt; <code>awakeAfterUsingCoder:</code> -&gt; <code>awakeFromNib</code></p></blockquote></li><li><code>Segue</code> : <code>storyboard</code> 用来界面跳转的线，是一个 <code>UIStoryboardSegue</code> 对象</li></ul><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>xib</code></td><td>轻量级，描述局部的 UI 界面</td></tr><tr><td><code>storyboard</code></td><td>重量级，描述整个软件的页面关系</td></tr></tbody></table><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// xib 文件的加载</span>
<span class="token comment">//  1&gt; 直接从 bundle 中加载 xib 并创建</span>
NSArray <span class="token operator">*</span>objs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>NSBundle mainBundle<span class="token punctuation">]</span> loadNibNamed<span class="token punctuation">:</span><span class="token string">@&quot;CustomerView&quot;</span> owner<span class="token punctuation">:</span> nil options<span class="token punctuation">:</span> nil<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//  2&gt; 先加载 xib 再实例化</span>
UINib <span class="token operator">*</span>nib <span class="token operator">=</span> <span class="token punctuation">[</span>UINib nibWithNibName<span class="token punctuation">:</span><span class="token string">@&quot;CustomerView&quot;</span> bundle<span class="token punctuation">:</span><span class="token punctuation">[</span>NSBundle mainBundle<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
NSArray <span class="token operator">*</span>objs <span class="token operator">=</span> <span class="token punctuation">[</span>nib instantiateWithOwner<span class="token punctuation">:</span> nil options<span class="token punctuation">:</span> nil<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>Touch</code> &amp; <code>Event</code> &amp; <code>Responder</code></p><blockquote><p><code>First responder</code> : 第一响应者</p><p><code>Responder Chain</code> : 响应者链 <code>UIView -&gt; UIViewController -&gt; SuperView -&gt; ... -&gt; TopView -&gt; Window -&gt; UIApplication -&gt; 丢弃</code></p></blockquote><table><thead><tr><th>核心方法</th><th>说明</th></tr></thead><tbody><tr><td><code>hitTest: withEvent:</code></td><td>寻找并返回最合适的 view</td></tr><tr><td><code>pointInside: withEvent:</code></td><td>判断点是否在当前 view 中</td></tr></tbody></table></li></ul><h2 id="uiviewcontroller" tabindex="-1"><a class="header-anchor" href="#uiviewcontroller" aria-hidden="true">#</a> UIViewController</h2><ul><li><p>UIViewController lifecycle 生命周期 <code>viewDidLoad</code> 加载时机</p><blockquote><p>现象 - 在初始化设置控制器参数时，如果进行 UI 设置，会触发 <code>viewDidLoad</code>，此时还未进行 push 跳转</p></blockquote></li><li><p>控制器 View 创建流程</p><ol><li>如果 nibName 有值，就会加载对应的 xib 文件来创建 view</li><li>如果 nibName 没有值 <ul><li>2.1&gt; 优先加载同名 <code>View.xib</code> 文件来创建 view</li><li>2.2&gt; 再加载同名 <code>ViewController.xib</code> 文件来创建 view</li><li>2.3&gt; 如果没有找到上面所述的 xib 文件，就会用代码创建一个透明的 view</li></ul></li></ol></li><li><p><code>initWithCoder:</code> vs <code>initWithNibName:bundle:</code></p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// 创建一个控制器的三种方法</span>
<span class="token comment">// 1. 通过 storyboard 创建</span>
UIStoryboard <span class="token operator">*</span>storyboard <span class="token operator">=</span> <span class="token punctuation">[</span>UIStoryboard storyboardWithName<span class="token punctuation">:</span><span class="token string">@&quot;Main&quot;</span> bundle<span class="token punctuation">:</span> nil<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//  创建 storyboard 中的初始化控制器（箭头所指的控制器）</span>
ViewController <span class="token operator">*</span>vc <span class="token operator">=</span> <span class="token punctuation">[</span>storyboard instantiateInitialViewController<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//  通过一个标识初始化对应的控制器</span>
ViewController <span class="token operator">*</span>vc <span class="token operator">=</span> <span class="token punctuation">[</span>storyboard instantiateViewControllerWithIdentifier<span class="token punctuation">:</span><span class="token string">@&quot;id&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 2. 直接创建</span>
ViewController <span class="token operator">*</span>vc <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>ViewController alloc<span class="token punctuation">]</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 3. 指定 xib 文件来创建</span>
ViewController <span class="token operator">*</span>vc <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>ViewController alloc<span class="token punctuation">]</span> initWithNibName<span class="token punctuation">:</span><span class="token string">@&quot;ViewController&quot;</span> bundle<span class="token punctuation">:</span> nil<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 改变导航控制器的默认 push 动画效果</span>
<span class="token comment">// 定义转场动画</span>
CATransition<span class="token operator">*</span> transition <span class="token operator">=</span> <span class="token punctuation">[</span>CATransition animation<span class="token punctuation">]</span><span class="token punctuation">;</span>
transition<span class="token punctuation">.</span>type <span class="token operator">=</span> kCATransitionMoveIn<span class="token punctuation">;</span>
transition<span class="token punctuation">.</span>subtype <span class="token operator">=</span> kCATransitionFromTop<span class="token punctuation">;</span>
transition<span class="token punctuation">.</span>duration <span class="token operator">=</span> <span class="token number">0.3</span><span class="token punctuation">;</span>
<span class="token comment">// 修改导航控制器转场动画</span>
<span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>navigationController<span class="token punctuation">.</span>view<span class="token punctuation">.</span>layer addAnimation<span class="token punctuation">:</span>transition forKey<span class="token punctuation">:</span>kCATransition<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,4);function p(c,d){return a(),t("div",null,[s(" more "),i])}const u=n(o,[["render",p],["__file","0x04.uikit.html.vue"]]);export{u as default};
