import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as e,c as s,a,b as o,f as p}from"./app-PKGOewPu.js";const t={},c=o("blockquote",null,[o("p",null,"运行循环")],-1),l=p(`<h2 id="runloop" tabindex="-1"><a class="header-anchor" href="#runloop" aria-hidden="true">#</a> RunLoop</h2><h3 id="❓runloop-有几种事件源-有几种模式" tabindex="-1"><a class="header-anchor" href="#❓runloop-有几种事件源-有几种模式" aria-hidden="true">#</a> ❓<code>RunLoop</code> 有几种事件源？有几种模式？</h3><details class="hint-container details"><summary>💡</summary><p><code>RunLoop</code>是用来管理事件和处理 <code>IO</code> 的基本架构</p><p>三种事件源</p><ul><li><code>Timer</code>：定时器事件 <blockquote><p><code>RunLoop</code> 按照设定的时间区间接收定时器事件。</p></blockquote></li><li><code>Source</code>：输入源事件 <blockquote><p>包括两种类型：source0 &amp; source1</p></blockquote><ul><li>source0 : 自定义的输入源，需要程序员自己生成和管理。</li><li>source1 ： 基于 <code>Port</code> 的输入源，接收来自其他线程或进程的消息，然后在当前线程上调用指定的处理方法。</li></ul></li><li><code>Observer</code>：观察者事件 <blockquote><p>可以设置在 <code>RunLoop</code> 各个运行阶段接收的事件。</p></blockquote></li></ul><p>运行模式</p><ul><li><code>NSDefaultRunLoopMode</code>（kCFRunLoopDefaultMode）：默认模式 <blockquote><p>如果不手动指定模式，<code>RunLoop</code> 就在这个模式下运行。</p></blockquote></li><li><code>UITrackingRunLoopMode</code>：界面跟踪模式 <blockquote><p>用于 <code>ScrollView</code> 滚动时。</p></blockquote></li><li><code>UIInitializationRunLoopMode</code>：启动 App 时第进入的模式 <blockquote><p>启动完成后就不再使用。</p></blockquote></li><li><code>NSRunLoopCommonModes</code>（kCFRunLoopCommonModes）：这是一个占位模式，不是一种真正的 Mode。 <blockquote><p>可以将事件源（<code>Timer/Observer/Source</code>）添加到 <code>CommonModes</code> 中，<code>RunLoop</code> 运行在哪种 Mode 时，只要这种 Mode 被标记为 Common 的属性，则 <code>RunLoop</code> 就会处理相应的事件。</p></blockquote></li></ul></details><h3 id="❓runloop-内部实现逻辑" tabindex="-1"><a class="header-anchor" href="#❓runloop-内部实现逻辑" aria-hidden="true">#</a> ❓<code>Runloop</code> 内部实现逻辑？</h3><details class="hint-container details"><summary>💡</summary><p><code>RunLoop</code> 的内部实现可以简单地概括为一个 <code>while</code> 循环，在这个循环中处理各种输入源的事件。<code>RunLoop</code> 在开启后会一直在这个循环中执行，直到接收到停止 <code>RunLoop</code> 的消息。</p><ul><li><p><code>RunLoop</code> 在启动时会从预设的 <code>Mode</code> 中选择一个，然后进入 <code>RunLoop</code> 的循环。</p></li><li><p>进入循环周期</p><ul><li>首先，处理所有到期的定时器事件。</li><li>然后，处理所有的输入源事件。输入源的事件包括来自 <code>Port</code> 的消息，以及用户定义的其他事件。</li><li>然后，如果有观察者的话，<code>RunLoop</code> 会通知观察者当前 <code>RunLoop</code> 的状态。</li><li>最后，如果在处理事件的过程中没有任何源需要处理，那么 <code>RunLoop</code> 会进入休眠等待被唤醒。</li></ul></li><li><p>继续下一次循环，直到接收到结束 <code>RunLoop</code> 的消息。</p></li></ul></details><h3 id="❓runloop-底层数据结构是什么样的" tabindex="-1"><a class="header-anchor" href="#❓runloop-底层数据结构是什么样的" aria-hidden="true">#</a> ❓<code>Runloop</code> 底层数据结构是什么样的？</h3><details class="hint-container details"><summary>💡</summary><p><code>Runloop</code> 的底层实现集中在 <code>NSRunLoop</code>（Objective-C）和 <code>CFRunLoop</code>（C）两个类中。它们在结构上是一样的，只是提供给开发者使用的接口不同。在这里我们讨论的是 <code>CFRunLoop</code> 的结构，因为 <code>NSRunLoop</code> 实际上是对它的一层封装。</p><p>底层数据结构主要包括这几部分：</p><ol><li><p><strong>Runloop</strong>：每一个线程都可以有一个对应的 <code>RunLoop</code>，但是 <code>RunLoop</code> 必须在自己的线程中运行。<code>RunLoop</code> 对象包含了一组 <code>RunLoopMode</code>，<code>Mode</code> 之间是互斥的，同时只能运行在一个 <code>Mode</code>。</p></li><li><p><strong>Mode</strong>：每一个 <code>RunLoopMode</code> 包含了一组 <code>Source</code>、<code>Timer</code>、以及 <code>Observer</code>。</p><ul><li><strong>Source</strong>：源是 <code>RunLoop</code> 事件的产生者。<code>Source</code> 分为两种类型：<code>Source0</code> 和 <code>Source1</code>。<code>Source0</code> 只包含了一个回调（函数指针），而 <code>Source1</code> 还包含了一个 <code>mach_port</code> 和一个回调，并且 <code>Source1</code> 能主动唤醒 <code>RunLoop</code>。</li><li><strong>Timer</strong>：基于时间的触发器，它和 <code>NSTimer</code> 是一一对应的。给 <code>NSTimer</code> 设置的 <code>RunLoopMode</code> 实质上是设置了 Timer 所在的 <code>Mode</code>。</li><li><strong>Observer</strong>：观察者，一种可以插入 <code>RunLoop</code> 中以方便开发者在特定时机做额外处理的东西，比如常用的 <code>beforeWaiting</code>、<code>afterWaiting</code> 等。</li></ul></li><li><p><strong>ModeItems</strong>：<code>Mode</code> 中 <code>Source</code>、<code>Timer</code> 和 <code>Observer</code> 统称为 <code>ModeItems</code>，当它们被注册到 <code>RunLoop</code> 中，他们就会被添加到当前 <code>RunLoop</code> 的当前 <code>Mode</code> 下。当一个 <code>Mode</code> 的所有 <code>Items</code> 都被执行完毕，此时 <code>RunLoop</code> 就会进行通知或者是进入睡眠等待下一个消息的处理。</p></li><li><p><strong>CommonModes</strong>：为了可以让一些 <code>ModeItems</code> 在多个 <code>Mode</code> 中共享，<code>RunLoop</code> 提供了 <code>CommonModes</code> 这种模式，它是一组 <code>Mode</code> 的集合。我们可以将 <code>ModeItems</code> 添加进 <code>CommonModes</code> 中。</p></li></ol></details><h3 id="❓runloop-监听状态有哪几种" tabindex="-1"><a class="header-anchor" href="#❓runloop-监听状态有哪几种" aria-hidden="true">#</a> ❓<code>Runloop</code> 监听状态有哪几种</h3><details class="hint-container details"><summary>💡</summary><p>在<code>RunLoop</code>中，通过使用<code>CFRunLoopObserver</code>可以监听一下几种状态：</p><ol><li><p><strong>kCFRunLoopEntry</strong> (即将进入Loop)：RunLoop 即将进入运行循环状态。</p></li><li><p><strong>kCFRunLoopBeforeTimers</strong> (即将处理 Timer)：RunLoop 即将处理 Timer 回调。</p></li><li><p><strong>kCFRunLoopBeforeSources</strong> (即将处理 Source)：RunLoop 即将处理 Source。</p></li><li><p><strong>kCFRunLoopBeforeWaiting</strong> (即将进入休眠)：RunLoop 即将进入等待状态。</p></li><li><p><strong>kCFRunLoopAfterWaiting</strong> (被唤醒，但在处理事件之前)：RunLoop 被唤醒并即将开始处理事件。</p></li><li><p><strong>kCFRunLoopExit</strong> (即将退出Loop)：RunLoop 即将退出。</p></li></ol><p>这些状态的监听，允许我们在 RunLoop 进入特定阶段时，插入一些特定的处理，以便我们更好的管理程序的运行。</p></details><h3 id="❓runloop-工作流程大概是什么样的" tabindex="-1"><a class="header-anchor" href="#❓runloop-工作流程大概是什么样的" aria-hidden="true">#</a> ❓<code>Runloop</code> 工作流程大概是什么样的</h3><details class="hint-container details"><summary>💡</summary><p>RunLoop 的工作流程是一个循环，在循环内部不断地检查和处理来自源（Source）、定时器（Timer）和观察者（Observer）的事件或消息。</p><p>对于事件的处理顺序，RunLoop 遵循以下的基本规则：</p><ol><li><p>通知所有观察者，RunLoop 已经启动（kCFRunLoopEntry）。</p></li><li><p>通知所有观察者，即将处理定时器事件（kCFRunLoopBeforeTimers）。</p></li><li><p>通知所有观察者，即将处理输入源事件（kCFRunLoopBeforeSources）。</p></li><li><p>如果在处理输入源的时候，有输入源将其标记为 &quot;待唤醒&quot;，RunLoop 就会跳转到第二步。如果没有，则进入下一个阶段。</p></li><li><p>通知所有观察者，即将开始休眠（kCFRunLoopBeforeWaiting）。</p></li><li><p>然后 RunLoop 进入休眠状态，等待被唤醒。</p></li><li><p>如果 RunLoop 被唤醒，通知所有观察者，RunLoop 已经被唤醒且在处理事件之前（kCFRunLoopAfterWaiting）。然后处理唤醒它的事件（可能是定时器事件或者输入源事件），处理完成后，进入第二步。</p></li><li><p>通知所有观察者，RunLoop 即将退出（kCFRunLoopExit）。</p></li></ol><p>RunLoop 循环遍历这些步骤，在没有事件处理时，它会进入休眠状态，在有事件处理时被唤醒，这样就可以最大程度地节省 CPU 的资源，提高程序性能。</p></details><h3 id="❓runloop-有哪些应用" tabindex="-1"><a class="header-anchor" href="#❓runloop-有哪些应用" aria-hidden="true">#</a> ❓<code>Runloop</code> 有哪些应用</h3><details class="hint-container details"><summary>💡</summary><p>在 iOS 开发中，RunLoop 有许多常见的应用，像是处理用户触摸事件、处理计时器事件、进行网络请求以及其他一些关键的系统事件。以下列出一些具体的应用场景：</p><ol><li><p><strong>定时器</strong>：定时器的实现依托于 RunLoop。如果一个 NSTimer 没有添加到 RunLoop，那么定时器事件则不会被触发。因此，我们能够用 RunLoop 来控制定时器的触发频率。</p></li><li><p><strong>UI 刷新</strong>：当你更改 UIView 的属性（比如 frame）以重新布局视图时，实际上更改并不会立即生效，而是会被放在一个 UI 更新队列里，然后在下一次 RunLoop 时，系统会从队列中取出这些更改并一次性全部渲染到屏幕上。</p></li><li><p><strong>延迟显示</strong>：RunLoop 也可以用于控制 UI 的延迟显示。通过调用如下方法，我们可以在指定的延迟时间后执行一个方法：</p></li></ol><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token punctuation">[</span><span class="token keyword">self</span> performSelector<span class="token punctuation">:</span><span class="token attribute atrule">@selector</span><span class="token punctuation">(</span>myMethod<span class="token punctuation">)</span> withObject<span class="token punctuation">:</span><span class="token nil constant">nil</span> afterDelay<span class="token punctuation">:</span><span class="token number">3.0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>实质上，这个方法会把 performSelector 请求添加到 RunLoop 中，等待下一个 RunLoop 周期到来时，去执行相关任务。</p><ol start="4"><li><p><strong>常驻线程</strong>：我们知道线程一旦完成任务，它就会退出。这就意味着，如果我们在这个线程上做的所有设置（例如初始化变量，打开数据库等），都会随着线程的退出而失效。但是，我们可以通过让 RunLoop 去运行，使得这个线程能一直存在，不会结束，这就是常驻线程。这种技巧常常用于网络请求或者后台任务。</p></li><li><p><strong>处理触摸事件</strong>：在 iOS 应用程序中，Run Loop 也被用来处理用户的触摸事件。当用户触摸屏幕时，系统会将触摸事件加入到主 Run Loop 中，这样可以保证用户的触摸事件得到及时的响应。</p></li><li><p><strong>图片懒加载与大量数据处理</strong>：例如在滚动 loading 大图时，为了保证流畅性，通常图片的加载和解码操作会在后台进行，然后在 RunLoop 的空闲时间，把解码后的图片显示出来。</p></li></ol><p>总的来说，RunLoop 在 iOS 应用程序中担任了非常中心的角色，许多高级功能都依赖于 RunLoop 的驱动。理解 RunLoop 的工作机制，对于我们编写高效，流畅的 iOS 应用程序是非常必要的。</p></details><hr><h2 id="线程" tabindex="-1"><a class="header-anchor" href="#线程" aria-hidden="true">#</a> 线程</h2><h3 id="ios-线程启动-必须要启动-runloop-吗" tabindex="-1"><a class="header-anchor" href="#ios-线程启动-必须要启动-runloop-吗" aria-hidden="true">#</a> iOS 线程启动，必须要启动 Runloop 吗？</h3><details class="hint-container details"><summary>💡</summary><p>在 iOS 中，线程启动并不一定需要启动 RunLoop。RunLoop 并不是一个强制性的组件，只有当你需要在这个线程中进行某些特定的任务，如等待用户输入、定时任务、网络请求等时才需要启动。</p><p>事实上，除了主线程，新创建的子线程默认是没有开启 RunLoop 的。主线程之所以有 RunLoop，是因为在应用启动时 UIKit 自动帮你创建和启动了。RunLoop 是 Objective-C 和 Swift 的运行时环境在主线程默默开启了的一个事件处理循环，来处理各种事件。</p><p>然而，若你需要实时刷新UI，更新UI状态或者完成较为复杂的网络交互任务，很多时候就需要开启子线程的 RunLoop。例如，在新线程中使用定时器，是需要开启 RunLoop 的。因为 NSTimer 实际上是注册到 RunLoop 上的，通过 RunLoop 来监控时间变化并调度任务的。</p><p>总的来说，是否需要启动 RunLoop 取决于你的需求，不是线程启动必须的步骤。</p></details><h3 id="哪些情况下-线程需要启动-runloop" tabindex="-1"><a class="header-anchor" href="#哪些情况下-线程需要启动-runloop" aria-hidden="true">#</a> 哪些情况下，线程需要启动 RunLoop</h3><details class="hint-container details"><summary>💡</summary><p>以下是几种需要启动 RunLoop 的情况：</p><ol><li><p>定时器：如果你在一个线程中使用定时器（NSTimer），那么这个线程的 RunLoop 需要被启动。因为定时器事件是由 RunLoop 调度和处理的。</p></li><li><p>异步任务：当在一个线程中处理异步任务时，你可能需要 RunLoop 来帮助你等待或者驱动某些事件发生。</p></li><li><p>网络请求：当使用某些网络 API（如 NSURLConnection）时，你需要在线程的 RunLoop 中运行请求。</p></li><li><p>界面更新：当你需要定期更新UI或者处理用户交互时，也需要启动 RunLoop。</p></li><li><p>系统内部的一些任务：比如说监听 NSObject 对象的 performSelector:withObject:afterDelay: 方法，RunLoop 就需要启动来监听和处理这个消息。</p></li><li><p>使用 GCD 或者 NSOperation 将任务放入到其他线程的时候，如果这个任务和用户交互、定时器等有关，那么就需要启动 RunLoop。</p></li><li><p>在子线程中需要长连接的时候，需要启动 RunLoop 来保持线程的存活。</p></li><li><p>文本输入，滑动视图等响应用户交互事件时，需要进行大量计算（例如文本布局），需把任务放在子线程处理，这个时候也需要启动线程的 RunLoop。</p></li></ol><p>总的来说，RunLoop 的主要作用是当线程中的任务在执行完毕后，能让线程处于休眠状态，从而节省 CPU 资源。当有新任务时，又能及时唤醒线程。所以，只要是需要线程的长时间存活，等待和处理来自系统或其他线程通知的情况下，就需要启动 RunLoop。</p></details><hr><h2 id="performselector" tabindex="-1"><a class="header-anchor" href="#performselector" aria-hidden="true">#</a> performSelector</h2><h3 id="❓runloop-与-performselector-的关系" tabindex="-1"><a class="header-anchor" href="#❓runloop-与-performselector-的关系" aria-hidden="true">#</a> ❓<code>runloop</code> 与 <code>performSelector</code> 的关系？</h3><details class="hint-container details"><summary>💡</summary><p>RunLoop 和 performSelector 之间的关系是密切的。RunLoop 在 iOS 中可以被看作是一个事件处理循环，在这个循环中不断地处理各种事件，如 UI 触摸事件，定时器事件，selector 事件等。performSelector 就是RunLoop的一种应用方式。</p><p>performSelector 是 NSObject 的一个实例方法，用于在当前线程或指定线程上执行一个指定的方法。运行这个方法会向 run loop 添加一个 selector，run loop 在处理的时候会检查所有待处理的 selector 并逐个执行。</p><p>例如以下的代码：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token punctuation">[</span><span class="token keyword">self</span> performSelector<span class="token punctuation">:</span><span class="token keyword">@selector</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span> withObject<span class="token punctuation">:</span>nil afterDelay<span class="token punctuation">:</span><span class="token number">3.0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个执行的意思是，向当前线程的 run loop 添加一个名称为&quot;methodName&quot;的方法，延迟3秒执行。</p><p>如果某个线程的运行循环不被启动或者已经退出，那么在这个线程上执行的 performSelector 方法就不会被执行。例如在子线程中，默认是没有启动 RunLoop 的，所以需要手动启动 RunLoop。以下是相关的代码：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>NSThread <span class="token operator">*</span>thread <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>NSThread alloc<span class="token punctuation">]</span> initWithTarget<span class="token punctuation">:</span><span class="token keyword">self</span> selector<span class="token punctuation">:</span><span class="token keyword">@selector</span><span class="token punctuation">(</span>testThread<span class="token punctuation">)</span> object<span class="token punctuation">:</span>nil<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>thread start<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>testThread</code> 方法如下：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>testThread <span class="token punctuation">{</span>
    <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;Enter Thread&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 定时器需要添加到 RunLoop 后才会运行</span>
    NSTimer <span class="token operator">*</span>timer <span class="token operator">=</span> <span class="token punctuation">[</span>NSTimer timerWithTimeInterval<span class="token punctuation">:</span><span class="token number">1.0</span> target<span class="token punctuation">:</span><span class="token keyword">self</span> selector<span class="token punctuation">:</span><span class="token keyword">@selector</span><span class="token punctuation">(</span>timerRun<span class="token punctuation">)</span> userInfo<span class="token punctuation">:</span>nil repeats<span class="token punctuation">:</span>YES<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span><span class="token punctuation">[</span>NSRunLoop currentRunLoop<span class="token punctuation">]</span> addTimer<span class="token punctuation">:</span>timer forMode<span class="token punctuation">:</span>NSDefaultRunLoopMode<span class="token punctuation">]</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 在没有 timer 或者 performSelector 情况下可以通过如下方式保持 runloop 运行</span>
    <span class="token comment">// [[NSRunloop currentRunLoop] runMode:NSDefaultRunLoopMode beforeDate:[NSDate distantFuture]];</span>
    
    <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;Exit Thread&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>整体来说，performSelector 就像是 RunLoop 的一个任务，RunLoop 在运行的过程中过会执行 performSelector 的方法。</p></details><h3 id="❓performselector-的实现原理" tabindex="-1"><a class="header-anchor" href="#❓performselector-的实现原理" aria-hidden="true">#</a> ❓<code>performSelector</code> 的实现原理？</h3><details class="hint-container details"><summary>💡</summary><p>performSelector 方法是 Objective-C 里面动态方法选择机制的一个体现。它的实现原理主要是基于 Objective-C 的消息传递机制。当你调用一个对象的方法时，实际上是在向这个对象发送一种叫做 selector 的消息。具体来说，performSelector 的实现原理可以概括为以下几步：</p><ol><li><p>通过 SEL 类型的参数（也就是 selector，它本质上是个字符串）找到方法的实现（IMP，也可以理解为是函数指针）。</p></li><li><p>然后根据这个函数指针和传入的参数，动态调用对应的方法。</p></li></ol><p>在过程中，如果进行了 <code>performSelector:withObject:afterDelay:</code> 调用，实际上内部实现是把这个调用包装为了一个 Timer，添加到了当前的 RunLoop 中。然后在 RunLoop 轮询的过程中碰到了预设的时间点，就会调用对应的 selector。另外如传入的 SEL 对象无法找到对应的方法，会异常崩溃，所以在使用时，要特别注意方法匹配问题。</p><p>这种动态调用方法的方式让 Objective-C 的灵活性大大提升，可以更好地适应各种变化的需求，在 Objective-C 中再提到的&quot;鸭子类型&quot;就是这块灵活性的一种体现。</p></details><h3 id="❓performselector-vs-nsinvocation" tabindex="-1"><a class="header-anchor" href="#❓performselector-vs-nsinvocation" aria-hidden="true">#</a> ❓<code>performSelector</code> vs <code>NSInvocation</code></h3><details class="hint-container details"><summary>💡</summary><p><code>performSelector</code> 方法和 <code>NSInvocation</code> 这两个都可以用于在运行时动态地调用方法，但它们们之间有一些明显的区别。</p><ul><li><strong>参数的个数和类型</strong>：<code>performSelector</code> 只能接受最多两个参数，并且这两个参数都必须是对象类型。如果你要调用的方法有更多的参数，或者参数类型不是对象，那么就必须使用 <code>NSInvocation</code>。</li><li><strong>返回值</strong>：<code>performSelector</code> 的返回值固定为 <code>id</code> 类型，对于返回值为基础数据类型的函数，使用 <code>performSelector</code> 可能出现歧义。而对于 <code>NSInvocation</code> 来说，返回值的类型可以根据你传入的 <code>Method Signature</code> 来确定，在任何情况下都能正常工作。</li><li><strong>可读性</strong>： <code>performSelector</code> 可读性更好，而 <code>NSInvocation</code> 的参数、返回值的处理以及方法调用过程相对复杂，会影响代码的可读性。</li><li><strong>性能</strong>：<code>performSelector</code> 相比于 <code>NSInvocation</code> 在性能上更优些，因为 <code>NSInvocation</code> 在设置返回值、获取返回值、参数设置等方面需要经过包装和转换。</li></ul><p>通常，使用 <code>performSelector</code> 已经可以满足大部分的需求，对于一些更复杂的情况，比如函数参数个数不定，有基础数据类型参数或返回值等，我们会使用到 <code>NSInvocation</code>。</p></details><h3 id="❓以下代码输出是什么" tabindex="-1"><a class="header-anchor" href="#❓以下代码输出是什么" aria-hidden="true">#</a> ❓以下代码输出是什么？</h3><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">dispatch_async</span><span class="token punctuation">(</span><span class="token function">dispatch_get_global_queue</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">^</span><span class="token punctuation">{</span>
  <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token keyword">self</span> performSelector<span class="token punctuation">:</span><span class="token keyword">@selector</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span> withObject<span class="token punctuation">:</span>nil afterDelay<span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>test <span class="token punctuation">{</span>
  <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>💡</summary><blockquote><p>打印顺序 : 1, 4, 2, 3</p></blockquote><p>&quot;1&quot;和&quot;4&quot;是普通的直接执行代码，因此会按照顺序输出。</p><p>&quot;2&quot;和&quot;3&quot;位于异步并发队列中，会在新线程中执行，所以会在&quot;1&quot;和&quot;4&quot;之后开始执行。</p><p>&quot;5&quot;不会输出。原因是<code>[self performSelector:@selector(test) withObject:nil afterDelay:10];</code>这一行代码被放在异步并发队列中，并且是在子线程中执行，但是这种执行方式是依赖 <code>RunLoop</code> 的，而新创建的线程默认是没有启动 <code>RunLoop</code> 的，所以<code>performSelector:afterDelay:</code>方法会失效。</p><blockquote><p>如果想要使 &quot;5&quot; 能够打印，应该怎么处理？</p></blockquote><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// 方案一 : 放入主线程 RunLoop</span>
<span class="token punctuation">[</span><span class="token keyword">self</span> performSelectorOnMainThread<span class="token punctuation">:</span><span class="token keyword">@selector</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span> withObject<span class="token punctuation">:</span>nil waitUntilDone<span class="token punctuation">:</span>NO<span class="token punctuation">]</span><span class="token punctuation">;</span>
  
<span class="token comment">// 方案二 : 在子线程中手动启动 RunLoop</span>
NSRunLoop <span class="token operator">*</span>runLoop <span class="token operator">=</span> <span class="token punctuation">[</span>NSRunLoop currentRunLoop<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span><span class="token keyword">self</span> performSelector<span class="token punctuation">:</span><span class="token keyword">@selector</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span> withObject<span class="token punctuation">:</span>nil afterDelay<span class="token punctuation">:</span><span class="token number">5.0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>runLoop run<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,30);function i(u,r){return e(),s("div",null,[c,a(" more "),l])}const m=n(t,[["render",i],["__file","0x07.runloop.html.vue"]]);export{m as default};
