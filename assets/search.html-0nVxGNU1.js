import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as s,o,c as l,a as i,b as e,e as t,d as a,f as d}from"./app-NWzcul-W.js";const c={},h=d('<h2 id="搜索算法" tabindex="-1"><a class="header-anchor" href="#搜索算法" aria-hidden="true">#</a> 搜索算法</h2><table><thead><tr><th>算法</th><th>说明</th></tr></thead><tbody><tr><td>Binary Search</td><td>二分搜索</td></tr><tr><td>Breadth-first search (BFS)</td><td>广度优先搜索</td></tr><tr><td>Depth-first search (DFS)</td><td>深度优先搜索</td></tr></tbody></table><h2 id="顺序搜素" tabindex="-1"><a class="header-anchor" href="#顺序搜素" aria-hidden="true">#</a> 顺序搜素</h2><details class="hint-container details"><summary>💡</summary></details><h2 id="binary-search-二分搜索" tabindex="-1"><a class="header-anchor" href="#binary-search-二分搜索" aria-hidden="true">#</a> <code>Binary Search</code> - “二分搜索”</h2><p>二分搜索的前提条件是有序的数组，依赖数组的有序性。每次通过搜素区间的中间元素判断大小，从而缩小一半的搜索范围，搜索的范围成指数级别缩小。</p>',6),_={href:"https://leetcode.cn/problems/binary-search",target:"_blank",rel:"noopener noreferrer"},u=e("blockquote",null,[e("p",null,"给定一个升序数组和一个目标值，如果目标值在数组中返回目标值索引，如果不存在返回 -1。")],-1),m=e("details",{class:"hint-container details"},[e("summary",null,"💡")],-1),b={href:"https://leetcode.cn/problems/search-insert-position",target:"_blank",rel:"noopener noreferrer"},p=e("blockquote",null,[e("p",null,"给定一个升序数组和一个目标值，如果目标值在数组中存在返回目标值索引，如果不存在返回插入位置索引。")],-1),f=e("details",{class:"hint-container details"},[e("summary",null,"💡")],-1),y={href:"https://leetcode.cn/problems/first-bad-version",target:"_blank",rel:"noopener noreferrer"},k=e("blockquote",null,[e("p",null,[t("软件已经发行版本号 [1, 2, 3, ..., n]，通过函数 "),e("code",null,"bool isBadVersion(version)"),t(" 可以判断该版本是否发生该错误，现在需要查找到第一个发生该错误的版本。")])],-1),x=e("details",{class:"hint-container details"},[e("summary",null,"💡")],-1),B={href:"https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array",target:"_blank",rel:"noopener noreferrer"},S=e("blockquote",null,[e("p",null,"给定一个非递减数组和一个目标值，查找该目标值在数组中的开始位置和结束位置，如果存在则返回 [start, end]，如果不存在返回 [-1, -1]。")],-1),V=e("details",{class:"hint-container details"},[e("summary",null,"💡")],-1),v=e("h2",{id:"binary-search-tree-二叉搜索树",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#binary-search-tree-二叉搜索树","aria-hidden":"true"},"#"),t(),e("code",null,"Binary Search Tree"),t(" - “二叉搜索树”")],-1);function N(g,q){const r=s("ExternalLinkIcon");return o(),l("div",null,[i(" more "),h,e("ul",null,[e("li",null,[e("a",_,[t("🟢 704 - 二分查找"),a(r)]),u])]),m,e("ul",null,[e("li",null,[e("a",b,[t("🟢 35 - 搜索插入位置"),a(r)]),p])]),f,e("ul",null,[e("li",null,[e("a",y,[t("🟢 278 - 第一个错误的版本"),a(r)]),k])]),x,e("ul",null,[e("li",null,[e("a",B,[t("🟢 34 - 在排序数组中查找元素的第一个和最后一个位置"),a(r)]),S])]),V,v])}const D=n(c,[["render",N],["__file","search.html.vue"]]);export{D as default};
