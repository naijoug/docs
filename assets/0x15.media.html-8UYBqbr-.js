import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as n,c as s,a as e,f as t}from"./app-WmKPEP5M.js";const p={},o=t(`<h3 id="❓gpuimage-框架介绍" tabindex="-1"><a class="header-anchor" href="#❓gpuimage-框架介绍" aria-hidden="true">#</a> ❓<code>GPUImage</code> 框架介绍</h3><details class="hint-container details"><summary>💡</summary><p><code>GPUImage</code> 是开源的图像和视频处理框架，对视频处理、人像美颜、图像处理、滤镜处理等领域有广泛应用。其主要特点有：</p><ol><li><p>强大的功能：<code>GPUImage</code> 中内置了许多滤镜，用户可以对视频和图片进行各种各样的应用，也可以自己实现自定义的滤镜。</p></li><li><p>高性能：<code>GPUImage</code> 是基于 OpenGL ES 构建的，能够充分利用设备的 GPU 处理大量计算任务，比使用 CPU 处理效率更高，对实时视频处理场景非常有利。</p></li><li><p>易用性：<code>GPUImage</code> 的 API 设计封装得相当完善，使用起来十分方便，同时文档全面，上手容易。</p></li><li><p>富有扩展性：<code>GPUImage</code> 也允许用户自定义滤镜，用户可以实现自己的设计，具有很高的灵活性。</p></li><li><p>跨平台：<code>GPUImage</code> 既有适用于 iOS 的版本，也有适用于 Android 的版本，这大大方便了在多平台开发过程中的一致性。</p></li></ol><p>注意，虽然 <code>GPUImage</code> 很强大，但由于使用了 OpenGL ES，所以在一些不支持或者 OpenGL ES 性能较弱的设备上可能会有一些问题，这是使用 <code>GPUImage</code> 需要注意的地方。</p></details><h3 id="❓opengl-处理流程" tabindex="-1"><a class="header-anchor" href="#❓opengl-处理流程" aria-hidden="true">#</a> ❓<code>OpenGL</code> 处理流程</h3><details class="hint-container details"><summary>💡</summary><p>OpenGL（Open Graphics Library）是一个用于渲染2D和3D图形的跨语言、跨平台的API。这种能力使得OpenGL成为虚拟现实、游戏、三维绘图等领域的标准规范。</p><p>OpenGL的处理过程通常分为以下几个阶段：</p><ol><li><p><strong>顶点处理</strong>：在这个阶段，你的原始顶点坐标会通过一系列的操作变换到屏幕坐标系。这些操作包括变换（旋转、缩放、平移）、裁剪（去除不在视野内的顶点）等。这个阶段是可以用自定义的顶点着色器（Vertex Shader）程序进行处理的。</p></li><li><p><strong>图元装配</strong>：在所有的顶点被处理后，OpenGL开始将这些顶点装配成图形基元（如点、线、面）。</p></li><li><p><strong>光栅化</strong>：图元在屏幕上被划分为一系列的片元（像素），这个过程就叫做光栅化。</p></li><li><p><strong>片元处理</strong>：在这个阶段，片元着色器（Fragment Shader）会处理每个片元，比如对片元添加颜色、纹理或执行更复杂的效果。</p></li><li><p><strong>深度测试和混合</strong>：OpenGL对这些片元进行深度测试，判断哪些片元是真正可见的。上面的所有阶段都只用来生成一堆片元，以及每个片元对应的深度值。最后如果开启混合，还会根据源与目标的alpha值来计算最后的颜色值。</p></li></ol><p>值得注意的是，OpenGL是一个状态机，它会保存你设置的所有状态，直到你将其改变为止。因此，在绘制过程中，你需要处理你的OpenGL状态以防止你从前的设置影响到后面的渲染。</p><p>以上就是对OpenGL处理流程的简要介绍，具体实现会有更多细节可深入学习。</p></details><h3 id="❓ios-中如何实现视频两倍速播放-并两倍速导出" tabindex="-1"><a class="header-anchor" href="#❓ios-中如何实现视频两倍速播放-并两倍速导出" aria-hidden="true">#</a> ❓<code>iOS</code> 中如何实现视频两倍速播放，并两倍速导出</h3><details class="hint-container details"><summary>💡</summary><p>在iOS中，利用AVFoundation框架，可以轻松更改视频播放的速度。为了将视频导出为二倍速，你需要创建一个新的视频，并在每一帧时钟加倍。下面是详细的步骤：</p><ol><li>播放视频的两倍速：</li></ol><p>AVPlayer的rate属性可以用来控制视频的播放速度。例如，下面的代码将会让视频Play的速度加倍：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> player <span class="token operator">=</span> <span class="token class-name">AVPlayer</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> url<span class="token punctuation">)</span>
player<span class="token punctuation">.</span>rate <span class="token operator">=</span> <span class="token number">2.0</span> <span class="token comment">// 2倍速度</span>
player<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>导出两倍速的视频：</li></ol><p>这方面需要使用到AVAssetExportSession，另外以需要对视频的每一帧进行处理，将其时钟加倍。这需要依赖一些相对复杂的代码，你可以参考一些开源库（如：SDAVAssetExportSession）来实现。</p><p>导出带有速度调整的视频时，不仅需要修改视频轨道的时间，还可能需要调整音频轨道的播放速度以确保音视频同步。</p><p>另外，这个过程可能会非常消耗性能，所以通常需要在后台线程进行，避免阻塞主线程。</p><p>Ps. AVFoundation中的一些类在使用时需要特别注意其生命周期。需注意在适当的时机释放这些对象，以避免内存泄漏或者由于对象被过早释放导致的崩溃。</p><p>以上就是在iOS的AVFoundation框架中，实现视频两倍速播放和导出的大致步骤和需要注意的一些问题。如果有更多具体的问题可以再详细询问。</p></details><h3 id="❓pcm-计算时间" tabindex="-1"><a class="header-anchor" href="#❓pcm-计算时间" aria-hidden="true">#</a> ❓<code>PCM</code> 计算时间</h3><details class="hint-container details"><summary>💡</summary><p>PCM（Pulse Code Modulation）是一种数字化音频的方式。计算PCM数据的时长可以根据以下公式：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>时间（秒）= 数据大小（字节） / (采样率 * 位深度/8 * 通道数)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中：</p><ul><li>数据大小即你的PCM文件的大小(字节）</li><li>采样率是指录音设备在一秒钟内对声音信号的采样次数，通常是44.1kHz，48kHz或96kHz。</li><li>位深度是指录音设备在对每次采样的声音信号进行模拟转数字的处理过程中，能够记录的声音信号的精度，通常是16位或24位。</li><li>通道数是音频的声道数，如单声道（Mono）为1，立体声（Stereo）为2。</li></ul><p>假如你有一个5MB的PCM文件，采样率为44.1kHz，采样位深度为16位，为立体声音频，那么这段PCM数据的时长可以计算为：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>时间 = 5 * 1024 * 1024 (字节) / (44.1 * 1024 * 16/8 * 2) ≈ 30秒
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样你就得到了这段音频的大概时长。</p></details><h3 id="❓ios-中音频降燥如何处理" tabindex="-1"><a class="header-anchor" href="#❓ios-中音频降燥如何处理" aria-hidden="true">#</a> ❓<code>iOS</code> 中音频降燥如何处理</h3><details class="hint-container details"><summary>💡</summary></details><h3 id="❓ios-中视频合成如何处理" tabindex="-1"><a class="header-anchor" href="#❓ios-中视频合成如何处理" aria-hidden="true">#</a> ❓<code>iOS</code> 中视频合成如何处理</h3><details class="hint-container details"><summary>💡</summary></details><hr><h2 id="编码" tabindex="-1"><a class="header-anchor" href="#编码" aria-hidden="true">#</a> 编码</h2><h3 id="❓硬编码-vs-软编码" tabindex="-1"><a class="header-anchor" href="#❓硬编码-vs-软编码" aria-hidden="true">#</a> ❓硬编码 vs 软编码</h3><details class="hint-container details"><summary>💡</summary></details><h3 id="❓fbo、h264" tabindex="-1"><a class="header-anchor" href="#❓fbo、h264" aria-hidden="true">#</a> ❓FBO、H264</h3><details class="hint-container details"><summary>💡</summary></details><hr><h2 id="滤镜" tabindex="-1"><a class="header-anchor" href="#滤镜" aria-hidden="true">#</a> 滤镜</h2><h3 id="❓滤镜实现原理" tabindex="-1"><a class="header-anchor" href="#❓滤镜实现原理" aria-hidden="true">#</a> ❓滤镜实现原理</h3><details class="hint-container details"><summary>💡</summary></details><h3 id="❓如何实现分割滤镜" tabindex="-1"><a class="header-anchor" href="#❓如何实现分割滤镜" aria-hidden="true">#</a> ❓如何实现分割滤镜</h3><details class="hint-container details"><summary>💡</summary></details><h2 id="直播" tabindex="-1"><a class="header-anchor" href="#直播" aria-hidden="true">#</a> 直播</h2><h3 id="❓直播整体流程" tabindex="-1"><a class="header-anchor" href="#❓直播整体流程" aria-hidden="true">#</a> ❓直播整体流程?</h3><details class="hint-container details"><summary>💡</summary><p>直播的整体流程可以划分为以下几个主要步骤：</p><ol><li><p><strong>信号采集</strong>：使用手机、电脑或专用设备采集音视频信息。这个过程通常需要调用设备的摄像头和麦克风等硬件设备进行实时音视频录制。</p></li><li><p><strong>编码与压缩</strong>：将采集到的音视频信号进行编码和压缩，转成可以网络传输的流媒体格式，如H.264, H.265, VP8, VP9等视频编码和AAC、MP3等音频编码。</p></li><li><p><strong>上传推流</strong>：将编码后的音视频数据通过网络发送到直播服务器。这个过程需要稳定、连续的网络连接来保证信号的实时性。</p></li><li><p><strong>服务器接收与转发</strong>：直播服务器接收到直播数据后，会进行一些必要的处理，如转码、录制、插播广告等，然后转发给观看的用户。</p></li><li><p><strong>观众拉流&amp;解码</strong>：观众端拉取直播流数据，然后解码播放。这个过程也需要稳定的网络环境，并且要解决视频播放的同步和时延问题。</p></li><li><p><strong>交互反馈</strong>：观众与主播进行互动，如发弹幕、送礼物、评论等，这些都需要实时反馈到直播界面上。</p></li></ol><p>这个过程需要遵循一定的协议和标准，如RTMP, HLS, WebRTC等流媒体传输协议，为了提高视频观看体验，还需要解决延迟、丢包、抖动等网络问题。而且在每一个步骤中都可能涉及到大量的技术细节和挑战。</p></details><h3 id="❓视频从采集-显示-保存-整个流程" tabindex="-1"><a class="header-anchor" href="#❓视频从采集-显示-保存-整个流程" aria-hidden="true">#</a> ❓视频从<code>采集 -&gt; 显示 -&gt; 保存</code> 整个流程</h3><details class="hint-container details"><summary>💡</summary><p>视频的整个工作流程通常可以划分为以下几个步骤：</p><ol><li><p><strong>采集</strong>：视频的采集通常由摄像头完成，摄像头将实时场景转换为数字信号。此过程涉及到图像采集设备的工作原理，以及光学和感光原理等内容。</p></li><li><p><strong>预处理</strong>：采集到的数字信号进行预处理，这包括颜色空间转换，降噪处理，明暗处理等步骤，目的是提高视频的感知质量。</p></li><li><p><strong>编码</strong>：编码阶段将预处理后的视频数据转换为特定格式，使其能够被存储或传输。编码通常需要考虑压缩的需要，用来减少视频数据的大小，包含H.264，H.265，VP8，VP9等编码格式。</p></li><li><p><strong>封装</strong>：编码后的视频数据需要进行封装，封装数据包括音频流、视频流以及字幕等，常见的封装格式有MP4，FLV，MKV，AVI，MOV等。</p></li><li><p><strong>传输</strong>：视频数据通过网络传输到服务器或者传输到其他设备。可以使用RTMP，HLS，HTTP-FLV等传输协议。</p></li><li><p><strong>解码</strong>：接收端收到视频数据后，先解封装，然后将音频和视频数据解码回原始格式。</p></li><li><p><strong>后处理</strong>：解码后的数据可以进行一定的后处理，如通过硬件加速提高播放性能，或者对图像进行增强处理等。</p></li><li><p><strong>显示</strong>：将解码后的视频数据显示到屏幕上。</p></li><li><p><strong>保存</strong>：如果需要，可以将视频数据保存到本地存储设备中。此时，视频数据通常以某种文件格式保存，可以是已经编码和封装的格式，也可以是原始的未编码格式。</p></li></ol><p>以上就是视频从采集到显示再到保存的整个流程。每个步骤中都可能涉及到大量的技术细节和挑战。</p></details><h3 id="❓rtmp、webrtc" tabindex="-1"><a class="header-anchor" href="#❓rtmp、webrtc" aria-hidden="true">#</a> ❓<code>rtmp</code>、<code>webrtc</code></h3><details class="hint-container details"><summary>💡</summary></details><h3 id="❓ffmpeg" tabindex="-1"><a class="header-anchor" href="#❓ffmpeg" aria-hidden="true">#</a> ❓<code>ffmpeg</code></h3><h3 id="❓opencv" tabindex="-1"><a class="header-anchor" href="#❓opencv" aria-hidden="true">#</a> ❓<code>OpenCV</code></h3><hr><h2 id="avfoundation" tabindex="-1"><a class="header-anchor" href="#avfoundation" aria-hidden="true">#</a> <code>AVFoundation</code></h2><h3 id="❓avfoundation-gpuimage-opengl-es-metalkit" tabindex="-1"><a class="header-anchor" href="#❓avfoundation-gpuimage-opengl-es-metalkit" aria-hidden="true">#</a> ❓<code>AVFoundation</code> &amp; <code>GPUImage</code> &amp; <code>OpenGL ES</code> &amp; <code>MetalKit</code></h3><details class="hint-container details"><summary>💡</summary></details><h3 id="❓samplebuffer-vs-pixelbuffer" tabindex="-1"><a class="header-anchor" href="#❓samplebuffer-vs-pixelbuffer" aria-hidden="true">#</a> ❓<code>samplebuffer</code> vs <code>pixelbuffer</code></h3><details class="hint-container details"><summary>💡</summary><ul><li><p><code>CMSampleBufferRef</code> : <code>Core Media</code>框架中被用来管理音频、视频、字幕等样本的集合。一个 <code>samplebuffer</code> 包含一到多个样本以及描述这些样本的元数据，例如显示时间戳、解码时间戳、持续时间、帧速率等。<code>samplebuffer</code>在更高的层级管理数据，包含了解压缩和播放媒体所需的所有信息。</p></li><li><p><code>CVPixelBufferRef</code> : <code>Core Video</code> 框架中被用来管理图像数据。一个 <code>pixelbuffer</code> 表示一个视频帧，它包含了视频帧的原始像素数据。<code>pixelbuffer</code> 是在更低的层级处理数据，仅仅包含了像素信息，没有时间戳、持续时间等元数据。</p></li></ul><blockquote><p>两者区别：<code>samplebuffer</code> 是对包含音频、视频、字幕等样本的集合的封装，包含了播放媒体所需的所有信息，<code>pixelbuffer</code> 是对视频帧的原始像素数据的封装，更关注图像层面的细节。</p></blockquote></details><h3 id="❓cmtime-结构" tabindex="-1"><a class="header-anchor" href="#❓cmtime-结构" aria-hidden="true">#</a> ❓<code>CMTime</code> 结构</h3><details class="hint-container details"><summary>💡</summary></details><h3 id="❓如何使用-avfoundation-给视频添加水印" tabindex="-1"><a class="header-anchor" href="#❓如何使用-avfoundation-给视频添加水印" aria-hidden="true">#</a> ❓如何使用 <code>AVFoundation</code> 给视频添加水印</h3><details class="hint-container details"><summary>💡</summary><p>使用 <code>AVFoundation</code> 给视频添加水印主要涉及到以下几个步骤：</p><ol><li><p>创建 <code>AVMutableComposition</code> 对象，它用来管理所有的音频、视频和时间线资源，并给它添加视频轨道（<code>AVMutableCompositionTrack</code>）。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> mixComposition <span class="token operator">=</span> <span class="token class-name">AVMutableComposition</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">guard</span> <span class="token keyword">let</span> videoTrack <span class="token operator">=</span> mixComposition<span class="token punctuation">.</span><span class="token function">addMutableTrack</span><span class="token punctuation">(</span>withMediaType<span class="token punctuation">:</span> <span class="token punctuation">.</span>video<span class="token punctuation">,</span> preferredTrackID<span class="token punctuation">:</span> <span class="token class-name">Int32</span><span class="token punctuation">(</span><span class="token constant">kCMPersistentTrackID_Invalid</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>从原始视频资源获取轨道，并添加到 composition 中。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code> <span class="token keyword">guard</span> <span class="token keyword">let</span> assetTrack <span class="token operator">=</span> asset<span class="token punctuation">.</span><span class="token function">tracks</span><span class="token punctuation">(</span>withMediaType<span class="token punctuation">:</span> <span class="token punctuation">.</span>video<span class="token punctuation">)</span><span class="token punctuation">.</span>first <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span>
 <span class="token keyword">do</span> <span class="token punctuation">{</span>
     <span class="token keyword">try</span> videoTrack<span class="token punctuation">.</span><span class="token function">insertTimeRange</span><span class="token punctuation">(</span><span class="token class-name">CMTimeRangeMake</span><span class="token punctuation">(</span>start<span class="token punctuation">:</span> <span class="token class-name">CMTime</span><span class="token punctuation">.</span>zero<span class="token punctuation">,</span> duration<span class="token punctuation">:</span> asset<span class="token punctuation">.</span>duration<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                    of<span class="token punctuation">:</span> assetTrack<span class="token punctuation">,</span>
                                    at<span class="token punctuation">:</span> <span class="token class-name">CMTime</span><span class="token punctuation">.</span>zero<span class="token punctuation">)</span>
 <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span>
     <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Failed to load video track&quot;</span></span><span class="token punctuation">)</span>
     <span class="token keyword">return</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>创建一个 <code>CALayer</code> 用于显示水印并添加到 composition 的 layer 中。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> size <span class="token operator">=</span> videoTrack<span class="token punctuation">.</span>naturalSize
<span class="token keyword">let</span> watermarkLayer <span class="token operator">=</span> <span class="token class-name">CATextLayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
watermarkLayer<span class="token punctuation">.</span>string <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Watermark&quot;</span></span>
watermarkLayer<span class="token punctuation">.</span>foregroundColor <span class="token operator">=</span> <span class="token class-name">UIColor</span><span class="token punctuation">.</span>red<span class="token punctuation">.</span>cgColor
watermarkLayer<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> <span class="token number">40</span>
watermarkLayer<span class="token punctuation">.</span>frame <span class="token operator">=</span> <span class="token class-name">CGRect</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> size<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> size<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> size<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> size<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>
watermarkLayer<span class="token punctuation">.</span>opacity <span class="token operator">=</span> <span class="token number">0.5</span>

<span class="token keyword">let</span> parentLayer <span class="token operator">=</span> <span class="token class-name">CALayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> videoLayer <span class="token operator">=</span> <span class="token class-name">CALayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
parentLayer<span class="token punctuation">.</span>frame <span class="token operator">=</span> <span class="token class-name">CGRect</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> size<span class="token punctuation">.</span>width<span class="token punctuation">,</span> height<span class="token punctuation">:</span> size<span class="token punctuation">.</span>height<span class="token punctuation">)</span>
videoLayer<span class="token punctuation">.</span>frame <span class="token operator">=</span> <span class="token class-name">CGRect</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> size<span class="token punctuation">.</span>width<span class="token punctuation">,</span> height<span class="token punctuation">:</span> size<span class="token punctuation">.</span>height<span class="token punctuation">)</span>
parentLayer<span class="token punctuation">.</span><span class="token function">addSublayer</span><span class="token punctuation">(</span>videoLayer<span class="token punctuation">)</span>
parentLayer<span class="token punctuation">.</span><span class="token function">addSublayer</span><span class="token punctuation">(</span>watermarkLayer<span class="token punctuation">)</span>

<span class="token keyword">let</span> videoComposition <span class="token operator">=</span> <span class="token class-name">AVMutableVideoComposition</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
videoComposition<span class="token punctuation">.</span>animationTool <span class="token operator">=</span> <span class="token class-name">AVVideoCompositionCoreAnimationTool</span><span class="token punctuation">(</span>postProcessingAsVideoLayer<span class="token punctuation">:</span> videoLayer<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> parentLayer<span class="token punctuation">)</span>
videoComposition<span class="token punctuation">.</span>renderSize <span class="token operator">=</span> size
videoComposition<span class="token punctuation">.</span>frameDuration <span class="token operator">=</span> <span class="token class-name">CMTime</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> timescale<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>创建 <code>AVAssetExportSession</code> 来导出带有水印的视频。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">guard</span> <span class="token keyword">let</span> exporter <span class="token operator">=</span> <span class="token class-name">AVAssetExportSession</span><span class="token punctuation">(</span>asset<span class="token punctuation">:</span> mixComposition<span class="token punctuation">,</span> presetName<span class="token punctuation">:</span> <span class="token class-name">AVAssetExportPresetHighestQuality</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span>
exporter<span class="token punctuation">.</span>videoComposition <span class="token operator">=</span> videoComposition
exporter<span class="token punctuation">.</span>outputFileType <span class="token operator">=</span> <span class="token punctuation">.</span>mp4
<span class="token keyword">let</span> outputURL <span class="token operator">=</span> <span class="token comment">// your output url</span>
exporter<span class="token punctuation">.</span>outputURL <span class="token operator">=</span> outputURL
exporter<span class="token punctuation">.</span>shouldOptimizeForNetworkUse <span class="token operator">=</span> <span class="token boolean">true</span>

exporter<span class="token punctuation">.</span><span class="token function">exportAsynchronously</span><span class="token punctuation">(</span>completionHandler<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> exporter<span class="token punctuation">.</span>status <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token punctuation">.</span>completed<span class="token punctuation">:</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Exported successfully&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">case</span> <span class="token punctuation">.</span>failed<span class="token punctuation">,</span> <span class="token punctuation">.</span>cancelled<span class="token punctuation">:</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Failed: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">exporter<span class="token punctuation">.</span>error</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">default</span><span class="token punctuation">:</span>
        <span class="token keyword">break</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>以上这段代码给出了一个基本的在视频中添加文本水印的示例。如果你要添加图片水印，你可以创建一个 <code>CALayer</code>，向其中添加一张 <code>UIImage</code>。另外在真实场景下，你可能需要处理更多的错误和 edge cases。</p></details><hr><h2 id="avplayer" tabindex="-1"><a class="header-anchor" href="#avplayer" aria-hidden="true">#</a> AVPlayer</h2><h3 id="❓实现原理" tabindex="-1"><a class="header-anchor" href="#❓实现原理" aria-hidden="true">#</a> ❓实现原理</h3><details class="hint-container details"><summary>💡</summary></details><h3 id="❓缓存机制" tabindex="-1"><a class="header-anchor" href="#❓缓存机制" aria-hidden="true">#</a> ❓缓存机制</h3><details class="hint-container details"><summary>💡</summary></details><h3 id="❓边播边下" tabindex="-1"><a class="header-anchor" href="#❓边播边下" aria-hidden="true">#</a> ❓边播边下</h3><details class="hint-container details"><summary>💡</summary></details><h3 id="❓设计一个通用视频播放器" tabindex="-1"><a class="header-anchor" href="#❓设计一个通用视频播放器" aria-hidden="true">#</a> ❓设计一个通用视频播放器</h3><details class="hint-container details"><summary>💡</summary></details>`,53);function i(c,l){return n(),s("div",null,[e(" more "),o])}const d=a(p,[["render",i],["__file","0x15.media.html.vue"]]);export{d as default};
