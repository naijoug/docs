import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as c,c as a,a as o,f as d}from"./app-jZxpMbcW.js";const t={},r=d('<h2 id="cpu-是如何调用-gpu" tabindex="-1"><a class="header-anchor" href="#cpu-是如何调用-gpu" aria-hidden="true">#</a> <code>CPU</code> 是如何调用 <code>GPU</code>？</h2><details class="hint-container details"><summary>💡</summary><p>图像的成像原理 : 计算中的图像的展示，需要 <code>CPU</code>、<code>GPU</code> 和显示器合作完成。<code>CPU</code> 负责计算图像哪些数据需要显示，<code>GPU</code> 负责将需要显示的图像数据渲染，然后放入缓存区，显示器读取缓存区数据将图像显示出来。</p></details><h2 id="backtrace-是在用户态实现吗" tabindex="-1"><a class="header-anchor" href="#backtrace-是在用户态实现吗" aria-hidden="true">#</a> <code>backtrace</code> 是在用户态实现吗？</h2><p>先理解两个概念 : <code>backtrace</code>、用户态</p><ul><li><code>backtrace</code> 是回溯栈，记录程序运行过程中的调用栈信息，当程序 <code>Crash</code> 时，可以通过这个信息了解程序崩溃的上下文，调试程序问题。</li><li>用户态是属于操作系统的一个分区概念，主要分为内核态和用户态。两者的区别的是为了保证内核安全，只有以内核态运行的程序才具备操作系统所有资源的访问权限，而以用户态运行的程序会受到限制，这样是为了保证操作系统的稳定运行。</li></ul>',5);function s(i,n){return c(),a("div",null,[o(" more "),r])}const m=e(t,[["render",s],["__file","system.html.vue"]]);export{m as default};
