import{_ as d}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as i,o as p,c as u,a as m,b as n,e,d as s,w as l,f as c}from"./app-UZzaqt-K.js";const b={},h=n("h2",{id:"reference",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reference","aria-hidden":"true"},"#"),e(" reference")],-1),_={href:"https://visualgo.net/zh/bitmask/print",target:"_blank",rel:"noopener noreferrer"},v=c(`<h2 id="位运算符" tabindex="-1"><a class="header-anchor" href="#位运算符" aria-hidden="true">#</a> 位运算符</h2><ul><li><code>|</code> : 与</li><li><code>&amp;</code> : 或</li><li><code>!</code> : 非</li><li><code>^</code> : 异或</li></ul><h2 id="❓如何最高效的计算-17-2" tabindex="-1"><a class="header-anchor" href="#❓如何最高效的计算-17-2" aria-hidden="true">#</a> ❓如何最高效的计算 <code>17 * 2</code>？</h2><details class="hint-container details"><summary>💡</summary><p>关于乘以 2 的一种高效方法，那可以使用位运算的左移操作，将一个数字向左位移一位等同于将这个数字乘以 2。</p><p><code>17 * 2</code> 可以通过将 17 向左位移一位来实现，也就是 <code>17 &lt;&lt; 1</code></p></details><h2 id="n-n-0-n-0-n" tabindex="-1"><a class="header-anchor" href="#n-n-0-n-0-n" aria-hidden="true">#</a> <code>n ^ n = 0</code> &amp; <code>n ^ 0 = n</code></h2><p>对于一个整数 n 进行异或操作，存在以下两条结论</p><ul><li>数字 n 同自身进行异或操作结果为 0</li><li>数字 n 与 0 进行异或操作结果为 n</li></ul><h3 id="❓不使用临时变量交换两个数" tabindex="-1"><a class="header-anchor" href="#❓不使用临时变量交换两个数" aria-hidden="true">#</a> ❓不使用临时变量交换两个数</h3><details class="hint-container details"><summary>💡</summary><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span>
a <span class="token operator">=</span> a<span class="token operator">^</span>b
b <span class="token operator">=</span> a<span class="token operator">^</span>b
a <span class="token operator">=</span> a<span class="token operator">^</span>b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="single-number-只出现一次的数字" tabindex="-1"><a class="header-anchor" href="#single-number-只出现一次的数字" aria-hidden="true">#</a> <code>single number</code> - “只出现一次的数字”</h3>`,10),k={href:"https://leetcode.cn/problems/single-number/",target:"_blank",rel:"noopener noreferrer"},f=n("blockquote",null,[n("p",null,"一个非空的整数数组，除了某个元素只出现一次外，其余元素均出现两次。找出只出现一次的数字")],-1),g={class:"hint-container details"},x=n("summary",null,"💡",-1),y=n("p",null,[e("【思路】 由于存在相同的元素均出现两次，刚好可以使用 "),n("code",null,"x ^ x = 0"),e(" 的特性。将所有数字进行异或操作，则相同的数字异或结果为 0，只出现一次的数与 0 进行异或结果就是只出现一次的数。 时间复杂度: O(n) 空间复杂度: O(1)")],-1),j=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,`
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),w={href:"https://leetcode.cn/problems/single-number-iii",target:"_blank",rel:"noopener noreferrer"},q=n("blockquote",null,[n("p",null,"一个非空的整数数组中，除了两个元素只出现一次外，其余元素均出现两次。找出两个只出现一次的数字 时间复杂度: O(n) 空间复杂度: O(1)")],-1),O=n("details",{class:"hint-container details"},[n("summary",null,"💡"),n("blockquote",null,[n("p",null,"升级版 一个非空的整数数组，除了三个元素只出现一次外，其余元素均出现两次。找出三个只出现一次的数字。 时间复杂度: O(n) 空间复杂度: O(1)")])],-1),I={href:"https://leetcode.cn/problems/single-number-ii",target:"_blank",rel:"noopener noreferrer"},C=n("blockquote",null,[n("p",null,"一个非空的整数数组中，除了某个元素只出现一次外，其余元素均出现三次。找出只出现一次的数字 时间复杂度: O(n) 空间复杂度: O(1)")],-1),N={class:"hint-container details"},V=n("summary",null,"💡",-1),A=n("p",null,[e("【思路】 这道题是 136 的变形版本，不能使用 "),n("code",null,"x ^ x = 0"),e(" 特性。但是但是还是可以使用位运算的特性进行求解。")],-1),B=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,`
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),E=n("h3",{id:"missing-number-丢失的数",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#missing-number-丢失的数","aria-hidden":"true"},"#"),e(),n("code",null,"missing number"),e(" - “丢失的数”")],-1),T={href:"https://leetcode.cn/problems/missing-number",target:"_blank",rel:"noopener noreferrer"},L=n("blockquote",null,[n("p",null,"给定一个包含 [0, n] 中的 n 个数的数组 nums，找出 [0, n] 这个范围中没有出现在数组中的那个数。")],-1),z=c(`<details class="hint-container details"><summary>💡</summary><p>【思路】 由于这个数组的值范围为[0, n]，则表明刚好是长度为 n+1 长度的数组。数字刚好与所在的索引的位置匹配，而缺失的数表明该位置没有数。那么使用 <code>x ^ x = 0</code> 的特性。只要将数组中数值与所有的索引进行异或操作，那么结果刚好就是缺失的那个数。 代码实现时，必须要构造一个 0~n 的数组，可以在循环变量数组时，直接使用索引值。需要注意的是 nums 长度为 n，不是 n+1。所以遍历时索引值只能到 n-1，所以可以将进行异或操作的结果值初始值设置为 n。</p><blockquote><p>升级版 给定一个包含 [0, n] 中的 n-1 个数的数组 nums，找出 [0, n] 这个范围中没有出现在数组中的两个数。</p></blockquote></details><h2 id="n-n-1-0-n-n-1-15" tabindex="-1"><a class="header-anchor" href="#n-n-1-0-n-n-1-15" aria-hidden="true">#</a> <code>n &amp; n-1 = 0</code> &amp; <code>n ^ n+1 = 1</code>5</h2><p>当 n 为 2 的幂次方时，会存在以下两条结论</p><ul><li>n 与 n-1 进行与操作结果为 0。</li><li>n 与 n+1 进行异或操作结果为 1</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">0</span> <span class="token operator">=</span> <span class="token number">0</span>b0000
<span class="token number">1</span> <span class="token operator">=</span> <span class="token number">0</span>b0001
<span class="token number">2</span> <span class="token operator">=</span> <span class="token number">0</span>b0010
<span class="token number">3</span> <span class="token operator">=</span> <span class="token number">0</span>b0011
<span class="token number">4</span> <span class="token operator">=</span> <span class="token number">0</span>b0100
<span class="token number">5</span> <span class="token operator">=</span> <span class="token number">0</span>b0101
<span class="token number">6</span> <span class="token operator">=</span> <span class="token number">0</span>b0110
<span class="token number">7</span> <span class="token operator">=</span> <span class="token number">0</span>b0111
<span class="token number">8</span> <span class="token operator">=</span> <span class="token number">0</span>b1000
<span class="token number">9</span> <span class="token operator">=</span> <span class="token number">0</span>b1001
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),S={href:"https://leetcode.cn/problems/power-of-two",target:"_blank",rel:"noopener noreferrer"},D=n("blockquote",null,[n("p",null,"判断一个整数是否为 2 的幂次方")],-1),F=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),G={href:"https://leetcode.cn/problems/power-of-four",target:"_blank",rel:"noopener noreferrer"},H=n("blockquote",null,[n("p",null,"判断一个整数是否为 4 的幂次方")],-1),J=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1);function K(M,P){const a=i("ExternalLinkIcon"),r=i("CodeTabs");return p(),u("div",null,[m(" more "),h,n("ul",null,[n("li",null,[n("a",_,[e("位掩码"),s(a)])])]),v,n("ul",null,[n("li",null,[n("a",k,[e("🟢 136 - 只出现一次的数字"),s(a)]),f])]),n("details",g,[x,y,s(r,{id:"91",data:[{id:"java"}]},{title0:l(({value:o,isActive:t})=>[e("java")]),tab0:l(({value:o,isActive:t})=>[j]),_:1})]),n("ul",null,[n("li",null,[n("a",w,[e("🟠 260 - 只出现一次的数字 III"),s(a)]),q])]),O,n("ul",null,[n("li",null,[n("a",I,[e("🟠 137 - 只出现一次的数字 II"),s(a)]),C])]),n("details",N,[V,A,s(r,{id:"136",data:[{id:"java"}]},{title0:l(({value:o,isActive:t})=>[e("java")]),tab0:l(({value:o,isActive:t})=>[B]),_:1})]),E,n("ul",null,[n("li",null,[n("a",T,[e("🟢 268 - 丢失的数字"),s(a)]),L])]),z,n("ul",null,[n("li",null,[n("a",S,[e("🟢 231 - 2 的幂"),s(a)]),D])]),F,n("ul",null,[n("li",null,[n("a",G,[e("🟢 342 - 4 的幂"),s(a)]),H])]),J])}const U=d(b,[["render",K],["__file","0x00.bit.html.vue"]]);export{U as default};
