import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as s,a as p,f as t}from"./app-os89vFKI.js";const e={},i=t(`<hr><h2 id="概念知识" tabindex="-1"><a class="header-anchor" href="#概念知识" aria-hidden="true">#</a> 概念知识</h2><h3 id="❓说说你理解的多线程" tabindex="-1"><a class="header-anchor" href="#❓说说你理解的多线程" aria-hidden="true">#</a> ❓说说你理解的多线程</h3><details class="hint-container details"><summary>💡</summary><p>多线程是指程序中包含两个或者更多个可以同时运行的部分，这两个或者多个部分互相独立但又共享某些资源，可以并行执行的每个独立的运行部分就是一个线程。</p><p>每个线程都有它自己的程序计数器、一组寄存器和堆栈，这些都是线程从被暂停到再次被执行所必需的，而尽管每个线程都有自己的堆栈，但是该线程所对应的进程的所有线程都共享同样的地址空间，它们就像是属于同一个进程下的兄弟。</p><p>多线程的主要优点有：</p><ol><li><p>充分利用多核处理器的计算能力，一台多核 CPU 计算机上的多线程程序可以使用更多的核，从而提高程序的性能。</p></li><li><p>提高程序的响应速度，用户界面的多线程设计可以保证用户界面始终对用户的操作做出响应，并且可以做到许多耗时的操作和用户界面的独立处理。</p></li><li><p>简化复杂的程序设计。一些需要同时处理多个用户请求或者需要连续完成处理一系列任务的软件，使用多线程可以很好地解耦和简化程序设计，提高程序设计的效率。</p></li></ol><p>然而，多线程也会带来一系列的问题：</p><ol><li><p>线程并发执行时可能需要访问同一块资源（如全局变量），这就会带来同步和互斥问题，例如经典的生产者消费者问题，读者写者问题等。</p></li><li><p>多线程技术需要操作系统的支持，不是所有的操作系统或者编程语言都适合编写多线程程序。多线程编程通常需要一些复杂的技巧和细心的设计。</p></li><li><p>多线程程序的调试和测试比单线程的程序更为困难，因为由于线程是并发执行的，每个线程都有自己独立的上下文，导致线程的执行顺序无法预测。</p></li></ol></details><h3 id="❓并行-vs-串行" tabindex="-1"><a class="header-anchor" href="#❓并行-vs-串行" aria-hidden="true">#</a> ❓并行 vs 串行</h3><details class="hint-container details"><summary>💡</summary><p>并行 (Concurrency) : 多个任务会同时执行。如果是多核 CPU 会是真正意义上并行，多个任务会在不同 CPU 上同时运行；如果是单核 CPU 是一种伪并行，是同一时间间隔上运行多个任务，CPU 在多个任务上切换运行，其实某一时刻上其实只有一个任务执行，由于 CPU 运行速度比较快，用户角度观察呈现并发状态。</p><ol><li>并行和串行是两种不同的处理方式，下面是对它们的基本理解和区别：</li></ol><p>并行处理：</p><ul><li>并行处理是指两个或更多任务（或进程）在同一时刻进行，也就是说它们是同时执行的。比如，超市的几个结账通道就可以同时服务多个顾客，这就是一个并行的例子。</li></ul><p>串行处理：</p><ul><li>串行处理是指在一段时间段内同一时间点只处理一个任务或进程。在任务一完成之后任务二才可以开始等等，比如一个人在超市逐个挑选商品，从牛奶到面包再到鸡蛋，这个过程就是串行的。</li></ul><ol start="2"><li>并行和串行的主要区别包括：</li></ol><ul><li>并行处理可以大大提高处理速度和工作效率，因为多个任务可以同时进行。然而，并行处理需要硬件和软件具有支持并行执行的能力，并且编程和管理起来比较复杂。</li><li>串行处理更容易理解和实现。任务一个接一个地执行，不需要协调多任务的执行顺序和结果合并等。然而，所有任务的总执行时间是各个任务执行时间的总和，执行效率比较低。</li></ul><p>并行和串行不是好坏之分，而是依据实际情况选择。</p></details><h3 id="❓进程-vs-线程-vs-协程" tabindex="-1"><a class="header-anchor" href="#❓进程-vs-线程-vs-协程" aria-hidden="true">#</a> ❓进程 vs 线程 vs 协程</h3><details class="hint-container details"><summary>💡</summary><ul><li>进程(Process) : 程序的一次运行活动，各个进程之间相互资源独立。操作系统分配资源的基本单位，具有唯一的 PID 和 port 号。</li><li>线程(Thread) : 线程是进程的最小执行单位，同一个进程内的多个线程共享进程内的资源。</li><li>协程(Coroutine) : 也被称为“微线程”。运行在用户态，相比于线程具有极高的执行效率和极低的切换成本。</li></ul><p>进程、线程、协程都是程序执行流的基本单元，但它们有着明显的区别：</p><ol><li><p>进程：</p><ul><li>进程是操作系统资源分配的基本单元，是一个运行中的程序的实例。</li><li>进程具有自己独立的内存空间和系统资源。各个进程间的资源不共享，相互隔离，一个进程不能访问另一个进程的资源和内存空间。</li><li>进程间的通信(IPC)方式复杂，如管道、信号、消息队列、共享内存、套接字等。</li></ul></li><li><p>线程：</p><ul><li>线程是操作系统任务调度的基本单元，进程内一个相对独立的、可调度的执行单元。同属一个进程的多个线程共享进程的资源。</li><li>线程的切换开销小于进程，因为同一个进程下的线程共享内存和资源，状态切换相对简单。</li><li>线程间通常可以直接通信，通信开销小。</li></ul></li><li><p>协程：</p><ul><li>协程是一种用户态的轻量级线程，也叫微线程，是程序员显式进行调度的，非抢卢，对操作系统透明。</li><li>协程的切换不涉及系统调用，开销极小。</li><li>协程允许有多个入口点，可以在任何地方暂停执行，并在必要时恢复执行，增强了程序的灵活性。</li></ul></li></ol><p>总结，进程、线程和协程，从上到下执行效率越来越高（开销越来越小），但管理和编程复杂度也相应提高。再者，这三者并无优劣之分，具体使用哪个需要根据实际情况和需求来判断。</p></details><h3 id="❓进程间如何通信" tabindex="-1"><a class="header-anchor" href="#❓进程间如何通信" aria-hidden="true">#</a> ❓进程间如何通信</h3><details class="hint-container details"><summary>💡</summary><p>操作系统为支持进程间通信（Inter-Process Communication，IPC）提供了多种机制。以下是一些常见的IPC方法：</p><ol><li><p>管道（Pipe）：管道是最古老的进程间通信方式，它可用于具有血缘关系的父子进程之间通信。数据在管道中只能从一端流入，从另一端流出，即单向流动。</p></li><li><p>命名管道（Named Pipe）：命名管道也叫FIFO，它是管道的延伸和发展，可用于互不相关的进程间通信。</p></li><li><p>信号（Signals）：信号是一种非常复杂的通信方式，用于通知接收进程某个事件已经发生。</p></li><li><p>消息队列（Message Queue）：消息队列是由消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息量小，管道只能承载无格式字节流以及缓冲区大小受限等缺点。</p></li><li><p>信号量（Semaphore）：信号量主要作为进程间以及同一进程不同线程之间的同步手段。</p></li><li><p>共享内存（Shared Memory）：共享内存就是映射一段能被其他进程所访问的内存，适用于大量数据的读写。因为数据不需要在进程间来回复制，效率很高。</p></li><li><p>套接字（Socket）：套接字可以用于不同机器之间的进程通信。使用最广泛的IPC方式。</p></li><li><p>内存映射（Memory Mapping）：类似于共享内存，允许不同进程访问同一段物理内存。应用于大数据的处理和文件的读写。</p></li></ol><p>以上各种IPC方式各有优劣，需要根据具体的应用场景来选择使用哪种通信方式。</p></details><h3 id="❓进程-a-和进程-b-通过管道通信的话是在同一个管道吗" tabindex="-1"><a class="header-anchor" href="#❓进程-a-和进程-b-通过管道通信的话是在同一个管道吗" aria-hidden="true">#</a> ❓进程 A 和进程 B 通过管道通信的话是在同一个管道吗</h3><details class="hint-container details"><summary>💡</summary><p>管道（Pipe）是半双工的，数据只能向一个方向流动。也就是说，如果进程A需要发送数据给进程B，同时进程B又需要发送数据给进程A，那么就需要创建两个管道，一个管道用于A到B的通信，另一个管道用于B到A的通信。</p><p>因此，如果进程A和进程B需要进行双向的数据传输，那么是需要两个管道的，一个用于A发送数据至B，另一个用于B发送数据至A。</p></details><h3 id="❓为什么进程切换比线程切换开销要大" tabindex="-1"><a class="header-anchor" href="#❓为什么进程切换比线程切换开销要大" aria-hidden="true">#</a> ❓为什么进程切换比线程切换开销要大</h3><details class="hint-container details"><summary>💡</summary><ol><li><p>进程和线程主要的区别在于是否共享内存空间。每个进程都有单独的内存空间，而同一进程内的线程共享该进程的内存空间。因此，进程切换需要进行内存空间的切换，而线程切换不需要。</p></li><li><p>内存切换也意味着需要刷新 CPU 的缓存，因为后一个进程的内存和前一个进程的内存并不是同一块内存，刷新缓存就需要将这块内存的信息加载到 CPU 中，这个过程的开销是相当大的。</p></li><li><p>在进程切换过程中，操作系统需要保存和恢复更多的上下文信息。线程的上下文信息相对较少，保存和恢复的速度会更快。</p></li><li><p>进程切换涉及到的系统调用更多，比如需要经过调度器的调度，需要进行权限的检查等，而线程切换相对较少。</p></li></ol></details><h3 id="❓线程间的通信方式" tabindex="-1"><a class="header-anchor" href="#❓线程间的通信方式" aria-hidden="true">#</a> ❓线程间的通信方式</h3><details class="hint-container details"><summary>💡</summary><p>线程间的通信方式主要依赖于它们共享的数据结构、变量等资源，常用的线程间通信方式包括：</p><ol><li><p>锁机制：提供了保护共享数据访问的方式，用于控制哪个线程可以访问共享数据。</p></li><li><p>信号量：主要用于同步线程的执行顺序，例如有两个线程，一个线程完成一项任务后，另一个线程才能开始任务，那么就需要用到信号量。</p></li><li><p>条件变量：用于等待条件的满足以便继续执行。例如有两个线程，一个生产者线程和一个消费者线程，消费者线程可能需要等待生产者生产出产品后才能继续执行，那么就需要用到条件变量。</p></li><li><p>互斥锁（Mutex）：用于保护共享资源，确保同一时间只有一个线程可以访问这个资源。</p></li><li><p>事件：线程可以调用事件API来设置或者等待某个事件的发生，从而实现线程间的通信。</p></li><li><p>共享内存：线程间也可以通过共享内存来通信，同一进程的所有线程都共享该进程的全局内存，所以线程之间可以方便地访问相同的数据。</p></li></ol><p>不同的通信方式适用于不同的场景，具体使用哪种方式取决于具体的应用需求。</p></details><h3 id="❓最多能开辟多少个进程和线程" tabindex="-1"><a class="header-anchor" href="#❓最多能开辟多少个进程和线程" aria-hidden="true">#</a> ❓最多能开辟多少个进程和线程</h3><details class="hint-container details"><summary>💡</summary><p>进程和线程的数量是由操作系统的限制以及系统的硬件资源（如CPU、RAM等）决定的。</p><p>对于进程，Linux系统中可以使用命令 ulimit -u 来查看用户进程限制的数量。默认情况下，这个数量可能是1024，或者更高。你也可以通过修改系统配置来修改这个数量。但请注意，进程数量的上限还受到系统的其他资源限制，比如可用的内存。</p><p>对于线程，每个进程中可以创建的线程数量是由系统的内存大小和堆栈大小共同决定的。线程数量的上限也可以通过 ulimit -u 命令查看。在64位Linux系统中，每个进程最多可以创建几百万个线程，这个数量远远高于常见的服务器所需。</p><p>总的来说，虽然理论上进程和线程的数量可能很大，但在实践中，因为需要考虑系统的性能和稳定性，通常我们会尽量减少进程和线程的数量，使用像线程池这样的方式来提高资源利用率。</p></details><h3 id="❓说说编程语言都开始支持的-async-await" tabindex="-1"><a class="header-anchor" href="#❓说说编程语言都开始支持的-async-await" aria-hidden="true">#</a> ❓说说编程语言都开始支持的 <code>async/await</code></h3><details class="hint-container details"><summary>💡</summary><p>async/await是现今很多编程语言支持的一种特性。这两个关键词能够使异步操作（比如文件读取、网络请求、定时操作等）更像是同步操作，有助于简化代码逻辑和提高代码可读性。</p><p>目前支持这种特性的语言包括：</p><ol><li>JavaScript - 在ES7规范中引入，现今主流的JS运行环境如浏览器和Node.js均已支持</li><li>Python - 在3.5版本中新增，内置了对异步IO的支持</li><li>TypeScript - 微软开发的JavaScript的超集语言，支持async/await，并可以编译到ES5/ES3等不支持这个特性的JS版本上运行</li><li>C# - 在5.0版本中引入，主要用于异步IO操作和task的等待</li><li>Dart - Google开发的一种语言，用于Flutter框架开发，支持async/await，提升开发效率</li><li>Rust - 新兴的系统编程语言，从1.39版本开始对async/await提供稳定支持。</li></ol><p>async/await的基本操作原理是：async用于声明一个函数为异步函数，异步函数内部可以使用await关键词来等待一个异步操作返回。async函数返回的结果是一个Promise对象（或者类似的Future对象），这个对象表示的是一个尚未完成的异步操作。</p><p>使用async/await编程模型，可以使得原本需要使用回调（Callback）或者Promise来处理的异步结果，能够以同步的方式来编写和读取，大大简化了异步编程的难度，提高代码的可读性和可维护性。</p></details><hr><h2 id="线程安全" tabindex="-1"><a class="header-anchor" href="#线程安全" aria-hidden="true">#</a> 线程安全</h2><h3 id="❓什么是线程安全" tabindex="-1"><a class="header-anchor" href="#❓什么是线程安全" aria-hidden="true">#</a> ❓什么是线程安全</h3><details class="hint-container details"><summary>💡</summary><p>线程安全是多线程环境下，当多个线程访问某一个对象或程序时，不会对程序的执行和对象所产生的影响进行破坏，始终表现出正确的行为，我们就称这段代码是线程安全的。</p><p>举个例子，考虑一个程序其运行环境有多个线程，这个程序会被多个线程共享并进行写操作，如果每次运行结果和我们预期的一样，那么就是线程安全的。反之，所谓的非线程安全就是程序的运行结果会受到多线程的影响。</p><p>线程不安全的情况通常发生在全局变量和静态变量的场景中，多个线程同时修改一个实例变量的时候，会产生并发问题，如果不采取适当的防护措施，比如互斥锁、信号量、程序上锁等方法去防范，就可能导致程序运行错误。</p><p>编写线程安全的代码需要仔细设计，考虑好各项竞态条件以及可能的并发问题。</p></details><h3 id="❓线程死锁的四个条件" tabindex="-1"><a class="header-anchor" href="#❓线程死锁的四个条件" aria-hidden="true">#</a> ❓线程死锁的四个条件</h3><details class="hint-container details"><summary>💡</summary><p>死锁是多个线程永久性地阻塞，无法继续执行的状态。这经常发生在每个线程都在等待其他线程释放它们需要的资源，而这个资源又正被等待释放它的线程持有。</p><p>死锁通常需要以下四个必要条件共同存在：</p><ol><li>互斥条件：一个资源每次只能被一个线程使用，即在一段时间内某资源只为一个线程所占有，此时若有其他线程请求该资源，则请求者只能等待。</li><li>请求和保持条件：一个线程因请求占有其他资源而阻塞时，对已获得的资源保持不放。</li><li>不剥夺条件：线程已经获得的资源，在未使用完之前，不能被其他线程强行剥夺。</li><li>循环等待条件：若干资源之间形成一种头尾相接的循环等待资源关系。</li></ol><p>只要系统发生死锁，就存在以上的四个条件，也就是说只有当以上四个条件同时满足时，才可能引起系统产生死锁，只要系统去掉上述四个条件中的一个，就可以防止死锁的发生。</p></details><h3 id="❓主线程是相对于什么而言的" tabindex="-1"><a class="header-anchor" href="#❓主线程是相对于什么而言的" aria-hidden="true">#</a> ❓主线程是相对于什么而言的</h3><details class="hint-container details"><summary>💡</summary><p>主线程是相对于其他被该程序创建的子线程而言的。</p><p>通常，当一个程序开始运行时，操作系统会为它创建一个线程，这个线程就是主线程。在程序运行过程中，主线程可以再创建更多的子线程。</p><p>在多线程编程中，主线程通常负责执行程序的主要部分，而子线程则执行一些特定任务，例如进行输入/输出处理，进行计算等后台任务。</p><p>主线程在程序启动时自动创建，当主线程结束时，程序也就结束了。即使程序中还有其他的子线程在运行，一旦主线程结束，所有其他线程也会被强制结束。</p></details><h3 id="❓常见的线程同步策略" tabindex="-1"><a class="header-anchor" href="#❓常见的线程同步策略" aria-hidden="true">#</a> ❓常见的线程同步策略</h3><details class="hint-container details"><summary>💡</summary><p>线程同步的策略主要用来确保两个或多个并发线程不会同时访问某些共享的资源或者执行某个特定的代码段。这是操作系统中对线程并发控制的基本方法，主要有以下几种：</p><ol><li><p>互斥量（Mutex）：互斥量是一种用于保护共享资源的方法。当一个线程A访问一个被互斥量保护的资源时，它需要首先获得互斥量，访问结束后，需释放互斥量，然后其他的想要访问该资源的线程才能获得互斥量。</p></li><li><p>信号量（Semaphore）：信号量是一个用来控制一个或者多个线程访问共享资源的数值。当一个线程访问资源时，信号量的值就会递减，当信号量的值为0时，其他线程只能等待；只有当信号量的值大于0时，线程才可以访问资源。</p></li><li><p>读写锁（ReadWrite Lock）：读写锁允许多个线程同时读取数据，而写入则在整个过程中都无法被其他线程进行读写。</p></li><li><p>事件（Event）/条件变量（Condition variables）：事件或者条件变量是当某个线程改变了某种条件状态时，通知其他在等待这个条件的线程继续运行。</p></li><li><p>管理员管道（Barriers）： 管理员管道是一种多线程同步方法，它可以使在并行计算中的线程在继续执行前等待至其他所有的线程都执行到这一位置。</p></li></ol><p>选择哪种同步策略是根据程序结构和需求决定的。</p></details><h3 id="❓sqlite-中的读写是线程安全的吗" tabindex="-1"><a class="header-anchor" href="#❓sqlite-中的读写是线程安全的吗" aria-hidden="true">#</a> ❓<code>sqlite</code> 中的读写是线程安全的吗</h3><details class="hint-container details"><summary>💡</summary><p><code>SQLite</code> 本身支持多线程访问，但是线程安全性取决于在编译 <code>SQLite</code> 库时的设置。</p><p><code>SQLite</code> 在几个不同的线程安全级别下运行，这取决于编译时的配置选项：</p><ul><li><p>当 <code>SQLite</code> 被编译到非线程安全（<code>SQLITE_THREADSAFE=0</code>）模式时，它不允许多线程访问，某些线程安全的假设就无法保证了。</p></li><li><p>在多线程模式（<code>SQLITE_THREADSAFE=1</code>）下，核心 <code>SQLite</code> 库可以被多个线程同时安全访问，但是每个线程都需要使用一个不同的数据库连接。</p></li><li><p>当 <code>SQLite</code> 在序列化模式（<code>SQLITE_THREADSAFE=2</code>）下编译时，核心 <code>SQLite</code> 库可以被多个线程同时使用，并且一个数据库连接也能在多个线程之间共享。</p></li></ul></details><hr><h2 id="线程锁" tabindex="-1"><a class="header-anchor" href="#线程锁" aria-hidden="true">#</a> 线程锁</h2><h3 id="❓线程锁有哪些-那个性能最差" tabindex="-1"><a class="header-anchor" href="#❓线程锁有哪些-那个性能最差" aria-hidden="true">#</a> ❓线程锁有哪些，那个性能最差</h3><details class="hint-container details"><summary>💡</summary><ul><li><p>读写锁(read/write-lock)</p></li><li><p>互斥锁(mutex-lock)</p></li><li><p>自旋锁(spin-lock)</p></li><li><p>递归锁(recursive-lock)</p></li><li><p>悲观锁</p></li><li><p>乐观锁</p></li></ul><p>常见的线程锁类型有以下几种：</p><ol><li><p>自旋锁（Spinlock）：当试图获取自旋锁时，如果锁已经被占用，线程并不会被阻塞挂起，而是忙等待，不断尝试获取锁。适用于保护的临界区时间非常短的情况。</p></li><li><p>互斥锁（Mutex）：与自旋锁不同，如果互斥锁已经被占用，尝试获取锁的线程会进入睡眠状态。</p></li><li><p>读写锁（Read-Write Lock）：特殊的锁，允许多个读者同时访问，但是在写者访问时，所有的其他读者和写者都会被阻塞。</p></li><li><p>递归锁（Recursive Mutex）：允许同一个线程对用一个互斥体多次上锁。</p></li></ol><p>至于哪种性能最差，这取决于具体的使用场景。如果竞争不激烈，临界区有长有短，mutex可能会比自旋锁慢一点。如果竞争非常激烈，或者临界区非常短，那么自旋锁可能比较慢。读写锁在并发读多写少的场景下性能很高，但在写稍微增多的情况下就会比较慢。递归锁的性能也是依据情况而定的。总的来说，并没有一种锁是性能最差的，需要看具体情况选择合适的锁。</p></details><h3 id="❓各种的线程锁的常见使用场景" tabindex="-1"><a class="header-anchor" href="#❓各种的线程锁的常见使用场景" aria-hidden="true">#</a> ❓各种的线程锁的常见使用场景</h3><details class="hint-container details"><summary>💡</summary><ol><li><p>互斥锁（Mutex）：用于保护可同时被多个线程访问而引发问题的代码段（临界区）。适用于竞争不激烈，临界区有长有短的情况。</p></li><li><p>自旋锁（Spinlock）：用于中断处理程序以及高速缓存等内存访问。一般在保证有很高的获得锁成功率，且执行代码时间较短的情况下使用。</p></li><li><p>读写锁（Read-Write Lock）：适用于读取操作明显多于写入操作的情况。允许多个线程同时对数据进行读取，提高系统处理效率。</p></li><li><p>递归锁（Recursive Mutex）：可以在同一个线程内多次获取同一把锁，适用于递归函数中需要使用锁的情况。</p></li><li><p>条件变量（Condition variables）：用在某些线程需要等待特定条件才能继续执行的场景中。</p></li><li><p>信号量（Semaphore）：主要使用在多个线程同步以及多个线程访问数量有限的资源场景。</p></li><li><p>屏障（Barrier）：用于多个线程同时等待某个事件发生的场景，例如并行计算中的同步点等。</p></li></ol><p>具体使用哪种类型的锁，取决于具体的应用场景和其需要解决的问题。</p></details><h3 id="❓线程锁的底层实现" tabindex="-1"><a class="header-anchor" href="#❓线程锁的底层实现" aria-hidden="true">#</a> ❓线程锁的底层实现</h3><details class="hint-container details"><summary>💡</summary><p>线程锁的底层实现通常依赖于操作系统提供的原子操作和系统调用。下面以互斥锁（Mutex）和自旋锁（Spinlock）为例进行说明：</p><ol><li><p>互斥锁（Mutex）：互斥锁的实现主要依赖操作系统的系统调用。当一个线程试图获取已经被锁定的互斥锁时，该线程会被操作系统挂起，并加入等待队列，在锁被释放时，等待队列中的一个或多个线程会被唤醒并重新竞争锁。在Linux系统中，pthread库提供了互斥锁的实现；在Windows系统中，CriticalSection和Mutex函数提供了互斥锁的实现。</p></li><li><p>自旋锁（Spinlock）：自旋锁的实现主要依赖硬件提供的原子操作（比如x86架构下的cmpxchg指令）。当一个线程试图获取已经被锁定的自旋锁时，该线程会循环执行原子比较并交换操作，直到成功获取锁。由于自旋锁的实现不需要系统调用，所以其效率比互斥锁更高，但是在锁被长时间持有或者竞争激烈的情况下，自旋锁可能会造成CPU资源的浪费。</p></li></ol><p>以上只是说明互斥锁和自旋锁的一种可能的实现方式，实际上，不同的操作系统和硬件平台，线程锁的实现可能会有所不同。不仅如此，为了提高效率，许多高级锁（比如读写锁、递归锁、条件变量等）的实现通常会将多种线程锁和原子操作进行组合使用。</p></details><h3 id="❓cas-了解吗" tabindex="-1"><a class="header-anchor" href="#❓cas-了解吗" aria-hidden="true">#</a> ❓<code>CAS</code> 了解吗</h3><details class="hint-container details"><summary>💡</summary><p><code>CAS</code>(Compare And Swap) : 比较并交换，是一种实现原子的机制，可以保证一个变量在读、写时的原子性。</p><p>基本原理：比较三个操作数，V (内存位置值)、A (原值)、B (新值)，比较 V 与 A，如果相等则将更新内存位置值交换为 B，如果不相等则不做交换操作。最后无论是否进行交换操作，都返回该位置的值。线程1 读取值后，在进行写时，将读取的值与要写入内存位置的值进行比较，这样如果线程2 在线程1 写之前修改了数据，那么比较的时候就会不相等，也就不能写入保证了原子性。</p><p><code>CAS</code> 会存在 <code>ABA</code> 问题。也就是说线程2 先将 A 修改为了 B，又将 B 修改为了 A，这样线程1 再进行比较时还是相等，但是其实数据已经是修改过了的。而解决 <code>ABA</code> 问题最常见的方案就是版本号，也就是每次修改数据时，都会加上一个版本号。原始版本号为 1，而线程1 读取数据时版本号为 1，当线程2 进行 <code>ABA</code> 数据修改后，版本号增长为了 3，则线程1 再进行比较时，就会知道 A 是修改后的了，也就不能写入。</p><p>CAS全称是Compare and Swap，即比较并交换，是一种无需阻塞的算法，在硬件操作中，这种指令执行的过程是不会被中断的。这个算法涉及三个操作数：内存位置V、预期原值A和新值B。当且仅当内存位置V的值和预期原值A相等，那么处理器就会将该位置值更新为新值B。如果V值和A值不相等（说明已经有其他的线程更新了数据），那么处理器就什么都不会做。</p><p>CAS是一种乐观锁技术，适用于读多写少的情况。优点是不需要预先加锁，避免了加锁的开销，缺点是在数据冲突严重的情况下，CAS可能出现“自旋”的现象，即反复读取数据尝试更新。</p></details><h3 id="❓信号量和锁的关系" tabindex="-1"><a class="header-anchor" href="#❓信号量和锁的关系" aria-hidden="true">#</a> ❓信号量和锁的关系</h3><details class="hint-container details"><summary>💡</summary><p>信号量（Semaphore）和锁是两种用于控制多线程并发和同步的机制。他们之间的关系可以这样理解：</p><ol><li><p>锁主要用于保护临界区（即一次只能有一个线程访问的代码段），防止出现数据不一致的问题。例如互斥锁（Mutex）可以确保同一时间只有一个线程正在执行某个临界区。</p></li><li><p>信号量通常用于控制某个资源的可用数量。例如，如果有一个资源有N个可用的实例，可以通过一个初始为N的信号量来控制对它的并发访问。</p></li><li><p>锁在某种程度上可以被看作是一个初始值为1的信号量，也就是说，锁其实是信号量的一个特例。当线程持有锁时，它实际上是从信号量中获取了一个资源，当线程释放锁时，它实际上是向信号量返回了一个资源。</p></li><li><p>但是简单互斥锁在功能上不如信号量强大。一个信号量可以控制多个线程对共享资源的访问，而简单的互斥锁通常只允许一个线程在任何时候访问资源。</p></li></ol><p>在使用它们的时候，选择适当的工具取决于你需要解决的问题和线程间的交互。</p></details><h3 id="❓信号量有什么功能是锁做不到的" tabindex="-1"><a class="header-anchor" href="#❓信号量有什么功能是锁做不到的" aria-hidden="true">#</a> ❓信号量有什么功能是锁做不到的</h3><details class="hint-container details"><summary>💡</summary><p>互斥锁主要用于保护临界区，确保同一时间只有一个线程能进入临界区进行操作，主要用于实现乐观并发控制。所以互斥锁是一个二元的信号量，其值只能为0或1。</p><p>信号量则有更大的灵活性，它的值可以大于1，意味着它可以控制对一个资源的多次访问。例如，如果你有一个有3个空闲位置的停车场，你可以用一个初始值为3的信号量来控制它。每当有车辆进入时，信号量减1，每当有车辆离开时，信号量加1。当信号量为0时，新来的车辆将会等待，直到有车辆离开为止。这是锁无法实现的。</p><p>另外，信号量还可以用于实现不同线程间的同步操作。例如，有两个线程A和B，B需要等待A完成某个操作后才能开始执行，这时可以通过一个初始值为0的信号量来实现。A完成操作后调用信号量的释放操作V操作，B在开始执行前调用信号量的获取操作P操作，如果此时信号量为0，B将会阻塞等待，直到A执行完V操作为止。</p><p>总的来说，互斥锁主要用于实现资源的排他性访问，而信号量除了可以实现资源的排他性访问外，还可以实现对有限资源的并发控制以及线程间的同步操作。</p></details><h3 id="❓如果让你设计读写锁-你怎么设计" tabindex="-1"><a class="header-anchor" href="#❓如果让你设计读写锁-你怎么设计" aria-hidden="true">#</a> ❓如果让你设计读写锁，你怎么设计</h3><details class="hint-container details"><summary>💡</summary><p>读写锁设计的关键点是允许多个读线程同时进行操作，但在有写线程时，写操作有优先权，并且只允许一个写线程进行操作。以下是一种可能的设计思路：</p><ol><li><p>首先，定义两个互斥锁（mutex）和一个等待读线程的数量（readCount）。其中，一个互斥锁用于保护读写锁的状态（stateLock），另外一个互斥锁用于保护等待读线程的数量（readCountLock）。在初始化时，stateLock被锁定，readCountLock被解锁，readCount设为0。</p></li><li><p>当一个读线程试图获取锁时，首先获得readCountLock，然后将readCount加1。如果这是第一个读线程（即readCount从0变为1），则尝试获取stateLock。获取成功后，释放readCountLock。此时，可以开始读操作。</p></li><li><p>当一个读线程完成读操作并试图释放锁时，首先获得readCountLock，然后将readCount减1。如果这是最后一个读线程（即readCount从1变为0），则释放stateLock。然后，释放readCountLock。</p></li><li><p>当一个写线程试图获取锁时，直接尝试获取stateLock。获取成功后，可以开始写操作。</p></li><li><p>当一个写线程完成写操作并试图释放锁时，直接释放stateLock。</p></li></ol><p>注意，为了避免出现读线程饥饿（即写线程连续获得锁，导致等待的读线程无法进行读操作）的情况，可以通过增加一个等待写线程的数量（writeCount）和相应的互斥锁（writeCountLock）来进行限制。具体的，当一个读线程试图获取锁但发现有等待的写线程时，可以选择等待，直到没有等待的写线程为止。</p></details><hr><h2 id="分布式" tabindex="-1"><a class="header-anchor" href="#分布式" aria-hidden="true">#</a> 分布式</h2><h3 id="❓说一说分布式锁" tabindex="-1"><a class="header-anchor" href="#❓说一说分布式锁" aria-hidden="true">#</a> ❓说一说分布式锁</h3><details class="hint-container details"><summary>💡</summary><p>分布式锁是在分布式环境（多个服务器、多个进程）中，对共享资源进行访问控制的一种机制。在进行一些需要保持互斥性（即同一时间只能有一个任务执行）的操作时，为了避免并发导致的数据不一致，需要使用分布式锁来保证这种互斥性。</p><p>常用的一些分布式锁方案包括：</p><ol><li><p>基于数据库的分布式锁：通过在数据库中创建一个锁表，表中包含了锁的信息。当一个进程需要获取锁时，会向这个表中插入一行数据，如果插入成功，那么就获取了锁。当进程完成操作后，会删除这行数据释放锁。优点是实现简单，但是存在性能瓶颈和单点故障问题。</p></li><li><p>基于Redis的分布式锁：利用Redis的setnx（SET if Not eXists）命令原子性，尝试向某个key写入数据，如果写入成功则获取锁，结束后删除key释放锁。使用Lua脚本可以更安全地实现锁的释放。优点是性能好，适合轻量级锁，但是无法防止锁被长时间占用的问题。</p></li><li><p>基于ZooKeeper的分布式锁：ZooKeeper是一个开放源码的分布式协调服务，它是集群的管理者，监视着集群中各个节点的状态根据节点提交的反馈进行下一步合理操作。通过其提供的临时有序节点可以实现公平的分布式锁。优点是能实现公平锁，同时有较好的容错性和可靠性，但是使用相对复杂，性能较Redis锁差。</p></li><li><p>基于分布式一致性算法（如Paxos，Raft）实现的分布式锁：这类锁通常会在分布式存储系统中内置，如etcd的分布式锁。优点是安全性、可靠性极高，可以提供阻塞锁和租约锁，但是使用复杂，性能一般。</p></li></ol><p>这些方案各有优势和劣势，一般应根据业务场景、系统环境和对可靠性、性能的需求进行选择。</p></details><h3 id="❓如果没有看门狗机制你应该如何解决锁过期的问题" tabindex="-1"><a class="header-anchor" href="#❓如果没有看门狗机制你应该如何解决锁过期的问题" aria-hidden="true">#</a> ❓如果没有看门狗机制你应该如何解决锁过期的问题</h3><details class="hint-container details"><summary>💡</summary><p>看门狗通常用于解决分布式系统中的分布式锁过期问题。如果环境中没有看门狗机制，也可以通过以下策略解决锁过期的问题：</p><ol><li><p>锁超时：为锁设置一个合理的超时时间，而非永久锁定。这样避免因为执行期间发生异常导致锁永久持有，影响其它请求获取锁阻塞等待。</p></li><li><p>锁续期：在获取锁的线程中定期检查，如果锁即将到期，且任务线程并未结束，则重新设置锁的过期时间。</p></li><li><p>检查-设置模式：只有真正拥有锁的进程才能对锁进行操作。这可以通过在释放锁时检查进程是否仍然拥有该锁来实现。这需要原子操作支持，Redis的Lua脚本可以实现。</p></li><li><p>闹钟模式：设置一个单独的定时任务（类似看门狗），定时检查超时的锁，然后释放。</p></li></ol><p>以上几种策略都各有优缺点，需要根据实际业务需求去选择。但是无论哪种方式，设计时都需要考虑全局唯一性、加锁解锁的原子性、锁超时自动释放以及处理异常情况。</p></details><hr><h2 id="线程设计" tabindex="-1"><a class="header-anchor" href="#线程设计" aria-hidden="true">#</a> 线程设计</h2><h3 id="❓一个线程打印奇数-一个线程打印偶数-打印-1-100" tabindex="-1"><a class="header-anchor" href="#❓一个线程打印奇数-一个线程打印偶数-打印-1-100" aria-hidden="true">#</a> ❓一个线程打印奇数，一个线程打印偶数，打印 1~100</h3><details class="hint-container details"><summary>💡</summary><p>主要通过线程间的同步和互斥，确保他们交替打印奇数和偶数。</p><p>这里提供一个基于Java的例子：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OddEvenPrinter</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> monitor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> limit<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">OddEvenPrinter</span><span class="token punctuation">(</span><span class="token keyword">int</span> limit<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">=</span> limit<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> start<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">synchronized</span><span class="token punctuation">(</span>monitor<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>count <span class="token operator">&lt;</span> limit<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">try</span><span class="token punctuation">{</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> count<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    monitor<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    monitor<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            monitor<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">OddEvenPrinter</span> printer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OddEvenPrinter</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>printer<span class="token operator">::</span><span class="token function">print</span><span class="token punctuation">,</span> <span class="token string">&quot;oddThread&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>printer<span class="token operator">::</span><span class="token function">print</span><span class="token punctuation">,</span> <span class="token string">&quot;evenThread&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们创建了两个线程，一个打印奇数，一个打印偶数，我们设置了一个公共的打印次数限制（limit）。在打印的方法print()中，每次打印完一个数字后，它就调用monitor.notifyAll()唤醒其他在wait的线程，然后自己调用monitor.wait()进入等待状态。这样，两个线程就可以一直交替打印，直到count达到limit。</p><p>以上的例子假设两个线程启动顺序正常，如果更严谨应还应考虑控制打印奇数线程先启动。</p></details><h3 id="❓三个线程按照顺序打印-0-100" tabindex="-1"><a class="header-anchor" href="#❓三个线程按照顺序打印-0-100" aria-hidden="true">#</a> ❓三个线程按照顺序打印 0~100</h3><details class="hint-container details"><summary>💡</summary><p>如果三个线程按顺序轮流打印0～100，我们依然可以使用同步锁的机制来保证顺序。</p><p>这是一个Java版本的示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SequencePrinter</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> monitor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> limit<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">SequencePrinter</span><span class="token punctuation">(</span><span class="token keyword">int</span> limit<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">=</span> limit<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> start<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> threadId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">synchronized</span><span class="token punctuation">(</span>monitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">!=</span> threadId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">try</span> <span class="token punctuation">{</span>
                        monitor<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">return</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Thread &quot;</span> <span class="token operator">+</span> threadId <span class="token operator">+</span> <span class="token string">&quot;: &quot;</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    count<span class="token operator">++</span><span class="token punctuation">;</span>
                    monitor<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SequencePrinter</span> printer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SequencePrinter</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> printer<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> printer<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> printer<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中定义了三个线程0, 1, 2，他们依次打印数字。每个线程在打印时，首先检查当前数值是否应由自己打印（通过检查count % 3是否等于自己的id），如果不是就等待，如果是就打印并通知所有等待的线程。</p><p>请注意这只是一个基本示例，实际情况中可能需要处理更复杂的并发和同步问题。</p></details><h3 id="❓需要请求-200-个url-一次性只能发送10个-该怎么在最短的时间内请求完" tabindex="-1"><a class="header-anchor" href="#❓需要请求-200-个url-一次性只能发送10个-该怎么在最短的时间内请求完" aria-hidden="true">#</a> ❓需要请求 200 个URL，一次性只能发送10个，该怎么在最短的时间内请求完</h3><details class="hint-container details"><summary>💡</summary><p>这个问题的本质在于对并发进行限制，即并发控制或者任务分发。这在很多实际工程场景中都非常常见，比如Web爬虫，或者批量请求外部服务等。解决这个问题可以使用一种策略叫做「Semaphore（信号量）」，或者使用线程池进行并发数量的控制。</p><p>具体的，信号量可以限制同时进行的操作数量。比如Java中的<code>java.util.concurrent.Semaphore</code>类，可以做到这个，其参数为允许同时执行的线程数量。</p><p>关于线程池方式，我们可以创建一个最大容量为10的线程池来并发处理这些请求任务。</p><p>以下提供一个基于Java的信号量的控制例子：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executors</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutorService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Semaphore</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UrlRequester</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAX_THREADS</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Semaphore</span> semaphore<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ExecutorService</span> threadPool<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">UrlRequester</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxUrlConnections<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>semaphore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Semaphore</span><span class="token punctuation">(</span>maxUrlConnections<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>threadPool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token constant">MAX_THREADS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">requestUrls</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> urls<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> url <span class="token operator">:</span> urls<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            semaphore<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            threadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token function">requestUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                    semaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 确保已提交的任务全部执行完毕</span>
        threadPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>threadPool<span class="token punctuation">.</span><span class="token function">isTerminated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">requestUrl</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 请求url的代码-需要自定义</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，首先创建一个线程池来处理任务，然后创建一个Semaphore对象来控制同时处理的任务数。然后，对于每一个URL，通过调用Semaphore的acquire()方法来获取一个许可证，如果无法获取（也就是说已经有10个任务在执行）它会阻塞。然后，在一个新的线程中处理URL请求，在处理结束后，调用Semaphore的release()方法来释放许可证。这样，就能确保同一时刻最多只有10个URL请求在执行。</p></details>`,62);function o(l,c){return a(),s("div",null,[p(" more "),i])}const d=n(e,[["render",o],["__file","0x07.thread.html.vue"]]);export{d as default};
