import{_ as d}from"./plugin-vue_export-helper-x3n3nnut.js";import{r,o as u,c as p,a as h,b as n,e,d as s,w as a,f as c}from"./app-O_TOWqul.js";const _={},k=c('<h2 id="_0000" tabindex="-1"><a class="header-anchor" href="#_0000" aria-hidden="true">#</a> 0000</h2><p>// #region 0000</p><ul><li><a href="">🟢🟠🔴 - </a></li></ul><details class="hint-container details"><summary>💡</summary></details><p>// #endregion 0000</p><h2 id="_0001" tabindex="-1"><a class="header-anchor" href="#_0001" aria-hidden="true">#</a> 0001</h2><p>// #region 0001</p>',7),m={href:"https://leetcode.cn/problems/two-sum",target:"_blank",rel:"noopener noreferrer"},b=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),g=n("p",null,"// #endregion 0001",-1),f=n("h2",{id:"_0002",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0002","aria-hidden":"true"},"#"),e(" 0002")],-1),v=n("p",null,"// #region 0002",-1),y={href:"https://leetcode.cn/problems/add-two-numbers",target:"_blank",rel:"noopener noreferrer"},x=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),w=n("p",null,"// #endregion 0002",-1),N=n("h2",{id:"_0003",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0003","aria-hidden":"true"},"#"),e(" 0003")],-1),L=n("p",null,"// #region 0003",-1),I={href:"https://leetcode.cn/problems/longest-substring-without-repeating-characters",target:"_blank",rel:"noopener noreferrer"},q=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),j=n("p",null,"// #endregion 0003",-1),A=n("h2",{id:"_0004",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0004","aria-hidden":"true"},"#"),e(" 0004")],-1),Q=n("p",null,"// #region 0004",-1),S={href:"https://leetcode.cn/problems/median-of-two-sorted-arrays",target:"_blank",rel:"noopener noreferrer"},T=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),H=n("p",null,"// #endregion 0004",-1),C=n("h2",{id:"_0005",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0005","aria-hidden":"true"},"#"),e(" 0005")],-1),D=n("p",null,"// #region 0005",-1),V={href:"https://leetcode.cn/problems/longest-palindromic-substring/",target:"_blank",rel:"noopener noreferrer"},K=n("blockquote",null,[n("p",null,"给定一个字符串，返回该字符串中最长的回文串。")],-1),z=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),B=n("p",null,"// #endregion 0005",-1),E=n("h2",{id:"_0006",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0006","aria-hidden":"true"},"#"),e(" 0006")],-1),P=n("p",null,"// #region 0006",-1),R={href:"https://leetcode.cn/problems/zigzag-conversion",target:"_blank",rel:"noopener noreferrer"},F=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),G=n("p",null,"// #endregion 0006",-1),J=n("h2",{id:"_0007",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0007","aria-hidden":"true"},"#"),e(" 0007")],-1),M=n("p",null,"// #region 0007",-1),O={href:"https://leetcode.cn/problems/reverse-integer",target:"_blank",rel:"noopener noreferrer"},U=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),W=n("p",null,"// #endregion 0007",-1),X=n("h2",{id:"_0008",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0008","aria-hidden":"true"},"#"),e(" 0008")],-1),Y=n("p",null,"// #region 0008",-1),Z={href:"https://leetcode.cn/problems/string-to-integer-atoi",target:"_blank",rel:"noopener noreferrer"},$=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),nn=n("p",null,"// #endregion 0008",-1),en=n("h2",{id:"_0009",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0009","aria-hidden":"true"},"#"),e(" 0009")],-1),sn=n("p",null,"// #region 0009",-1),tn={href:"https://leetcode.cn/problems/palindrome-number",target:"_blank",rel:"noopener noreferrer"},an=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),on=n("p",null,"// #endregion 0009",-1),ln=n("h2",{id:"_0010",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0010","aria-hidden":"true"},"#"),e(" 0010")],-1),rn=n("p",null,"// #region 0010",-1),cn={href:"https://leetcode.cn/problems/regular-expression-matching",target:"_blank",rel:"noopener noreferrer"},dn=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),un=n("p",null,"// #endregion 0010",-1),pn=n("h2",{id:"_0011",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0011","aria-hidden":"true"},"#"),e(" 0011")],-1),hn=n("p",null,"// #region 0011",-1),_n={href:"https://leetcode.cn/problems/container-with-most-water",target:"_blank",rel:"noopener noreferrer"},kn=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),mn=n("p",null,"// #endregion 0011",-1),bn=n("h2",{id:"_0012",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0012","aria-hidden":"true"},"#"),e(" 0012")],-1),gn=n("p",null,"// #region 0012",-1),fn={href:"https://leetcode.cn/problems/integer-to-roman",target:"_blank",rel:"noopener noreferrer"},vn=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),yn=n("p",null,"// #endregion 0012",-1),xn=n("h2",{id:"_0013",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0013","aria-hidden":"true"},"#"),e(" 0013")],-1),wn=n("p",null,"// #region 0013",-1),Nn={href:"https://leetcode.cn/problems/roman-to-integer",target:"_blank",rel:"noopener noreferrer"},Ln=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),In=n("p",null,"// #endregion 0013",-1),qn=n("h2",{id:"_0014",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0014","aria-hidden":"true"},"#"),e(" 0014")],-1),jn=n("p",null,"// #region 0014",-1),An={href:"https://leetcode.cn/problems/longest-common-prefix",target:"_blank",rel:"noopener noreferrer"},Qn=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Sn=n("p",null,"// #endregion 0014",-1),Tn=n("h2",{id:"_0015",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0015","aria-hidden":"true"},"#"),e(" 0015")],-1),Hn=n("p",null,"// #region 0015",-1),Cn={href:"https://leetcode.cn/problems/3sum",target:"_blank",rel:"noopener noreferrer"},Dn=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Vn=n("p",null,"// #endregion 0015",-1),Kn=n("h2",{id:"_0016",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0016","aria-hidden":"true"},"#"),e(" 0016")],-1),zn=n("p",null,"// #region 0016",-1),Bn={href:"https://leetcode.cn/problems/3sum-closest",target:"_blank",rel:"noopener noreferrer"},En=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Pn=n("p",null,"// #endregion 0016",-1),Rn=n("h2",{id:"_0017",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0017","aria-hidden":"true"},"#"),e(" 0017")],-1),Fn=n("p",null,"// #region 0017",-1),Gn={href:"https://leetcode.cn/problems/letter-combinations-of-a-phone-number",target:"_blank",rel:"noopener noreferrer"},Jn=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Mn=n("p",null,"// #endregion 0017",-1),On=n("h2",{id:"_0018",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0018","aria-hidden":"true"},"#"),e(" 0018")],-1),Un=n("p",null,"// #region 0018",-1),Wn={href:"https://leetcode.cn/problems/4sum",target:"_blank",rel:"noopener noreferrer"},Xn=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Yn=n("p",null,"// #endregion 0018",-1),Zn=n("h2",{id:"_0019",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0019","aria-hidden":"true"},"#"),e(" 0019")],-1),$n=n("p",null,"// #region 0019",-1),ne={href:"https://leetcode.cn/problems/remove-nth-node-from-end-of-list/",target:"_blank",rel:"noopener noreferrer"},ee=n("blockquote",null,[n("p",null,"删除单链表的倒数第 N 个节点，并返回头结点。")],-1),se=n("details",{class:"hint-container details"},[n("summary",null,"详情")],-1),te=n("p",null,"// #endregion 0019",-1),ae=n("h2",{id:"_0020",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0020","aria-hidden":"true"},"#"),e(" 0020")],-1),oe=n("p",null,"// #region 0020",-1),le={href:"https://leetcode.cn/problems/valid-parentheses",target:"_blank",rel:"noopener noreferrer"},ie=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),re=n("p",null,"// #endregion 0020",-1),ce=n("h2",{id:"_0021",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0021","aria-hidden":"true"},"#"),e(" 0021")],-1),de=n("p",null,"// #region 0021",-1),ue={href:"https://leetcode.cn/problems/merge-two-sorted-lists",target:"_blank",rel:"noopener noreferrer"},pe=n("blockquote",null,[n("p",null,"合并两个有序的链表。")],-1),he={class:"hint-container details"},_e=n("summary",null,"💡",-1),ke=n("p",null,"【思路】创建一个结果链表头，并用一个指针指向这个结果链表用于指向添加位置。然后分别使用两个指针指向两个链表，每次比较比较链表中的值，将较小的链表中的节点添加到结果链表中。直到其中一个链表中已为空，最后将剩下不为空的链表全部添加到结果链表中。",-1),me=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token doc-comment comment"},[e(`/**
 * Definition for singly-linked list.
 * public class ListNode `),n("span",{class:"token punctuation"},"{"),e(`
 *     int val;
 *     ListNode next;
 *     ListNode() `),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),e(`
 *     ListNode(int val) `),n("span",{class:"token punctuation"},"{"),e(" this.val = val; "),n("span",{class:"token punctuation"},"}"),e(`
 *     ListNode(int val, ListNode next) `),n("span",{class:"token punctuation"},"{"),e(" this.val = val; this.next = next; "),n("span",{class:"token punctuation"},"}"),e(`
 * `),n("span",{class:"token punctuation"},"}"),e(`
 */`)]),e(`
`),n("span",{class:"token keyword"},"class"),e(),n("span",{class:"token class-name"},"Solution"),e(),n("span",{class:"token punctuation"},"{"),e(`
    `),n("span",{class:"token keyword"},"public"),e(),n("span",{class:"token class-name"},"ListNode"),e(),n("span",{class:"token function"},"mergeTwoLists"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"ListNode"),e(" list1"),n("span",{class:"token punctuation"},","),e(),n("span",{class:"token class-name"},"ListNode"),e(" list2"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
        `),n("span",{class:"token comment"},"// 头结点：指向结果链表头部"),e(`
        `),n("span",{class:"token class-name"},"ListNode"),e(" head "),n("span",{class:"token operator"},"="),e(),n("span",{class:"token keyword"},"new"),e(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),e(`
        `),n("span",{class:"token class-name"},"ListNode"),e(" p "),n("span",{class:"token operator"},"="),e(" head"),n("span",{class:"token punctuation"},";"),e(`
        `),n("span",{class:"token class-name"},"ListNode"),e(" p1 "),n("span",{class:"token operator"},"="),e(" list1"),n("span",{class:"token punctuation"},";"),e(`
        `),n("span",{class:"token class-name"},"ListNode"),e(" p2 "),n("span",{class:"token operator"},"="),e(" list2"),n("span",{class:"token punctuation"},";"),e(`
        `),n("span",{class:"token keyword"},"while"),e(),n("span",{class:"token punctuation"},"("),e(" p1 "),n("span",{class:"token operator"},"!="),e(),n("span",{class:"token keyword"},"null"),e(),n("span",{class:"token operator"},"&&"),e(" p2 "),n("span",{class:"token operator"},"!="),e(),n("span",{class:"token keyword"},"null"),e(),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
            `),n("span",{class:"token comment"},"// 比较两个链表中值小的添加到结果链表中"),e(`
            `),n("span",{class:"token keyword"},"if"),e(),n("span",{class:"token punctuation"},"("),e(" p1"),n("span",{class:"token punctuation"},"."),e("val "),n("span",{class:"token operator"},"<="),e(" p2"),n("span",{class:"token punctuation"},"."),e("val "),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
                p`),n("span",{class:"token punctuation"},"."),e("next "),n("span",{class:"token operator"},"="),e(" p1"),n("span",{class:"token punctuation"},";"),e(`
                p1 `),n("span",{class:"token operator"},"="),e(" p1"),n("span",{class:"token punctuation"},"."),e("next"),n("span",{class:"token punctuation"},";"),e(`
            `),n("span",{class:"token punctuation"},"}"),e(),n("span",{class:"token keyword"},"else"),e(),n("span",{class:"token punctuation"},"{"),e(`
                p`),n("span",{class:"token punctuation"},"."),e("next "),n("span",{class:"token operator"},"="),e(" p2"),n("span",{class:"token punctuation"},";"),e(`
                p2 `),n("span",{class:"token operator"},"="),e(" p2"),n("span",{class:"token punctuation"},"."),e("next"),n("span",{class:"token punctuation"},";"),e(`
            `),n("span",{class:"token punctuation"},"}"),e(`
            p `),n("span",{class:"token operator"},"="),e(" p"),n("span",{class:"token punctuation"},"."),e("next"),n("span",{class:"token punctuation"},";"),e(`
        `),n("span",{class:"token punctuation"},"}"),e(`
        `),n("span",{class:"token comment"},"// 将不为空的链表添加到结果链表尾部"),e(`
        `),n("span",{class:"token keyword"},"if"),e(),n("span",{class:"token punctuation"},"("),e(" p1 "),n("span",{class:"token operator"},"!="),e(),n("span",{class:"token keyword"},"null"),e(),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
            p`),n("span",{class:"token punctuation"},"."),e("next "),n("span",{class:"token operator"},"="),e(" p1"),n("span",{class:"token punctuation"},";"),e(`
        `),n("span",{class:"token punctuation"},"}"),e(`
        `),n("span",{class:"token keyword"},"if"),e(),n("span",{class:"token punctuation"},"("),e(" p2 "),n("span",{class:"token operator"},"!="),e(),n("span",{class:"token keyword"},"null"),e(),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
            p`),n("span",{class:"token punctuation"},"."),e("next "),n("span",{class:"token operator"},"="),e(" p2"),n("span",{class:"token punctuation"},";"),e(`
        `),n("span",{class:"token punctuation"},"}"),e(`
        `),n("span",{class:"token keyword"},"return"),e(" head"),n("span",{class:"token punctuation"},"."),e("next"),n("span",{class:"token punctuation"},";"),e(`
    `),n("span",{class:"token punctuation"},"}"),e(`
`),n("span",{class:"token punctuation"},"}"),e(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),be=n("div",{class:"language-swift line-numbers-mode","data-ext":"swift"},[n("pre",{class:"language-swift"},[n("code",null,[n("span",{class:"token comment"},`/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.next = nil
 *     }
 * }
 */`),e(`
`),n("span",{class:"token keyword"},"class"),e(),n("span",{class:"token class-name"},"Solution"),e(),n("span",{class:"token punctuation"},"{"),e(`
    `),n("span",{class:"token keyword"},"func"),e(),n("span",{class:"token function-definition function"},"mergeTwoLists"),n("span",{class:"token punctuation"},"("),n("span",{class:"token omit keyword"},"_"),e(" l1"),n("span",{class:"token punctuation"},":"),e(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},","),e(),n("span",{class:"token omit keyword"},"_"),e(" l2"),n("span",{class:"token punctuation"},":"),e(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token operator"},"->"),e(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token operator"},"?"),e(),n("span",{class:"token punctuation"},"{"),e(`
        `),n("span",{class:"token keyword"},"guard"),e(),n("span",{class:"token keyword"},"let"),e(" l1 "),n("span",{class:"token operator"},"="),e(" l1"),n("span",{class:"token punctuation"},","),e(),n("span",{class:"token keyword"},"let"),e(" l2 "),n("span",{class:"token operator"},"="),e(" l2 "),n("span",{class:"token keyword"},"else"),e(),n("span",{class:"token punctuation"},"{"),e(`
            `),n("span",{class:"token keyword"},"return"),e(" l1 "),n("span",{class:"token operator"},"??"),e(` l2
        `),n("span",{class:"token punctuation"},"}"),e(`
        `),n("span",{class:"token keyword"},"let"),e(" head "),n("span",{class:"token operator"},"="),e(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),e(`
        `),n("span",{class:"token keyword"},"var"),e(" p"),n("span",{class:"token punctuation"},":"),e(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token operator"},"?"),e(),n("span",{class:"token operator"},"="),e(` head
        `),n("span",{class:"token keyword"},"var"),e(" op1"),n("span",{class:"token punctuation"},":"),e(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token operator"},"?"),e(),n("span",{class:"token operator"},"="),e(` l1
        `),n("span",{class:"token keyword"},"var"),e(" op2"),n("span",{class:"token punctuation"},":"),e(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token operator"},"?"),e(),n("span",{class:"token operator"},"="),e(` l2
        `),n("span",{class:"token comment"},"// 遍历两个链表，并将较小值节点添加到结果链表"),e(`
        `),n("span",{class:"token keyword"},"while"),e(),n("span",{class:"token keyword"},"let"),e(" p1 "),n("span",{class:"token operator"},"="),e(" op1"),n("span",{class:"token punctuation"},","),e(),n("span",{class:"token keyword"},"let"),e(" p2 "),n("span",{class:"token operator"},"="),e(" op2 "),n("span",{class:"token punctuation"},"{"),e(`
            `),n("span",{class:"token keyword"},"if"),e(" p1"),n("span",{class:"token punctuation"},"."),e("val "),n("span",{class:"token operator"},"<="),e(" p2"),n("span",{class:"token punctuation"},"."),e("val "),n("span",{class:"token punctuation"},"{"),e(`
                p`),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),e("next "),n("span",{class:"token operator"},"="),e(` p1
                op1 `),n("span",{class:"token operator"},"="),e(" op1"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),e(`next
            `),n("span",{class:"token punctuation"},"}"),e(),n("span",{class:"token keyword"},"else"),e(),n("span",{class:"token punctuation"},"{"),e(`
                p`),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),e("next "),n("span",{class:"token operator"},"="),e(` p2
                op2 `),n("span",{class:"token operator"},"="),e(" op2"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),e(`next
            `),n("span",{class:"token punctuation"},"}"),e(`
            p `),n("span",{class:"token operator"},"="),e(" p"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),e(`next
        `),n("span",{class:"token punctuation"},"}"),e(`
        `),n("span",{class:"token comment"},"// 将不为空的链表添加到结果链表后面"),e(`
        p`),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),e("next "),n("span",{class:"token operator"},"="),e(" op1 "),n("span",{class:"token operator"},"??"),e(` op2
        `),n("span",{class:"token keyword"},"return"),e(" head"),n("span",{class:"token punctuation"},"."),e(`next
    `),n("span",{class:"token punctuation"},"}"),e(`
`),n("span",{class:"token punctuation"},"}"),e(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),ge=n("p",null,"// #endregion 0021",-1),fe=n("h2",{id:"_0022-✅",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0022-✅","aria-hidden":"true"},"#"),e(" 0022 ✅")],-1),ve=n("p",null,"// #region 0022",-1),ye={href:"https://leetcode.cn/problems/generate-parentheses",target:"_blank",rel:"noopener noreferrer"},xe=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),we=n("p",null,"// #endregion 0022",-1),Ne=n("h2",{id:"_0023-✅",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0023-✅","aria-hidden":"true"},"#"),e(" 0023 ✅")],-1),Le=n("p",null,"// #region 0023",-1),Ie={href:"https://leetcode.cn/problems/merge-k-sorted-lists",target:"_blank",rel:"noopener noreferrer"},qe=n("blockquote",null,[n("p",null,"给定一个升序链表数组，合并得到一个升序链表，并返回头结点。")],-1),je={class:"hint-container details"},Ae=n("summary",null,"💡",-1),Qe=n("p",null,"【思路1】合并两个升序链表比较容易解决。合并多个链表，可以先两个两个合并，最后就合并成一个了。",-1),Se=n("p",null,"【思路2】分治思想，类似归并排序，两两合并，最后合并成为结果链表。",-1),Te=n("p",null,"【思路3】优先级队列，每次将 K 个链表的头结点放入优先级队列中，那么可以每次从优先级队列中取出最小值节点放入结果链表，然后再将该节点的下一个节点放入优先级队列，直到合并完成。",-1),He=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token doc-comment comment"},[e(`/**
 * Definition for singly-linked list.
 * public class ListNode `),n("span",{class:"token punctuation"},"{"),e(`
 *     int val;
 *     ListNode next;
 *     ListNode() `),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),e(`
 *     ListNode(int val) `),n("span",{class:"token punctuation"},"{"),e(" this.val = val; "),n("span",{class:"token punctuation"},"}"),e(`
 *     ListNode(int val, ListNode next) `),n("span",{class:"token punctuation"},"{"),e(" this.val = val; this.next = next; "),n("span",{class:"token punctuation"},"}"),e(`
 * `),n("span",{class:"token punctuation"},"}"),e(`
 */`)]),e(`
`),n("span",{class:"token keyword"},"class"),e(),n("span",{class:"token class-name"},"Solution"),e(),n("span",{class:"token punctuation"},"{"),e(`
    `),n("span",{class:"token keyword"},"public"),e(),n("span",{class:"token class-name"},"ListNode"),e(),n("span",{class:"token function"},"mergeKLists"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),e(" lists"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
        `),n("span",{class:"token keyword"},"if"),e(),n("span",{class:"token punctuation"},"("),e(" lists"),n("span",{class:"token punctuation"},"."),e("length "),n("span",{class:"token operator"},"=="),e(),n("span",{class:"token number"},"0"),e(),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(),n("span",{class:"token keyword"},"return"),e(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),e(),n("span",{class:"token punctuation"},"}"),e(`
        `),n("span",{class:"token keyword"},"if"),e(),n("span",{class:"token punctuation"},"("),e(" lists"),n("span",{class:"token punctuation"},"."),e("length "),n("span",{class:"token operator"},"=="),e(),n("span",{class:"token number"},"1"),e(),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(),n("span",{class:"token keyword"},"return"),e(" lists"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),e(),n("span",{class:"token punctuation"},"}"),e(`
        `),n("span",{class:"token comment"},"// 遍历链表数组，每次取出一个链表，进行两条链表合并"),e(`
        `),n("span",{class:"token class-name"},"ListNode"),e(" l1 "),n("span",{class:"token operator"},"="),e(" lists"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),e(`
        `),n("span",{class:"token keyword"},"for"),e(),n("span",{class:"token punctuation"},"("),e(),n("span",{class:"token keyword"},"int"),e(" i "),n("span",{class:"token operator"},"="),e(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),e(" i "),n("span",{class:"token operator"},"<"),e(" lists"),n("span",{class:"token punctuation"},"."),e("length"),n("span",{class:"token punctuation"},";"),e(" i"),n("span",{class:"token operator"},"++"),e(),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
            `),n("span",{class:"token class-name"},"ListNode"),e(" l2 "),n("span",{class:"token operator"},"="),e(" lists"),n("span",{class:"token punctuation"},"["),e("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),e(`
            l1 `),n("span",{class:"token operator"},"="),e(),n("span",{class:"token function"},"mergeTwoLists"),n("span",{class:"token punctuation"},"("),e("l1"),n("span",{class:"token punctuation"},","),e(" l2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),e(`
        `),n("span",{class:"token punctuation"},"}"),e(`
        `),n("span",{class:"token keyword"},"return"),e(" l1"),n("span",{class:"token punctuation"},";"),e(`
    `),n("span",{class:"token punctuation"},"}"),e(`

    `),n("span",{class:"token comment"},"// 合并两个升序链表"),e(`
    `),n("span",{class:"token class-name"},"ListNode"),e(),n("span",{class:"token function"},"mergeTwoLists"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"ListNode"),e(" l1"),n("span",{class:"token punctuation"},","),e(),n("span",{class:"token class-name"},"ListNode"),e(" l2"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
        `),n("span",{class:"token class-name"},"ListNode"),e(" head "),n("span",{class:"token operator"},"="),e(),n("span",{class:"token keyword"},"new"),e(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),e(`
        `),n("span",{class:"token class-name"},"ListNode"),e(" p "),n("span",{class:"token operator"},"="),e(" head"),n("span",{class:"token punctuation"},";"),e(`
        `),n("span",{class:"token class-name"},"ListNode"),e(" p1 "),n("span",{class:"token operator"},"="),e(" l1"),n("span",{class:"token punctuation"},";"),e(`
        `),n("span",{class:"token class-name"},"ListNode"),e(" p2 "),n("span",{class:"token operator"},"="),e(" l2"),n("span",{class:"token punctuation"},";"),e(`
        `),n("span",{class:"token keyword"},"while"),e(),n("span",{class:"token punctuation"},"("),e(" p1 "),n("span",{class:"token operator"},"!="),e(),n("span",{class:"token keyword"},"null"),e(),n("span",{class:"token operator"},"&&"),e(" p2 "),n("span",{class:"token operator"},"!="),e(),n("span",{class:"token keyword"},"null"),e(),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
            `),n("span",{class:"token keyword"},"if"),e(),n("span",{class:"token punctuation"},"("),e(" p1"),n("span",{class:"token punctuation"},"."),e("val "),n("span",{class:"token operator"},"<="),e(" p2"),n("span",{class:"token punctuation"},"."),e("val "),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
                p`),n("span",{class:"token punctuation"},"."),e("next "),n("span",{class:"token operator"},"="),e(" p1"),n("span",{class:"token punctuation"},";"),e(`
                p1 `),n("span",{class:"token operator"},"="),e(" p1"),n("span",{class:"token punctuation"},"."),e("next"),n("span",{class:"token punctuation"},";"),e(`
            `),n("span",{class:"token punctuation"},"}"),e(),n("span",{class:"token keyword"},"else"),e(),n("span",{class:"token punctuation"},"{"),e(`
                p`),n("span",{class:"token punctuation"},"."),e("next "),n("span",{class:"token operator"},"="),e(" p2"),n("span",{class:"token punctuation"},";"),e(`
                p2 `),n("span",{class:"token operator"},"="),e(" p2"),n("span",{class:"token punctuation"},"."),e("next"),n("span",{class:"token punctuation"},";"),e(`
            `),n("span",{class:"token punctuation"},"}"),e(`
            p `),n("span",{class:"token operator"},"="),e(" p"),n("span",{class:"token punctuation"},"."),e("next"),n("span",{class:"token punctuation"},";"),e(`
        `),n("span",{class:"token punctuation"},"}"),e(`
        `),n("span",{class:"token keyword"},"if"),e(),n("span",{class:"token punctuation"},"("),e(" p1 "),n("span",{class:"token operator"},"!="),e(),n("span",{class:"token keyword"},"null"),e(),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
            p`),n("span",{class:"token punctuation"},"."),e("next "),n("span",{class:"token operator"},"="),e(" p1"),n("span",{class:"token punctuation"},";"),e(`
        `),n("span",{class:"token punctuation"},"}"),e(`
        `),n("span",{class:"token keyword"},"if"),e(),n("span",{class:"token punctuation"},"("),e(" p2 "),n("span",{class:"token operator"},"!="),e(),n("span",{class:"token keyword"},"null"),e(),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
            p`),n("span",{class:"token punctuation"},"."),e("next "),n("span",{class:"token operator"},"="),e(" p2"),n("span",{class:"token punctuation"},";"),e(`
        `),n("span",{class:"token punctuation"},"}"),e(`
        `),n("span",{class:"token keyword"},"return"),e(" head"),n("span",{class:"token punctuation"},"."),e("next"),n("span",{class:"token punctuation"},";"),e(`
    `),n("span",{class:"token punctuation"},"}"),e(`
`),n("span",{class:"token punctuation"},"}"),e(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Ce=n("p",null,"// #endregion 0023",-1),De=n("h2",{id:"_0024",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0024","aria-hidden":"true"},"#"),e(" 0024")],-1),Ve=n("p",null,"// #region 0024",-1),Ke={href:"https://leetcode.cn/problems/swap-nodes-in-pairs",target:"_blank",rel:"noopener noreferrer"},ze=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Be=n("p",null,"// #endregion 0024",-1),Ee=n("h2",{id:"_0025",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0025","aria-hidden":"true"},"#"),e(" 0025")],-1),Pe=n("p",null,"// #region 0025",-1),Re={href:"https://leetcode.cn/problems/reverse-nodes-in-k-group",target:"_blank",rel:"noopener noreferrer"},Fe=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Ge=n("p",null,"// #endregion 0025",-1),Je=n("h2",{id:"_0026",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0026","aria-hidden":"true"},"#"),e(" 0026")],-1),Me=n("p",null,"// #region 0026",-1),Oe={href:"https://leetcode.cn/problems/remove-duplicates-from-sorted-array",target:"_blank",rel:"noopener noreferrer"},Ue=n("blockquote",null,[n("p",null,"给定一个有序数组，删除数组中的重复项，并返回数组新长度。")],-1),We=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Xe=n("p",null,"// #endregion 0026",-1),Ye=n("h2",{id:"_0027",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0027","aria-hidden":"true"},"#"),e(" 0027")],-1),Ze=n("p",null,"// #region 0027",-1),$e={href:"https://leetcode.cn/problems/remove-element",target:"_blank",rel:"noopener noreferrer"},ns=n("blockquote",null,[n("p",null,"给定一个数组和目标值，需要将数组中的与目标值相等的元素移除，返回数组新长度。")],-1),es=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),ss=n("p",null,"// #endregion 0027",-1),ts=n("h2",{id:"_0028",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0028","aria-hidden":"true"},"#"),e(" 0028")],-1),as=n("p",null,"// #region 0028",-1),os={href:"https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string",target:"_blank",rel:"noopener noreferrer"},ls=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),is=n("p",null,"// #endregion 0028",-1),rs=n("h2",{id:"_0029",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0029","aria-hidden":"true"},"#"),e(" 0029")],-1),cs=n("p",null,"// #region 0029",-1),ds={href:"https://leetcode.cn/problems/divide-two-integers",target:"_blank",rel:"noopener noreferrer"},us=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),ps=n("p",null,"// #endregion 0029",-1),hs=n("h2",{id:"_0030",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0030","aria-hidden":"true"},"#"),e(" 0030")],-1),_s=n("p",null,"// #region 0030",-1),ks={href:"https://leetcode.cn/problems/substring-with-concatenation-of-all-words",target:"_blank",rel:"noopener noreferrer"},ms=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),bs=n("p",null,"// #endregion 0030",-1),gs=n("h2",{id:"_0031",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0031","aria-hidden":"true"},"#"),e(" 0031")],-1),fs=n("p",null,"// #region 0031",-1),vs={href:"https://leetcode.cn/problems/next-permutation",target:"_blank",rel:"noopener noreferrer"},ys=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),xs=n("p",null,"// #endregion 0031",-1),ws=n("h2",{id:"_0032",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0032","aria-hidden":"true"},"#"),e(" 0032")],-1),Ns=n("p",null,"// #region 0032",-1),Ls={href:"https://leetcode.cn/problems/longest-valid-parentheses",target:"_blank",rel:"noopener noreferrer"},Is=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),qs=n("p",null,"// #endregion 0032",-1),js=n("h2",{id:"_0033",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0033","aria-hidden":"true"},"#"),e(" 0033")],-1),As=n("p",null,"// #region 0033",-1),Qs={href:"https://leetcode.cn/problems/search-in-rotated-sorted-array",target:"_blank",rel:"noopener noreferrer"},Ss=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Ts=n("p",null,"// #endregion 0033",-1),Hs=n("h2",{id:"_0034",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0034","aria-hidden":"true"},"#"),e(" 0034")],-1),Cs=n("p",null,"// #region 0034",-1),Ds={href:"https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array",target:"_blank",rel:"noopener noreferrer"},Vs=n("blockquote",null,[n("p",null,"给定一个非递减数组和一个目标值，查找该目标值在数组中的开始位置和结束位置，如果存在则返回 [start, end]，如果不存在返回 [-1, -1]。")],-1),Ks=c(`<details class="hint-container details"><summary>💡</summary><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">searchRange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>// #endregion 0034</p><h2 id="_0035" tabindex="-1"><a class="header-anchor" href="#_0035" aria-hidden="true">#</a> 0035</h2><p>// #region 0035</p>`,4),zs={href:"https://leetcode.cn/problems/search-insert-position",target:"_blank",rel:"noopener noreferrer"},Bs=n("blockquote",null,[n("p",null,"给定一个升序数组和一个目标值，如果目标值在数组中存在返回目标值索引，如果不存在返回插入位置索引。")],-1),Es=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Ps=n("p",null,"// #endregion 0035",-1),Rs=n("h2",{id:"_0036",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0036","aria-hidden":"true"},"#"),e(" 0036")],-1),Fs=n("p",null,"// #region 0036",-1),Gs={href:"https://leetcode.cn/problems/valid-sudoku",target:"_blank",rel:"noopener noreferrer"},Js=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Ms=n("p",null,"// #endregion 0036",-1),Os=n("h2",{id:"_0037",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0037","aria-hidden":"true"},"#"),e(" 0037")],-1),Us=n("p",null,"// #region 0037",-1),Ws={href:"https://leetcode.cn/problems/sudoku-solver",target:"_blank",rel:"noopener noreferrer"},Xs=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Ys=n("p",null,"// #endregion 0037",-1),Zs=n("h2",{id:"_0038",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0038","aria-hidden":"true"},"#"),e(" 0038")],-1),$s=n("p",null,"// #region 0038",-1),nt={href:"https://leetcode.cn/problems/count-and-say",target:"_blank",rel:"noopener noreferrer"},et=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),st=n("p",null,"// #endregion 0038",-1),tt=n("h2",{id:"_0039",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0039","aria-hidden":"true"},"#"),e(" 0039")],-1),at=n("p",null,"// #region 0039",-1),ot={href:"https://leetcode.cn/problems/combination-sum",target:"_blank",rel:"noopener noreferrer"},lt=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),it=n("p",null,"// #endregion 0039",-1),rt=n("h2",{id:"_0040",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0040","aria-hidden":"true"},"#"),e(" 0040")],-1),ct=n("p",null,"// #region 0040",-1),dt={href:"https://leetcode.cn/problems/combination-sum-ii",target:"_blank",rel:"noopener noreferrer"},ut=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),pt=n("p",null,"// #endregion 0040",-1),ht=n("h2",{id:"_0041",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0041","aria-hidden":"true"},"#"),e(" 0041")],-1),_t=n("p",null,"// #region 0041",-1),kt={href:"https://leetcode.cn/problems/first-missing-positive",target:"_blank",rel:"noopener noreferrer"},mt=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),bt=n("p",null,"// #endregion 0041",-1),gt=n("h2",{id:"_0042",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0042","aria-hidden":"true"},"#"),e(" 0042")],-1),ft=n("p",null,"// #region 0042",-1),vt={href:"https://leetcode.cn/problems/trapping-rain-water",target:"_blank",rel:"noopener noreferrer"},yt=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),xt=n("p",null,"// #endregion 0042",-1),wt=n("h2",{id:"_0043",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0043","aria-hidden":"true"},"#"),e(" 0043")],-1),Nt=n("p",null,"// #region 0043",-1),Lt={href:"https://leetcode.cn/problems/multiply-strings",target:"_blank",rel:"noopener noreferrer"},It=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),qt=n("p",null,"// #endregion 0043",-1),jt=n("h2",{id:"_0044",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0044","aria-hidden":"true"},"#"),e(" 0044")],-1),At=n("p",null,"// #region 0044",-1),Qt={href:"https://leetcode.cn/problems/wildcard-matching",target:"_blank",rel:"noopener noreferrer"},St=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Tt=n("p",null,"// #endregion 0044",-1),Ht=n("h2",{id:"_0045",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0045","aria-hidden":"true"},"#"),e(" 0045")],-1),Ct=n("p",null,"// #region 0045",-1),Dt={href:"https://leetcode.cn/problems/jump-game-ii",target:"_blank",rel:"noopener noreferrer"},Vt=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Kt=n("p",null,"// #endregion 0045",-1),zt=n("h2",{id:"_0046",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0046","aria-hidden":"true"},"#"),e(" 0046")],-1),Bt=n("p",null,"// #region 0046",-1),Et={href:"https://leetcode.cn/problems/permutations",target:"_blank",rel:"noopener noreferrer"},Pt=n("blockquote",null,[n("p",null,"给定一个没有重复数字的数组，返回其所有可能的全排列。")],-1),Rt=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Ft=n("p",null,"// #endregion 0046",-1),Gt=n("h2",{id:"_0047",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0047","aria-hidden":"true"},"#"),e(" 0047")],-1),Jt=n("p",null,"// #region 0047",-1),Mt={href:"https://leetcode.cn/problems/permutations-ii",target:"_blank",rel:"noopener noreferrer"},Ot=n("blockquote",null,[n("p",null,"给定一个包含重复数字的数组，返回所有不重复的全排列。")],-1),Ut=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Wt=n("p",null,"// #endregion 0047",-1),Xt=n("h2",{id:"_0048",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0048","aria-hidden":"true"},"#"),e(" 0048")],-1),Yt=n("p",null,"// #region 0048",-1),Zt={href:"https://leetcode.cn/problems/rotate-image",target:"_blank",rel:"noopener noreferrer"},$t=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),na=n("p",null,"// #endregion 0048",-1),ea=n("h2",{id:"_0049",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0049","aria-hidden":"true"},"#"),e(" 0049")],-1),sa=n("p",null,"// #region 0049",-1),ta={href:"https://leetcode.cn/problems/group-anagrams",target:"_blank",rel:"noopener noreferrer"},aa=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),oa=n("p",null,"// #endregion 0049",-1),la=n("h2",{id:"_0050",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0050","aria-hidden":"true"},"#"),e(" 0050")],-1),ia=n("p",null,"// #region 0050",-1),ra={href:"https://leetcode.cn/problems/powx-n",target:"_blank",rel:"noopener noreferrer"},ca=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),da=n("p",null,"// #endregion 0050",-1),ua=n("h2",{id:"_0051",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0051","aria-hidden":"true"},"#"),e(" 0051")],-1),pa=n("p",null,"// #region 0051",-1),ha={href:"https://leetcode.cn/problems/n-queens",target:"_blank",rel:"noopener noreferrer"},_a=n("blockquote",null,[n("p",null,"将 n 个皇后棋子，放置在 nxn 的棋盘中。'Q'代表皇后，'.'代表空位，返回所有的不同的解决方案。")],-1),ka=n("pre",null,[n("code",null,`  示例：
      输入：n = 4
      输出：[[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]
      输入：n = 1
      输出：[["Q"]]
`)],-1),ma=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),ba=n("p",null,"// #endregion 0051",-1),ga=n("h2",{id:"_0052",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0052","aria-hidden":"true"},"#"),e(" 0052")],-1),fa=n("p",null,"// #region 0052",-1),va={href:"https://leetcode.cn/problems/n-queens-ii",target:"_blank",rel:"noopener noreferrer"},ya=n("blockquote",null,[n("p",null,"返回 N 皇后问题的解决方案数量")],-1),xa=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),wa=n("p",null,"// #endregion 0052",-1),Na=n("h2",{id:"_0053",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0053","aria-hidden":"true"},"#"),e(" 0053")],-1),La=n("p",null,"// #region 0053",-1),Ia={href:"https://leetcode.cn/problems/maximum-subarray",target:"_blank",rel:"noopener noreferrer"},qa=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),ja=n("p",null,"// #endregion 0053",-1),Aa=n("h2",{id:"_0054",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0054","aria-hidden":"true"},"#"),e(" 0054")],-1),Qa=n("p",null,"// #region 0054",-1),Sa={href:"https://leetcode.cn/problems/spiral-matrix",target:"_blank",rel:"noopener noreferrer"},Ta=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Ha=n("p",null,"// #endregion 0054",-1),Ca=n("h2",{id:"_0055",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0055","aria-hidden":"true"},"#"),e(" 0055")],-1),Da=n("p",null,"// #region 0055",-1),Va={href:"https://leetcode.cn/problems/jump-game",target:"_blank",rel:"noopener noreferrer"},Ka=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),za=n("p",null,"// #endregion 0055",-1),Ba=n("h2",{id:"_0056",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0056","aria-hidden":"true"},"#"),e(" 0056")],-1),Ea=n("p",null,"// #region 0056",-1),Pa={href:"https://leetcode.cn/problems/merge-intervals",target:"_blank",rel:"noopener noreferrer"},Ra=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Fa=n("p",null,"// #endregion 0056",-1),Ga=n("h2",{id:"_0057",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0057","aria-hidden":"true"},"#"),e(" 0057")],-1),Ja=n("p",null,"// #region 0057",-1),Ma={href:"https://leetcode.cn/problems/insert-interval",target:"_blank",rel:"noopener noreferrer"},Oa=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Ua=n("p",null,"// #endregion 0057",-1),Wa=n("h2",{id:"_0058",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0058","aria-hidden":"true"},"#"),e(" 0058")],-1),Xa=n("p",null,"// #region 0058",-1),Ya={href:"https://leetcode.cn/problems/length-of-last-word",target:"_blank",rel:"noopener noreferrer"},Za=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),$a=n("p",null,"// #endregion 0058",-1),no=n("h2",{id:"_0059",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0059","aria-hidden":"true"},"#"),e(" 0059")],-1),eo=n("p",null,"// #region 0059",-1),so={href:"https://leetcode.cn/problems/spiral-matrix-ii",target:"_blank",rel:"noopener noreferrer"},to=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),ao=n("p",null,"// #endregion 0059",-1),oo=n("h2",{id:"_0060",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0060","aria-hidden":"true"},"#"),e(" 0060")],-1),lo=n("p",null,"// #region 0060",-1),io={href:"https://leetcode.cn/problems/permutation-sequence",target:"_blank",rel:"noopener noreferrer"},ro=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),co=n("p",null,"// #endregion 0060",-1),uo=n("h2",{id:"_0061",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0061","aria-hidden":"true"},"#"),e(" 0061")],-1),po=n("p",null,"// #region 0061",-1),ho={href:"https://leetcode.cn/problems/rotate-list",target:"_blank",rel:"noopener noreferrer"},_o=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),ko=n("p",null,"// #endregion 0061",-1),mo=n("h2",{id:"_0062",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0062","aria-hidden":"true"},"#"),e(" 0062")],-1),bo=n("p",null,"// #region 0062",-1),go={href:"https://leetcode.cn/problems/unique-paths",target:"_blank",rel:"noopener noreferrer"},fo=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),vo=n("p",null,"// #endregion 0062",-1),yo=n("h2",{id:"_0063",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0063","aria-hidden":"true"},"#"),e(" 0063")],-1),xo=n("p",null,"// #region 0063",-1),wo={href:"https://leetcode.cn/problems/unique-paths-ii",target:"_blank",rel:"noopener noreferrer"},No=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Lo=n("p",null,"// #endregion 0063",-1),Io=n("h2",{id:"_0064",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0064","aria-hidden":"true"},"#"),e(" 0064")],-1),qo=n("p",null,"// #region 0064",-1),jo={href:"https://leetcode.cn/problems/minimum-path-sum",target:"_blank",rel:"noopener noreferrer"},Ao=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Qo=n("p",null,"// #endregion 0064",-1),So=n("h2",{id:"_0065",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0065","aria-hidden":"true"},"#"),e(" 0065")],-1),To=n("p",null,"// #region 0065",-1),Ho={href:"https://leetcode.cn/problems/valid-number",target:"_blank",rel:"noopener noreferrer"},Co=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Do=n("p",null,"// #endregion 0065",-1),Vo=n("h2",{id:"_0066",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0066","aria-hidden":"true"},"#"),e(" 0066")],-1),Ko=n("p",null,"// #region 0066",-1),zo={href:"https://leetcode.cn/problems/plus-one",target:"_blank",rel:"noopener noreferrer"},Bo=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Eo=n("p",null,"// #endregion 0066",-1),Po=n("h2",{id:"_0067",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0067","aria-hidden":"true"},"#"),e(" 0067")],-1),Ro=n("p",null,"// #region 0067",-1),Fo={href:"https://leetcode.cn/problems/add-binary",target:"_blank",rel:"noopener noreferrer"},Go=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Jo=n("p",null,"// #endregion 0067",-1),Mo=n("h2",{id:"_0068",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0068","aria-hidden":"true"},"#"),e(" 0068")],-1),Oo=n("p",null,"// #region 0068",-1),Uo={href:"https://leetcode.cn/problems/text-justification",target:"_blank",rel:"noopener noreferrer"},Wo=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Xo=n("p",null,"// #endregion 0068",-1),Yo=n("h2",{id:"_0069",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0069","aria-hidden":"true"},"#"),e(" 0069")],-1),Zo=n("p",null,"// #region 0069",-1),$o={href:"https://leetcode.cn/problems/sqrtx",target:"_blank",rel:"noopener noreferrer"},nl=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),el=n("p",null,"// #endregion 0069",-1),sl=n("h2",{id:"_0070",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0070","aria-hidden":"true"},"#"),e(" 0070")],-1),tl=n("p",null,"// #region 0070",-1),al={href:"https://leetcode.cn/problems/climbing-stairs",target:"_blank",rel:"noopener noreferrer"},ol=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),ll=n("p",null,"// #endregion 0070",-1),il=n("h2",{id:"_0071",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0071","aria-hidden":"true"},"#"),e(" 0071")],-1),rl=n("p",null,"// #region 0071",-1),cl={href:"https://leetcode.cn/problems/simplify-path",target:"_blank",rel:"noopener noreferrer"},dl=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),ul=n("p",null,"// #endregion 0071",-1),pl=n("h2",{id:"_0072",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0072","aria-hidden":"true"},"#"),e(" 0072")],-1),hl=n("p",null,"// #region 0072",-1),_l={href:"https://leetcode.cn/problems/edit-distance",target:"_blank",rel:"noopener noreferrer"},kl=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),ml=n("p",null,"// #endregion 0072",-1),bl=n("h2",{id:"_0073",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0073","aria-hidden":"true"},"#"),e(" 0073")],-1),gl=n("p",null,"// #region 0073",-1),fl={href:"https://leetcode.cn/problems/set-matrix-zeroes",target:"_blank",rel:"noopener noreferrer"},vl=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),yl=n("p",null,"// #endregion 0073",-1),xl=n("h2",{id:"_0074",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0074","aria-hidden":"true"},"#"),e(" 0074")],-1),wl=n("p",null,"// #region 0074",-1),Nl={href:"https://leetcode.cn/problems/search-a-2d-matrix",target:"_blank",rel:"noopener noreferrer"},Ll=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Il=n("p",null,"// #endregion 0074",-1),ql=n("h2",{id:"_0075",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0075","aria-hidden":"true"},"#"),e(" 0075")],-1),jl=n("p",null,"// #region 0075",-1),Al={href:"https://leetcode.cn/problems/sort-colors",target:"_blank",rel:"noopener noreferrer"},Ql=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Sl=n("p",null,"// #endregion 0075",-1),Tl=n("h2",{id:"_0076",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0076","aria-hidden":"true"},"#"),e(" 0076")],-1),Hl=n("p",null,"// #region 0076",-1),Cl={href:"https://leetcode.cn/problems/minimum-window-substring",target:"_blank",rel:"noopener noreferrer"},Dl=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Vl=n("p",null,"// #endregion 0076",-1),Kl=n("h2",{id:"_0077",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0077","aria-hidden":"true"},"#"),e(" 0077")],-1),zl=n("p",null,"// #region 0077",-1),Bl={href:"https://leetcode.cn/problems/combinations",target:"_blank",rel:"noopener noreferrer"},El=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Pl=n("p",null,"// #endregion 0077",-1),Rl=n("h2",{id:"_0078",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0078","aria-hidden":"true"},"#"),e(" 0078")],-1),Fl=n("p",null,"// #region 0078",-1),Gl={href:"https://leetcode.cn/problems/subsets",target:"_blank",rel:"noopener noreferrer"},Jl=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Ml=n("p",null,"// #endregion 0078",-1),Ol=n("h2",{id:"_0079",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0079","aria-hidden":"true"},"#"),e(" 0079")],-1),Ul=n("p",null,"// #region 0079",-1),Wl={href:"https://leetcode.cn/problems/word-search",target:"_blank",rel:"noopener noreferrer"},Xl=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Yl=n("p",null,"// #endregion 0079",-1),Zl=n("h2",{id:"_0080",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0080","aria-hidden":"true"},"#"),e(" 0080")],-1),$l=n("p",null,"// #region 0080",-1),ni={href:"https://leetcode.cn/problems/remove-duplicates-from-sorted-array-ii",target:"_blank",rel:"noopener noreferrer"},ei=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),si=n("p",null,"// #endregion 0080",-1),ti=n("h2",{id:"_0081",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0081","aria-hidden":"true"},"#"),e(" 0081")],-1),ai=n("p",null,"// #region 0081",-1),oi={href:"https://leetcode.cn/problems/search-in-rotated-sorted-array-ii",target:"_blank",rel:"noopener noreferrer"},li=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),ii=n("p",null,"// #endregion 0081",-1),ri=n("h2",{id:"_0082",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0082","aria-hidden":"true"},"#"),e(" 0082")],-1),ci=n("p",null,"// #region 0082",-1),di={href:"https://leetcode.cn/problems/remove-duplicates-from-sorted-list-ii",target:"_blank",rel:"noopener noreferrer"},ui=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),pi=n("p",null,"// #endregion 0082",-1),hi=n("h2",{id:"_0083",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0083","aria-hidden":"true"},"#"),e(" 0083")],-1),_i=n("p",null,"// #region 0083",-1),ki={href:"https://leetcode.cn/problems/remove-duplicates-from-sorted-list",target:"_blank",rel:"noopener noreferrer"},mi=n("blockquote",null,[n("p",null,"给定一个已排序的链表，删除链表中的重复元素。")],-1),bi=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),gi=n("p",null,"// #endregion 0083",-1),fi=n("h2",{id:"_0084",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0084","aria-hidden":"true"},"#"),e(" 0084")],-1),vi=n("p",null,"// #region 0084",-1),yi={href:"https://leetcode.cn/problems/largest-rectangle-in-histogram",target:"_blank",rel:"noopener noreferrer"},xi=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),wi=n("p",null,"// #endregion 0084",-1),Ni=n("h2",{id:"_0085",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0085","aria-hidden":"true"},"#"),e(" 0085")],-1),Li=n("p",null,"// #region 0085",-1),Ii={href:"https://leetcode.cn/problems/maximal-rectangle",target:"_blank",rel:"noopener noreferrer"},qi=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),ji=n("p",null,"// #endregion 0085",-1),Ai=n("h2",{id:"_0086",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0086","aria-hidden":"true"},"#"),e(" 0086")],-1),Qi=n("p",null,"// #region 0086",-1),Si={href:"https://leetcode.cn/problems/partition-list",target:"_blank",rel:"noopener noreferrer"},Ti=n("blockquote",null,[n("p",null,"根据给定值将链表元素分割为小于和大于等于该值的两部分。并保持节点元素相对位置。")],-1),Hi={class:"hint-container details"},Ci=n("summary",null,"💡",-1),Di=n("p",null,"【思路】将原链表按照值大小分隔成两条链表，最后合并成结果链表。",-1),Vi=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token doc-comment comment"},[e(`/**
 * Definition for singly-linked list.
 * public class ListNode `),n("span",{class:"token punctuation"},"{"),e(`
 *     int val;
 *     ListNode next;
 *     ListNode() `),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),e(`
 *     ListNode(int val) `),n("span",{class:"token punctuation"},"{"),e(" this.val = val; "),n("span",{class:"token punctuation"},"}"),e(`
 *     ListNode(int val, ListNode next) `),n("span",{class:"token punctuation"},"{"),e(" this.val = val; this.next = next; "),n("span",{class:"token punctuation"},"}"),e(`
 * `),n("span",{class:"token punctuation"},"}"),e(`
 */`)]),e(`
`),n("span",{class:"token keyword"},"class"),e(),n("span",{class:"token class-name"},"Solution"),e(),n("span",{class:"token punctuation"},"{"),e(`
    `),n("span",{class:"token keyword"},"public"),e(),n("span",{class:"token class-name"},"ListNode"),e(),n("span",{class:"token function"},"partition"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"ListNode"),e(" head"),n("span",{class:"token punctuation"},","),e(),n("span",{class:"token keyword"},"int"),e(" x"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
        `),n("span",{class:"token class-name"},"ListNode"),e(" l1 "),n("span",{class:"token operator"},"="),e(),n("span",{class:"token keyword"},"new"),e(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),e(),n("span",{class:"token comment"},"// 小于 x 链表"),e(`
        `),n("span",{class:"token class-name"},"ListNode"),e(" l2 "),n("span",{class:"token operator"},"="),e(),n("span",{class:"token keyword"},"new"),e(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),e(),n("span",{class:"token comment"},"// 大于 x 链表"),e(`
        `),n("span",{class:"token class-name"},"ListNode"),e(" p1 "),n("span",{class:"token operator"},"="),e(" l1"),n("span",{class:"token punctuation"},";"),e(`
        `),n("span",{class:"token class-name"},"ListNode"),e(" p2 "),n("span",{class:"token operator"},"="),e(" l2"),n("span",{class:"token punctuation"},";"),e(`
        `),n("span",{class:"token comment"},"// 遍历链表，按照大小将原链表分成两条链表，分解时需要注意分解节点与原链表的断开问题。"),e(`
        `),n("span",{class:"token class-name"},"ListNode"),e(" p "),n("span",{class:"token operator"},"="),e(" head"),n("span",{class:"token punctuation"},";"),e(`
        `),n("span",{class:"token keyword"},"while"),e(),n("span",{class:"token punctuation"},"("),e(" p "),n("span",{class:"token operator"},"!="),e(),n("span",{class:"token keyword"},"null"),e(),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
            `),n("span",{class:"token keyword"},"if"),e(),n("span",{class:"token punctuation"},"("),e(" p"),n("span",{class:"token punctuation"},"."),e("val "),n("span",{class:"token operator"},"<"),e(" x "),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
                p1`),n("span",{class:"token punctuation"},"."),e("next "),n("span",{class:"token operator"},"="),e(" p"),n("span",{class:"token punctuation"},";"),e("    "),n("span",{class:"token comment"},"// 将节点添加到小于 x 链表"),e(`
                p `),n("span",{class:"token operator"},"="),e(" p"),n("span",{class:"token punctuation"},"."),e("next"),n("span",{class:"token punctuation"},";"),e("     "),n("span",{class:"token comment"},"// 链表指针前进"),e(`
                p1 `),n("span",{class:"token operator"},"="),e(" p1"),n("span",{class:"token punctuation"},"."),e("next"),n("span",{class:"token punctuation"},";"),e("   "),n("span",{class:"token comment"},"// 小于 x 链表指针前进"),e(`
                p1`),n("span",{class:"token punctuation"},"."),e("next "),n("span",{class:"token operator"},"="),e(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),e(),n("span",{class:"token comment"},"// 并将小于 x 链表与原链表断开"),e(`
            `),n("span",{class:"token punctuation"},"}"),e(),n("span",{class:"token keyword"},"else"),e(),n("span",{class:"token punctuation"},"{"),e(`
                p2`),n("span",{class:"token punctuation"},"."),e("next "),n("span",{class:"token operator"},"="),e(" p"),n("span",{class:"token punctuation"},";"),e(`    
                p `),n("span",{class:"token operator"},"="),e(" p"),n("span",{class:"token punctuation"},"."),e("next"),n("span",{class:"token punctuation"},";"),e(`
                p2 `),n("span",{class:"token operator"},"="),e(" p2"),n("span",{class:"token punctuation"},"."),e("next"),n("span",{class:"token punctuation"},";"),e(`
                p2`),n("span",{class:"token punctuation"},"."),e("next "),n("span",{class:"token operator"},"="),e(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),e(`
            `),n("span",{class:"token punctuation"},"}"),e(`
        `),n("span",{class:"token punctuation"},"}"),e(`
        `),n("span",{class:"token comment"},"// 合并成一条"),e(`
        p1`),n("span",{class:"token punctuation"},"."),e("next "),n("span",{class:"token operator"},"="),e(" l2"),n("span",{class:"token punctuation"},"."),e("next"),n("span",{class:"token punctuation"},";"),e(`
        `),n("span",{class:"token keyword"},"return"),e(" l1"),n("span",{class:"token punctuation"},"."),e("next"),n("span",{class:"token punctuation"},";"),e(` 
    `),n("span",{class:"token punctuation"},"}"),e(`
`),n("span",{class:"token punctuation"},"}"),e(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Ki=n("div",{class:"language-swift line-numbers-mode","data-ext":"swift"},[n("pre",{class:"language-swift"},[n("code",null,[n("span",{class:"token comment"},`/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.next = nil
 *     }
 * }
 */`),e(`
`),n("span",{class:"token keyword"},"class"),e(),n("span",{class:"token class-name"},"Solution"),e(),n("span",{class:"token punctuation"},"{"),e(`
    `),n("span",{class:"token keyword"},"func"),e(),n("span",{class:"token function-definition function"},"partition"),n("span",{class:"token punctuation"},"("),n("span",{class:"token omit keyword"},"_"),e(" head"),n("span",{class:"token punctuation"},":"),e(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},","),e(),n("span",{class:"token omit keyword"},"_"),e(" x"),n("span",{class:"token punctuation"},":"),e(),n("span",{class:"token class-name"},"Int"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token operator"},"->"),e(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token operator"},"?"),e(),n("span",{class:"token punctuation"},"{"),e(`
        `),n("span",{class:"token keyword"},"let"),e(" minHead "),n("span",{class:"token operator"},"="),e(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),e(`
        `),n("span",{class:"token keyword"},"var"),e(" min"),n("span",{class:"token punctuation"},":"),e(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token operator"},"?"),e(),n("span",{class:"token operator"},"="),e(` minHead
        `),n("span",{class:"token keyword"},"let"),e(" maxHead "),n("span",{class:"token operator"},"="),e(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),e(`
        `),n("span",{class:"token keyword"},"var"),e(" max"),n("span",{class:"token punctuation"},":"),e(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token operator"},"?"),e(),n("span",{class:"token operator"},"="),e(` maxHead
        `),n("span",{class:"token keyword"},"var"),e(" node "),n("span",{class:"token operator"},"="),e(` head
        `),n("span",{class:"token comment"},"// 根据值大小创建了两条新链表，最后合并。这样不需要处理链表断开的问题。"),e(`
        `),n("span",{class:"token keyword"},"while"),e(" node "),n("span",{class:"token operator"},"!="),e(),n("span",{class:"token nil constant"},"nil"),e(),n("span",{class:"token punctuation"},"{"),e(`
            `),n("span",{class:"token keyword"},"guard"),e(),n("span",{class:"token keyword"},"let"),e(" n "),n("span",{class:"token operator"},"="),e(" node  "),n("span",{class:"token keyword"},"else"),e(),n("span",{class:"token punctuation"},"{"),e(),n("span",{class:"token keyword"},"break"),e(),n("span",{class:"token punctuation"},"}"),e(`
            `),n("span",{class:"token keyword"},"if"),e(" n"),n("span",{class:"token punctuation"},"."),e("val "),n("span",{class:"token operator"},"<"),e(" x "),n("span",{class:"token punctuation"},"{"),e(`
                min`),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),e("next "),n("span",{class:"token operator"},"="),e(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token punctuation"},"("),e("n"),n("span",{class:"token punctuation"},"."),e("val"),n("span",{class:"token punctuation"},")"),e(`
                min `),n("span",{class:"token operator"},"="),e(" min"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),e(`next
            `),n("span",{class:"token punctuation"},"}"),e(),n("span",{class:"token keyword"},"else"),e(),n("span",{class:"token punctuation"},"{"),e(`
                max`),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),e("next "),n("span",{class:"token operator"},"="),e(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token punctuation"},"("),e("n"),n("span",{class:"token punctuation"},"."),e("val"),n("span",{class:"token punctuation"},")"),e(`
                max `),n("span",{class:"token operator"},"="),e(" max"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),e(`next
            `),n("span",{class:"token punctuation"},"}"),e(`
            node `),n("span",{class:"token operator"},"="),e(" n"),n("span",{class:"token punctuation"},"."),e(`next
        `),n("span",{class:"token punctuation"},"}"),e(`
        min`),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),e("next "),n("span",{class:"token operator"},"="),e(" maxHead"),n("span",{class:"token punctuation"},"."),e(`next
        `),n("span",{class:"token keyword"},"return"),e(" minHead"),n("span",{class:"token punctuation"},"."),e(`next
    `),n("span",{class:"token punctuation"},"}"),e(`
`),n("span",{class:"token punctuation"},"}"),e(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),zi=n("p",null,"// #endregion 0086",-1),Bi=n("h2",{id:"_0087",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0087","aria-hidden":"true"},"#"),e(" 0087")],-1),Ei=n("p",null,"// #region 0087",-1),Pi={href:"https://leetcode.cn/problems/scramble-string",target:"_blank",rel:"noopener noreferrer"},Ri=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Fi=n("p",null,"// #endregion 0087",-1),Gi=n("h2",{id:"_0088",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0088","aria-hidden":"true"},"#"),e(" 0088")],-1),Ji=n("p",null,"// #region 0088",-1),Mi={href:"https://leetcode.cn/problems/merge-sorted-array",target:"_blank",rel:"noopener noreferrer"},Oi=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Ui=n("p",null,"// #endregion 0088",-1),Wi=n("h2",{id:"_0089",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0089","aria-hidden":"true"},"#"),e(" 0089")],-1),Xi=n("p",null,"// #region 0089",-1),Yi={href:"https://leetcode.cn/problems/gray-code",target:"_blank",rel:"noopener noreferrer"},Zi=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),$i=n("p",null,"// #endregion 0089",-1),nr=n("h2",{id:"_0090",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0090","aria-hidden":"true"},"#"),e(" 0090")],-1),er=n("p",null,"// #region 0090",-1),sr={href:"https://leetcode.cn/problems/subsets-ii",target:"_blank",rel:"noopener noreferrer"},tr=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),ar=n("p",null,"// #endregion 0090",-1),or=n("h2",{id:"_0091",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0091","aria-hidden":"true"},"#"),e(" 0091")],-1),lr=n("p",null,"// #region 0091",-1),ir={href:"https://leetcode.cn/problems/decode-ways",target:"_blank",rel:"noopener noreferrer"},rr=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),cr=n("p",null,"// #endregion 0091",-1),dr=n("h2",{id:"_0092",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0092","aria-hidden":"true"},"#"),e(" 0092")],-1),ur=n("p",null,"// #region 0092",-1),pr={href:"https://leetcode.cn/problems/reverse-linked-list-ii/",target:"_blank",rel:"noopener noreferrer"},hr=n("blockquote",null,[n("p",null,"通过单链表的头结点 head 和两个整数 left 和 right (left <= right)，反转链表从 left 到 right 位置的链表节点，返回反转后的链表。")],-1),_r=n("details",{class:"hint-container details"},[n("summary",null,"💡"),n("blockquote",null,[n("p",null,"如果使用迭代，上面两个题应该怎么处理？")])],-1),kr=n("p",null,"// #endregion 0092",-1),mr=n("h2",{id:"_0093",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0093","aria-hidden":"true"},"#"),e(" 0093")],-1),br=n("p",null,"// #region 0093",-1),gr={href:"https://leetcode.cn/problems/restore-ip-addresses",target:"_blank",rel:"noopener noreferrer"},fr=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),vr=n("p",null,"// #endregion 0093",-1),yr=n("h2",{id:"_0094",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0094","aria-hidden":"true"},"#"),e(" 0094")],-1),xr=n("p",null,"// #region 0094",-1),wr={href:"https://leetcode.cn/problems/binary-tree-inorder-traversal",target:"_blank",rel:"noopener noreferrer"},Nr=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Lr=n("p",null,"// #endregion 0094",-1),Ir=n("h2",{id:"_0095",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0095","aria-hidden":"true"},"#"),e(" 0095")],-1),qr=n("p",null,"// #region 0095",-1),jr={href:"https://leetcode.cn/problems/unique-binary-search-trees-ii",target:"_blank",rel:"noopener noreferrer"},Ar=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Qr=n("p",null,"// #endregion 0095",-1),Sr=n("h2",{id:"_0096",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0096","aria-hidden":"true"},"#"),e(" 0096")],-1),Tr=n("p",null,"// #region 0096",-1),Hr={href:"https://leetcode.cn/problems/unique-binary-search-trees",target:"_blank",rel:"noopener noreferrer"},Cr=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Dr=n("p",null,"// #endregion 0096",-1),Vr=n("h2",{id:"_0097",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0097","aria-hidden":"true"},"#"),e(" 0097")],-1),Kr=n("p",null,"// #region 0097",-1),zr={href:"https://leetcode.cn/problems/interleaving-string",target:"_blank",rel:"noopener noreferrer"},Br=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Er=n("p",null,"// #endregion 0097",-1),Pr=n("h2",{id:"_0098",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0098","aria-hidden":"true"},"#"),e(" 0098")],-1),Rr=n("p",null,"// #region 0098",-1),Fr={href:"https://leetcode.cn/problems/validate-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},Gr=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Jr=n("p",null,"// #endregion 0098",-1),Mr=n("h2",{id:"_0099",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0099","aria-hidden":"true"},"#"),e(" 0099")],-1),Or=n("p",null,"// #region 0099",-1),Ur={href:"https://leetcode.cn/problems/recover-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},Wr=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Xr=n("p",null,"// #endregion 0099",-1);function Yr(Zr,$r){const t=r("ExternalLinkIcon"),i=r("CodeTabs");return u(),p("div",null,[h(" more "),k,n("ul",null,[n("li",null,[n("a",m,[e("🟢 1 - 两数之和"),s(t)])])]),b,g,f,v,n("ul",null,[n("li",null,[n("a",y,[e("🟠 2 - 两数相加"),s(t)])])]),x,w,N,L,n("ul",null,[n("li",null,[n("a",I,[e("🟠 3 - 无重复字符的最长子串"),s(t)])])]),q,j,A,Q,n("ul",null,[n("li",null,[n("a",S,[e("🔴 4 - 寻找两个正序数组的中位数"),s(t)])])]),T,H,C,D,n("ul",null,[n("li",null,[n("a",V,[e("🟠 5 - 最长回文子串"),s(t)]),K])]),z,B,E,P,n("ul",null,[n("li",null,[n("a",R,[e("🟠 6 - N 字形变换"),s(t)])])]),F,G,J,M,n("ul",null,[n("li",null,[n("a",O,[e("🟠 7 - 整数反转"),s(t)])])]),U,W,X,Y,n("ul",null,[n("li",null,[n("a",Z,[e("🟠 8 - 字符串转换整数 (atoi)"),s(t)])])]),$,nn,en,sn,n("ul",null,[n("li",null,[n("a",tn,[e("🟢 9 - 回文数"),s(t)])])]),an,on,ln,rn,n("ul",null,[n("li",null,[n("a",cn,[e("🔴 10 - 正则表达式匹配"),s(t)])])]),dn,un,pn,hn,n("ul",null,[n("li",null,[n("a",_n,[e("🟠 11 - 盛最多水的容器"),s(t)])])]),kn,mn,bn,gn,n("ul",null,[n("li",null,[n("a",fn,[e("🟠 12 - 整数转罗马数字"),s(t)])])]),vn,yn,xn,wn,n("ul",null,[n("li",null,[n("a",Nn,[e("🟢 13 - 罗马数字转整数"),s(t)])])]),Ln,In,qn,jn,n("ul",null,[n("li",null,[n("a",An,[e("🟢 14 - 最长公共前缀"),s(t)])])]),Qn,Sn,Tn,Hn,n("ul",null,[n("li",null,[n("a",Cn,[e("🟠 15 - 三数之和"),s(t)])])]),Dn,Vn,Kn,zn,n("ul",null,[n("li",null,[n("a",Bn,[e("🟠 16 - 最接近的三数之和"),s(t)])])]),En,Pn,Rn,Fn,n("ul",null,[n("li",null,[n("a",Gn,[e("🟠 17 - 电话号码的字母组合"),s(t)])])]),Jn,Mn,On,Un,n("ul",null,[n("li",null,[n("a",Wn,[e("🟠 18 - 四数之和"),s(t)])])]),Xn,Yn,Zn,$n,n("ul",null,[n("li",null,[n("a",ne,[e("🟢 19 - 删除链表的倒数第 N 个结点"),s(t)]),ee])]),se,te,ae,oe,n("ul",null,[n("li",null,[n("a",le,[e("🟢 20 - 有效的括号"),s(t)])])]),ie,re,ce,de,n("ul",null,[n("li",null,[n("a",ue,[e("🟢 21 - 合并两个有序链表"),s(t)]),pe])]),n("details",he,[_e,ke,s(i,{id:"411",data:[{id:"java"},{id:"swift"}]},{title0:a(({value:o,isActive:l})=>[e("java")]),title1:a(({value:o,isActive:l})=>[e("swift")]),tab0:a(({value:o,isActive:l})=>[me]),tab1:a(({value:o,isActive:l})=>[be]),_:1})]),ge,fe,ve,n("ul",null,[n("li",null,[n("a",ye,[e("🟠 22 - 括号生成"),s(t)])])]),xe,we,Ne,Le,n("ul",null,[n("li",null,[n("a",Ie,[e("🔴 23 - 合并 K 个升序链表"),s(t)]),qe])]),n("details",je,[Ae,Qe,Se,Te,s(i,{id:"469",data:[{id:"解法1"}]},{title0:a(({value:o,isActive:l})=>[e("解法1")]),tab0:a(({value:o,isActive:l})=>[He]),_:1})]),Ce,De,Ve,n("ul",null,[n("li",null,[n("a",Ke,[e("🟠 24 - 两两交换链表中的节点"),s(t)])])]),ze,Be,Ee,Pe,n("ul",null,[n("li",null,[n("a",Re,[e("🔴 - K 个一组翻转链表"),s(t)])])]),Fe,Ge,Je,Me,n("ul",null,[n("li",null,[n("a",Oe,[e("🟢 26 - 删除有序数组中的重复项"),s(t)]),Ue])]),We,Xe,Ye,Ze,n("ul",null,[n("li",null,[n("a",$e,[e("🟢 27 - 移除元素"),s(t)]),ns])]),es,ss,ts,as,n("ul",null,[n("li",null,[n("a",os,[e("🟢 28 - 找出字符串中第一个匹配项的下标"),s(t)])])]),ls,is,rs,cs,n("ul",null,[n("li",null,[n("a",ds,[e("🟠 29 - 两数相除"),s(t)])])]),us,ps,hs,_s,n("ul",null,[n("li",null,[n("a",ks,[e("🔴 30 - 串联所有单词的子串"),s(t)])])]),ms,bs,gs,fs,n("ul",null,[n("li",null,[n("a",vs,[e("🟠 31 - 下一个排列"),s(t)])])]),ys,xs,ws,Ns,n("ul",null,[n("li",null,[n("a",Ls,[e("🔴 32 - 最长有效括号"),s(t)])])]),Is,qs,js,As,n("ul",null,[n("li",null,[n("a",Qs,[e("🟠 33 - 搜索旋转排序数组"),s(t)])])]),Ss,Ts,Hs,Cs,n("ul",null,[n("li",null,[n("a",Ds,[e("🟢 34 - 在排序数组中查找元素的第一个和最后一个位置"),s(t)]),Vs])]),Ks,n("ul",null,[n("li",null,[n("a",zs,[e("🟢 35 - 搜索插入位置"),s(t)]),Bs])]),Es,Ps,Rs,Fs,n("ul",null,[n("li",null,[n("a",Gs,[e("🟠 36 - 有效的数独"),s(t)])])]),Js,Ms,Os,Us,n("ul",null,[n("li",null,[n("a",Ws,[e("🔴 37 - 解数独"),s(t)])])]),Xs,Ys,Zs,$s,n("ul",null,[n("li",null,[n("a",nt,[e("🟠 38 - 外观数列"),s(t)])])]),et,st,tt,at,n("ul",null,[n("li",null,[n("a",ot,[e("🟠 39 - 组合总和"),s(t)])])]),lt,it,rt,ct,n("ul",null,[n("li",null,[n("a",dt,[e("🟠 40 - 组合总和 II"),s(t)])])]),ut,pt,ht,_t,n("ul",null,[n("li",null,[n("a",kt,[e("🔴 41 - 缺失的第一个正数"),s(t)])])]),mt,bt,gt,ft,n("ul",null,[n("li",null,[n("a",vt,[e("🔴 42 - 接雨水"),s(t)])])]),yt,xt,wt,Nt,n("ul",null,[n("li",null,[n("a",Lt,[e("🟠 43 - 字符串相乘"),s(t)])])]),It,qt,jt,At,n("ul",null,[n("li",null,[n("a",Qt,[e("🔴 44 - 通配符匹配"),s(t)])])]),St,Tt,Ht,Ct,n("ul",null,[n("li",null,[n("a",Dt,[e("🟠 45 - 跳跃游戏 II"),s(t)])])]),Vt,Kt,zt,Bt,n("ul",null,[n("li",null,[n("a",Et,[e("🟠 46 - 全排列"),s(t)]),Pt])]),Rt,Ft,Gt,Jt,n("ul",null,[n("li",null,[n("a",Mt,[e("🟠 47 - 全排列 II"),s(t)]),Ot])]),Ut,Wt,Xt,Yt,n("ul",null,[n("li",null,[n("a",Zt,[e("🟠 48 - 旋转图像"),s(t)])])]),$t,na,ea,sa,n("ul",null,[n("li",null,[n("a",ta,[e("🟠 49 - 字母异位词分组"),s(t)])])]),aa,oa,la,ia,n("ul",null,[n("li",null,[n("a",ra,[e("🟠 50 - Pow(x, n)"),s(t)])])]),ca,da,ua,pa,n("ul",null,[n("li",null,[n("p",null,[n("a",ha,[e("🔴 51 - N 皇后"),s(t)])]),_a,ka])]),ma,ba,ga,fa,n("ul",null,[n("li",null,[n("a",va,[e("🔴 52 - N 皇后 II"),s(t)]),ya])]),xa,wa,Na,La,n("ul",null,[n("li",null,[n("a",Ia,[e("🟠 53 - 最大子数组和"),s(t)])])]),qa,ja,Aa,Qa,n("ul",null,[n("li",null,[n("a",Sa,[e("🟠 54 - 螺旋矩阵"),s(t)])])]),Ta,Ha,Ca,Da,n("ul",null,[n("li",null,[n("a",Va,[e("🟠 55 - 跳跃游戏"),s(t)])])]),Ka,za,Ba,Ea,n("ul",null,[n("li",null,[n("a",Pa,[e("🟠 56 - 合并区间"),s(t)])])]),Ra,Fa,Ga,Ja,n("ul",null,[n("li",null,[n("a",Ma,[e("🟠 57 - 插入区间"),s(t)])])]),Oa,Ua,Wa,Xa,n("ul",null,[n("li",null,[n("a",Ya,[e("🟢 58 - 最后一个单词的长度"),s(t)])])]),Za,$a,no,eo,n("ul",null,[n("li",null,[n("a",so,[e("🟠 59 - 螺旋矩阵 II"),s(t)])])]),to,ao,oo,lo,n("ul",null,[n("li",null,[n("a",io,[e("🔴 60 - 排列序列"),s(t)])])]),ro,co,uo,po,n("ul",null,[n("li",null,[n("a",ho,[e("🟠 61 - 旋转链表"),s(t)])])]),_o,ko,mo,bo,n("ul",null,[n("li",null,[n("a",go,[e("🟠 62 - 不同路径"),s(t)])])]),fo,vo,yo,xo,n("ul",null,[n("li",null,[n("a",wo,[e("🟠 63 - 不同路径 II"),s(t)])])]),No,Lo,Io,qo,n("ul",null,[n("li",null,[n("a",jo,[e("🟠 64 - 最小路径和"),s(t)])])]),Ao,Qo,So,To,n("ul",null,[n("li",null,[n("a",Ho,[e("🔴 65 - 有效数字"),s(t)])])]),Co,Do,Vo,Ko,n("ul",null,[n("li",null,[n("a",zo,[e("🟢 66 - 加一"),s(t)])])]),Bo,Eo,Po,Ro,n("ul",null,[n("li",null,[n("a",Fo,[e("🟢 67 - 二进制求和"),s(t)])])]),Go,Jo,Mo,Oo,n("ul",null,[n("li",null,[n("a",Uo,[e("🔴 68 - 文本左右对齐"),s(t)])])]),Wo,Xo,Yo,Zo,n("ul",null,[n("li",null,[n("a",$o,[e("🟢 69 - x 的平方根"),s(t)])])]),nl,el,sl,tl,n("ul",null,[n("li",null,[n("a",al,[e("🟢 70 - 爬楼梯"),s(t)])])]),ol,ll,il,rl,n("ul",null,[n("li",null,[n("a",cl,[e("🟠 71 - 简化路径"),s(t)])])]),dl,ul,pl,hl,n("ul",null,[n("li",null,[n("a",_l,[e("🔴 72 - 编辑距离"),s(t)])])]),kl,ml,bl,gl,n("ul",null,[n("li",null,[n("a",fl,[e("🟠 73 - 矩阵置零"),s(t)])])]),vl,yl,xl,wl,n("ul",null,[n("li",null,[n("a",Nl,[e("🟠 74 - 搜索二维矩阵"),s(t)])])]),Ll,Il,ql,jl,n("ul",null,[n("li",null,[n("a",Al,[e("🟠 75 - 颜色分类"),s(t)])])]),Ql,Sl,Tl,Hl,n("ul",null,[n("li",null,[n("a",Cl,[e("🔴 76 - 最小覆盖子串"),s(t)])])]),Dl,Vl,Kl,zl,n("ul",null,[n("li",null,[n("a",Bl,[e("🟠 77 - 组合"),s(t)])])]),El,Pl,Rl,Fl,n("ul",null,[n("li",null,[n("a",Gl,[e("🟠 78 - 子集"),s(t)])])]),Jl,Ml,Ol,Ul,n("ul",null,[n("li",null,[n("a",Wl,[e("🟠 79 - 单词搜索"),s(t)])])]),Xl,Yl,Zl,$l,n("ul",null,[n("li",null,[n("a",ni,[e("🟠 80 - 删除有序数组中的重复项 II"),s(t)])])]),ei,si,ti,ai,n("ul",null,[n("li",null,[n("a",oi,[e("🟠 81 - 搜索旋转排序数组 II"),s(t)])])]),li,ii,ri,ci,n("ul",null,[n("li",null,[n("a",di,[e("🟠 82 - 删除排序链表中的重复元素 II"),s(t)])])]),ui,pi,hi,_i,n("ul",null,[n("li",null,[n("a",ki,[e("🟠 83 - 删除排序链表中的重复元素"),s(t)]),mi])]),bi,gi,fi,vi,n("ul",null,[n("li",null,[n("a",yi,[e("🔴 84 - 柱状图中最大的矩形"),s(t)])])]),xi,wi,Ni,Li,n("ul",null,[n("li",null,[n("a",Ii,[e("🔴 85 - 最大矩形"),s(t)])])]),qi,ji,Ai,Qi,n("ul",null,[n("li",null,[n("a",Si,[e("🟠 86 - 分隔链表"),s(t)]),Ti])]),n("details",Hi,[Ci,Di,s(i,{id:"1663",data:[{id:"java"},{id:"swift"}]},{title0:a(({value:o,isActive:l})=>[e("java")]),title1:a(({value:o,isActive:l})=>[e("swift")]),tab0:a(({value:o,isActive:l})=>[Vi]),tab1:a(({value:o,isActive:l})=>[Ki]),_:1})]),zi,Bi,Ei,n("ul",null,[n("li",null,[n("a",Pi,[e("🔴 87 - 扰乱字符串"),s(t)])])]),Ri,Fi,Gi,Ji,n("ul",null,[n("li",null,[n("a",Mi,[e("🟢 88 - 合并两个有序数组"),s(t)])])]),Oi,Ui,Wi,Xi,n("ul",null,[n("li",null,[n("a",Yi,[e("🟠 89 - 格雷编码"),s(t)])])]),Zi,$i,nr,er,n("ul",null,[n("li",null,[n("a",sr,[e("🟠 90 - 子集 II"),s(t)])])]),tr,ar,or,lr,n("ul",null,[n("li",null,[n("a",ir,[e("🟠 91 - 解码方法"),s(t)])])]),rr,cr,dr,ur,n("ul",null,[n("li",null,[n("a",pr,[e("🟠 92 - 反转链表 II"),s(t)]),hr])]),_r,kr,mr,br,n("ul",null,[n("li",null,[n("a",gr,[e("🟠 93 - 复原 IP 地址"),s(t)])])]),fr,vr,yr,xr,n("ul",null,[n("li",null,[n("a",wr,[e("🟢 94 - 二叉树的中序遍历"),s(t)])])]),Nr,Lr,Ir,qr,n("ul",null,[n("li",null,[n("a",jr,[e("🟠 95 - 不同的二叉搜索树 II"),s(t)])])]),Ar,Qr,Sr,Tr,n("ul",null,[n("li",null,[n("a",Hr,[e("🟠 96 - 不同的二叉搜索树"),s(t)])])]),Cr,Dr,Vr,Kr,n("ul",null,[n("li",null,[n("a",zr,[e("🟠 97 - 交错字符串"),s(t)])])]),Br,Er,Pr,Rr,n("ul",null,[n("li",null,[n("a",Fr,[e("🟠 98 - 验证二叉搜索树"),s(t)])])]),Gr,Jr,Mr,Or,n("ul",null,[n("li",null,[n("a",Ur,[e("🟠 99 - 恢复二叉搜索树"),s(t)])])]),Wr,Xr])}const sc=d(_,[["render",Yr],["__file","0x0000.html.vue"]]);export{sc as default};
