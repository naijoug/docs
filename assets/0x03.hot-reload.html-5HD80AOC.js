import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as t,c as a,a as o,f as d}from"./app-W9d4CDuQ.js";const i={},r=d('<h3 id="❓aot-vs-jit" tabindex="-1"><a class="header-anchor" href="#❓aot-vs-jit" aria-hidden="true">#</a> ❓<code>AOT</code> vs <code>JIT</code></h3><details class="hint-container details"><summary>💡</summary><p><code>AOT</code>（Ahead-of-time Compilation）和<code>JIT</code>（Just-In-Time Compilation）是两种编译方式，它们都用于将高级语言编译为可以直接执行的机器语言，但编译时间和方式有所不同。</p><ol><li><p>AOT（Ahead-of-time Compilation）： Ahead-of-time，字面意思就是提前。AOT 会在应用打包时将所有的代码编译为机器代码，即一次性事先全部编译。AOT 的优点是运行时可以直接执行，不会有编译的额外开销，有更快的启动速度、更高的执行效率，更小的内存占用等优势。但是，AOT 直接编译机器码，所以对平台有依赖，即不同的平台需要编译不同的二进制程序，并且修改和debug相对麻烦。</p></li><li><p>JIT（Just-In-Time Compilation）： JIT 是一种“动态编译”技术，它并不是在打包时就完成编译，而是在运行时根据需要将某些热点代码（频繁执行或重要性很高的代码）编译成机器码后缓存起来，下次运行直接调用，大大减少了解释执行的次数，提高了执行效率。并且，因为可以在运行期进行优化，所以某些性能优化策略在JIT下会表现得更好。问题在于对于非热点代码执行效率相较AOT要低，因其额外的编译时间开销，可能会导致更慢的应用程序启动和更大的内存占用。</p></li></ol><p>在Flutter中，AOT编译主要用于生产环境，以获取更好的性能和更小的体积。而JIT编译则在开发阶段和Debug模式下使用，以提高开发效率和便于调试。</p></details><ul><li>AOT(Ahead Of Time) : 提前编译或运行前编译，程序运行前已经编译成对应平台的机器码，可以直接运行。</li><li>JIT(Just In Time) : 即时编译或运行时编译，程序运行时编译成运行平台的机器码，提高运行效率。</li></ul><h3 id="❓hot-reload-vs-hot-restart-vs-hot-update" tabindex="-1"><a class="header-anchor" href="#❓hot-reload-vs-hot-restart-vs-hot-update" aria-hidden="true">#</a> ❓<code>Hot Reload</code> vs <code>Hot Restart</code> vs <code>Hot Update</code></h3><details class="hint-container details"><summary>💡</summary><p><code>Hot Reload</code>（热重载）：在Flutter中，热重载使得您在不停止应用程序的情况下注入更新的源代码文件，Flutter框架会在运行时接收更改并重新构建视图。热重载在更改代码后几乎实时更新用户界面，大大提升了开发效率。</p><p><code>Hot Restart</code>（热重启）：与热重载相比，热重启会将应用程序重置为其初始状态，但不需要重新编译整个应用程序。主要用于主动更改全局状态或应用程序实现的情况。与热重载相比，它花费的时间要多一些，但仍然比完全重启应用程序要短。</p><p><code>Hot Update</code>（热更新）：热更新主要是指在应用上线之后，对应用进行更新升级，而无需用户去应用市场重新下载安装。主要是通过下载差异包，用新包覆盖旧包中需要更新的部分实现。热更新可以及时修复线上问题，并且不需要审核。但是由于不同地区的政策法规问题，热更新并不是在所有平台上都可以使用。</p><p>以上三种概念的主要区别在于应用的范围和上下文，热重载和热重启主要针对开发者在开发阶段，而热更新主要针对的是应用发布后的版本更新。</p></details><h3 id="❓flutter-是如何实现热重载的" tabindex="-1"><a class="header-anchor" href="#❓flutter-是如何实现热重载的" aria-hidden="true">#</a> ❓<code>Flutter</code> 是如何实现热重载的</h3><details class="hint-container details"><summary>💡</summary><p>Flutter 的热重载能力，主要由两部分构成：Dart 语言自身支持的热重载能力和 Flutter 的 Widgets 框架。</p><ol><li><p>Dart 语言：Dart 语言本身支持即时（JIT）编译，使得开发者可以在程序运行时修改代码。一旦代码发生变化，Dart 的即时编译器就会编译这些变化的代码，然后把新生成的字节码直接插入到正在运行的 Dart 虚拟机中。</p></li><li><p>Flutter的Widgets框架：Flutter框架通过Widget和Element两个对象分别负责描述界面和实际构建界面，在热重载过程中，重新执行 <code>build</code> 方法来构建新的 Widget 树，老的 Element 树会尽可能地复用，这样既保证了状态的保存，也能够正确的显示新的UI。</p></li></ol><p>所以，当我们调用热重载时，Dart会重新执行 <code>main()</code> 函数，Flutter框架将新生成的Widget Tree与旧的Element Tree进行对比，并根据对比结果更新UI。在这个革新过程中，应用的状态将会被保留。</p><p>综上，利用 Dart 语言和 Flutter 框架的特性，只需要很短的时间（通常在毫秒级）就能够完成代码的热更新，极大地提了高开发效率。</p></details>',7);function l(s,c){return t(),a("div",null,[o(" more "),r])}const m=e(i,[["render",l],["__file","0x03.hot-reload.html.vue"]]);export{m as default};
