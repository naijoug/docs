import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as t,a as o,f as l}from"./app--gyPjc9T.js";const i={},r=l('<h3 id="时间复杂度分析" tabindex="-1"><a class="header-anchor" href="#时间复杂度分析" aria-hidden="true">#</a> 时间复杂度分析</h3><details class="hint-container details"><summary>💡</summary><ul><li>最好时间复杂度</li><li>最坏时间复杂度</li><li>平均时间复杂度</li><li>摊还分析法 : 均摊时间复杂度，一种特殊的平均时间复杂度</li></ul></details><h2 id="冒泡排序和插入排序的时间复杂度是多少-为什么实际开发中会更多选择插入排序" tabindex="-1"><a class="header-anchor" href="#冒泡排序和插入排序的时间复杂度是多少-为什么实际开发中会更多选择插入排序" aria-hidden="true">#</a> 冒泡排序和插入排序的时间复杂度是多少？=&gt; 为什么实际开发中会更多选择插入排序？</h2><details class="hint-container details"><summary>💡</summary><p>两者的时间复杂度相同 O(n²)</p><p>插入排序是稳定的排序，对于相同的元素排序前后的相对位置不会发生变化。</p></details><blockquote><p>大数相加</p></blockquote><blockquote><p>找到两个排序数组的中位数</p></blockquote><blockquote><p><code>pow(double, double)</code> 函数的自实现</p></blockquote>',7);function c(s,d){return a(),t("div",null,[o(" more "),r])}const u=e(i,[["render",c],["__file","algorithm.html.vue"]]);export{u as default};
