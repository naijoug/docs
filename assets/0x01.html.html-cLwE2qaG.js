import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as n,c as e,a as s,f as o}from"./app-RUNDwe6G.js";const c={},t=o(`<h3 id="❓动态页面-vs-静态页面" tabindex="-1"><a class="header-anchor" href="#❓动态页面-vs-静态页面" aria-hidden="true">#</a> ❓动态页面 vs 静态页面</h3><details class="hint-container details"><summary>💡</summary><ul><li><p>静态网页：静态网页是预先编写好的，存储在服务器上的 <code>HTML</code> 文件。当用户请求静态网页时，服务器将网页直接发送给用户，内容在所有用户之间是一致的。</p><blockquote><p>静态网页通常用于展示不需要更新的信息，比如公司的介绍、产品的说明等。</p></blockquote></li><li><p>动态网页：动态网页的内容在用户请求时才由服务器动态生成。这种页面可根据用户的请求（例如请求的参数、用户身份等）或服务器端的数据（如数据库中的信息）来生成网页内容。这样可以实现每个用户看到的页面内容可能不同，或者同一用户在不同时间看到的内容可能不同。</p><blockquote><p>例如，购物网站中的商品详情页面、社交网站中的动态流页面等就是典型的动态网页。</p></blockquote></li></ul><p>总结：静态网页和动态网页的主要区别在于内容的生成方式和时机不同，静态页面是预先制作好的，而动态网页的内容是实时生成的。</p></details><h3 id="❓说说你对-html-语义化-的理解" tabindex="-1"><a class="header-anchor" href="#❓说说你对-html-语义化-的理解" aria-hidden="true">#</a> ❓说说你对 “<code>HTML</code> 语义化” 的理解</h3><details class="hint-container details"><summary>💡</summary><blockquote><p>“<code>HTML</code> 语义化”是指使用正确的 <code>HTML</code> 标签（elements）来描述内容的意义和结构。这些标签的命名都非常形象和直观，这使得代码对开发者和浏览器都更易于理解。</p></blockquote><p><code>HTML</code> 标签语义化的优点：</p><ul><li><p>提升可读性：语义化的 <code>HTML</code> 代码可以让人更好地理解页面内容的结构，即使是在没有 <code>CSS</code> 样式的情况下，也能清晰知道页面的大致结构。</p></li><li><p>有利于搜索引擎优化（<code>SEO</code>）：语义化标签可以让搜索引擎的爬虫更好地理解网页的内容，从而提高网站在搜索结果中的排名。</p></li><li><p>提高无障碍可访问性：屏幕阅读器和一些辅助技术可以使用语义化标签更好地解读页面内容，帮助视觉障碍用户理解和使用网站。</p></li><li><p>方便开发和维护：使用语义化标签让代码更具可读性，方便团队的协作开发和后期维护。</p></li><li><p>有助于设备兼容性：一些老式的或特定的设备可能并不完全支持所有类型的 <code>CSS</code> 和 <code>JavaScript</code>，因此语义化的 <code>HTML</code> 可以帮助这些设备更好地解析网页。</p></li></ul><p>总结：使用语义化标签可以使你的 <code>HTML</code> 代码更加清晰，有助于提升网站的可访问性、可维护性以及在搜索引擎中的表现。</p><p>推荐：在编写 <code>HTML</code> 代码的时候，应尽量使用合适的语义化标签，而不是仅仅依赖于 <code>&lt;div&gt;</code> 或 <code>&lt;span&gt;</code>。</p></details><h3 id="❓如何判断一个页面语义性良好" tabindex="-1"><a class="header-anchor" href="#❓如何判断一个页面语义性良好" aria-hidden="true">#</a> ❓如何判断一个页面语义性良好</h3><details class="hint-container details"><summary>💡</summary><blockquote><p>一个很简单的办法就是：去掉 <code>CSS</code> 样式，看页面是否还具有很好的可读性。</p></blockquote><p>在 <code>Firefox</code> 浏览器的页面调试插件 <code>Web Developer</code> 工具栏 <code>CSS —&gt; Disable Styles —&gt; Disable All Styles</code> 可以去掉网页的 <code>CSS</code>， 查看没有样式的效果。</p></details><h3 id="❓什么是标准文档流" tabindex="-1"><a class="header-anchor" href="#❓什么是标准文档流" aria-hidden="true">#</a> ❓什么是标准文档流</h3><details class="hint-container details"><summary>💡</summary><blockquote><p>标准文档流（也被称为“正常流”或“普通流”），是在未进行任何 <code>CSS</code> 定位（如 <code>float</code> 和 <code>absolute</code>）操作时，<code>HTML</code> 元素的默认排列规则。</p></blockquote><p>标准文档流布局规则：</p><ul><li>块级元素（比如 <code>div、p、h1</code> 等）会自动在其前面的元素之后换行显示，宽度默认撑满其父元素，高度由内容撑开。</li><li>行内元素（如 <code>span、a、img</code> 等）则从左到右依次在一行内显示，直到父元素的右边界，然后会自动换行，在新的一行从左到右显示，宽高则由内容撑开。</li></ul></details><hr><h2 id="dom" tabindex="-1"><a class="header-anchor" href="#dom" aria-hidden="true">#</a> <code>DOM</code></h2><h3 id="❓什么是-dom" tabindex="-1"><a class="header-anchor" href="#❓什么是-dom" aria-hidden="true">#</a> ❓什么是 <code>DOM</code></h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>DOM</code>(Document Object Model): 文档对象模型。是一种编程接口，它允许 <code>web</code> 页面被表示为一个标准的对象模型，而这些对象如何结构化、互动和操作，都有标准的定义。</p></blockquote><p>在浏览器中，整个网页被解析成一个 <code>DOM</code> 树，各种 <code>HTML</code> 标签都会被转化为可通过 <code>JavaScript</code> 操作的对象（节点）。其中，<code>HTML</code> 文档的根节点就是 <code>document</code> 对象。利用 <code>DOM</code>，开发者可以创建动态的网页，例如修改网页结构、改变 <code>HTML</code> 元素的内容和属性，响应事件等。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// JavaScript 代码利用 DOM 修改 HTML 元素的内容</span>
document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;demo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="❓ready-vs-onload" tabindex="-1"><a class="header-anchor" href="#❓ready-vs-onload" aria-hidden="true">#</a> ❓ready vs onload</h3><details class="hint-container details"><summary>💡</summary><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// $(document).ready() : 页面的 DOM 结构加载完成 (不包含其它媒体资源)</span>
<span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/* code */</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// JQuery ready</span>
    <span class="token comment">/* code */</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// window.onload : 页面的所有资源加载完成 (包括 DOM 和其它媒体资源)</span>
window<span class="token punctuation">.</span><span class="token function-variable function">onload</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/* code */</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,14);function d(i,l){return n(),e("div",null,[s(" more "),t])}const r=a(c,[["render",d],["__file","0x01.html.html.vue"]]);export{r as default};
