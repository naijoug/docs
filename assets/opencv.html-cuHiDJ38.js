import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as s,c,b as e,e as i,d as a,f as n}from"./app-DEFCDufz.js";const d={},r=e("h2",{id:"reference",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#reference","aria-hidden":"true"},"#"),i(" reference")],-1),p={href:"https://docs.opencv.org/",target:"_blank",rel:"noopener noreferrer"},u={href:"https://github.com/makelove/OpenCV-Python-Tutorial",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/ageitgey/face_recognition",target:"_blank",rel:"noopener noreferrer"},g=e("blockquote",null,[e("p",null,"The world's simplest facial recognition api for Python and the command line")],-1),m={href:"https://github.com/iperov/DeepFaceLive",target:"_blank",rel:"noopener noreferrer"},k=e("blockquote",null,[e("p",null,"Real-time face swap for PC streaming or video calls")],-1),v={href:"https://github.com/facebook/igl",target:"_blank",rel:"noopener noreferrer"},b=e("blockquote",null,[e("p",null,"Intermediate Graphics Library (IGL) is a cross-platform library that commands the GPU. It provides a single low-level cross-platform interface on top of various graphics APIs (e.g. OpenGL, Metal and Vulkan).")],-1),f=n(`<h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ brew <span class="token function">install</span> opencv       <span class="token comment"># 安装 opencv</span>
$ pip <span class="token function">install</span> opencv-python <span class="token comment"># 安装 opencv-python</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="concept" tabindex="-1"><a class="header-anchor" href="#concept" aria-hidden="true">#</a> Concept</h2><ul><li><p>ROI : <code>region of interest</code> (感兴趣区域)</p></li><li><p>直线极坐标公式 : <code>ρ = x * sinθ + y * cosθ</code></p></li><li><p>卷积(Convolution) &amp; 滤波(Filtering)</p></li><li><p><code>OpenCV</code> 中的颜色空间</p><table><thead><tr><th>颜色空间</th><th>说明</th></tr></thead><tbody><tr><td>BGR</td><td>不是我们常用RGB</td></tr><tr><td>Gray</td><td>灰度图</td></tr><tr><td>HSV</td><td>H(Hue, 色彩/色度) [0 179] ; S(Saturation, 饱和度) [0 255] ; V(Value, 亮度) [0 255]</td></tr></tbody></table><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># BGR -&gt; RGB</span>
img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>path<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>IMREAD_COLOR<span class="token punctuation">)</span> <span class="token comment"># BGR</span>
<span class="token comment"># 方案一: 拆分 &amp; 合并</span>
b<span class="token punctuation">,</span> g<span class="token punctuation">,</span> r <span class="token operator">=</span> cv2<span class="token punctuation">.</span>split<span class="token punctuation">(</span>img<span class="token punctuation">)</span>
img2 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>merge<span class="token punctuation">(</span><span class="token punctuation">[</span>r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment"># 方案二: 颜色空间转换</span>
img3 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>img<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>COLOR_BGR2RGB<span class="token punctuation">)</span>
<span class="token comment"># 方案三: </span>
img4 <span class="token operator">=</span> img<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
img5 <span class="token operator">=</span> img<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>运动目标检测</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>光流法</td><td>计算量大，运算比较复杂，抗噪音能力差，对硬件要求高</td></tr><tr><td>背景减法</td><td>建模要求高，易受关照突变影响</td></tr><tr><td>帧差分法</td><td>计算量小，硬件要求低</td></tr></tbody></table></li></ul><h2 id="api" tabindex="-1"><a class="header-anchor" href="#api" aria-hidden="true">#</a> API</h2><h3 id="图像" tabindex="-1"><a class="header-anchor" href="#图像" aria-hidden="true">#</a> 图像</h3><ul><li><p><code>imread(filename[, flags]) -&gt; retval</code> : 读取图片</p><ul><li>filename : 文件名称</li><li>flags : 读取方式 <ul><li><code>cv2.IMREAD_COLOR</code> : 默认，彩色图片(不包含透明度)</li><li><code>cv2.IMREAD_GRAYSCALE</code> : 灰度图</li><li><code>cv2.IMREAD_UNCHANGE</code> : 原始图片(包含透明度)</li></ul></li></ul></li><li><p><code>imshow(winname, mat) -&gt; None</code> : 显示图片</p><ul><li>winname : 窗口名称</li><li>mat : 图片矩阵</li></ul></li><li><p><code>imwrite(filename, img[, params]) -&gt; retval</code> : 保存图片</p><ul><li>filename : 保存的文件名</li><li>img : 图片</li><li>params : 特定格式参数 <ul><li><code>cv2.IMWRITE_JPEG_QUALITY</code> : JPEG, 图像质量(0~100, 默认:95)</li><li><code>cv2.IMWRITE_PNG_COMPRESSION</code> : PNG, 压缩级别(0~9, 默认:3)</li></ul></li></ul></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">&#39;test.png&#39;</span><span class="token punctuation">)</span>    <span class="token comment"># 读取图片</span>
cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">&#39;img&#39;</span><span class="token punctuation">,</span> img<span class="token punctuation">)</span>          <span class="token comment"># 显示图片</span>
cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span><span class="token string">&#39;save.png&#39;</span><span class="token punctuation">,</span> img<span class="token punctuation">)</span>    <span class="token comment"># 保存图片</span>
cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span><span class="token string">&quot;test1.jpg&quot;</span><span class="token punctuation">,</span> img，<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>IMWRITE_JPEG_QUALITY<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span><span class="token string">&quot;test2.png&quot;</span><span class="token punctuation">,</span> img<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>IMWRITE_PNG_COMPRESSION<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> 
cv2<span class="token punctuation">.</span>namedWindow<span class="token punctuation">(</span><span class="token string">&#39;image&#39;</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>WINDOW_NORMAL<span class="token punctuation">)</span> <span class="token comment"># 创建窗口</span>
cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">&#39;image&#39;</span><span class="token punctuation">,</span> img<span class="token punctuation">)</span>        <span class="token comment"># 显示在指定窗口</span>
cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                  <span class="token comment"># 等待键盘输入</span>
cv2<span class="token punctuation">.</span>destoryAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token comment"># 销毁窗口</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="视频" tabindex="-1"><a class="header-anchor" href="#视频" aria-hidden="true">#</a> 视频</h3><ul><li><p><code>VideoCapture()</code> : 读取视频文件或摄像头视频流</p><ul><li><code>get(propId) -&gt; retval</code> : 获取属性值 <ul><li><code>cv2.CAP_PROP_FPS</code> : 每秒帧数</li><li><code>cv2.CAP_PROP_FRAME_HEIGHT</code> : 图片帧高度</li><li><code>cv2.CAP_PROP_FRAME_WIDTH</code> : 图片帧宽度</li><li><code>cv2.CAP_PROP_FRAME_COUNT</code> : 总共帧数</li><li><code>cv2.CAP_PROP_POS_FRAMES</code> : 当前帧数</li></ul></li><li><code>set(propId, value) -&gt; retval</code> : 设置属性值</li><li><code>isOpened() -&gt; retval</code> : 检测是否初始化成功</li><li><code>read([, image]) -&gt; retval, image</code> : 读取视频下一帧</li><li><code>release() -&gt; None</code> : 关闭视频文件或摄像头硬件</li></ul></li><li><p><code>VideoWriter_fourcc(c1, c2, c3, c4) -&gt; retval</code> : 定义<code>fourcc</code>代码</p></li><li><p><code>VideoWriter()</code> : 视频保存</p><ul><li><code>fourcc(c1, c2, c3, c4) -&gt; retval</code> : 定义<code>fourcc</code>代码</li><li><code>open(filename, fourcc, fps, frameSize[, isColor]) -&gt; retval</code> : 初始化视频写入 <ul><li>filename : 文件名</li><li>fourcc :</li><li>fps : 每秒帧数(frames per second)</li><li>frameSize : 每一帧图片尺寸</li><li>isColor :</li></ul></li><li><code>write(image) -&gt; None</code> : 写入视频的下一帧</li><li><code>release() -&gt; None</code> : 关闭视频写入</li></ul></li></ul><h3 id="窗口" tabindex="-1"><a class="header-anchor" href="#窗口" aria-hidden="true">#</a> 窗口</h3><ul><li><p><code>namedWindow(winname[, flags]) -&gt; None</code> : 创建窗口</p><ul><li>winname : 窗口名字</li><li>flags : 显示方式 <ul><li><code>cv2.WINDOW_NORMAL</code> : 窗口可以调整大小</li><li><code>cv2.WINDOW_AUTOSIZE</code> : 自动调整</li><li><code>cv2.WINDOW_KEEPRATIO</code> : 保持图片比例</li><li><code>cv2.WINDOW_GUI_EXPANDED</code> :</li></ul></li></ul></li><li><p><code>setWindowTitle(winname, title) -&gt; None</code> : 修改窗口标题</p><ul><li>winname : 窗口名字</li><li>title : 窗口标题</li></ul></li><li><p><code>moveWindow(winname, x, y) -&gt; None</code> : 移动窗口</p><ul><li>winname : 窗口名字</li><li>x, y : 指定位置的坐标</li></ul></li><li><p><code>waitKey([, delay]) -&gt; retval</code> : 等待键盘输入</p><ul><li>delay : 等待延迟时间(毫秒) <ul><li>0 : 一直等待(forever)</li></ul></li></ul></li><li><p><code>destroyAllWindows() -&gt; None</code> : 销毁所有窗口</p></li><li><p><code>destroyWindow(winname) -&gt; None</code> : 销毁指定窗口</p><ul><li>winname : 窗口名字</li></ul></li><li><p><code>setMouseCallback(windowName, onMouse [, param]) -&gt; None</code> : 设置鼠标回调</p><ul><li>onMouse : 回调函数<code>callback(event, x, y, flags, param) -&gt; None</code><ul><li>event : 鼠标事件 <ul><li><code>cv2.EVENT_LBUTTONDOWN</code> : 鼠标左键按下</li><li><code>cv2.EVENT_MOUSEMOVE</code> : 鼠标移动</li><li><code>cv2.EVENT_LBUTTONUP</code> : 鼠标左键释放</li><li><code>cv2.EVENT_LBUTTONDBLCLK</code> : 鼠标左键双击</li></ul></li><li>x, y : 鼠标点击坐标</li><li>flags : 事件标记 <ul><li><code>cv2.EVENT_FLAG_LBUTTON</code> : 鼠标左键</li><li><code>cv2.EVENT_FLAG_RBUTTON</code> : 鼠标右键</li><li><code>cv2.EVENT_FLAG_MBUTTON</code> : 鼠标中键</li><li><code>cv2.EVENT_FLAG_CTRLKEY</code> : Ctr</li><li><code>cv2.EVENT_FLAG_ALTKEY</code> : Alt</li><li><code>cv2.EVENT_FLAG_SHIFTKEY</code> : Shift</li></ul></li><li>param :</li></ul></li></ul></li><li><p><code>createTrackbar(trackbarName, windowName, value, count, onChange) -&gt; None</code> : 创建滑动条</p><ul><li>trackbarName : 滑动条名字</li><li>windowName : 窗口名字</li><li>value : 初始值</li><li>count : 最大值(0~count)</li><li>onChange : 回调函数<code>callback(value) -&gt; None</code><ul><li>value : 修改之后的值</li></ul></li></ul></li><li><p><code>getTrackbarPos(trackbarname, winname) -&gt; retval</code> : 获取滑动条的当前位置值</p></li></ul><h3 id="性能检测" tabindex="-1"><a class="header-anchor" href="#性能检测" aria-hidden="true">#</a> 性能检测</h3><ul><li><p><code>getTickCount() -&gt; retval</code> : 参考点到这个函数执行的时钟数</p></li><li><p><code>getTickFrequency() -&gt; retval</code> : 返回时钟频率(每秒的时钟数)</p></li><li><p><code>useOptimized() -&gt; retval</code> : 返回优化状态</p></li><li><p><code>setUseOptimized(onoff) -&gt; None</code> : 设置是否优化</p></li></ul><h2 id="图像基础处理" tabindex="-1"><a class="header-anchor" href="#图像基础处理" aria-hidden="true">#</a> 图像基础处理</h2><h3 id="绘图" tabindex="-1"><a class="header-anchor" href="#绘图" aria-hidden="true">#</a> 绘图</h3><ul><li><p><code>line(img, pt1, pt2, color[, thickness[, lineType[, shift]]]) -&gt; img</code> : 绘制一条直线</p><ul><li>img : 图像</li><li>pt1 : 第一个点</li><li>pt2 : 第二个点</li><li>color : 颜色</li><li>thickness : 粗细 <ul><li>1 : 默认</li><li>-1 : 闭合图形会被填充</li></ul></li><li><code>lineType</code> : 直线类型 <ul><li><code>cv2.LINE_8</code> : 八连接(默认)</li><li><code>cv2.LINE_4</code> : 四连接</li><li><code>cv2.LINE_AA</code> : 抗锯齿</li></ul></li><li><code>shift</code> : 点坐标系的小数点位数</li></ul></li><li><p><code>polylines(img, pts, isClosed, color[, thickness[, lineType[, shift]]]) -&gt; img</code> : 绘制多条直线</p><ul><li>pts : 多个点数组</li><li>isClosed : 是否闭环</li></ul></li><li><p><code>arrowedLine(img, pt1, pt2, color[, thickness[, line_type[, shift[, tipLength]]]]) -&gt; img</code> : 绘制箭头直线</p></li><li><p><code>rectangle(img, pt1, pt2, color[, thickness[, lineType[, shift]]]) -&gt; img</code> : 绘制矩形</p></li><li><p><code>circle(img, center, radius, color[, thickness[, lineType[, shift]]]) -&gt; img</code> : 绘制圆</p><ul><li>center : 圆心</li><li>radius : 半径</li></ul></li><li><p><code>ellipse(img, center, axes, angle, startAngle, endAngle, color[, thickness[, lineType[, shift]]]) -&gt; img</code> : 绘制椭圆</p><ul><li>center : 圆心</li><li>axes : 长轴和短轴长度</li><li>angle :</li><li>startAngle : 起始角度</li><li>endAngle : 结束角度</li></ul></li><li><p><code>putText(img, text, org, fontFace, fontScale, color[, thickness[, lineType[, bottomLeftOrigin]]]) -&gt; img</code> : 绘制文字</p><ul><li>text : 文字内容</li><li>org : 文字的左下角坐标</li><li>fontFace : 文字字体 <ul><li><code>cv2.FONT_HERSHEY_SIMPLEX</code> :</li><li><code>cv2.FONT_HERSHEY_TRIPLEX</code> :</li><li><code>cv2.FONT_ITALIC</code> : 斜体</li></ul></li><li>fontScale : 字体缩放</li></ul></li></ul><h3 id="位运算" tabindex="-1"><a class="header-anchor" href="#位运算" aria-hidden="true">#</a> 位运算</h3><ul><li><p><code>bitwise_not(src[, dst[, mask]]) -&gt; dst</code> : 非</p><ul><li>src : 图像</li><li>mask : 掩模图像</li></ul></li><li><p><code>bitwise_and(src1, src2[, dst[, mask]]) -&gt; dst</code> : 与</p><ul><li>src1 : 图像1</li><li>src2 : 图像2</li><li>mask : 掩模图像</li></ul></li><li><p><code>bitwise_or(src1, src2[, dst[, mask]]) -&gt; dst</code> : 或</p></li><li><p><code>bitwise_xor(src1, src2[, dst[, mask]]) -&gt; dst</code> : 异或</p></li></ul><h3 id="图像处理" tabindex="-1"><a class="header-anchor" href="#图像处理" aria-hidden="true">#</a> 图像处理</h3><ul><li><p><code>split(m[, mv]) -&gt; mv</code> : 图像通道拆分</p><ul><li>m :</li><li>mv :</li></ul></li><li><p><code>merge(mv[, dst]) -&gt; dst</code> : 图像通道合并</p><ul><li>mv :</li><li>dst :</li></ul></li><li><p><code>add(src1, src2[, dst[, mask[, dtype]]]) -&gt; dst</code> : 图片相加</p><ul><li>src1 : 图像1</li><li>src2 : 图像2</li></ul></li><li><p><code>subtract(src1, src2[, dst[, mask[, dtype]]]) -&gt; dst</code> : 图片相减</p></li><li><p><code>addWeighted(src1, alpha, src2, beta, gamma[, dst[, dtype]]) -&gt; dst</code> : 权重相加</p><blockquote><p>dst = α·img1 + β·img2 + γ</p></blockquote><ul><li>alpha : 图像1权重</li><li>beta : 图像2权重</li><li>gamma : 求和的标量</li></ul></li><li><p><code>flip(src, flipCode[, dst]) -&gt; dst</code> : 翻转</p><ul><li>src : 图像</li><li>flipCode : 翻转方向 <ul><li>1 : 水平翻转</li><li>0 : 垂直翻转</li><li>-1 : 水平垂直翻转</li></ul></li></ul></li><li><p><code>copyMakeBorder(src, top, bottom, left, right, borderType[, dst[, value]]) -&gt; dst</code> : 图像扩边</p><ul><li>top, bottom, left, right : 对应边界像素数</li><li>borderType : 边缘类型 <ul><li><code>cv2.BORDER_REPLICATE</code> : 重复最后一个元素</li><li><code>cv2.BORDER_REFLECT</code> : 边界元素滤镜</li><li><code>cv2.BORDER_REFLECT_101</code> :</li><li><code>cv2.BORDER_WRAP</code> : 包裹</li><li><code>cv2.BORDER_CONSTANT</code> : 有颜色的常数值边界</li></ul></li><li>value : 边界颜色(配合<code>BORDER_CONSTANT</code>使用)</li></ul></li><li><p><code>cvtColor(src, code[, dst[, dstCn]]) -&gt; dst</code> : 转换颜色空间</p><ul><li>code : 转换编码 <ul><li><code>cv2.COLOR_BGR2GRAY</code> : BGR(彩色图) -&gt; Gray(灰度图)</li><li><code>cv2.COLOR_BGR2HSV</code> : BGR -&gt; HSV</li></ul></li></ul></li><li><p><code>inRange(src, lowerb, upperb[, dst]) -&gt; dst</code> : 取范围内的图片</p></li></ul><h3 id="几何变换" tabindex="-1"><a class="header-anchor" href="#几何变换" aria-hidden="true">#</a> 几何变换</h3><ul><li><p><code>resize(src, dsize[, dst[, fx[, fy[, interpolation]]]]) -&gt; dst</code> : 改变图片尺寸大小</p><ul><li>src : 图像</li><li>dsize : 改变后的尺寸</li><li>fx, fy : 缩放因子(dsize==None时有效)</li><li>interpolation : 插值算法 <ul><li><code>cv2.INTER_LINEAR</code> : 默认,</li><li><code>cv2.INTER_AREA</code> : 缩放时推荐</li><li><code>cv2.INTER_CUBIC</code> : 扩展时推荐</li></ul></li></ul></li><li><p><code>warpAffine(src, M, dsize[, dst[, flags[, borderMode[, borderValue]]]]) -&gt; dst</code> : 使用变换矩阵改变图片</p><ul><li>M : 变换矩阵</li><li>dsize : 输出图片大小</li></ul></li><li><p><code>getRotationMatrix2D(center, angle, scale) -&gt; retval</code> : 旋转矩阵</p><ul><li>center : 旋转中心</li><li>angle : 旋转角度</li><li>scale : 旋转后的缩放因子</li></ul></li><li><p><code>getAffineTransform(src, dst) -&gt; retval</code> : 仿射矩阵(2*3矩阵)</p><ul><li>src : 原始图三个点坐标(2*3矩阵)</li><li>dst : 目标图三个点坐标(2*3矩阵)</li></ul></li><li><p><code>getPerspectiveTransform(src, dst) -&gt; retval</code> : 透视矩阵(3*3矩阵)</p><ul><li>src : 原始图四个点坐标(2*4矩阵)</li><li>dst : 目标图四个点坐标(2*4矩阵)</li></ul></li></ul><h3 id="阈值" tabindex="-1"><a class="header-anchor" href="#阈值" aria-hidden="true">#</a> 阈值</h3><ul><li><p><code>threshold(src, thresh, maxval, type[, dst]) -&gt; retval, dst</code> : 简单阈值</p><ul><li>src : 图像(灰度图)</li><li>thresh : 对像素值进行分类的阈值</li><li>maxval : 像素值高于(或低于)阈值时,赋予的新值</li><li>type : 阈值类型 <ul><li><code>cv2.THRESH_BINARY</code> : 二值阈值化</li><li><code>cv2.THRESH_BINARY_INV</code> : 方向二值阈值化并反转</li><li><code>cv2.THRESH_TRUNC</code> : 截断阈值化</li><li><code>cv2.THRESH_TOZERO</code> : 超过阈值被置为0</li><li><code>cv2.THRESH_TOZERO_INV</code> : 低于阈值被置为0</li><li><code>cv2.THRESH_OTSU</code> : Otsu 二值化(用于处理双峰图)</li></ul></li><li>retval : 最优阈值(Otsu类型)</li></ul></li><li><p><code>adaptiveThreshold(src, maxValue, adaptiveMethod, thresholdType, blockSize, C[, dst]) -&gt; dst</code> : 自适应阈值</p><ul><li>adaptiveMethod : 计算阈值的方法 <ul><li><code>cv2.ADPTIVE_THRESH_MEAN_C</code> : 取相邻区域平均值</li><li><code>cv2.ADPTIVE_THRESH_GAUSSIAN_C</code> : 取相邻区域加权平均,权重是一个高斯窗口</li></ul></li><li>thresholdType : 阈值类型</li><li>blockSize : 领域大小</li><li>C : 常数(阈值 = (加权)平均值 - C)</li></ul></li></ul><h2 id="图像高级处理" tabindex="-1"><a class="header-anchor" href="#图像高级处理" aria-hidden="true">#</a> 图像高级处理</h2><blockquote><p>LPF(Low-Pass Filter, 低通滤波) : <strong>去除噪音, 模糊图像</strong>(实质: 去除图片中的高频成分(边界、噪音)) HPF(High-Pass Filter, 高通滤波) : <strong>找到图片的边缘</strong></p></blockquote><h3 id="图像平滑-模糊" tabindex="-1"><a class="header-anchor" href="#图像平滑-模糊" aria-hidden="true">#</a> 图像平滑(模糊)</h3><ul><li><p><code>filter2D(src, ddepth, kernel[, dst[, anchor[, delta[, borderType]]]]) -&gt; dst</code> : 2D卷积</p><blockquote><p>通过卷积核处理图片上的每一个像素点(卷积核求和 -&gt; 再取平均)</p></blockquote><ul><li>src : 图像</li><li>ddepth : 目标图像的期望深度</li><li>kernel : 卷积核</li><li>anchor : 锚点, 过滤点的相对位置, 默认: (-1, -1) 在内核中心</li><li>delta : δ, 卷积处理后的添加值</li><li>borderType : 边界类型</li></ul></li><li><p><code>blur(src, ksize[, dst[, anchor[, borderType]]]) -&gt; dst</code> : 归一化卷积</p><blockquote><p>使用卷积核覆盖区域所有像素平均值替换中心像素点</p></blockquote><ul><li>ksize : 卷积核尺寸</li></ul></li><li><p><code>boxFilter(src, ddepth, ksize[, dst[, anchor[, normalize[, borderType]]]]) -&gt; dst</code> :</p><ul><li>normalize : 指定内核是否归一化(True : 归一化 <code>== blur()</code> ; False : 不使用归一化)</li></ul></li><li><p><code>GaussianBlur(src, ksize, sigmaX[, dst[, sigmaY[, borderType]]]) -&gt; dst</code> : 高斯模糊, <strong>去除高斯噪音</strong></p><blockquote><p>高斯核 : 中间值最大, 其它值根据距离递减(形成高斯分布) 核 &gt;= (11, 11) : 使用 DFT-base 算法 ; 核 &lt; (11, 11) : 直接计算</p></blockquote><ul><li>kisze : 高斯核尺寸, 宽高可以不同(必须是正奇数), 或者为0(由sigma计算)</li><li>sigmaX : 高斯核在X轴方向偏差</li><li>sigmaY : 高斯核在Y轴方向偏差</li></ul></li><li><p><code>getGaussianKernel(ksize, sigma[, ktype]) -&gt; retval</code> : 创建一个高斯核</p><ul><li>ktype : 值的类型</li></ul></li><li><p><code>medianBlur(src, ksize[, dst]) -&gt; dst</code> : 中值模糊, <strong>去除椒盐噪音</strong></p><blockquote><p>使用卷积核区域的中值来代替中间像素值</p></blockquote></li><li><p><code>bilateralFilter(src, d, sigmaColor, sigmaSpace[, dst[, borderType]]) -&gt; dst</code> : 双边滤波, <strong>保持边界清晰, 去除噪音</strong></p><blockquote><p>同时使用空间高斯权重和灰度值相识性高斯权重(计算时间长, 比较慢) 空间高斯函数 : 确保只有临近区域像素对中心点有影响 灰度相似性函数 : 确保只有与中心像素值相近才会被进行模糊处理(边界灰度值变化较大)</p></blockquote><ul><li>d : 过滤像素邻域直径(推荐 : 5, d &gt; 5 : 非常慢)</li><li>sigmaColor : 色彩空间过滤值</li><li>sigmaSpace : 坐标空间过滤值</li></ul></li></ul><h3 id="形态学转换" tabindex="-1"><a class="header-anchor" href="#形态学转换" aria-hidden="true">#</a> 形态学转换</h3><ul><li><p><code>erode(src, kernel[, dst[, anchor[, iterations[, borderType[, borderValue]]]]]) -&gt; dst</code> : 腐蚀, 白色区域减少, <strong>去除白色噪音, 断开两个连接在一起的物体</strong></p><blockquote><p>卷积核与原图像对应的像素点值所有都是1, 则保持中心像素值不变, 否则置为0</p></blockquote><ul><li>src : 图像</li><li>kernel : 卷积核</li><li>anchor : 锚点, 默认: (-1, -1) 在内核中心</li><li>iterations : 迭代次数</li><li>borderType : 边界类型</li><li>borderValue : 边框值</li></ul></li><li><p><code>dilate(src, kernel[, dst[, anchor[, iterations[, borderType[, borderValue]]]]]) -&gt; dst</code> : 膨胀, <strong>连接两个分开的物体</strong></p><blockquote><p>卷积核与原图像对应的像素点只要有一个1, 则将中心像素值改为1, 否则为0 <strong>去除白色噪音</strong> : 先腐蚀(白色前景色减少), 在膨胀(白色噪音以除去, 不会再膨胀回来)</p></blockquote></li><li><p><code>morphologyEx(src, op, kernel[, dst[, anchor[, iterations[, borderType[, borderValue]]]]]) -&gt; dst</code> : 形态学运算</p><blockquote><p>腐蚀和膨胀操作的变体</p></blockquote><ul><li>op : 操作类型 <ul><li><code>cv2.MORPH_OPEN</code> : 开运算(== 腐蚀 &amp; 膨胀), <strong>去除白色椒盐噪音</strong></li><li><code>cv2.MORPH_CLOSE</code> : 闭运算(== 膨胀 &amp; 腐蚀), <strong>填补前景色中的小洞(小黑点)</strong></li><li><code>cv2.MORPH_GRADIENT</code> : 形态学梯度(膨胀 - 腐蚀), <strong>提取前景物体轮廓</strong></li><li><code>cv2.MORPH_TOPHAT</code> : 礼帽(== 原始图像 - 开运算图像)</li><li><code>cv2.MORPH_BLACKHAT</code> : 黑帽(== 闭运算图像 - 原始图像)</li></ul></li></ul></li><li><p><code>getStructuringElement(shape, ksize[, anchor]) -&gt; retval</code> : 构建结构化元素</p><blockquote><p>用于构建不同形状的卷积核(一般是正方形, 还可以是圆、椭圆)</p></blockquote><ul><li>shape : 结构形状 <ul><li><code>cv2.MORPH_RECT</code> : 矩形</li><li><code>cv2.MORPH_ELLIPSE</code> : 椭圆形</li><li><code>cv2.MORPH_CROSS</code> : 十字形</li></ul></li><li>ksize : 结构化元素尺寸</li><li>anchor : 锚点</li></ul></li></ul><h3 id="图像梯度" tabindex="-1"><a class="header-anchor" href="#图像梯度" aria-hidden="true">#</a> 图像梯度</h3><ul><li><p><code>Sobel(src, ddepth, dx, dy[, dst[, ksize[, scale[, delta[, borderType]]]]]) -&gt; dst</code> : Sobel算子</p><blockquote><p>一阶或二阶导数,高斯平滑与微分操作的结合, <strong>抗噪能力好</strong></p></blockquote><ul><li>src : 图像</li><li>ddepth : 图像深度(-1 : 与原图保持一致)</li><li>dx, dy : x和y方向求导阶数</li><li>ksize : 卷积核大小(ksize == -1, 会使用 Scharr 3x3 卷积核, 优于 Sobel 3x3)</li><li>scale : 缩放求导值(默认 : 没有缩放)</li><li>delta : 求导结果增量</li><li>borderType : 边界类型</li></ul></li><li><p><code>Scharr(src, ddepth, dx, dy[, dst[, scale[, delta[, borderType]]]]) -&gt; dst</code> : Scharr算子</p><blockquote><p>一阶或二阶导数</p></blockquote></li><li><p><code>Laplacian(src, ddepth[, dst[, ksize[, scale[, delta[, borderType]]]]]) -&gt; dst</code> : Laplacian算子</p><blockquote><p>二阶导数(类似于 Sobel 的二阶导数)</p></blockquote></li></ul><h3 id="边界检测" tabindex="-1"><a class="header-anchor" href="#边界检测" aria-hidden="true">#</a> 边界检测</h3><ul><li><p><code>Canny(image, threshold1, threshold2[, edges[, apertureSize[, L2gradient]]]) -&gt; edges</code> : <em>边界检测</em></p><blockquote><p>原理 : 5x5 高斯去噪 -&gt; Sobel 分别计算 X 和 Y 方向图像梯度, 找到边界梯度和方向 -&gt; 非极大值抑制(去除非边界点) -&gt; 滞后阈值(minVal, maxVal)</p></blockquote><ul><li>image : 图像</li><li>threshold1 : 滞后程序的第一个阈值</li><li>threshold2 : 滞后程序的第二个阈值</li><li>apertureSize : Sobel 卷积核</li><li>L2gradient : 求梯度大小的方程(默认 : False)</li></ul></li></ul><h3 id="图像金字塔" tabindex="-1"><a class="header-anchor" href="#图像金字塔" aria-hidden="true">#</a> 图像金字塔</h3><blockquote><p>高斯金字塔 : 顶部通过底部图像中的连续的去除行和列得到 拉普拉斯金字塔 : 通过高斯金字塔计算得到, 公式 : Li =Gi −PyrUp(Gi+1) 应用 : <strong>图像融合</strong></p></blockquote><ul><li><p><code>pyrDown(src[, dst[, dstsize[, borderType]]]) -&gt; dst</code> : 高分辨率尺寸向上构建金字塔(尺寸变小, 分辨率变小)</p><ul><li>src :</li><li>dstsize :</li><li>borderType : 边界类型</li></ul></li><li><p><code>pyrUp(src[, dst[, dstsize[, borderType]]]) -&gt; dst</code> : 低分辨率向下构建金字塔(尺寸变大, 分辨率不增加)</p></li></ul><h3 id="轮廓" tabindex="-1"><a class="header-anchor" href="#轮廓" aria-hidden="true">#</a> 轮廓</h3><blockquote><p>轮廓 : 具有相同颜色或灰度连续的点, 连着一起的曲线(黑色背景找白色物体)</p></blockquote><ul><li><p><code>findContours(image, mode, method[, contours[, hierarchy[, offset]]]) -&gt; image, contours, hierarchy</code> : <em>查找轮廓</em></p><ul><li>image : 图像</li><li>mode : 轮廓检索模式 <ul><li><code>cv2.RETR_LIST</code> : 提取所有轮廓, 不建立父子关系</li><li><code>cv2.RETR_TREE</code> : 所有轮廓, 并创建完整的组织结构层级列表</li><li><code>cv2.RETR_CCOMP</code> : 所有轮廓, 分为两级组织结构(外轮廓 &amp; 内部空洞)</li><li><code>cv2.RETR_EXTERNAL</code> : 只返回最外层轮廓, 内部子轮廓会被忽略</li></ul></li><li>method : 轮廓近似方法 <ul><li><code>cv2.CHAIN_APPROX_NONE</code> : 所有的边界点都会被存储</li><li><code>cv2.CHAIN_APPROX_SIMPLE</code> : 压缩轮廓点, 去除冗余点</li></ul></li><li>offset :</li><li>contours : 识别的轮廓</li><li>hierarchy : 计算的层级关系(格式 : [Next, Previous, First_Child, Parent])</li></ul></li><li><p><code>drawContours(image, contours, contourIdx, color[, thickness[, lineType[, hierarchy[, maxLevel[, offset]]]]]) -&gt; image</code> : 绘制轮廓</p><ul><li>image :</li><li>contours :</li><li>contourIdx :</li><li>color :</li><li>thickness :</li><li>lineType :</li><li>hierarchy :</li><li>maxLevel :</li><li>offset :</li></ul></li><li><p><code>moments(array[, binaryImage]) -&gt; retval</code> : 图像的矩</p><ul><li>array :</li><li>binaryImage :</li></ul></li><li><p><code>contourArea(contour[, oriented]) -&gt; retval</code> : 轮廓面积</p><ul><li>contour :</li><li>oriented :</li></ul></li><li><p><code>arcLength(curve, closed) -&gt; retval</code> : 轮廓周长</p><ul><li>curve :</li><li>closed :</li></ul></li><li><p><code>approxPolyDP(curve, epsilon, closed[, approxCurve]) -&gt; approxCurve</code> : 近似轮廓</p><ul><li>curve :</li><li>epsilon :</li><li>closed :</li></ul></li><li><p><code>convexHull(points[, hull[, clockwise[, returnPoints]]]) -&gt; hull</code> : 凸包检测</p><ul><li>points :</li><li>clockwise :</li><li>returnPoints :</li></ul></li><li><p><code>isContourConvex(contour) -&gt; retval</code> : 凸性检测</p><ul><li>contour :</li></ul></li><li><p><code>boundingRect(points) -&gt; retval</code> : 边界矩形</p><ul><li>points :</li><li>retval :</li></ul></li><li><p><code>minAreaRect(points) -&gt; retval</code> : 最小外接矩形</p><ul><li>points :</li></ul></li><li><p><code>boxPoints(box[, points]) -&gt; points</code> : 转化为坐标</p><ul><li>box :</li></ul></li><li><p><code>minEnclosingCircle(points) -&gt; center, radius</code> : 最小外接圆</p><ul><li>points :</li><li>center :</li><li>radius :</li></ul></li><li><p><code>fitEllipse(points) -&gt; retval</code> : 椭圆拟合</p><ul><li>points :</li></ul></li><li><p><code>fitLine(points, distType, param, reps, aeps[, line]) -&gt; line</code> : 直线拟合</p><ul><li>points :</li><li>distType :</li><li>param :</li><li>reps :</li><li>aeps :</li></ul></li><li><p><code>convexityDefects(contour, convexhull[, convexityDefects]) -&gt; convexityDefects</code> : 凸缺陷(凹陷)</p><ul><li>contour : 轮廓</li><li>convexhull :</li></ul></li><li><p><code>pointPolygonTest(contour, pt, measureDist) -&gt; retval</code> : 点到轮廓的最短距离</p><blockquote><p>正 : 轮廓内部 ; 0 : 轮廓上 ; 负 : 轮廓外面</p></blockquote><ul><li>pt : 测试的点</li><li>measureDist : (True : 计算距离 ; False : 仅返回位置关系, 不计算距离)</li></ul></li><li><p><code>matchShapes(contour1, contour2, method, parameter) -&gt; retval</code> : 形状匹配</p><ul><li>contour1 :</li><li>contour2 :</li><li>method :</li><li>parameter :</li></ul></li></ul><h3 id="直方图" tabindex="-1"><a class="header-anchor" href="#直方图" aria-hidden="true">#</a> 直方图</h3><blockquote><p>图像的灰度分布, X轴灰度值(0~255), y轴具有同一灰度值的点数</p></blockquote><p>BINS : 直方图每个灰度值对应的点数 DIMS : 收集数据的参考数目 RANGE : 统计灰度值范围(一般 : [0, 256])</p><ul><li><p><code>calcHist(images, channels, mask, histSize, ranges[, hist[, accumulate]]) -&gt; hist</code> : 计算直方图</p><ul><li>images : 图像数组([img])</li><li>channels : 统计通道数组, 灰度图(只有一个通道, [0]), 彩色图(三个通道, B:[0] G:[1] R:[2])</li><li>mask : 掩模图像(None : 统计整副图像; mask : 统计掩模区域)</li><li>histSize : BIN的数目([256])</li><li>ranges : 像素值的范围([0, 256])</li><li>accumulate : 直方图是否叠加</li></ul></li><li><p><code>equalizeHist(src[, dst]) -&gt; dst</code> : 直方图均衡化</p><ul><li>src : 图像</li></ul></li><li><p><code>createCLAHE([, clipLimit[, tileGridSize]]) -&gt; retval</code> : 自适应直方图均衡化</p><ul><li>clipLimit :</li><li>tileGridSize :</li></ul></li><li><p><code>calcBackProject(images, channels, hist, ranges, scale[, dst]) -&gt; dst</code> : 反向投影</p><ul><li>images :</li><li>channels :</li><li>hist :</li><li>ranges :</li><li>scale :</li></ul></li></ul><h3 id="傅里叶变换" tabindex="-1"><a class="header-anchor" href="#傅里叶变换" aria-hidden="true">#</a> 傅里叶变换</h3><blockquote><p>DFT : Discrete Fourier Transform IDFT : Inverse Discrete Fourier Transform</p></blockquote><ul><li><p><code>dft(src[, dst[, flags[, nonzeroRows]]]) -&gt; dst</code> : 傅里叶变换</p></li><li><p><code>idft(src[, dst[, flags[, nonzeroRows]]]) -&gt; dst</code> : 发傅里叶变换</p></li><li><p><code>getOptimalDFTSize(vecsize) -&gt; retval</code> : 得到最佳傅里叶变换尺寸</p></li></ul><h3 id="模板匹配" tabindex="-1"><a class="header-anchor" href="#模板匹配" aria-hidden="true">#</a> 模板匹配</h3><blockquote><p>在一副大图中搜寻查找模板图像位置</p></blockquote><ul><li><p><code>matchTemplate(image, templ, method[, result[, mask]]) -&gt; result</code> : 模板匹配</p></li><li><p><code>minMaxLoc(src[, mask]) -&gt; minVal, maxVal, minLoc, maxLoc</code> : 获取最大值最小值位置</p></li></ul><h3 id="直线检测" tabindex="-1"><a class="header-anchor" href="#直线检测" aria-hidden="true">#</a> 直线检测</h3><ul><li><p><code>HoughLines(image, rho, theta, threshold[, lines[, srn[, stn[, min_theta[, max_theta]]]]]) -&gt; lines</code> : 霍夫直线</p></li><li><p><code>HoughLinesP(image, rho, theta, threshold[, lines[, minLineLength[, maxLineGap]]]) -&gt; lines</code> : 概率霍夫直线</p><blockquote><p>P : Probabilistic(概率)</p></blockquote><ul><li>minLineLength : 线的最短长度(小于该值被忽略)</li><li>maxLineCap : 两条线段之间的最大间隔(小于该值两条直线被看成一条直线)</li></ul></li><li><p><code>createLineSegmentDetector([, _refine[, _scale[, _sigma_scale[, _quant[, _ang_th[, _log_eps[, _density_th[, _n_bins]]]]]]]]) -&gt; retval</code> : 创建直线检测</p><blockquote><p><code>detecte()</code></p></blockquote></li></ul><h3 id="斑点检测" tabindex="-1"><a class="header-anchor" href="#斑点检测" aria-hidden="true">#</a> 斑点检测</h3><ul><li><p><code>impleBlobDetector_create([, parameters]) -&gt; retval</code> : 创建斑点检测</p></li><li><p><code>drawKeypoints(image, keypoints, outImage[, color[, flags]]) -&gt; outImage</code> : 绘制关键点</p></li></ul><h3 id="圆形检测" tabindex="-1"><a class="header-anchor" href="#圆形检测" aria-hidden="true">#</a> 圆形检测</h3><ul><li><code>HoughCircles(image, method, dp, minDist[, circles[, param1[, param2[, minRadius[, maxRadius]]]]]) -&gt; circles</code> : 霍夫圆环 <ul><li>image : 灰度图</li><li>method : 检测方法，目前唯一方法: HOUGH_GRADIENT</li><li>dp : 累加器分辨率与图像分辨率的反比。 <ul><li>dp = 1，则累加器具有与输入图像相同的分辨率。</li><li>dp = 2，则累加器的宽度和高度都是一半。</li></ul></li><li>minDist : 检测到的圆的中心之间的最小距离。</li><li>param1 : 检测方法的参数1</li><li>param2 : 检测方法的参数2</li><li>minRadius : 最小圆半径</li><li>maxRadius : 最大圆半径</li></ul></li></ul><h3 id="图像分割" tabindex="-1"><a class="header-anchor" href="#图像分割" aria-hidden="true">#</a> 图像分割</h3><ul><li><p><code>distanceTransform(src, distanceType, maskSize[, dst[, dstType]]) -&gt; dst</code> : 距离变换</p></li><li><p><code>connectedComponents(image[, labels[, connectivity[, ltype]]]) -&gt; retval, labels</code> :</p></li><li><p><code>watershed(image, markers) -&gt; markers</code> : 分水岭算法</p></li></ul><h3 id="前景提取" tabindex="-1"><a class="header-anchor" href="#前景提取" aria-hidden="true">#</a> 前景提取</h3><ul><li><code>grabCut(img, mask, rect, bgdModel, fgdModel, iterCount[, mode]) -&gt; mask, bgdModel, fgdModel</code> : GrabCut算法提取图像的前景</li></ul><h2 id="图像特征" tabindex="-1"><a class="header-anchor" href="#图像特征" aria-hidden="true">#</a> 图像特征</h2><h3 id="角点检测" tabindex="-1"><a class="header-anchor" href="#角点检测" aria-hidden="true">#</a> 角点检测</h3><ul><li><p><code>cornerHarris(src, blockSize, ksize, k[, dst[, borderType]]) -&gt; dst</code> : Harris 角点检测</p></li><li><p><code>cornerSubPix(image, corners, winSize, zeroZone, criteria) -&gt; corners</code> : 亚像素级精确度角点检测</p></li><li><p><code>goodFeaturesToTrack(image, maxCorners, qualityLevel, minDistance[, corners[, mask[, blockSize[, useHarrisDetector[, k]]]]]) -&gt; corners</code> : Shi-Tomasi 角点检测,</p></li><li><p><code>FastFeatureDetector_create([, threshold[, nonmaxSuppression[, type]]]) -&gt; retval</code> : Fast 角点检测</p></li></ul><h3 id="sift" tabindex="-1"><a class="header-anchor" href="#sift" aria-hidden="true">#</a> SIFT</h3><h3 id="surf" tabindex="-1"><a class="header-anchor" href="#surf" aria-hidden="true">#</a> SURF</h3><h3 id="brief" tabindex="-1"><a class="header-anchor" href="#brief" aria-hidden="true">#</a> BRIEF</h3><h3 id="orb" tabindex="-1"><a class="header-anchor" href="#orb" aria-hidden="true">#</a> ORB</h3><ul><li><code>ORB_create([, nfeatures[, scaleFactor[, nlevels[, edgeThreshold[, firstLevel[, WTA_K[, scoreType[, patchSize[, fastThreshold]]]]]]]]]) -&gt; retval</code> : ORB 算法</li></ul><h3 id="特征匹配" tabindex="-1"><a class="header-anchor" href="#特征匹配" aria-hidden="true">#</a> 特征匹配</h3><ul><li><p><code>BFMatcher()</code> : 蛮力匹配器</p><ul><li><code>create(cls, normType=None, crossCheck=None)</code> : 静态, 创建方法</li><li><code>match(queryDescriptors, trainDescriptors[, mask]) -&gt; matches</code> : 匹配</li><li><code>knnMatch(queryDescriptors, trainDescriptors, k[, mask[, compactResult]]) -&gt; matches</code> : knn 匹配</li></ul></li><li><p><code>drawMatchesKnn(img1, keypoints1, img2, keypoints2, matches1to2, outImg[, matchColor[, singlePointColor[, matchesMask[, flags]]]]) -&gt; outImg</code> : 绘制 knn 匹配</p></li><li><p><code>FlannBasedMatcher()</code> : FLANN 匹配器</p></li><li><p><code>findHomography(srcPoints, dstPoints[, method[, ransacReprojThreshold[, mask[, maxIters[, confidence]]]]]) -&gt; retval, mask</code> :</p></li><li><p><code>drawMatches(img1, keypoints1, img2, keypoints2, matches1to2, outImg[, matchColor[, singlePointColor[, matchesMask[, flags]]]]) -&gt; outImg</code> : 绘制匹配</p></li></ul><h2 id="视频分析" tabindex="-1"><a class="header-anchor" href="#视频分析" aria-hidden="true">#</a> 视频分析</h2><h3 id="meanshift-camshift" tabindex="-1"><a class="header-anchor" href="#meanshift-camshift" aria-hidden="true">#</a> Meanshift &amp; Camshift</h3><ul><li><p><code>CamShift(probImage, window, criteria) -&gt; retval, window</code> :</p></li><li><p><code>meanShift(probImage, window, criteria) -&gt; retval, window</code> :</p></li></ul><h3 id="光流" tabindex="-1"><a class="header-anchor" href="#光流" aria-hidden="true">#</a> 光流</h3><ul><li><p><code>calcOpticalFlowPyrLK(prevImg, nextImg, prevPts, nextPts[, status[, err[, winSize[, maxLevel[, criteria[, flags[, minEigThreshold]]]]]]]) -&gt; nextPts, status, err</code> :</p></li><li><p><code>calcOpticalFlowFarneback(prev, next, flow, pyr_scale, levels, winsize, iterations, poly_n, poly_sigma, flags) -&gt; flow</code> :</p></li></ul><h3 id="背景减除" tabindex="-1"><a class="header-anchor" href="#背景减除" aria-hidden="true">#</a> 背景减除</h3><ul><li><p><code>createBackgroundSubtractorMOG2([, history[, varThreshold[, detectShadows]]]) -&gt; retval</code> :</p></li><li><p><code>createBackgroundSubtractorKNN([, history[, dist2Threshold[, detectShadows]]]) -&gt; retval</code> :</p></li></ul><h2 id="摄像机标定和-3d-重构" tabindex="-1"><a class="header-anchor" href="#摄像机标定和-3d-重构" aria-hidden="true">#</a> 摄像机标定和 3D 重构</h2><ul><li><p><code>findChessboardCorners(image, patternSize[, corners[, flags]]) -&gt; retval, corners</code> :</p></li><li><p><code>drawChessboardCorners(image, patternSize, corners, patternWasFound) -&gt; image</code> :</p></li><li><p><code>calibrateCamera(objectPoints, imagePoints, imageSize, cameraMatrix, distCoeffs[, rvecs[, tvecs[, flags[, criteria]]]]) -&gt; retval, cameraMatrix, distCoeffs, rvecs, tvecs</code> :</p></li><li><p><code>getOptimalNewCameraMatrix(cameraMatrix, distCoeffs, imageSize, alpha[, newImgSize[, centerPrincipalPoint]]) -&gt; retval, validPixROI</code> :</p></li><li><p><code>undistort(src, cameraMatrix, distCoeffs[, dst[, newCameraMatrix]]) -&gt; dst</code> :</p></li><li><p><code>initUndistortRectifyMap(cameraMatrix, distCoeffs, R, newCameraMatrix, size, m1type[, map1[, map2]]) -&gt; map1, map2</code> :</p></li><li><p><code>remap(src, map1, map2, interpolation[, dst[, borderMode[, borderValue]]]) -&gt; dst</code> :</p></li><li><p><code>projectPoints(objectPoints, rvec, tvec, cameraMatrix, distCoeffs[, imagePoints[, jacobian[, aspectRatio]]]) -&gt; imagePoints, jacobian</code> :</p></li><li><p><code>findFundamentalMat(points1, points2[, method[, param1[, param2[, mask]]]]) -&gt; retval, mask</code> :</p></li><li><p><code>computeCorrespondEpilines(points, whichImage, F[, lines]) -&gt; lines</code> :</p></li><li><p><code>StereoBM_create([, numDisparities[, blockSize]]) -&gt; retval</code> :</p></li><li><p><code>cv2.ml.KNearest_create()</code> :</p><ul><li><code>train(self, samples, responses)</code> :</li><li><code>findNearest(samples, k[, results[, neighborResponses[, dist]]]) -&gt; retval, results, neighborResponses, dist</code> :</li><li><code>predict(self, samples)</code> :</li></ul></li><li><p><code>cv2.ml.SVM_create()</code> :</p></li><li><p><code>cartToPolar(x, y[, magnitude[, angle[, angleInDegrees]]]) -&gt; magnitude, angle</code> :</p></li><li><p><code>kmeans(data, K, bestLabels, criteria, attempts, flags[, centers]) -&gt; retval, bestLabels, centers</code> :</p></li><li><p><code>fastNlMeansDenoisingColored(src[, dst[, h[, hColor[, templateWindowSize[, searchWindowSize]]]]]) -&gt; dst</code> :</p></li><li><p><code>fastNlMeansDenoisingMulti(srcImgs, imgToDenoiseIndex, temporalWindowSize[, dst[, h[, templateWindowSize[, searchWindowSize]]]]) -&gt; dst</code> :</p></li><li><p><code>createMergeDebevec() -&gt; retval</code> :</p></li><li><p><code>createMergeRobertson() -&gt; retval</code> :</p></li><li><p><code>createTonemapDurand([, gamma[, contrast[, saturation[, sigma_space[, sigma_color]]]]]) -&gt; retval</code> :</p></li><li><p><code>createMergeMertens([, contrast_weight[, saturation_weight[, exposure_weight]]]) -&gt; retval</code> :</p></li><li><p><code>createCalibrateDebevec([, samples[, lambda[, random]]]) -&gt; retval</code> :</p></li><li><p><code>createCalibrateRobertson([, max_iter[, threshold]]) -&gt; retval</code> :</p></li><li><p><code>inpaint(src, inpaintMask, inpaintRadius, flags[, dst]) -&gt; dst</code> :</p></li><li><p><code>CascadeClassifier()</code> :</p></li></ul>`,80);function _(T,R){const l=o("ExternalLinkIcon");return s(),c("div",null,[r,e("ul",null,[e("li",null,[e("a",p,[i("OpenCV Docs"),a(l)])]),e("li",null,[e("a",u,[i("OpenCV Python Tutorial"),a(l)])]),e("li",null,[e("a",h,[i("Face Recognition"),a(l)]),g]),e("li",null,[e("a",m,[i("DeepFaceLive"),a(l)]),k]),e("li",null,[e("a",v,[i("IGL"),a(l)]),b])]),f])}const E=t(d,[["render",_],["__file","opencv.html.vue"]]);export{E as default};
