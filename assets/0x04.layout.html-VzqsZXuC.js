import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as t,o as c,c as o,a as p,b as n,e as a,d as i,f as l}from"./app-JL8Wirg4.js";const d={},u=n("h2",{id:"reference",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reference","aria-hidden":"true"},"#"),a(" reference")],-1),r=n("a",{href:"%E2%9C%85"},"💯",-1),k={href:"https://flutter.cn/docs/ui/layout/constraints",target:"_blank",rel:"noopener noreferrer"},h=l(`<h2 id="布局约束规则" tabindex="-1"><a class="header-anchor" href="#布局约束规则" aria-hidden="true">#</a> 布局约束规则</h2><ul><li><p><code>Constraints go down. Sizes go up. Positions are set by parents.</code></p><ul><li><p><code>Constraints go down.</code>: 约束向下传递</p><blockquote><p>父级 <code>Widget</code> 向子级 <code>Widget</code> 下发约束条件，这些条件包含了宽度和高度的最小值和最大值。</p></blockquote></li><li><p><code>Sizes go up.</code>: 大小向上报告</p><blockquote><p>子级 <code>Widget</code> 会根据自身属性和父级下发的约束条件确定自身的大小，然后将确定的结果向上返回给父级 <code>Widget</code>。</p></blockquote></li><li><p><code>Positions are set by parents.</code>: 父级设置位置</p><blockquote><p>父级 <code>Widget</code> 在确定了子级 <code>Widget</code> 的大小后，会决定子级 <code>Widget</code> 的位置。父级 <code>Widget</code> 会根据自身的布局策略和布局表现决定子级 <code>Widget</code> 的放置位置。</p></blockquote></li></ul></li><li><p><code>Tight</code> vs <code>loose</code></p><ul><li><p><code>Tight</code>: 严格约束。限制了 <code>Widget</code> 的最大宽度和最大高度，<code>Widget</code> 的大小只能在一定的范围内变动。</p><blockquote><p>对于某些需要精确控制大小的 <code>Widget</code>（例如，按钮或输入框），严格约束往往更为合适。</p></blockquote></li><li><p><code>Loose</code>: 宽松约束。为 <code>Widget</code> 提供了更大的尺寸调整空间，只限制了 <code>Widget</code> 的最小宽度和最小高度，允许 <code>Widget</code> 自由地增大其尺寸。</p><blockquote><p>这在需要 <code>Widget</code> 尽可能地占用更多空间的场合下更为常用，例如，一个 <code>Widget</code> 填充其父级 <code>Widget</code> 的剩余空间时。</p></blockquote></li></ul></li></ul><hr><h2 id="渲染对象组件" tabindex="-1"><a class="header-anchor" href="#渲染对象组件" aria-hidden="true">#</a> 渲染对象组件</h2><h3 id="widget" tabindex="-1"><a class="header-anchor" href="#widget" aria-hidden="true">#</a> Widget</h3><blockquote><p>抽象类</p></blockquote><h3 id="renderobjectwidget" tabindex="-1"><a class="header-anchor" href="#renderobjectwidget" aria-hidden="true">#</a> RenderObjectWidget</h3><blockquote><p>抽象类，继承于 <code>Widget</code>。</p></blockquote><h3 id="leafrenderobjectwidget" tabindex="-1"><a class="header-anchor" href="#leafrenderobjectwidget" aria-hidden="true">#</a> LeafRenderObjectWidget</h3><blockquote><p>抽象了，继承于 <code>RenderObjectWidget</code>，用于叶子组件。</p></blockquote><h3 id="singlechildrenderobjectwidget" tabindex="-1"><a class="header-anchor" href="#singlechildrenderobjectwidget" aria-hidden="true">#</a> SingleChildRenderObjectWidget</h3><blockquote><p>抽象类，继承于 <code>RenderObjectWidget</code>，用于渲染单个子组件。</p></blockquote><h3 id="multichildrenderobjectwidget" tabindex="-1"><a class="header-anchor" href="#multichildrenderobjectwidget" aria-hidden="true">#</a> MultiChildRenderObjectWidget</h3><blockquote><p>抽象类，继承于 <code>RenderObjectWidget</code>，用于渲染多个子组件。</p></blockquote><hr><h2 id="布局组件" tabindex="-1"><a class="header-anchor" href="#布局组件" aria-hidden="true">#</a> 布局组件</h2><h3 id="customsinglechildlayout" tabindex="-1"><a class="header-anchor" href="#customsinglechildlayout" aria-hidden="true">#</a> CustomSingleChildLayout</h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="custommultichildlayout" tabindex="-1"><a class="header-anchor" href="#custommultichildlayout" aria-hidden="true">#</a> CustomMultiChildLayout</h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><h2 id="弹性布局" tabindex="-1"><a class="header-anchor" href="#弹性布局" aria-hidden="true">#</a> 弹性布局</h2><blockquote><p><code>Flexbox</code> 布局，根据父容器的变化自动调整自己宽高的布局方式。</p></blockquote><h3 id="flex-弹性" tabindex="-1"><a class="header-anchor" href="#flex-弹性" aria-hidden="true">#</a> Flex - “弹性”</h3><blockquote><p><code>MultiChildRenderObjectWidget</code> 实现类</p></blockquote><ul><li>direction : 主轴方向</li></ul><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 等同于 Row</span>
<span class="token class-name">Flex</span><span class="token punctuation">(</span>
  direction<span class="token punctuation">:</span> <span class="token class-name">Axis</span><span class="token punctuation">.</span>horizontal<span class="token punctuation">,</span> <span class="token comment">// 横向</span>
  children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token comment">// 等同于 Column</span>
<span class="token class-name">Flex</span><span class="token punctuation">(</span>
  direction<span class="token punctuation">:</span> <span class="token class-name">Axis</span><span class="token punctuation">.</span>vertical<span class="token punctuation">,</span> <span class="token comment">// 竖向</span>
  children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
<span class="token punctuation">)</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="row-行" tabindex="-1"><a class="header-anchor" href="#row-行" aria-hidden="true">#</a> Row - “行”</h3><blockquote><p>继承于 <code>Flex</code>，X 轴 - 水平布局。</p></blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Row</span><span class="token punctuation">(</span>
  children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="column-列" tabindex="-1"><a class="header-anchor" href="#column-列" aria-hidden="true">#</a> Column - “列”</h3><blockquote><p>继承于 <code>Flex</code>，Y 轴 - 垂直布局。</p></blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Column</span><span class="token punctuation">(</span>
  children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="wrap-换行" tabindex="-1"><a class="header-anchor" href="#wrap-换行" aria-hidden="true">#</a> Wrap - “换行”</h3><blockquote><p>流式布局，先 <code>Row</code> 再 <code>Column</code>，从左往右，从上往下，的顺序依次布局。</p></blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Wrap</span><span class="token punctuation">(</span>
  children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="flexible-有弹性的" tabindex="-1"><a class="header-anchor" href="#flexible-有弹性的" aria-hidden="true">#</a> Flexible - “有弹性的”</h3><blockquote><p>控制子组件按照弹性规则布局</p></blockquote><ul><li>flex : 弹性权重 (多个弹性组件按照权重比例分配宽度)</li><li>fit : 适配规则 (FlexFit)</li></ul><blockquote><p>FlexFit</p></blockquote><ul><li>tight : 收紧(会占满布局空间)</li><li>loose : 宽松(不会占满布局空间)</li></ul><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 按照 1:2:3 的比例划分空间</span>
<span class="token class-name">Row</span><span class="token punctuation">(</span>
  chilrend<span class="token punctuation">:</span> <span class="token punctuation">[</span>
    <span class="token class-name">Flexible</span><span class="token punctuation">(</span>flex<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> child<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Flexible</span><span class="token punctuation">(</span>flex<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> child<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Flexible</span><span class="token punctuation">(</span>flex<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> child<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">)</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="expaneded-扩展" tabindex="-1"><a class="header-anchor" href="#expaneded-扩展" aria-hidden="true">#</a> Expaneded - “扩展”</h3><blockquote><p>继承于 <code>Flexible</code>，扩展填满可用区域，等效于 <code>tight</code> 模式的 <code>Flexible</code>。</p></blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 按照 1:2:3 的比例划分空间</span>
<span class="token class-name">Row</span><span class="token punctuation">(</span>
  chilrend<span class="token punctuation">:</span> <span class="token punctuation">[</span>
    <span class="token class-name">Expaneded</span><span class="token punctuation">(</span>flex<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> child<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Expaneded</span><span class="token punctuation">(</span>flex<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> child<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Expaneded</span><span class="token punctuation">(</span>flex<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> child<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">)</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="spacer-间隔" tabindex="-1"><a class="header-anchor" href="#spacer-间隔" aria-hidden="true">#</a> Spacer - “间隔”</h3><blockquote><p>用于在弹性布局中添加间隔</p></blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Flex</span><span class="token punctuation">(</span>
  children<span class="token punctuation">:</span><span class="token punctuation">[</span>
    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;one&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>本质 : <code>Expanded</code> + <code>SizedBox</code> 组合实现</p></blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token metadata function">@override</span>
<span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token class-name">Expanded</span><span class="token punctuation">(</span>
    flex<span class="token punctuation">:</span> flex<span class="token punctuation">,</span>
    child<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">SizedBox</span><span class="token punctuation">.</span><span class="token function">shrink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="层叠布局" tabindex="-1"><a class="header-anchor" href="#层叠布局" aria-hidden="true">#</a> 层叠布局</h2><h3 id="stack-栈" tabindex="-1"><a class="header-anchor" href="#stack-栈" aria-hidden="true">#</a> Stack - “栈”</h3><blockquote><p><code>MultiChildRenderObjectWidget</code> 实现类，Z 轴 - 层叠布局。</p></blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="indexedstack-索引栈" tabindex="-1"><a class="header-anchor" href="#indexedstack-索引栈" aria-hidden="true">#</a> IndexedStack - “索引栈”</h3><blockquote><p>内部实现类 <code>_RawIndexedStack</code> 继承于 <code>Stack</code>，显示栈内指定索引组件。</p></blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">IndexedStack</span><span class="token punctuation">(</span>
  index<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 显示栈内索引为 1 的组件</span>
  children<span class="token punctuation">:</span> <span class="token punctuation">[</span>
    <span class="token class-name">Center</span><span class="token punctuation">(</span>child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;stack 0&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Center</span><span class="token punctuation">(</span>child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;stack 1&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Center</span><span class="token punctuation">(</span>child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;stack 2&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="positioned-绝对定位" tabindex="-1"><a class="header-anchor" href="#positioned-绝对定位" aria-hidden="true">#</a> Positioned - “绝对定位”</h3><blockquote><p>位置组件，用于控制子组件在栈中的位置</p></blockquote><ul><li>top、bottom、left、right : 定位组件的位置</li><li>width、height : 控制子组件的尺寸</li></ul><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Stack</span><span class="token punctuation">(</span>
  children<span class="token punctuation">:</span> <span class="token punctuation">[</span>
    <span class="token class-name">Positioned</span><span class="token punctuation">(</span> <span class="token comment">// 定位到右下角</span>
      right<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
      bottom<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
      child<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="动态布局" tabindex="-1"><a class="header-anchor" href="#动态布局" aria-hidden="true">#</a> 动态布局</h2><h3 id="flow-流动" tabindex="-1"><a class="header-anchor" href="#flow-流动" aria-hidden="true">#</a> Flow - “流动”</h3><ul><li><code>delegate</code>: 代理 (<code>FlowDelegate</code>)，通过代理控制布局</li></ul><blockquote><p><code>FlowDelegate</code> : 流动代理，通过继承该类实现自定义布局</p></blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,68);function b(v,m){const s=t("ExternalLinkIcon");return c(),o("div",null,[p(" more "),u,n("ul",null,[n("li",null,[r,n("a",k,[a("深入理解 Flutter 布局约束"),i(s)])])]),h])}const f=e(d,[["render",b],["__file","0x04.layout.html.vue"]]);export{f as default};
