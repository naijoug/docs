import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o,c as d,a as c,b as e,f as t}from"./app-y-ZZp_0I.js";const r={},n=e("blockquote",null,[e("p",null,"13 - Java (8)")],-1),h=t('<h2 id="_13-1-私有构造函数" tabindex="-1"><a class="header-anchor" href="#_13-1-私有构造函数" aria-hidden="true">#</a> 13.1 私有构造函数</h2><blockquote><p>从继承的角度看，把构造函数声明为私有会有何作用？</p></blockquote><h2 id="_13-2-异常处理中的返回" tabindex="-1"><a class="header-anchor" href="#_13-2-异常处理中的返回" aria-hidden="true">#</a> 13.2 异常处理中的返回</h2><blockquote><p>在 <code>Java</code> 中，若在 <code>try-catch-finally</code> 的 <code>try</code> 语句块中插入 <code>return</code> 语句，<code>finally</code> 语句块是否还会执行？</p></blockquote><h2 id="_13-3-final-们" tabindex="-1"><a class="header-anchor" href="#_13-3-final-们" aria-hidden="true">#</a> 13.3 <code>final</code> 们</h2><blockquote><p><code>final</code>、<code>finally</code> 和 <code>finalize</code> 之间有何差异？</p></blockquote><h2 id="_13-4-泛型与模板" tabindex="-1"><a class="header-anchor" href="#_13-4-泛型与模板" aria-hidden="true">#</a> 13.4 泛型与模板</h2><blockquote><p><code>C++</code> 模板和 <code>Java</code> 泛型之间有何不同？</p></blockquote><h2 id="_13-5-treemap、hashmap、linkedhashmap" tabindex="-1"><a class="header-anchor" href="#_13-5-treemap、hashmap、linkedhashmap" aria-hidden="true">#</a> 13.5 <code>TreeMap、HashMap、LinkedHashMap</code></h2><blockquote><p>解释一下 <code>TreeMap、HashMap、LinkedHashMap</code> 三者的不同之处。举例说明各自最适合的情况。</p></blockquote><h2 id="_13-6-反射" tabindex="-1"><a class="header-anchor" href="#_13-6-反射" aria-hidden="true">#</a> 13.6 反射</h2><blockquote><p>解释下 <code>Java</code> 中对象反射是什么，有什么用处。</p></blockquote><h2 id="_13-7-lambda-表达式" tabindex="-1"><a class="header-anchor" href="#_13-7-lambda-表达式" aria-hidden="true">#</a> 13.7 <code>lambda</code> 表达式</h2><blockquote><p>有一个名为 <code>Country</code> 的类，它有两种方法，一种是 <code>getContinent()</code> 返回该国家所在大洲，另一种是 <code>getPopulation()</code> 返回本国人口。实现一种名为 <code>getPopulation(List&lt;Country&gt; counties,String continent)</code> 的方法，返回值类型为 <code>int</code>。它能根据指定的大洲名和国家列表计算出该大洲的人口总数。</p></blockquote><h2 id="_13-8-lambda-随机数" tabindex="-1"><a class="header-anchor" href="#_13-8-lambda-随机数" aria-hidden="true">#</a> 13.8 <code>lambda</code> 随机数</h2><blockquote><p>使用lambda表达式写一种名为 <code>getRandomSubset(List&lt;Integer&gt; list)</code> 的方法，返回值类型为 <code>List&lt;Integer&gt;</code>，返回一个任意大小的随机子集，所有子集（包括空子集）选中的概率都一样。</p></blockquote>',16);function i(l,s){return o(),d("div",null,[n,c(" more "),h])}const b=a(r,[["render",i],["__file","0x13.java.html.vue"]]);export{b as default};
