import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as e,c as t,a as r,f as i}from"./app--gyPjc9T.js";const s={},d=i('<h2 id="查找两个大文件共同的url" tabindex="-1"><a class="header-anchor" href="#查找两个大文件共同的url" aria-hidden="true">#</a> 查找两个大文件共同的URL</h2><blockquote><p>如何从 100 亿 <code>URL</code> 中找出形同的 <code>URL</code>？给定 a、b 两个文件，各存放 50 亿各 <code>URL</code>，每个 <code>URL</code> 各占 64B，内存限制为 4G。找出 a、b 两个文件中相同的 <code>URL</code>。</p></blockquote><details class="hint-container details"><summary>💡</summary><p>先计算 100 亿占用内存空间: 100 * 10000 * 10000 * 64B = 1000 * 1000 * 1000 * 10 * 64B ≈ 1024 * 1024 * 1024 * 640B = 640GB</p></details><h2 id="如何在100亿数据中找到中位数" tabindex="-1"><a class="header-anchor" href="#如何在100亿数据中找到中位数" aria-hidden="true">#</a> 如何在100亿数据中找到中位数？</h2><blockquote><p>给定100亿个无符号的乱序的整数序列，如何求出这100亿个数的中位数（中位数指的是排序后最中间那个数），内存只有512M。</p></blockquote><details class="hint-container details"><summary>💡</summary></details><h2 id="统计不同号码的个数" tabindex="-1"><a class="header-anchor" href="#统计不同号码的个数" aria-hidden="true">#</a> 统计不同号码的个数</h2><blockquote><p>已知某个文件内包含大量电话号码，每个号码为8位数字，如何统计不同号码的个数？内存限制100M</p></blockquote><details class="hint-container details"><summary>💡</summary></details><h2 id="出现频率最高的-100-个词" tabindex="-1"><a class="header-anchor" href="#出现频率最高的-100-个词" aria-hidden="true">#</a> 出现频率最高的 100 个词</h2><blockquote><p>假如有一个1G大小的文件，文件里每一行是一个词，每个词的大小不超过16byte，要求返回出现频率最高的100个词。内存大小限制是10M</p></blockquote><details class="hint-container details"><summary>💡</summary></details><h2 id="如何查询最热门的查询串" tabindex="-1"><a class="header-anchor" href="#如何查询最热门的查询串" aria-hidden="true">#</a> 如何查询最热门的查询串？</h2><blockquote><p>搜索引擎会通过日志文件把用户每次检索使用的所有查询串都记录下来，每个查询床的长度不超过 255 字节。 假设目前有 1000w 个记录（这些查询串的重复度比较高，虽然总数是 1000w，但如果除去重复后，则不超过 300w 个）。 请统计最热门的 10 个查询串，要求使用的内存不能超过 1G。（一个查询串的重复度越高，说明查询它的用户越多，也就越热门。）</p></blockquote><details class="hint-container details"><summary>💡</summary></details><h2 id="如何找出排名前-500-的数" tabindex="-1"><a class="header-anchor" href="#如何找出排名前-500-的数" aria-hidden="true">#</a> 如何找出排名前 500 的数？</h2><blockquote><p>有 1w 个数组，每个数组有 500 个元素，并且有序排列。如何在这 10000*500 个数中找出前 500 的数？</p></blockquote><details class="hint-container details"><summary>💡</summary></details><h2 id="如何按照-query-的频度排序" tabindex="-1"><a class="header-anchor" href="#如何按照-query-的频度排序" aria-hidden="true">#</a> 如何按照 query 的频度排序？</h2><blockquote><p>有 10 个文件，每个文件大小为 1G，每个文件的每一行存放的都是用户的 query，每个文件的 query 都可能重复。要求按照 query 的频度排序。</p></blockquote><details class="hint-container details"><summary>💡</summary></details><h2 id="数据中-topk-问题的常用套路" tabindex="-1"><a class="header-anchor" href="#数据中-topk-问题的常用套路" aria-hidden="true">#</a> 数据中 TopK 问题的常用套路</h2><blockquote><p>给定 100 个 int 数字，在其中找出最大的 10 个； 给定 10 亿个 int 数字，在其中找出最大的 10 个（这 10 个数字可以无序）； 给定 10 亿个 int 数字，在其中找出最大的 10 个（这 10 个数字依次排序）； 给定 10 亿个不重复的 int 数字，在其中找出最大的 10 个； 给定 10 个数组，每个数组中有 1 亿个 int 数字，在其中找出最大的 10 个； 给定 10 亿个 string 类型的数字，在其中找出最大的 10 个（仅需要查 1 次）； 给定 10 亿个 string 类型的数字，在其中找出最大的 k 个（需要反复多次查询，其中 k 是一个随机数字）。</p></blockquote><details class="hint-container details"><summary>💡</summary></details>',24);function o(c,n){return e(),t("div",null,[r(" more "),d])}const u=a(s,[["render",o],["__file","big-data.html.vue"]]);export{u as default};
