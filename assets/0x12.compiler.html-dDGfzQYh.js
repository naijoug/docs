import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o,c,a as d,f as a}from"./app-4qjgWOI3.js";const i={},n=a(`<hr><h2 id="编译器" tabindex="-1"><a class="header-anchor" href="#编译器" aria-hidden="true">#</a> 编译器</h2><h3 id="❓ios-整个编译流程说一下" tabindex="-1"><a class="header-anchor" href="#❓ios-整个编译流程说一下" aria-hidden="true">#</a> ❓iOS 整个编译流程说一下</h3><details class="hint-container details"><summary>💡</summary><ul><li><p>预处理：这一步主要是处理源代码中的预处理器指令，如 <code>#define、#include</code> 等，并将结果输出为预处理后的源文件。</p></li><li><p>编译：预处理后的源文件被编译器（例如<code>Clang</code>）编译，进行词法分析、语法分析、语义分析和优化，将代码转换成对应的中间代码。然后将中间代码进一步优化并生成汇编代码。</p></li><li><p>汇编：汇编器（例如 <code>Clang</code> 的集成汇编器）将汇编代码转换为目标文件（<code>.o</code> 文件），即包含了机器语言代码的文件。</p></li><li><p>链接：链接器（例如 <code>ld</code>）将所有的目标文件以及所需的系统库和框架进行链接，生成可执行文件。这里涉及到的主要步骤有地址和空间的分配、符号决议及重定位。</p></li><li><p>打包：可执行文件配合对应的资源文件（如图片、音频等）一起打包，生成 <code>.ipa</code> 文件，这一步主要由 <code>Xcode</code> 的工具完成。</p></li><li><p>签名：<code>.ipa</code> 文件需要经过开发者的私钥进行签名才能在设备上运行，签名过程通常也称为代码签名。</p></li><li><p>安装：将签名后的 <code>.ipa</code> 文件安装到设备上，通常是通过 <code>iTunes</code> 或者 <code>Xcode</code> 进行安装。</p></li></ul></details><h3 id="❓app-的启动过程" tabindex="-1"><a class="header-anchor" href="#❓app-的启动过程" aria-hidden="true">#</a> ❓app 的启动过程</h3><details class="hint-container details"><summary>💡</summary><ul><li><p><code>main</code> 函数执行前：</p><ul><li>点击图标后，由 <code>springboard</code> 进程通过 <code>posix_spawn</code> 函数来创建新的进程。</li><li>动态链接器 <code>dyld</code> 作为新进程的主线程开始执行。首先加载 <code>Mach-O</code> 文件中的 <code>dyld</code> 路径，解析加载 <code>App</code> 的所有依赖库。</li><li>在加载依赖库过程中，<code>dyld</code> 首先会通过 <code>mach-o</code> 加载器解析 <code>mach-o</code> 文件，按依赖顺序进行加载。然后对 <code>library</code> 进行 <code>rebase</code> 和 <code>bind</code> 操作，以确保 <code>library</code> 在内存中的正确位置。接着进行初步的 <code>lazy binding</code> 和 <code>weak binding</code> 操作。</li><li><code>dyld</code> 为了提高执行性能，会缓存一份共享缓存，提高下次启动性能。</li></ul></li><li><p><code>Runtime</code> 初始化：</p><ul><li>加载完成后，<code>dyld</code> 会初始化 <code>runtime</code> 并调用所有 <code>image</code> 中的 <code>+load</code> 方法。</li><li>之后对 <code>C++</code> 全局构造器和 <code>__attribute__((constructor))</code> 修饰的方法进行调用。</li><li>进行完上述步骤，<code>dyld</code> 则把控制权交回给 <code>App</code>。</li></ul></li><li><p><code>main</code> 函数和 <code>UIApplicationMain</code> 函数执行：</p><ul><li><code>main</code> 函数开始执行，会调用 <code>UIApplicationMain</code> 函数。</li><li>在 <code>UIApplicationMain</code> 中，它会创建 <code>UIApplication</code> 对象，并设置 <code>UIApplicationDelegate</code>，并启动主运行循环（即<code>Main RunLoop</code>），开始接收用户操作。</li><li><code>UIApplication</code> 启动后，它会根据 <code>Info.plist</code> 是否指定 <code>Main storyboard</code> 文件名，如果指定，那么就会加载 <code>Main storyboard</code>，创建和设置 <code>UIWindow</code> 和 <code>root view controller</code>，然后显示 <code>window</code> 到屏幕，<code>App</code> 呈现出来。</li></ul></li><li><p><code>finishLaunching</code> 流程：</p><ul><li><code>UIApplication</code> 对象会回调 <code>UIApplicationDelegate</code> 中的 <code>application:didFinishLaunchingWithOptions:</code> 方法，这是 <code>App</code> 启动的最后一步，之后就进入了事件处理循环，启动流程到此结束。</li></ul></li></ul></details><h3 id="❓从代码仓库拉取代码-到生成-ipa-都有哪些过程-期间都生成了什么文件" tabindex="-1"><a class="header-anchor" href="#❓从代码仓库拉取代码-到生成-ipa-都有哪些过程-期间都生成了什么文件" aria-hidden="true">#</a> ❓从代码仓库拉取代码，到生成 <code>.ipa</code> 都有哪些过程，期间都生成了什么文件</h3><details class="hint-container details"><summary>💡</summary><ul><li><p>拉取代码</p><blockquote><p>使用版本控制工具（如<code>Git</code>）从代码仓库拉取项目代码。</p></blockquote></li><li><p>预处理</p><blockquote><p>通过 <code>Xcode</code> 或命令行工具进行预处理，将源代码中的宏等预处理指令进行展开。这个过程并不直接生成文件，只是对源代码进行预处理。</p></blockquote></li><li><p>编译</p><blockquote><p>预处理后的代码被编译器（如<code>Clang</code>）逐个编译为目标文件（<code>.o</code> 文件）。此过程中可能会生成一些中间文件，如预编译头文件 <code>.pch</code>，或者 <code>Swift</code> 模块文件 <code>.swiftmodule</code> 等。</p></blockquote></li><li><p>链接</p><blockquote><p>由链接器（如 <code>ld</code>）将所有的目标文件以及所需的系统库和框架进行链接，生成可执行的 <code>Mach-O</code> 文件。</p></blockquote></li><li><p>打包</p><blockquote><p>将可执行文件以及各种资源文件（如图片、<code>xib</code>、<code>storyboard</code> 文件等）打包到 <code>.app</code> 文件（即应用程序包）中。</p></blockquote></li><li><p>签名</p><blockquote><p>对 <code>.app</code> 文件进行签名，生成 <code>embedded.mobileprovision</code>（包含开发者证书和设备 <code>UDID</code>）、<code>CodeResources</code>（包含资源文件的哈希值）等文件，并被包含到 <code>.app</code> 文件中。</p></blockquote></li><li><p>生成 <code>.ipa</code></p><blockquote><p>将上述的 <code>.app</code> 文件以及 <code>iTunesArtwork</code>（<code>iTunes</code> 中用来展示的 <code>App</code> 图标）等文件打包进 <code>Payload</code> 文件夹，然后以 <code>.zip</code> 格式进行压缩，最后将文件后缀名改为 <code>.ipa</code>，就生成了最后的 <code>.ipa</code> 文件。</p></blockquote></li></ul></details><h3 id="❓程序到可执行文件的过程-链接过程都干了啥" tabindex="-1"><a class="header-anchor" href="#❓程序到可执行文件的过程-链接过程都干了啥" aria-hidden="true">#</a> ❓程序到可执行文件的过程，链接过程都干了啥</h3><details class="hint-container details"><summary>💡</summary><p>将程序转换为可执行文件可以分为编译和链接两个过程。</p><ul><li><p>编译：</p><ul><li>预处理：这一步主要处理源文件中的预处理命令，如宏定义、头文件包含等。</li><li>编译：预处理过的源文件被编译成汇编语言。</li><li>汇编：汇编程序将汇编语言文件转换为目标文件，这是个二进制文件，包含了源程序编译后的机器语言代码。</li></ul></li><li><p>链接：</p><blockquote><p>链接主要对编译生成的多个目标文件之间的引用进行解析并合并，输出为一个可执行文件。</p></blockquote><ul><li>符号解析：每个符号对应着一块内存，符号解析的主要目标就是找到这块内存的地址。链接器要负责把每个符号的引用与定义关联起来。</li><li>重定位：在符号解析的基础上，进行地址分配和重定位。地址分配就是把每个段分配一个运行时内存地址。重定位就是把每条指令和全局变量引用的符号修改成运行时地址。</li><li>段合并：将所有目标文件的同名段合并成一个段，位于一个可执行文件中的同一位置。</li><li>空间和地址分配：为每个段分配一个内存地址。</li><li>重定位表和符号表的创建和更新：创建和更新这两个表是为了程序的加载和运行。</li><li>调试及其它的信息：加入必要的调试等信息。</li><li>结果输出：将链接结果输出到可执行文件。</li></ul><p>链接，就是解决各个编译单元之间的引用问题，包括地址分配，符号解析，重定位等步骤。它是把各个编译单元编译生成的目标文件连接成一个完整的可执行程序的过程。</p></li></ul></details><h3 id="❓动态库静态库区别" tabindex="-1"><a class="header-anchor" href="#❓动态库静态库区别" aria-hidden="true">#</a> ❓动态库静态库区别</h3><details class="hint-container details"><summary>💡</summary><p>解释：</p><ul><li><p>静态库：在编译时就被链接到目标程序中，程序运行时不再需要该静态库。生成的可执行文件较大，因为所有使用的库函数代码都会被复制到目标代码中。因此，静态库的改动需要重新编译程序才能生效，但具有较好的可移植性。</p></li><li><p>动态库：在编译时并不会被链接到目标程序中，而是在程序运行时由系统动态地加载并链接到程序中。动态库虽然会缩小生成的可执行文件的体积，但需要保证运行环境中有相应的库文件。动态库的一个特点是，多个应用程序可以共享一个动态库的单一拷贝，这样可以节省系统资源。</p></li></ul><p>区别：</p><ul><li>空间占用：静态库会让程序体积变大，动态库则会让程序在运行时占用更多内存。</li><li>调试：静态库调试比较简单，因为所有的代码都在可执行文件中。而动态库则需要在运行时才能够进行调试。</li><li>兼容性：静态链接的程序更便于分发，因为它包含了所有需要的代码。而动态链接的程序则需要可以访问特定版本的动态库，否则可能会导致运行错误。</li><li>更新：动态库可以利用系统的动态链接机制进行更新，而不需要重新编译程序。</li></ul></details><h3 id="❓静态库和动态库各自的好处" tabindex="-1"><a class="header-anchor" href="#❓静态库和动态库各自的好处" aria-hidden="true">#</a> ❓静态库和动态库各自的好处</h3><details class="hint-container details"><summary>💡</summary><p>静态库的好处：</p><ul><li>高效：静态库在编译阶段就已经被包含到了二进制可执行文件中，运行时不需要额外的动态链接过程，所以从这个角度来说静态链接的执行效率会优于动态链接。</li><li>可移植性：因为静态库被打包到了最终的可执行文件中，可以简化程序的发布，不需要考虑是否缺少某些动态库。</li><li>安全：避免了动态库版本不一致导致的问题。</li></ul><p>动态库的好处：</p><ul><li>节省资源：若有很多程序都要用到某个库，那么使用静态库将会在每个程序中都生成一份这个库的拷贝。而动态库只需要一份拷贝，所有的程序共享同一份动态库，这样就节省了磁盘空间和内存。</li><li>更新简便：如果库需要更新或者修复 <code>bug</code>，只需要重新编译库，然后替换现有的动态库文件即可，不需要对使用到这个库的软件进行重新链接。对于使用静态库的程序则需要重新编译链接全部程序。</li><li>动态链接：可以在程序运行时动态加载所需的库，甚至是程序启动后再决定加载哪个库。这极大的提高了程序的灵活性和功能的扩展性。</li></ul></details><h3 id="❓说说对-bitcode-的理解和作用" tabindex="-1"><a class="header-anchor" href="#❓说说对-bitcode-的理解和作用" aria-hidden="true">#</a> ❓说说对 <code>bitcode</code> 的理解和作用</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>Bitcode</code> 是苹果在 <code>2015</code> 年推出的一个新的编译选项，它是 <code>LLVM</code>（低级虚拟机）的一种中间表示（<code>Intermediate Representation，IR</code>）形式。对源代码做完一些基本的语义分析和验证工作后，就可以转化成<code>Bitcode</code>。</p></blockquote><p><code>Bitcode</code> 的出现是为了支持苹果的 <code>App Thinning</code> 特性。具体来说，当提交一个包含 <code>Bitcode</code> 的应用到 <code>App Store</code> 时，苹果会在后台重新编译提交的应用并进行优化，生成针对各种设备的具体执行文件。因此，当用户从 <code>App Store</code> 下载应用时，他们只需下载适用于他们自己设备架构的二进制代码，而无需下载面向所有设备的通用二进制代码。</p><p>优点：</p><ul><li>节省存储空间：用户下载的应用体积更小，节省了设备的存储空间。</li><li>提高性能：苹果可以根据特定硬件和 <code>iOS</code> 版本进行特定的优化，从而更好地利用硬件性能。</li><li>更新兼容：当苹果引 <code>introduce</code> 新的硬件或者指令集时，可以在后台重新编译 <code>Bitcode</code>，自动使应用适配最新的设备，而无需开发者重新编译和提交。</li></ul><p>缺点：</p><ul><li>失去一些控制权：由于程序最终是由 <code>Apple</code> 的服务器进行编译和优化，开发者无法知道、控制和验证优化的细节。</li><li>调试难度增加：当出现问题时，可能下载的二进制代码已经被修改，与开发者本地编译出的二进制不一致，因此可能带来调试困难。此外，提交的 <code>.ipa</code> 包也无法直接运行和调试，由于里面的二进制代码实际上是 <code>Bitcode</code>，需要通过运行 <code>App Store</code> 版本或者从 <code>Xcode</code> 中下载 <code>dSYM</code> 文件来获取具体的崩溃日志。</li></ul><p>总结：<code>Bitcode</code> 有点像把原先在本地进行的“链接”过程交给了苹果的服务器来完成，进一步加强了苹果对 <code>AppStore</code> 中应用的控制，又能提升用户的下载体验和设备性能。对于开发者来说，需要权衡 <code>Bitcode</code> 带来的好处与潜在问题。</p></details><hr><h2 id="hook" tabindex="-1"><a class="header-anchor" href="#hook" aria-hidden="true">#</a> hook</h2><h3 id="❓ios-中-hook-一个方法有什么途径" tabindex="-1"><a class="header-anchor" href="#❓ios-中-hook-一个方法有什么途径" aria-hidden="true">#</a> ❓<code>iOS</code> 中 <code>hook</code> 一个方法有什么途径</h3><details class="hint-container details"><summary>💡</summary><ul><li><p><code>Method Swizzling</code>：通过 <code>Objective-C</code> 的方法交换 (<code>Method Swizzling</code>)，可以在运行时动态地交换某个类的两个方法的实现。</p></li><li><p>分类(<code>Category</code>)：在其中添加一个新方法，然后用这个新方法的实现替换原始方法的实现。这将导致原始方法被分类中的新方法所替代。</p></li><li><p>反射机制：可以在运行时动态地创建类、检查类的属性和方法，甚至改变类的结构。通过反射可以实现对方法的拦截和替换。</p></li><li><p>使用第三方库：如<code>Aspects</code>，<code>Facebook</code> 的 <code>fishhook</code>，它们提供了较为方便和简洁的 <code>hook</code> 方案。</p></li><li><p><code>Cycript</code>：这是一个用于调试和研究 <code>iOS</code> 应用的工具，它可以注入 <code>JavaScript</code> 语境进入正在运行的应用进程中，从而实现对对象和函数的交互操作。</p></li></ul></details><h3 id="❓ios-如何-hook-一个对象的方法-而不影响其它对象" tabindex="-1"><a class="header-anchor" href="#❓ios-如何-hook-一个对象的方法-而不影响其它对象" aria-hidden="true">#</a> ❓<code>iOS</code> 如何 <code>hook</code> 一个对象的方法，而不影响其它对象</h3><details class="hint-container details"><summary>💡</summary><blockquote><p>“Isa Swizzling”：这是一种动态改变对象的类的技术。</p></blockquote><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// 原来的类</span>
<span class="token keyword">@interface</span> MyClass <span class="token punctuation">:</span> NSObject
<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>originalMethod<span class="token punctuation">;</span>
<span class="token keyword">@end</span>

<span class="token keyword">@implementation</span> MyClass
<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>originalMethod <span class="token punctuation">{</span>
    <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;Original method&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">@end</span>

<span class="token comment">// 子类</span>
<span class="token keyword">@interface</span> MySwizzledClass <span class="token punctuation">:</span> MyClass
<span class="token keyword">@end</span>

<span class="token keyword">@implementation</span> MySwizzledClass
<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>originalMethod <span class="token punctuation">{</span>
    <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;Swizzled method&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span><span class="token keyword">super</span> originalMethod<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">@end</span>

<span class="token comment">// 让 hook 的对象使用子类</span>
MyClass <span class="token operator">*</span>myInstance <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>MyClass alloc<span class="token punctuation">]</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">object_setClass</span><span class="token punctuation">(</span>myInstance<span class="token punctuation">,</span> <span class="token punctuation">[</span>MySwizzledClass class<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>myInstance originalMethod<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 输出 “Swizzled method” 和 “Original method”</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="❓了解-fishhook-吗-说说为什么-fishhook-不能修改非动态连接库中的符号" tabindex="-1"><a class="header-anchor" href="#❓了解-fishhook-吗-说说为什么-fishhook-不能修改非动态连接库中的符号" aria-hidden="true">#</a> ❓了解 <code>fishhook</code> 吗，说说为什么 <code>fishhook</code> 不能修改非动态连接库中的符号</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>fishhook</code> 是 <code>Facebook</code> 开发的一个用于 <code>iOS</code> 和 <code>macOS</code> 应用的开源库，允许你在运行时对 <code>C</code> 语言函数进行重绑定，并且是通过修改 <code>mach-O</code> 文件中的符号表（<code>Symbol Table</code>）实现的。</p></blockquote><p>不能修改非动态连接库中的符号的原因：</p><ul><li><code>fishhook</code> 修改的是动态链接表，在程序启动时，动态链接器(<code>dyld</code>)会根据表中的符号信息，找到动态链接库中的函数地址，并在运行时进行函数调用。而对于静态链接库，链接发生在编译时，对应的函数或者变量的值在编译后就确定了，不存在动态链接表，因此 <code>fishhook</code>无法修改。</li><li>静态库在编译时会直接被合并到可执行文件中，静态库中的符号信息会在编译时被解析并且写入到可执行文件中，所以 <code>fishhook</code>也 无法修改。</li><li>根据 <code>Mach-O</code> 文件格式的定义，<code>fishhook</code> 通过修改 <code>LC_SYMTAB command</code> 下的符号表，而这个符号表主要用于动态连接过程中的符号解析，所以只能修改动态库中的符号。</li></ul><p>总结：<code>fishhook</code> 只能修改动态库的符号，无法修改非动态库的符号。</p></details><hr><h2 id="安全问题" tabindex="-1"><a class="header-anchor" href="#安全问题" aria-hidden="true">#</a> 安全问题</h2><h3 id="❓ios-设备获取唯一设备号的历史变迁" tabindex="-1"><a class="header-anchor" href="#❓ios-设备获取唯一设备号的历史变迁" aria-hidden="true">#</a> ❓<code>iOS</code> 设备获取唯一设备号的历史变迁</h3><details class="hint-container details"><summary>💡</summary><ul><li><p><code>UDID</code>（Unique Device Identifier）：在<code>iOS 5</code>之前，可以直接使用 <code>[UIDevice currentDevice].uniqueIdentifier</code> 来获取设备的 <code>UDID</code>，它是一个40位的十六进制序列，由设备的各种硬件信息生成，每台设备唯一。然而，由于隐私问题，<code>Apple</code> 在 <code>iOS 5</code> 及以后的版本中废弃了这个 <code>API</code>。</p></li><li><p><code>MAC</code> 地址：因为 <code>UDID</code> 被废弃，部分开发者开始使用设备的 <code>Wi-Fi chip</code> 的 <code>MAC</code> 地址作为替代。然而在 <code>iOS 7</code> 以后，<code>Apple</code> 也禁止了获取 <code>MAC</code> 地址，所有尝试获取的行为都会返回固定的&quot;02:00:00:00:00:00&quot;。</p></li><li><p><code>UUID</code>（Universally Unique Identifier）：<code>UUID</code> 是每次生成都不同的一串字符。在 <code>UDID</code> 和 <code>MAC</code> 地址都不能使用后，部分开发者开始产生一个 <code>UUID</code> 并将其存储在应用的 <code>KeyChain</code> 中，这样就可以保证同一台设备上不同的安装过程中获取的 <code>UUID</code> 相同。但是，如果应用被彻底删除后或者设备被重置后，之前的 <code>UUID</code> 将无法再被获取到。</p></li><li><p><code>IDFA</code>（Identifier for Advertisers）：在 <code>iOS 6</code> 及以后的版本中，<code>Apple</code> 引入了广告标识符 <code>IDFA</code>，主要用于广告商跟踪和标识用户。用户可以在设置中重置自己的 <code>IDFA</code>，或者完全关闭这个功能。</p></li><li><p><code>IDFV</code>（Identifier for Vendor）：在 <code>iOS 6</code> 及以后的版本中，<code>Apple</code> 也引入了 <code>IDFV</code>，这是一个针对同一开发者（<code>Vendor</code>）下的所有应用都相同的标识符。只有当用户将该厂商的所有应用全部删除后，这个标识符才会被重置。</p></li></ul><p>为了保护用户隐私，<code>Apple</code> 不断的改变标识设备的方式，开发者必须适应这些变化并尊重用户的隐私。</p></details><h3 id="❓沙盒目录的每个文件夹划分的作用" tabindex="-1"><a class="header-anchor" href="#❓沙盒目录的每个文件夹划分的作用" aria-hidden="true">#</a> ❓沙盒目录的每个文件夹划分的作用</h3><details class="hint-container details"><summary>💡</summary><blockquote><p>沙盒(Sandbox)，每个应用都有一个自己的沙盒目录，其他应用应用或者外部环境无法访问该应用的沙盒。这是 <code>iOS</code> 保证用户数据隐私和安全的机制之一。在应用的沙盒内，又划分了一些目录文件夹，不同的目录有着不同的作用：</p></blockquote><ul><li><p><code>Documents</code>：用来存储用户创建或应用程序运行需要持久化的数据。<code>iTunes</code> 同步设备时会备份该目录内容。</p></li><li><p><code>tmp</code>：用于存放临时文件，当应用退出后，这个目录下的文件会被删除。所以有些临时产生的文件，如缓存的图片或者下载的临时的文件可以放在这里。</p></li><li><p><code>Library</code>：Library目录下有两个子目录，<code>Caches</code> 和 <code>Preferences</code>。其中 <code>Caches</code> 目录主要存放缓存文件，<code>Preferences</code> 目录主要存放应用的配置信息，这些数据在设备的设置应用中设置。此外，<code>Library</code> 还可以存放应用的其他一些持久性的文件。</p></li><li><p><code>Library/Caches</code>：保存应用程序使用时产生的需要持久化的数据，<code>iTunes</code> 不会备份该目录，此目录下文件不会在应用退出后删除。</p></li></ul></details><h3 id="❓ios-逆向分析" tabindex="-1"><a class="header-anchor" href="#❓ios-逆向分析" aria-hidden="true">#</a> ❓<code>iOS</code> 逆向分析</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>iOS</code> 逆向分析，通常指破解者通过分析和修改设备中的 <code>iOS</code> 应用程序来了解其工作原理的行为。逆向分析的应用场景广泛，包括但不限于：<code>Bug</code> 定位、性能优化、安全测试以及对竞品的调研等。</p></blockquote><p><code>iOS</code> 逆向分析的方法：</p><ul><li><p>静态分析：静态分析是分析字节码或逆向编译后的代码来了解其功能和行为的过程，未运行程序代码。常用的静态分析工具有 <code>Hopper Disassembler</code>、<code>IDA Pro</code> 等。</p></li><li><p>动态分析：动态分析是在程序运行时观察其行为，常用到的工具有 <code>LLDB</code>、<code>Cycript</code>、<code>frida</code> 等。通过动态分析可以实时查看和修改程序的运行状态。</p></li><li><p><code>Class-Dump</code>：是一个用来解析在 <code>Mach-O</code> 文件中 <code>Objc</code> 的类信息的命令行工具。逆向分析的第一步常常是使用 <code>Class-Dump</code> 获取被分析对象的头文件信息。</p></li><li><p><code>Mach-O</code> 文件探索：<code>Mach-O</code> 文件是 <code>macOS</code> 和 <code>iOS</code> 的可执行文件的格式。通过探索 <code>Mach-O</code> 文件，可以获取到程序的 <code>Segments、Sections、Symbol</code> 等信息，分析程序的入口点、链接库等。</p></li></ul></details><h3 id="❓怎么防止别人反编译你的-ios-app" tabindex="-1"><a class="header-anchor" href="#❓怎么防止别人反编译你的-ios-app" aria-hidden="true">#</a> ❓怎么防止别人反编译你的 <code>iOS App</code></h3><details class="hint-container details"><summary>💡</summary><ul><li><p>代码混淆：这是最基本的方法，通过改变变量名和方法名，添加无用代码等手段来让反编译出的代码难以阅读。</p></li><li><p>字符串加密：很多时候，敏感的信息是以字符串的形式存在于程序中的，通过将这些字符串加密，可以有效防止这些信息被泄露。</p></li><li><p>符号剥离：将程序中的符号信息剥离掉，这样在反编译的时候就看不到原始的符号信息，降低可读性。</p></li><li><p>把关键代码部分用汇编或者 <code>C</code> 语言重写：高级语言相比于底层语言更易于被反编译和理解，把关键部分的代码用汇编或者 <code>C</code> 语言写可以增加破解难度。</p></li><li><p>使用防护壳：就像电脑端的软件可以使用加壳技术一样，移动端的程序也可以通过防护壳来对抗反编译。</p></li><li><p>运行时防护：可以在程序中加入一些运行时检测的代码，比如检测设备是否被越狱，检测正在运行的进程等，一旦发现破解行为，就立即终止运行。</p></li></ul></details><h3 id="❓lild-重签名" tabindex="-1"><a class="header-anchor" href="#❓lild-重签名" aria-hidden="true">#</a> ❓<code>lild</code> 重签名</h3><details class="hint-container details"><summary>💡</summary><p><code>Resigning</code> 重签名：对给定的库或者插件进行签名才能将它包含在我们的应用中。</p><p><code>lild</code>（Link Identity Editor）是一个在 <code>macOS</code> 上可以用来重签名可执行文件的命令行工具。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 清除原有签名</span>
codesign --remove-signature /path/to/my.framework
    
<span class="token comment"># 添加新的签名</span>
<span class="token comment">#   -f: 强制重签名，即使已经签过名了</span>
<span class="token comment">#   -s: 开发者证书，可以在 Keychain Access 应用程序中找到</span>
codesign <span class="token parameter variable">-f</span> <span class="token parameter variable">-s</span> <span class="token string">&quot;iPhone Developer: Your Name (ID)&quot;</span> /path/to/my.framework
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：进行重签名操作需要正确的开发者证书和配套的 <code>Provisioning Profiles</code>，否则重签名后的文件将无法在设备上运行。重签名是安全敏感操作，必须确保源文件和签名证书的可信任性。遵守相关法律法规和协议出于合法合规的前提操作。</p></details><h3 id="❓简述下-match-o-文件结构" tabindex="-1"><a class="header-anchor" href="#❓简述下-match-o-文件结构" aria-hidden="true">#</a> ❓简述下 <code>Match-O</code> 文件结构</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>Mach-O</code> （Mach Object）文件格式是用于可执行文件、对象代码、共享库、动态加载代码以及内核代码等在 <code>macOS</code> 和 <code>iOS</code> 中的格式。</p></blockquote><ul><li><p><code>Header</code>：描述了整个 <code>Mach-O</code> 文件的一些基本信息。</p><blockquote><p>例如文件类型（如可执行文件、动态库或对象文件等）、<code>CPU</code> 类型、加载命令的数量和大小等。</p></blockquote></li><li><p><code>Load Commands</code>：负责描述 <code>Mach-O</code> 文件的内部结构和布局。</p><blockquote><p>例如 <code>Segment、Section、Dynamic Symbol Table、Dylib ID、Entry Point</code> 等信息。</p></blockquote></li><li><p><code>Segments and Sections</code>：<code>Segments</code> 包含一种或多种类型的 <code>Sections</code>。每个 <code>Segment</code> 对应程序运行时的一个内存映射，<code>Sections</code> 则存储具体的代码和数据。</p></li><li><p><code>Data</code>：包括符号表、字符串表等各种实际的数据。</p><blockquote><p>例如程序的执行代码、常量、全局变量等。</p></blockquote></li></ul></details>`,38);function s(l,p){return o(),c("div",null,[d(" more "),n])}const u=e(i,[["render",s],["__file","0x12.compiler.html.vue"]]);export{u as default};
