import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o,c as d,a as c,f as i}from"./app-uIw8b4jG.js";const l={},a=i(`<h2 id="概念知识" tabindex="-1"><a class="header-anchor" href="#概念知识" aria-hidden="true">#</a> 概念知识</h2><h3 id="网络模型" tabindex="-1"><a class="header-anchor" href="#网络模型" aria-hidden="true">#</a> 网络模型</h3><h4 id="❓osi-七层模型" tabindex="-1"><a class="header-anchor" href="#❓osi-七层模型" aria-hidden="true">#</a> ❓<code>OSI</code> 七层模型</h4><details class="hint-container details"><summary>💡</summary><blockquote><p><code>OSI</code>(<code>Open Systems Interconnection</code> - 开放系统互连) 模型，是描述和理解复杂网络系统交互和通信机制的重要工具。该模型将网络通信分解为七层，每个层次完成特定的功能，提供下一层所需的接口和服务。</p></blockquote><p>自顶向下：</p><ul><li><p>应用层：负责与软件应用程序（例如 <code>Web</code> 浏览器、电子邮件客户端等）交互，以确保发送和接收有效的数据。</p></li><li><p>表示层：负责定义数据格式和加密。</p></li><li><p>会话层：负责在数据封装的端点之间建立、管理和终止连接。</p></li><li><p>传输层：负责提供端到端的可靠传输。主要协议有 <code>TCP</code> 和 <code>UDP</code>。</p></li><li><p>网络层：负责决定数据的路径和转发，包括 <code>IP</code> 地址处理和路由。</p></li><li><p>数据链路层：负责在数据网络中传输数据包，包括错误检测和修正。</p></li><li><p>物理层：负责传输比特流（数据的二进制形式），包括如何通过通信媒介（如电缆、光纤等）进行物理连接，如何识别设备等。</p></li></ul><p>注意：<code>OSI</code> 模型并不是任何一个实际的网络协议族，而是作为一个参考模型，帮助人们描述和理解不同网络协议的功能和如何协同工作。</p></details><h4 id="❓tcp-ip-五层模型" tabindex="-1"><a class="header-anchor" href="#❓tcp-ip-五层模型" aria-hidden="true">#</a> ❓<code>TCP/IP</code> 五层模型</h4><details class="hint-container details"><summary>💡</summary><p>自顶向下：</p><ul><li><p>应用层 : <code>DNS</code>、<code>HTTP</code>、<code>HTTPS</code>、<code>RPC</code>、<code>P2P</code> (<code>DHCP</code>、<code>RTMP</code>、<code>GTP</code>)</p><blockquote><p>应用层包括许多协议，如 <code>HTTP</code> 协议，<code>FTP</code> 协议，<code>DNS</code> 协议，它负责如何处理特定类型的网络连接，即应用程序和网络之间的通信协议。</p></blockquote><p><code>OSI</code> 七层模型中，将应用层细分为(应用层、表示层、会话层)</p><ul><li>应用层：负责与软件应用程序交互，以确保发送和接收有效的数据。</li><li>表示层：负责定义数据格式和加密。</li><li>会话层：负责在数据封装的端点之间建立、管理和终止连接。</li></ul></li><li><p>传输层 : <code>TCP</code>、<code>UDP</code>、<code>QUIC</code></p><blockquote><p>传输层负责将数据进行分段，并保证这些分段正确无误的到达目的地，再在目的地将这些分段重新组合。<code>TCP</code> 和 <code>UDP</code> 协议就在这一层。</p></blockquote></li><li><p>网络层 : (<code>IP</code> 层) <code>IP</code> (<code>ICMP</code>、<code>OSPF</code>、<code>BGP</code>、<code>IPSec</code>、<code>GRE</code>)</p><blockquote><p>网络层控制子网的操作，处理将数据包从源传送到目的地的任务，这包括在复杂的网络中处理路由和全局地址。</p></blockquote></li><li><p>链路层 : (<code>MAC</code> 层) <code>ARP</code>、<code>VLAN</code>、<code>STP</code></p><blockquote><p>数据链路层在物理层之上，它负责如何在两个节点之间传输数据，处理由物理层的硬件错误产生的问题，例如数据错误，数据丢失等。</p></blockquote></li><li><p>物理层 :</p><blockquote><p>提供了网络通信所需的硬件接口，负责把帧数据转换为适合物理介质的形式，即用来传输比特流。不同的介质和具体的设备有许多协议，例如 <code>Ethernet</code>、<code>Wi-Fi</code>、<code>Bluetooth</code> 等。</p></blockquote></li></ul></details><h4 id="❓tcp-ip-模型-vs-osi-模型" tabindex="-1"><a class="header-anchor" href="#❓tcp-ip-模型-vs-osi-模型" aria-hidden="true">#</a> ❓<code>TCP/IP</code> 模型 vs <code>OSI</code> 模型</h4><details class="hint-container details"><summary>💡</summary><p><code>TCP/IP</code> 模型和 <code>OSI</code> 模型都是网络通信模型，都有对网络通信进行分层的思想，但是两者的层数以及每一层承担的责任有所不同。</p><ul><li><p><code>TCP/IP</code> 模型是一个五层结构（物理层、数据链路层、网络层、传输层、应用层）；<code>OSI</code> 模型则是一个七层结构（物理层、数据链路层、网络层、传输层、会话层、表示层、应用层）</p></li><li><p><code>TCP/IP</code> 模型是在 <code>OSI</code> 模型基础上简化而来的。在 <code>TCP/IP</code> 模型中，<code>OSI</code> 模型中的 (会话层、表示层和应用层) 统一归为了应用层，因此 <code>TCP/IP</code> 模型的应用层比较复杂。</p></li><li><p>两者在层次划分上的哲学不同。<code>OSI</code> 模型倾向于详尽地将网络通信过程中的所有可能的环节进行分层；而 <code>TCP/IP</code> 模型更倾向于从实用的角度，基于实际的网络硬件和网络协议进行分层。</p></li></ul></details><h3 id="❓为什么能通过一个-url-就能请求到对应的资源" tabindex="-1"><a class="header-anchor" href="#❓为什么能通过一个-url-就能请求到对应的资源" aria-hidden="true">#</a> ❓为什么能通过一个 <code>URL</code> 就能请求到对应的资源</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>URL</code>（<code>Uniform Resource Locator</code> - 统一资源定位符），它给出了网络上某一资源的绝对位置，其结构包含了请求资源所需的所有信息，因此能够通过 <code>URL</code> 向服务器请求并获取资源。</p></blockquote><p><code>URL</code>的基本结构：<code>protocol://hostname:port/path?query#fragment</code></p><ul><li><p><code>Protocol</code>（协议）：指定了客户端与服务器需要遵循的通信规则。</p><blockquote><p>例如 <code>HTTP</code>、<code>HTTPS</code>、<code>FTP</code> 等。</p></blockquote></li><li><p><code>Hostname</code>（主机名）：标识了网络上机器的位置。服务器和客户端通过网络连接进行通信，主机名作为服务器的标识，可以让客户端找到正确的服务器。</p><blockquote><p>例如 <code>www.google.com</code></p></blockquote></li><li><p><code>Port</code>（端口号）：指定了服务器上的特定服务，每个服务在服务器上都有一个唯一的端口号。</p></li><li><p><code>Path</code>（路径）：指定了服务器上的特定资源。它通常包含了相关文件或者页面的目录结构信息。</p></li><li><p><code>Query</code>（查询）：这部分以 <code>?</code> 开头，用于传递额外的参数。在访问动态网页的时候，查询字符串通常用于指定查询参数。</p></li><li><p><code>Fragment</code>（片段）：这部分以 <code>#</code> 开头，只在客户端浏览器中起作用，用于定位特定的页面元素。</p></li></ul><p>结论：通过以上元素组成的 <code>URL</code> 可以精确地定位到网络上的资源，因此可以通过一个 <code>URL</code> 就能请求到对应的资源。</p></details><h3 id="❓mtu-了解吗" tabindex="-1"><a class="header-anchor" href="#❓mtu-了解吗" aria-hidden="true">#</a> ❓<code>MTU</code> 了解吗</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>MTU</code>(Max Transfer Unit)：最大传输单元，指的是网络中一种协议可以在不进行分片的情况下发送的最大数据包大小。</p></blockquote><p>在网络中，数据包的大小不能超过 <code>MTU</code> 大小，否则在发送过程中数据包会被分片。<code>MTU</code> 大小的设置取决于发送这些数据包的物理媒介或者网络协议。</p><blockquote><p>例如，在以太网中，<code>MTU</code> 的大小通常设置为 <code>1500</code> 字节。</p></blockquote><p>当数据包在网络中传输时，可能会经过不同的网络设备，这些设备可能有各自的 <code>MTU</code> 大小。为了避免数据包被分片，或者减少数据包的分片次数，路由器和其他网络设备可能采用最小 <code>MTU</code>（所有设备中 <code>MTU</code> 最小的值）进行发送。</p><ul><li>过大的 <code>MTU</code>：会导致数据包在传输过程中过于庞大，增大网络负担和延迟。</li><li>过小的 <code>MTU</code>：会使得数据包过小，分片过多，影响网络效率。</li></ul><blockquote><p>例如：<code>POST</code> 请求增加 <code>Content-Length</code> 参数后，数据传输过大时可能导致 <code>Broken pipe</code> 报错，调整 <code>MTU</code> 值可以解决这个问题。</p></blockquote></details><h3 id="❓全双工和半双工模式是什么" tabindex="-1"><a class="header-anchor" href="#❓全双工和半双工模式是什么" aria-hidden="true">#</a> ❓全双工和半双工模式是什么</h3><details class="hint-container details"><summary>💡</summary><p>“双工”：数据传输的两个方向的工作状态。</p><ul><li><p>全双工（<code>Full-Duplex</code>）模式：通信系统中的两个设备可以同时进行发送和接收操作。两个方向是独立的，可以同时进行。</p><blockquote><p>例如：电话，我们可以同时听对方说话，同时跟对方说话，这就是全双工的例子。</p></blockquote></li><li><p>半双工（<code>Half-Duplex</code>）模式：通信系统中的设备不能同时发送和接收数据。两个方向是互斥的，一次只能有一个方向在进行数据传输。</p><blockquote><p>例如，对讲机，就是一种半双工设备，当一个人按下按钮说话时，其他人只能听，不能同时说话。</p></blockquote></li></ul></details><h3 id="❓cookie-vs-session" tabindex="-1"><a class="header-anchor" href="#❓cookie-vs-session" aria-hidden="true">#</a> ❓<code>Cookie</code> vs <code>Session</code></h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>Cookie</code> 和 <code>Session</code>都用于跟踪用户的状态。</p></blockquote><p>区别：</p><ul><li><p><strong>存储位置</strong>：</p><ul><li><code>Cookie</code> 保存在客户端（浏览器）。</li><li><code>Session</code> 保存在服务端。</li></ul></li><li><p><strong>生命周期</strong>：</p><ul><li><code>Cookie</code> 的生命周期：由创建时设定的过期时间决定，可以持久化存储，即使关闭浏览器或者关机，只要还未到达过期时间就能继续使用。</li><li><code>Session</code> 的生命周期：以服务器为准，当浏览器关闭，或者<code> Session</code> 超时（根据服务器设置），<code>Session</code> 就会失效。</li></ul></li><li><p><strong>安全性</strong>：</p><ul><li><code>Cookie</code> 存储在客户端，较容易被恶意用户分析和篡改，所以敏感信息通常不存储在 <code>Cookie</code> 中。</li><li><code>Session</code> 存储在服务端，相对来说保密性更好。</li></ul></li><li><p><strong>容量</strong>：</p><ul><li><code>Cookie</code> 对大小有限制，每个站点的 <code>Cookie</code> 总量大致在 <code>4KB</code> 左右。</li><li><code>Session</code> 没有大小的限制，可以存储大量数据。</li></ul></li><li><p><strong>对服务器压力</strong>：</p><ul><li><code>Cookie</code> 是保存在客户端，对服务器压力较小。</li><li><code>Session</code> 是存储在服务端，如果并发访问用户很多，服务器的压力就会变大。</li></ul></li><li><p><strong>应用场景</strong>：</p><ul><li><code>Cookie</code> 经常用于保存用户一些偏好设置，用户名等非敏感信息。</li><li><code>Session</code> 经常用于需要记录的敏感信息，如用户的登录状态。</li></ul></li></ul><p>实际应用：往往会结合两者使用。</p><blockquote><p>例如，服务器创建一个 <code>Session</code> 发送给客户端(浏览器)，然后客户端将 <code>Session</code> 的唯一标识符存储在 <code>Cookie</code> 中，这样既利用了 <code>Cookie</code> 方便的客户端存储，也避免了在 <code>Cookie</code> 中存储敏感信息的风险。</p></blockquote></details><h3 id="❓流量控制和拥塞避免的区别" tabindex="-1"><a class="header-anchor" href="#❓流量控制和拥塞避免的区别" aria-hidden="true">#</a> ❓流量控制和拥塞避免的区别</h3><details class="hint-container details"><summary>💡</summary><ul><li><p><strong>流量控制</strong>：点对点（从一台主机到另一台主机）的通信机制。常在网络的传输层（如 <code>TCP</code> 协议）进行。</p><blockquote><p>主要目的：防止发送方发送过多的数据给接收方，以免接收方无法处理这么多数据。其中，接收方将根据其处理能力，反馈给发送方一个“接收窗口”大小，告诉发送方它应该发送多少数据。发送方根据这个反馈来调整发送速率。</p></blockquote></li><li><p><strong>拥塞控制</strong>：是全局性的，包括了所有主机和所有的网络链路。在网络层，涉及整个网络的运行状态。</p><blockquote><p>主要目的：防止过多的数据在网络中传输，以免导致网络拥塞和性能下降。其中，网络的通信节点（如路由器或交换机）或发送方将根据网络的拥塞情况，调整数据的发送速率。</p></blockquote></li></ul><p>总结：流量控制更关注发送方和接收方之间的平衡，而拥塞控制则关注整个网络的健康运行状态。</p></details><hr><h2 id="udp" tabindex="-1"><a class="header-anchor" href="#udp" aria-hidden="true">#</a> UDP</h2><h3 id="❓udp" tabindex="-1"><a class="header-anchor" href="#❓udp" aria-hidden="true">#</a> ❓<code>UDP</code></h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>UDP</code> (<code>User Datagram Protocol</code>)：用户数据报协议，是一种无连接的网络通信协议，位于 <code>OSI</code> 模型的传输层。与 <code>TCP</code> 协议不同，<code>UDP</code> 不提供数据正确性保证和顺序保证，也不进行流量控制和拥塞控制。</p></blockquote><p>主要特性：</p><ul><li>无连接：<code>UDP</code> 发送数据前无需建立连接，每个数据报都独立处理，因此可以支持同时向多个接收者发送数据。</li><li>少量开销：<code>UDP</code> 不需要进行复杂的错误检查和恢复机制，头部开销只有 8 字节，比 <code>TCP</code> 更简单也更快。</li><li>不可靠性：<code>UDP</code> 不保证数据的到达和顺序，数据可能会丢失或者乱序。</li><li>支持一对一、一对多、多对一和多对多的交互通信。</li></ul><p>应用：比如实时应用（如 <code>VoIP</code> 和在线游戏），广播和多播应用，以及需要快速传输且不太关心丢包的应用（如 <code>DNS</code> 和 <code>DHCP</code>）。</p></details><h3 id="❓tcp-vs-udp" tabindex="-1"><a class="header-anchor" href="#❓tcp-vs-udp" aria-hidden="true">#</a> ❓<code>TCP</code> vs <code>UDP</code></h3><details class="hint-container details"><summary>💡</summary><p><code>TCP</code> 特点</p><ul><li>可靠性 : 通过确认应答、超时重传等机制保证数据的可靠传输。</li><li>有序性 : 通过数据序号来保证数据有序，传输完成后通过排序来保证数据的正确性。</li><li>双全工 : 通信双方(服务端和客户端)都具备发送和接受数据的能力。(三次握手来保证)</li></ul><p><code>UDP</code> 特点</p><ul><li>不可靠 : 通信通信双方不需要建立连接，不能保证数据准确送达。</li><li>无序性 : 每次发送的数据包相互独立，没有特定的顺序。</li><li>速度快 : 由于数据包结构简单，保证的 <code>UDP</code> 传输速度优于 <code>TCP</code></li></ul><p>一些游戏、直播和需要低延迟实时性要求较高的应用，会使用 <code>UDP</code>。</p><p>两者区别：</p><ul><li><p>连接方式：</p><ul><li><code>TCP</code> 是一种面向连接的协议，在正式收发数据之前，必须和对方建立可靠的连接。 <blockquote><p>一个TCP连接必须要经过三次“对话”才能建立起来。我们通常所说的“三次握手”（<code>three-way handshake</code>）就是指建立一个TCP连接，这种机制保证了两端系统在通信开始之前就已知了对方的存在。</p></blockquote></li><li><code>UDP</code> 则是面向非连接的协议，它不与对端建立连接，而是直接就发送数据包，尽管如此，<code>UDP</code> 数据包的到达和顺序也不能被保证。</li></ul></li><li><p>可靠性和速度：</p><ul><li><code>TCP</code> 提供了全面的错误检查和确认机制，并且有重发机制，所以它能提供可靠的数据传输，适合对可靠性要求很高的场景，如文件传输。</li><li><code>UDP</code> 则不提供必要的检查，也不保证数据的顺序, 因此它的性能更高，传输速度更快，适用于对实时性要求高的场景，如视频通话，直播等。</li></ul></li><li><p>数据交互方式：</p><ul><li><code>TCP</code> 是双向通信的，即 A 主机到 B 主机和 B 主机到 A 主机的交互都可以。</li><li><code>UDP</code> 则主要用于单向发送数据，如声明性（datagram）服务。</li></ul></li><li><p>流控制：</p><ul><li><code>TCP</code> 提供了流量控制的机制，既有发送端控制发送速率使接收端来得及接收，又有接收端通过滑动窗口控制接收速率，防止接收端处理不过来。</li><li><code>UDP</code> 则没有提供流量控制的机制，数据发送之后也无法获得发送是否成功的反馈。</li></ul></li></ul><p>总结：如果需要可靠性和数据完整性，应该用 <code>TCP</code>；如果需要速度，那么应该用 <code>UDP</code>。</p></details><h3 id="❓有人认为-tcp-一定比-udp-更快-你觉得呢" tabindex="-1"><a class="header-anchor" href="#❓有人认为-tcp-一定比-udp-更快-你觉得呢" aria-hidden="true">#</a> ❓有人认为 <code>TCP</code> 一定比 <code>UDP</code> 更快，你觉得呢</h3><details class="hint-container details"><summary>💡</summary><p>不对，一般情况来说，<code>TCP</code> 比 <code>UDP</code> 更慢。</p><ul><li><p><code>TCP</code>（<code>Transmission Control Protocol</code>）是一种面向连接、可靠的传输协议，它提供了数据完整性和顺序保证，适合于对数据传输准确性要求高的场景。但是，<code>TCP</code> 为了确保这种可靠性，引入了确认（<code>ACK</code>）、重传等机制，这些处理会消耗一定的时间，对性能有所影响。</p></li><li><p><code>UDP</code>（<code>User Datagram Protocol</code>）是一种无连接、不可靠的传输协议，它不保证数据的到达和顺序。因此，<code>UDP</code> 相比 <code>TCP</code> 有较小的协议开销，对于那些要求实时性，可以容忍丢包，但对传输延迟和效率要求较高的场景（如流媒体传输、在线游戏）来说，<code>UDP</code> 可能会比 <code>TCP</code> 更快。</p></li></ul></details><hr><h2 id="tcp" tabindex="-1"><a class="header-anchor" href="#tcp" aria-hidden="true">#</a> TCP</h2><h3 id="❓tcp" tabindex="-1"><a class="header-anchor" href="#❓tcp" aria-hidden="true">#</a> ❓<code>TCP</code></h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>TCP</code> (<code>Transmission Control Protocol</code>)：传输控制协议，是一种面向连接的、可靠的、基于字节流的通信协议，位于 <code>OSI</code> 模型的传输层。在 <code>Internet</code> 协议家族（<code>TCP/IP</code> 协议家族）中，<code>TCP</code> 与网络层的 <code>IP</code> 协议共同构成了 <code>Internet</code> 的核心。</p></blockquote><p>主要特性：</p><ul><li>三次握手：建立连接，经过 “三次握手”，确保双方都准备好进行数据交换。</li><li>使用序列号和确认应答：<code>TCP</code> 为每个字节赋予一个序列号，并期望收到接收端的确认应答。如果发送端没有收到确认应答，就会重发数据。</li><li>窗口大小和滑动窗口机制：为了控制数据的流量和避免网络拥塞，<code>TCP</code> 使用了窗口大小和滑动窗口的机制。</li><li>流量控制：通过适时调整窗口大小，<code>TCP</code> 能够根据接收端的处理能力，来控制发送端的发送速率。</li><li>检错和重传：<code>TCP</code> 通过检验和和定时器等机制来实现数据的无差错传输，如果出现错误或者丢包，<code>TCP</code> 会自动进行重传。</li><li>四次挥手：断开连接，<code>TCP</code> 会通过 “四次挥手” 来安全地关闭连接。</li></ul><p>应用：需要高可靠性的网络通信，比如 <code>Web</code> 浏览、邮件传输、文件传输等。</p></details><h3 id="建立连接" tabindex="-1"><a class="header-anchor" href="#建立连接" aria-hidden="true">#</a> 建立连接</h3><h4 id="❓三次握手" tabindex="-1"><a class="header-anchor" href="#❓三次握手" aria-hidden="true">#</a> ❓三次握手</h4><details class="hint-container details"><summary>💡</summary><p><code>TCP</code> 三次握手过程：建立连接的过程。</p><ul><li><p>第一次握手：客户端发送 <code>SYN</code> 包（序列号 <code>seq</code> 为 <code>X</code>）到服务器，并进入 <code>SYN_SEND</code> 状态。</p></li><li><p>第二次握手：服务器收到 <code>SYN</code> 包，必须确认客户的 <code>SYN</code>(<code>ACK</code> = <code>X+1</code>)，同时自己也发送一个 <code>SYN</code> 包（序列号 <code>seq</code> 为 <code>Y</code>），即 <code>SYN + ACK </code>包，服务器此时进入 <code>SYN_RECV</code> 状态。</p></li><li><p>第三次握手：客户端收到服务器的 <code>SYN + ACK</code> 包，向服务器发送确认包 <code>ACK</code>(<code>ACK</code>= <code>Y+1</code>)，此包发送完毕，客户端和服务器进入 <code>ESTABLISHED</code> 状态，完成三次握手。</p></li></ul></details><h4 id="❓为什么要三次握手" tabindex="-1"><a class="header-anchor" href="#❓为什么要三次握手" aria-hidden="true">#</a> ❓为什么要三次握手</h4><details class="hint-container details"><summary>💡</summary><ul><li><p>确保双方都准备好进行通信：在三次握手的过程中，客户端和服务器都会发送并确认接收到了对方的消息。这确保了两边都有能力收发信息，即两边的发送和接收功能都正常。</p></li><li><p>防止已经失效的连接请求报文段突然又传到了服务端，由于服务端误认为客户端又发出一次连接请求，于是就向客户端发送确认报文段，同意连接。这种情况下，如果没有三次握手，则会建立一个无用的连接，浪费服务器资源。</p></li><li><p>确定序列号：三次握手还可以帮助通信的双方确定数据包的序列号。在TCP通信中，每个数据包都有一个序列号，接收方根据序列号来重新组织数据包。通过三次握手，双方都能知道对方期待接收的初始序列号。</p></li></ul><p>总结：<code>TCP</code> 协议选择使用了三次握手这种方式来建立连接，以确保数据的正确、可靠传输。</p></details><h4 id="❓三次握手-第三次丢失会怎么样" tabindex="-1"><a class="header-anchor" href="#❓三次握手-第三次丢失会怎么样" aria-hidden="true">#</a> ❓三次握手，第三次丢失会怎么样</h4><details class="hint-container details"><summary>💡</summary><p>第三次握手客户端发送的 <code>ACK</code> 包在传输过程中丢失：</p><ul><li><p>服务器一直处于 <code>SYN_RECV</code> 状态下，同时等待客户端再次发送 <code>ACK</code> 包。默认情况下，服务器在 75 秒后会关闭等待连接。</p></li><li><p>客户端的 <code>ACK</code> 丢失，但是连接已经建立，在 <code>ESTABLISHED</code> 状态。接下来如果客户端开始发送数据，服务器就知道连接已经建立了。</p></li><li><p>如果服务器在等待 <code>ACK</code> 的过程中，系统的连接队列已经满了，那么新的 <code>SYN</code> 包将无法得到响应，这会导致客户端无法建立新的连接。</p></li></ul><p>结论：如果第三次握手的 <code>ACK</code> 包丢失，对于已经建立好的 <code>TCP</code> 连接影响并不大，但可能会影响新的连接建立。</p></details><h4 id="❓三次握手-可以携带数据吗" tabindex="-1"><a class="header-anchor" href="#❓三次握手-可以携带数据吗" aria-hidden="true">#</a> ❓三次握手，可以携带数据吗</h4><details class="hint-container details"><summary>💡</summary><p><code>TCP</code> 三次握手过程主要是为了建立连接，同时确定数据包的序列号，从而保证数据传输的正确性和完整性。在三次握手的过程中，理论上说第三次握手时，可以携带数据并将数据传给接收方。因为此时已经建立了连接，而且握手的 <code>ACK</code> 和数据部分在 <code>TCP</code> 的设计里面并不是强相关的。</p><p>是否携带数据、何时携带数据，这个取决于网络协议栈的设计，也跟上层应用有关。在很多实际的网络协议栈实现中，并不在三次握手时携带数据，主要是因为需要等待握手成功后，才能确认双方具备了接收数据和处理数据的能力。所以通常情况下，三次握手不包括数据的发送。</p><p>结论：从是否可行的角度看，三次握手过程中是可以携带数据的。但在实际操作中，一般并不这么做。</p></details><h3 id="断开连接" tabindex="-1"><a class="header-anchor" href="#断开连接" aria-hidden="true">#</a> 断开连接</h3><h4 id="❓四次挥手" tabindex="-1"><a class="header-anchor" href="#❓四次挥手" aria-hidden="true">#</a> ❓四次挥手</h4><details class="hint-container details"><summary>💡</summary><p><code>TCP</code> 四次挥手过程：结束连接的过程。</p><ul><li><p>第一次挥手：当某一端完成数据发送后（假设是客户端），会向另一端（服务器）发送 <code>FIN</code> 包，请求关闭连接。</p></li><li><p>第二次挥手：服务器收到 <code>FIN</code> 包后，并不是立即关闭连接，而是先向客户端回复确认包 <code>ACK</code>，告诉客户端 “你的请求我收到了”。然而，此刻服务器可能还有数据要发送，所以并不直接发送 <code>FIN</code> 包。</p></li><li><p>第三次挥手：等服务器所有数据都发送完了以后，再向客户端发送 <code>FIN</code> 包，请求关闭连接。</p></li><li><p>第四次挥手：最后客户端收到 <code>FIN</code> 包后，也不是立即关闭连接，而是先回复一个 <code>ACK</code> 给服务器，然后等待一段时间（等待<code>2MSL</code>，也就是报文最大生存时间的两倍时间，约1-4分钟）再关闭连接。</p></li></ul></details><h4 id="❓为什么要四次挥手" tabindex="-1"><a class="header-anchor" href="#❓为什么要四次挥手" aria-hidden="true">#</a> ❓为什么要四次挥手</h4><details class="hint-container details"><summary>💡</summary><p>因为 <code>TCP</code> 连接是全双工的，即数据可以在两个方向上独立地进行传输。这意味着每个方向都需要单独关闭，这样的设计使得 <code>TCP</code> 连接的关闭更为可靠。</p><ul><li><p>每个方向的关闭都需要发送一个 <code>FIN</code> 包和一个 <code>ACK</code> 包。</p><ul><li>发送 <code>FIN</code> 包表示我已经没有数据要发送了，并请求关闭连接。</li><li>发送 <code>ACK</code> 包则是确认接收到对方的 <code>FIN</code> 包。</li></ul></li><li><p>一个方向的连接关闭就需要两次挥手，而一个 <code>TCP</code> 连接由于是全双工的（双方都可以发送数据），所以两个方向都需要关闭，因此总的来说需要四次挥手。</p></li><li><p>为了保证能够让未完全传输的数据能够被接收，接收到 <code>FIN</code> 包的一方会进入到一个叫做 <code>TIME-WAIT</code> 的状态，在这个状态中，它会等待一段时间以确保对方接收到了 <code>ACK</code> 包。这就是为什么有时候会看到一些还处于 <code>TIME-WAIT</code> 状态的 <code>TCP</code> 连接，那是因为它们在等待最终的确认。</p></li><li><p>能处理双方同时发起关闭连接请求的情况。</p></li></ul></details><h4 id="❓tcp-双方同时发起关闭连接请求的情况-是如何处理的" tabindex="-1"><a class="header-anchor" href="#❓tcp-双方同时发起关闭连接请求的情况-是如何处理的" aria-hidden="true">#</a> ❓<code>TCP</code> 双方同时发起关闭连接请求的情况，是如何处理的</h4><details class="hint-container details"><summary>💡</summary><p>四次挥手是 <code>TCP</code> 协议用来结束连接的过程。理想情况下，一般是由其中一方（比如客户端）先发起关闭连接请求。然而，<code>TCP</code> 连接的每一方都能独立地关闭它们的发送通道，所以双方都可以发送 <code>FIN</code> 报文来请求关闭连接。</p><p>同时发起关闭请求处理流程：</p><ul><li>主机 A 发送一个 <code>FIN</code>，并进入 <code>FIN-WAIT-1</code> 状态。</li><li>主机 B 在收到这个 <code>FIN</code> 后，返回一个 <code>ACK</code>，并让 A 进入 <code>FIN-WAIT-2</code> 状态。</li><li>几乎同时，主机 B 也发送一个 <code>FIN</code>，并进入 <code>LAST-ACK</code> 状态。</li><li>主机 A 收到 B 的 <code>FIN</code> 后，返回一个 <code>ACK</code>，并进入 <code>TIME-WAIT</code> 状态，同时 B 收到这个 <code>ACK</code> 后关闭连接。</li><li>对于 A 后续的行为，会根据具体实现，可能会继续等待一段时间，或者直接关闭连接。</li></ul></details><h3 id="运行机制" tabindex="-1"><a class="header-anchor" href="#运行机制" aria-hidden="true">#</a> 运行机制</h3><h4 id="❓tcp-的-keep-alive-机制" tabindex="-1"><a class="header-anchor" href="#❓tcp-的-keep-alive-机制" aria-hidden="true">#</a> ❓<code>TCP</code> 的 <code>Keep-Alive</code> 机制</h4><details class="hint-container details"><summary>💡</summary><blockquote><p><code>Keep-Alive</code>: 顾名思义是否还活着，是一种心跳检测机制。用于判断连接方是否还处于活动状态，以便断开已经失活连接释放资源。发送探测包后，如果处于活动状态，接收方会发送确认信号；如果处于失活状态，则会再连续再发送几次探测包如果均无响应则证明对方已断开连接，可以释放资源。</p></blockquote><p>注意：</p><ul><li><p><code>Keep-Alive</code> 机制的时长一般默认为 <strong>2 小时</strong>。所以，不能使用使用该机制来确认实时性较高的保活探测。</p></li><li><p><code>Keep-Alive</code> 并不是默认开启的。在一般情况下，如果两端的 <code>TCP</code> 都正常工作，是不需要使用到 <code>Keep-Alive</code> 机制的。只有在网络不稳定，或者是需要维持长连接的应用中，比如数据库连接，<code>Keep-Alive</code> 才会显得比较有用。</p></li></ul></details><h4 id="❓什么情况下发送方的滑动窗口会后移" tabindex="-1"><a class="header-anchor" href="#❓什么情况下发送方的滑动窗口会后移" aria-hidden="true">#</a> ❓什么情况下发送方的滑动窗口会后移</h4><details class="hint-container details"><summary>💡</summary><blockquote><p><code>TCP</code> 发送方的滑动窗口 : 用来控制网络通信流量和确保信息可靠传输的一种机制。防止网络拥塞，确保在有限的网络带宽中，数据能够被高效、有序、可靠地传输。</p></blockquote><p>滑动窗口后移的两种情况：</p><ul><li><p>当接收到确认(<code>ACK</code>)消息时</p><blockquote><p>当发送方接收到接收方发送的确认消息(<code>ACK</code>)，说明发送方发送的数据已经被接收方正确接收，此时发送方的滑动窗口的左边界会按照收到的确认信息进行移动。相应地，滑动窗口的右边界也会移动，使窗口大小保持不变。这样可以控制发送方继续发送未被确认的数据，或者发送新的数据。</p></blockquote></li><li><p>当窗口内数据全部被确认时</p><blockquote><p>如果滑动窗口中的所有数据都已经被接收方确认接收，那么滑动窗口会往右移动，来为新的数据腾出空间。</p></blockquote></li></ul><p>🌰 比如发送方发送了 <code>1、2、3、4</code> 这 4 个包，那么初始的窗口便是 <code>[1, 4]</code>，当接收方收到 <code>1、2</code> 两个包后，并向发送方发送了 <code>ACK</code> 确认报文，那么发送方的滑动窗口就会后移，变成 <code>[3, 6]</code>。在整个过程中，窗口的大小(4 个包的大小)保持不变，只是随着数据传输的进行，窗口在数据流上滑动。</p></details><h4 id="❓解释下-tcp-的慢启动特性" tabindex="-1"><a class="header-anchor" href="#❓解释下-tcp-的慢启动特性" aria-hidden="true">#</a> ❓解释下 <code>TCP</code> 的慢启动特性</h4><details class="hint-container details"><summary>💡</summary><blockquote><p><code>TCP</code> 的慢启动是一种防止网络拥塞的机制。</p></blockquote><p>工作原理：当一个 <code>TCP</code> 连接刚开始的时候，发起方不会立即以最大速度发送数据，而是会首先以较慢的速度发送，然后逐渐提高发送速度，直到找到网络的最大负载能力。</p><p>慢启动的名字可能会让人误解，实际上它不是真的 “慢”，而是一个加速过程。<code>TCP</code> 连接开始时的发送窗口不是非常大，意味着一次能发送的数据量较小，这就是 “慢” 启动的含义。每当收到一个确认（<code>ACK</code>）报文，发送窗口就增大一点，这样下一次就可以发送更多的数据。这个过程不断重复，发送窗口的大小以指数级别增长，也就是说传输速度会迅速提升。</p><p>为了防止网络拥塞，当达到一个阈值（<code>ssthresh</code>，<code>slow start threshold</code>）后，<code>TCP</code> 将不再指数级别增长，而是转为线性增长，这就是进入 “拥塞避免” 阶段。如果出现了网络拥塞的信号（例如丢包，超时等），<code>TCP</code> 会降低传输速度，重新回到慢启动阶段。</p><p>总结：<code>TCP</code> 的慢启动特性是一种通过动态调整传输速度来适应网络状况，防止网络拥塞的有效机制。</p></details><h4 id="❓讲一下-tcp-的四种拥塞控制算法" tabindex="-1"><a class="header-anchor" href="#❓讲一下-tcp-的四种拥塞控制算法" aria-hidden="true">#</a> ❓讲一下 <code>TCP</code> 的四种拥塞控制算法</h4><details class="hint-container details"><summary>💡</summary><ul><li><p>慢启动算法（<code>Slow Start</code>）:</p><blockquote><p>慢启动算法使用了一个 “拥塞窗口” 且初始值为一个报文段。每当确认数目到达，拥塞窗口就增加一，即每经过一个往返时间 <code>RTT</code>，拥塞窗口就加倍。这样就实现了在网络并未出现拥塞的情况下，数据报的传送速率逐渐加快。但是当拥塞窗口大到一定程度后，就有可能导致网络拥塞。</p></blockquote></li><li><p>拥塞避免算法（<code>Congestion Avoidance</code>）:</p><blockquote><p>拥塞避免算法主要是为了预防因慢开始算法加速过快导致网络拥塞，所以在拥塞窗口到达阈值后，改用拥塞避免算法，让拥塞窗口每经过一个 <code>RTT</code> 只增加一，也就是以线性的速度增长，这样增长速率就放慢了，避免了慢开始算法过快的增长导致的拥塞。</p></blockquote></li><li><p>快重传算法（<code>Fast Retransmit</code>）:</p><blockquote><p>快重传算法在接收方收到一个失序的报文段后，就会立即发出重复确认，而不是等到自己需要发送数据时才捎带确认。在发送方，只要连续收到三个重复确认，就立即重传没有被确认的报文段，而不必等待设置的重传计时器到期。这样可以尽早地知道有报文段没有到达接收方，进而尽早地进行重传。</p></blockquote></li><li><p>快恢复算法（<code>Fast Recovery</code>）:</p><blockquote><p>快恢复算法是在快重传算法之后提出的，主要用于快速恢复丢失报文段后的传输。当发送方连续收到三个重复确认（意味着有报文段丢失）后，不立即执行慢启动算法，而是把阈值设为当前拥塞窗口的一半，然后执行拥塞避免算法。这样避免了慢启动算法使窗口大小回到最初状态，而是让其在一个比较大的值开始，这样就加快了恢复速度。</p></blockquote></li></ul><p>注意：这四种算法，协同工作，共同管理和控制了 <code>TCP</code> 数据的传输，使其在充分利用网络资源的前提下，尽可能的避免网络拥塞，保证了传输的效率和可靠性。</p></details><h4 id="❓在高宽带、高丢包的情况下-怎么保证-tcp-的性能" tabindex="-1"><a class="header-anchor" href="#❓在高宽带、高丢包的情况下-怎么保证-tcp-的性能" aria-hidden="true">#</a> ❓在高宽带、高丢包的情况下，怎么保证 <code>TCP</code> 的性能</h4><details class="hint-container details"><summary>💡</summary><ul><li><p>增大 <code>TCP</code> 窗口大小：<code>TCP</code> 窗口控制了发送方一次可以发送多少数据，所以通过扩大 <code>TCP</code> 窗口，可以提高 <code>TCP</code> 的吞吐量。</p><blockquote><p>注意：过大的 <code>TCP</code> 窗口可能会导致网络拥塞，因此需要谨慎使用这种策略。</p></blockquote></li><li><p>使用快速重传和快速恢复：当发送方多次连续收到对同一包的重复 <code>ACK</code> 时，可能代表接收方那边出现了乱序或者丢包。于是发送方可以不用等到超时就开始重传，这就是快速重传。快速重传后，发送方不再使用慢启动，而是直接进入拥塞避免，这就是快速恢复。</p></li><li><p>使用拥塞控制算法：比如 <code>TCP NewReno</code>、<code>TCP Vegas</code>、<code>TCP BBR</code> 等，可以在丢包较高的情况下，仍然保持较好的网络吞吐性能。</p></li><li><p>启用 <code>SACK</code>(<code>Selective Acknowledgements</code>) 选项：<code>SACK</code> 允许接收方告诉发送方，哪些特定的数据包已经被接收。这样，当数据包丢失时，发送方只需要重发那些未被确认的数据包，而不是所有的数据包。</p></li><li><p>使用前向纠错（<code>FEC</code>）技术：<code>FEC</code> 技术可以在发送数据的时候额外发送一些冗余数据，这样即使在丢包较高的情况下，接收方也有可能从已接收的数据包中恢复出丢失的数据。</p></li><li><p>使用多路径<code>TCP</code> (<code>MPTCP</code>)：<code>MPTCP</code> 可以在有多条路径可用的情况下，同时在多条路径上发送数据。这样即使一部分数据包丢失，其他路径上的数据包仍然可以达到目的地，从而提高 <code>TCP</code> 的吞吐性能。</p></li></ul></details><hr><h2 id="ip" tabindex="-1"><a class="header-anchor" href="#ip" aria-hidden="true">#</a> IP</h2><h3 id="❓除了好记以外-为什么要用域名访问服务器-直接用-ip-不行吗" tabindex="-1"><a class="header-anchor" href="#❓除了好记以外-为什么要用域名访问服务器-直接用-ip-不行吗" aria-hidden="true">#</a> ❓除了好记以外，为什么要用域名访问服务器，直接用 <code>IP</code> 不行吗</h3><details class="hint-container details"><summary>💡</summary><ul><li><p><strong>易于记忆</strong>：域名是由字符和数字组成的，通常与网站或公司的名称相关，更易于人类记忆。而 <code>IP</code> 地址则是由四组数字组成，不易于记忆。</p></li><li><p><strong>易于维护</strong>：如果一个网站更换了服务器，<code>IP</code> 地址就会发生改变。如果直接使用 <code>IP</code> 地址访问，那么用户就需要知道新的 <code>IP</code> 地址才能访问该网站。如果使用域名，只要将域名的解析地址更新为新的 <code>IP</code> 地址，对用户来说是无感知的。</p></li><li><p><strong>支持负载均衡</strong>：通过域名，可以将访问请求分发到不同的服务器上。</p><blockquote><p>比如，一个大型网站可能有成千上万的服务器，可以使用同一个域名，背后由 <code>DNS</code> 服务器将请求分发到不同的 <code>IP</code> 地址，以实现负载均衡。</p></blockquote></li><li><p><strong>结构保密</strong>：直接暴露 <code>IP</code> 地址可能会泄露一些网络结构信息，而使用域名可以更好地隐藏这些信息。</p></li><li><p><strong>支持虚拟主机</strong>：同一 <code>IP</code> 地址上可以运行多个网站，通过域名可以区分和访问这些网站。如果只有 <code>IP</code> 地址，就无法做到这一点。</p></li></ul></details><h3 id="❓判断一个字符串是不是-ipv6-地址" tabindex="-1"><a class="header-anchor" href="#❓判断一个字符串是不是-ipv6-地址" aria-hidden="true">#</a> ❓判断一个字符串是不是 <code>IPv6</code> 地址</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>IPv6</code> 地址是一个由 128 位数值组成的地址，通常表示为 8 个 16 进制的数，每个数由四个十六进制位表示，并用冒号 &quot;:&quot; 分隔。</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 使用 ipaddress 模块中的 is_ipv6_address 函数来判断一个字符串是否为 IPv6 地址</span>
<span class="token keyword">import</span> ipaddress

<span class="token keyword">def</span> <span class="token function">is_ipv6_address</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        ipaddress<span class="token punctuation">.</span>IPv6Address<span class="token punctuation">(</span>address<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">True</span>
    <span class="token keyword">except</span> ipaddress<span class="token punctuation">.</span>AddressValueError<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>is_ipv6_address<span class="token punctuation">(</span><span class="token string">&#39;2001:0db8:85a3:0000:0000:8a2e:0370:7334&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 输出：True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>is_ipv6_address<span class="token punctuation">(</span><span class="token string">&#39;2001:db8:85a3:0:0:8a2e:370:7334&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>           <span class="token comment"># 输出：True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>is_ipv6_address<span class="token punctuation">(</span><span class="token string">&#39;2001:db8:85a3::8a2e:370:7334&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token comment"># 输出：True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>is_ipv6_address<span class="token punctuation">(</span><span class="token string">&#39;This is not an IP address&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                 <span class="token comment"># 输出：False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="❓ping-使用什么协议" tabindex="-1"><a class="header-anchor" href="#❓ping-使用什么协议" aria-hidden="true">#</a> ❓<code>ping</code> 使用什么协议</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>ping</code> 是一种用来检测网络连接质量(是否连通，网络延迟)的工具，基于 <code>ICMP</code> (<code>Internet Control Message Protocol</code>) 互联网控制报文协议。</p></blockquote><p>工作原理：发送一种特殊的以 <code>ECHO_REQUEST</code> 被标记的数据包到指定的网络地址，然后等待接收回馈。如果网络连接正常，那么它将接收到一种被标记为 <code>ECHO_REPLY</code> 的数据包。</p></details><hr><h2 id="socket" tabindex="-1"><a class="header-anchor" href="#socket" aria-hidden="true">#</a> Socket</h2><h3 id="❓socket-了解吗" tabindex="-1"><a class="header-anchor" href="#❓socket-了解吗" aria-hidden="true">#</a> ❓<code>Socket</code> 了解吗</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>Socket</code>(套接字)是计算机网络数据结构，它是网络通信中数据发送和接收的基本操作单元，可以理解为网络通信的端口。</p></blockquote><p><code>Socket</code> 原本是 <code>Unix/Linux</code> 系统下的一个系统调用，在 <code>Windows</code> 环境也有相对应的实现。它提供了在网络中进程之间进行通信的方式。一个 <code>Socket</code> 由一个 <code>IP</code> 地址和一个端口号 <code>Port</code> 唯一确定，形式如：<code>IP:Port</code>。</p><p>一个网络连接的建立需要有一对 <code>Socket</code>，分别位于通信的两端，也就是客户端和服务器端。在网络应用中，服务器端一般采用固定的 <code>IP</code> 地址和端口号。客户端则由系统随机分配端口号，而 <code>IP</code> 地址就是机器的 <code>IP</code>。</p><p><code>Socket</code> 通信过程：服务器监听，客户端请求，连接确认。</p><ul><li><p>服务器监听：服务器端的 <code>Socket</code> 绑定在一个特定端口，监听来自客户端的请求。</p></li><li><p>客户端请求：客户端的 <code>Socket</code> 提出连接请求，要求与服务器端的 <code>Socket</code> 建立连接。</p></li><li><p>连接确认：服务器端的 <code>Socket</code> 接受来自客户端 <code>Socket</code> 的请求，建立连接。</p></li></ul></details><h3 id="❓websocket-是什么" tabindex="-1"><a class="header-anchor" href="#❓websocket-是什么" aria-hidden="true">#</a> ❓<code>WebSocket</code> 是什么</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>WebSocket</code> 是一种网络通信协议，最早由 <code>Web</code> 浏览器和 <code>Web</code> 服务器之间进行全双工通信的技术。</p></blockquote><p>发展历史：</p><ul><li>2008年，<code>WebSocket</code> 受到 <code>HTML5</code> 的影响开始诞生。</li><li>2011年，该协议被 <code>IETF</code> 定为标准 <code>RFC 6455</code>，并被 <code>W3C</code> 用作 <code>Web IDL</code> 中一部分。</li></ul><p>主要特点：</p><ul><li>建立在 <code>TCP</code> 协议之上，服务器网络流量压力较小。</li><li>与 <code>HTTP</code> 协议有较好的兼容性。默认端口也是 <code>80</code> 和 <code>443</code>，并且握手阶段采用 <code>HTTP</code> 协议，使得其可以穿透大多数防火墙，同时也容易和现有的 <code>Web</code> 服务器融合。</li><li>数据格式比较轻量，性能开销小，通信高效。</li><li>可以发送文本，也可发送二进制数据。</li><li>无同源限制（<code>cross-domain</code>），客户端可以与任意服务器通信。</li><li>协议标识符是 <code>ws</code>（或 <code>wss</code> 表示使用了 <code>TLS</code> 加密），服务器网址就是 <code>URL</code>。</li></ul><p>通信流程：</p><ul><li>客户端通过 <code>HTTP</code> 请求与 <code>WebSocket</code> 服务端协商加密握手。</li><li>如果服务器支持 <code>WebSocket</code>，那么握手成功，服务器会返回 <code>Upgrade</code> 协议的 <code>HTTP</code> 状态码 <code>101</code>，即 <code>HTTP</code> 协议转换成 <code>WebSocket</code> 协议，此后，传输的数据就不再是 <code>HTTP</code> 协议，而是 <code>WebSocket</code> 协议。</li><li>完成升级后，数据就直接从 <code>TCP</code> 通道传输，与 <code>HTTP</code> 无关了。</li></ul><p>总结：<code>WebSocket</code> 提供了一种相较于 <code>AJAX</code> 更加实时、更加符合主流编程模型、开销更小的实时双向通信手段，使得在 <code>WEB</code> 页面上的实时通信变得更加容易。常用于即时通讯、在线游戏等需要实时交互的场景。</p></details><hr><h2 id="http" tabindex="-1"><a class="header-anchor" href="#http" aria-hidden="true">#</a> HTTP</h2><h3 id="版本" tabindex="-1"><a class="header-anchor" href="#版本" aria-hidden="true">#</a> 版本</h3><h4 id="❓http-各个版本的区别" tabindex="-1"><a class="header-anchor" href="#❓http-各个版本的区别" aria-hidden="true">#</a> ❓<code>HTTP</code> 各个版本的区别</h4><details class="hint-container details"><summary>💡</summary><ul><li><p><code>HTTP/0.9</code>: 首个 <code>HTTP</code> 版本，只允许简单的请求，仅支持 <code>GET</code> 方法且无头部。</p></li><li><p><code>HTTP/1.0</code>: 该版本增加了很多新特性。</p><ul><li>增加了 <code>POST</code> 和 <code>HEAD</code> 方法。</li><li>引入了 <code>HTTP</code> 头部机制，例如：<code>Content-Type</code>，<code>Content-Length</code> 等。</li><li>“非持续性连接”，每次请求都会重新创建 <code>TCP</code> 的连接的创建和释放，造成极大的资源消耗。</li></ul></li><li><p><code>HTTP/1.1</code>: 相比于 <code>1.0</code>，版本 <code>1.1</code> 做了许多改进。</p><ul><li>增加了 <code>PUT, DELETE</code> 等新方法。</li><li>引入 “持续性连接” 在一次 <code>TCP</code> 连接中处理多个 <code>HTTP</code> 请求。</li><li>引入 “管道机制” (<code>pipeline</code>) 可以同时发送多个的请求，但是响应会按照请求队列的先后顺序进行，会存在 “队头阻塞” 问题。</li><li>引入了分块传输编码机制，可以将请求分为多个部分分别发送，允许服务器在完全生成整个内容之前就开始回应。</li><li>增加了请求头 <code>Host</code>，使得一台物理服务器可以承载多个虚拟的主机。</li></ul><blockquote><p>“队头阻塞” 问题： 在 <code>HTTP/1.1</code> 引入 “持续性连接”（<code>Persistent Connection</code>）让多个 <code>HTTP</code> 请求和响应可以在一个 <code>TCP</code> 连接中传输，但是由于 <code>TCP</code> 协议的特性，数据包必须按照发送顺序进行接收，因此如果队头的包因为某些原因延迟到达，后面的包就必须等待，即使后面的包已经到达，也不能先接收。</p></blockquote></li><li><p><code>HTTP/2.0</code>: 版本 <code>2.0</code> 基于 <code>Google</code> 的 <code>SPDY</code> 协议。</p><ul><li>二进制协议：不再是基于文本的协议，减少了解析复杂度和提升传输速度。(优化传输数据格式：文本 -&gt; 二进制)</li><li>多路复用：(<code>Multiplexing</code>) 在一次 <code>TCP</code> 连接中可以发送多个请求且接收多个响应，减少了 <code>TCP</code> 连接数量同时也减小了延迟。解决 <code>1.1</code> 协议中的 “队头阻塞” 问题。会存在 “同生同灭” 问题。</li><li>头部压缩：采用 <code>HPACK</code> 算法对头信息压缩处理，减少数据体积。</li><li>服务器推送：服务器可以对一个客户端请求发送多个响应。</li><li>请求优先级：不同的请求可以有不同的优先级。</li></ul><blockquote><p>“同生同灭” 问题： 在 <code>HTTP/2.0</code> 的单个连接中，如果有一个请求因为某种原因失败了（比如网络波动，服务器宕机），则这个 <code>TCP</code> 连接上的所有请求都会被关闭，从而导致大量的请求失败，这是由 <code>TCP</code> 协议的特性决定的。</p></blockquote></li><li><p><code>HTTP/3.0</code>: 最新版本。</p><ul><li>基于 <code>QUIC</code> 协议 (<code>Quick UDP Internet Connections</code>)，解决 <code>TCP</code> 的 “队头阻塞” 问题。 <blockquote><p>在 <code>QUIC</code> 协议中，数据包是独立传输的，即使有数据包丢失，也不会影响到其它数据包的传输和处理，从根本上解决了 “队头阻塞” 问题。</p></blockquote></li><li>底层协议改为 <code>UDP</code>，因此解决了 <code>HTTP/2.0</code> 中多路复用的 “同生同灭” 问题。</li></ul></li></ul></details><h4 id="❓http-是无状态的-怎么理解" tabindex="-1"><a class="header-anchor" href="#❓http-是无状态的-怎么理解" aria-hidden="true">#</a> ❓<code>HTTP</code> 是无状态的，怎么理解</h4><details class="hint-container details"><summary>💡</summary><blockquote><p><code>HTTP</code> (<code>HyperText Transfer Protocol</code>) 被称为无状态的，是因为在单一的 <code>HTTP</code> 请求和响应交互过程中，服务器并不会保存任何关于客户端的信息。</p></blockquote><ul><li><p>无状态：每一次 <code>HTTP</code> 请求都是独立的，服务器不会记住之前的请求。也就是说，从客户端发出第一个请求到服务器，然后到第二个请求，服务器并不知道这两个请求是来自同一个客户端。无论客户端在前一个请求中做了什么，每个请求都被视为全新的、与其他请求没有关系的请求。</p></li><li><p>优点：无状态设计使 <code>HTTP</code> 的结构变得简单、无复杂性和独立性。</p></li><li><p>缺点：比如服务器无法记录用户的操作历史。为了解决这个问题，引入了 <code>Cookies</code>、<code>Session</code> 等技术，它们使得 <code>HTTP</code> 能够实现有状态的交互，比如用户认证、购物车功能等。</p></li></ul></details><h4 id="❓http-2-0-针对同一个域名的多个请求-会建立多少个-tcp-连接" tabindex="-1"><a class="header-anchor" href="#❓http-2-0-针对同一个域名的多个请求-会建立多少个-tcp-连接" aria-hidden="true">#</a> ❓<code>HTTP 2.0</code> 针对同一个域名的多个请求，会建立多少个 <code>TCP</code> 连接</h4><details class="hint-container details"><summary>💡</summary><p>在 <code>HTTP 2.0</code> 中，只需要建立一个 <code>TCP</code> 连接就可以处理同一个域名的所有请求。<code>HTTP 2.0</code> 支持多路复用（<code>Multiplexing</code>），可以在一个 <code>TCP</code> 连接上同时处理多个 <code>HTTP</code> 请求和响应。</p><ul><li><p><code>HTTP 1.x</code> 中浏览器通常会对同一个域名建立多个并行的 <code>TCP</code> 连接，以便并行处理多个 <code>HTTP</code> 请求，但这种方式在 <code>TCP</code> 连接数过多时会导致资源消耗过大并影响性能。</p></li><li><p><code>HTTP 2.0</code> 多路复用功能有效地解决了这个问题，它将不同的请求分割为更小的消息和帧，并在一个 <code>TCP</code> 连接中并行发起，从而减少了需要的连接数量，提升了网络传输效率。</p></li></ul></details><h4 id="❓http-3-0-中的-quic-是什么" tabindex="-1"><a class="header-anchor" href="#❓http-3-0-中的-quic-是什么" aria-hidden="true">#</a> ❓<code>HTTP 3.0</code> 中的 <code>QUIC</code> 是什么</h4><details class="hint-container details"><summary>💡</summary><blockquote><p><code>QUIC</code>（<code>Quick UDP Internet Connections</code>）: 由 <code>Google</code> 提出并开发的一种基于 <code>UDP</code> (<code>User Datagram Protocol</code>) 的互联网传输层协议。</p></blockquote><p><code>QUIC</code> 相对于 <code>TCP/UDP</code> 的优点：</p><ul><li><p>低延迟：<code>QUIC</code> 通过减少传输层的握手步骤，可以实现无延迟、<code>0-RTT</code>（往返时间）的连接建立。</p></li><li><p>弹性：<code>QUIC</code> 协议基于 <code>UDP</code>，所以每个 <code>QUIC</code> 数据包都是独立的，数据包之间没有顺序关系。这意味着，即使某个数据包丢失或者延迟，也不会导致 “队头阻塞” 问题。这使得 <code>QUIC</code> 协议在面对网络丢包等恶劣网络环境时，比 <code>TCP</code> 具有更好的弹性。</p></li><li><p>多路复用：<code>QUIC</code> 协议支持流的概念，同一 <code>QUIC</code> 连接可以包含多个流，每个流都是独立的。这允许多个请求和响应在同一个连接上并行传输，从而避免了 <code>HTTP/2</code> 中同一个 <code>TCP</code> 连接上的 “同生同灭” 问题。</p></li><li><p>安全：<code>QUIC</code> 协议集成了 <code>TLS</code> (<code>Transport Layer Security</code>) 协议，可以提供端到端的数据加密和身份验证。</p></li></ul></details><h3 id="请求方法" tabindex="-1"><a class="header-anchor" href="#请求方法" aria-hidden="true">#</a> 请求方法</h3><h4 id="❓get-vs-post" tabindex="-1"><a class="header-anchor" href="#❓get-vs-post" aria-hidden="true">#</a> ❓<code>GET</code> vs <code>POST</code></h4><details class="hint-container details"><summary>💡</summary><ul><li><p>作用：</p><ul><li><code>GET</code>：从指定的资源请求数据，通常用于获取数据。</li><li><code>POST</code>：向指定的资源提交要被处理的数据，主要用于发送数据。</li></ul></li><li><p>数据传递方式：</p><ul><li><code>GET</code> 方法通常将参数直接附加在 <code>URL</code> 后面，并且用问号（<code>?</code>）分隔，键值对之间则以 <code>&amp;</code> 符号进行分割 <blockquote><p>例如：<code>http://example.com/test?name=test1&amp;value=test2</code>。</p></blockquote></li><li><code>POST</code> 方法则将数据包含在 <code>HTTP</code> 请求体内。</li></ul></li><li><p>安全性：</p><ul><li><code>GET</code> 方法将参数直接暴露在 <code>URL</code> 中，所以它的安全性相对较低，更适合不包含隐私或者敏感信息的请求。</li><li><code>POST</code> 方法由于将参数包含在请求体内，所以相对更加安全一些。</li></ul></li><li><p>数据大小：</p><ul><li><code>GET</code> 方法由于受到 <code>URL</code> 长度的限制（通常为 <code>2048</code> 字符），所以其发送的数据量有限。</li><li><code>POST</code> 方法理论上没有数据大小的限制。</li></ul></li><li><p>数据类型：</p><ul><li><code>GET</code> 方法只允许发送文本类型的数据。</li><li><code>POST</code>方法没有这样的限制，可以发送二进制数据。</li></ul></li><li><p>缓存和历史：</p><ul><li><code>GET</code> 方式发送的请求，浏览器会主动缓存，用户在 <code>URL</code> 地址栏生成历史记录。</li><li><code>POST</code> 方式则不会被缓存，也不会留下历史记录。</li></ul></li><li><p>幂等性：</p><ul><li><code>GET</code> 请求是幂等的，即多次执行同一请求，不会改变服务器状态。</li><li><code>POST</code> 请求不是幂等的，相同的 <code>POST</code> 请求被执行多次可能导致不同的结果。</li></ul></li></ul></details><h4 id="❓get-请求参数一定是放在-url-中的吗" tabindex="-1"><a class="header-anchor" href="#❓get-请求参数一定是放在-url-中的吗" aria-hidden="true">#</a> ❓<code>GET</code> 请求参数一定是放在 <code>URL</code> 中的吗</h4><details class="hint-container details"><summary>💡</summary><p>不一定。</p><p><code>GET</code> 请求的参数是放在 <code>URL</code> 中的，这是 <code>GET</code> 请求设计的初衷和最常见的使用方式。但是，并非所有情况下 <code>GET</code> 请求的参数都需要放在 <code>URL</code> 中，也可以通过请求头来传递。例如，可以通过 <code>Authorization</code> 字段在 <code>GET</code> 请求头中传递认证信息。</p><p>注意：因为 <code>GET</code> 请求的参数是直接暴露在 <code>URL</code> 中的，因此有一定的安全风险，不适合用于传输敏感信息，如密码，银行卡号等。同时，<code>URL</code> 的长度在浏览器和服务器中都有限制，过长的 <code>URL</code> 可能会被截断，导致请求失败。在需要传输大量数据时，一般会使用 <code>POST</code> 请求，其参数通过请求体传输，相对安全又没有长度限制。</p></details><h4 id="❓post-请求参数能放在-url-中吗" tabindex="-1"><a class="header-anchor" href="#❓post-请求参数能放在-url-中吗" aria-hidden="true">#</a> ❓<code>POST</code> 请求参数能放在 <code>URL</code> 中吗</h4><details class="hint-container details"><summary>💡</summary><p>技术上可行，但不推荐。</p><p>不推荐原因：</p><ul><li><p>安全性：放在 <code>URL</code> 中的参数对他人是可见的，比如存储在浏览器的浏览历史中，或者在 <code>Web</code> 服务器的日志文件中，或者在网络上被截获。因此，这可能会泄露敏感信息。</p></li><li><p>容量限制：对 <code>URL</code> 的大小，大部分浏览器都有一定的限制（通常为 <code>2000~4000</code> 字符）。将 <code>POST</code> 参数放在URL中可能会让 <code>URL</code> 过长，超过浏览器的处理能力。</p></li><li><p>规范性：违反 <code>HTTP</code> 的语义，根据 <code>HTTP</code> 规范，<code>POST</code> 方法的语义是 “向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。”，这就意味着 <code>POST</code> 请求的数据应该放在请求体中。</p></li></ul></details><h4 id="❓post-请求的-body-体使用-form-urlencoded-和-multipart-form-data-的区别" tabindex="-1"><a class="header-anchor" href="#❓post-请求的-body-体使用-form-urlencoded-和-multipart-form-data-的区别" aria-hidden="true">#</a> ❓<code>POST</code> 请求的 <code>body</code> 体使用 <code>form-urlencoded</code> 和 <code>multipart/form-data</code> 的区别</h4><details class="hint-container details"><summary>💡</summary><ul><li><p><code>application/x-www-form-urlencoded</code>：无法进行二进制数据的传输，只能上传文本数据。</p><blockquote><p>在这种编码方式下，所有的键值对都会被合并到一个查询字符串中，查询字符串的格式和 <code>GET</code> 请求中 <code>URL</code> 的查询字符串格式一致。每个键值对之间用 <code>&amp;</code> 符号分割，每个键与值之间用等号 <code>=</code> 分割，例如 <code>key1=value1&amp;key2=value2</code>。如果值中包含一些特殊字符，这些字符需要被 <code>URL</code> 编码（比如空格被编码成 <code>+</code> 或 <code>%20</code>）。</p></blockquote></li><li><p><code>multipart/form-data</code>：不仅可以上传文本数据，还可以上传文件或其他二进制数据。</p><blockquote><p>在这种编码方式下，消息体会被分割成多个部分，每个部分对应一个字段。每个部分的开头都包含一个含有该字段名的 <code>Content-Disposition</code> 头部，然后是字段的值。各个部分之间用 <code>boundary</code> 字符串分隔，这个字符串在 <code>Content-Type</code> 头部中指定。</p></blockquote></li></ul></details><h4 id="❓post-为什么会发生两次请求" tabindex="-1"><a class="header-anchor" href="#❓post-为什么会发生两次请求" aria-hidden="true">#</a> ❓<code>POST</code> 为什么会发生两次请求</h4><details class="hint-container details"><summary>💡</summary><p>两次请求：第一次是 <code>OPTIONS</code> 请求，第二次就是预期中的 <code>POST</code> 请求。</p><blockquote><p><code>OPTIONS</code>：用于请求获得由 <code>Request-URI</code> 标识的资源在请求/响应的通信过程中可以使用的功能选项。</p></blockquote><p>产生 <code>OPTIONS</code> 请求的原因：</p><ul><li><p>添加了自定义头部 <code>Header</code></p><blockquote><p>例如：在头部添加一下 <code>token</code> 信息来校验用户信息</p></blockquote></li><li><p>发生了跨域</p></li></ul></details><blockquote><p>❓如何避免 <code>OTPIONS</code> 请求</p></blockquote><details class="hint-container details"><summary>💡</summary><p>通过确保请求是一个“简单请求” (<code>simple request</code>)，来避免不会触发预检请求。</p><ul><li>请求方法为 <code>GET</code>、<code>HEAD</code> 或 <code>POST</code>。</li><li>使用自动设置的头（如 <code>Connection</code>、<code>Content-Type</code>、<code>User-Agent</code>...）。</li><li><code>Content-Type</code> 的值只限于以下三者之一：<code>text/plain</code>、<code>multipart/form-data</code>、<code>application/x-www-form-urlencoded</code>。如果需要发送一个 <code>JSON</code> 格式的数据，可能需要在服务器端改变一些设置，比如使用 <code>text/plain</code> 来接收 <code>JSON</code> 数据。</li></ul></details><h4 id="❓http-中的简单请求和复杂请求" tabindex="-1"><a class="header-anchor" href="#❓http-中的简单请求和复杂请求" aria-hidden="true">#</a> ❓<code>HTTP</code> 中的简单请求和复杂请求</h4><details class="hint-container details"><summary>💡</summary><ul><li><p>简单请求：</p><ul><li><code>HTTP</code> 方法为 <code>HEAD</code>、<code>GET</code> 或 <code>POST</code>。</li><li><code>HTTP</code> 头信息不超出以下字段：<code>Accept</code>、<code>Accept-Language</code>、<code>Content-Language</code>、<code>Content-Type</code>（但只限于<code>application/x-www-form-urlencoded</code>、<code>multipart/form-data</code>、<code>text/plain</code>）以及<code>DPR</code>、<code>Downlink</code>、<code>Save-Data</code>、<code>Viewport-Width</code>、<code>Width</code>。</li></ul></li><li><p>复杂请求：不满足上述条件的请求，就视为复杂请求。</p></li></ul><p>跨域资源共享 (<code>CORS</code>) 请求</p><ul><li>简单请求，浏览器直接发出 <code>CORS</code> 请求。具体来说，就是在头信息中，增加一个 <code>Origin</code> 字段。</li><li>复杂请求，<code>CORS</code> 请求会在正式通信之前，增加一次 <code>HTTP</code> 查询请求，称为&quot;预检&quot;请求（<code>preflight</code>）。浏览器首先会向服务器发送一个 <code>HTTP OPTIONS</code> 请求头，检测服务端是否支持跨域请求，之后才会发出实际的 <code>HTTP</code> 请求。</li></ul></details><h3 id="状态吗" tabindex="-1"><a class="header-anchor" href="#状态吗" aria-hidden="true">#</a> 状态吗</h3><h4 id="❓http-状态码-2xx-3xx-4xx-5xx-分别代表什么" tabindex="-1"><a class="header-anchor" href="#❓http-状态码-2xx-3xx-4xx-5xx-分别代表什么" aria-hidden="true">#</a> ❓<code>HTTP</code> 状态码 <code>2XX，3XX，4XX，5XX</code> 分别代表什么</h4><details class="hint-container details"><summary>详情</summary><blockquote><p><code>HTTP</code> 状态码：服务器在处理客户端请求时，对该请求的响应状态进行标识的一种方式。</p></blockquote><ul><li><p><code>2XX</code>（成功）- 表示成功处理了请求的状态码。</p><ul><li>200 <code>OK</code>，表示请求成功。</li><li>201 <code>Created</code>，表示已创建成功。</li><li>204 <code>No Content</code>，表示处理成功，但无需返回内容。</li></ul></li><li><p><code>3XX</code>（重定向）- 表示需要客户端进行额外操作的状态码。</p><ul><li>301 <code>Moved Permanently</code>，表示资源已被永久移动。</li><li>302 <code>Found</code>，表示资源临时移动。</li><li>304 <code>Not Modified</code>，表示资源未更改(缓存)。</li></ul></li><li><p><code>4XX</code>（客户端错误） - 表示客户端请求有错误的状态码。</p><ul><li>400 <code>Bad Request</code>，表示请求格式错误。</li><li>401 <code>Unauthorized</code>，表示请求未被授权。</li><li>404 <code>Not Found</code>，表示请求的资源不存在。</li></ul></li><li><p><code>5XX</code>（服务器错误） - 表示服务器在处理请求时发生错误的状态码。</p><ul><li>500 <code>Internal Server Error</code>，表示服务器内部错误。</li><li>502 <code>Bad Gateway</code>，表示网关错误。</li><li>503 <code>Service Unavailable</code>，表示服务器当前无法处理请求。</li></ul></li></ul></details><h4 id="❓为什么要设计-304-这个状态码" tabindex="-1"><a class="header-anchor" href="#❓为什么要设计-304-这个状态码" aria-hidden="true">#</a> ❓为什么要设计 <code>304</code> 这个状态码</h4><details class="hint-container details"><summary>详情</summary><blockquote><p><code>HTTP 304</code> 状态码也被称作 <code>Not Modified</code>，即 “未被修改”。当客户端发送一个带有 <code>If-Modified-Since</code> 或<code> If-None-Match</code> 头的条件请求时，服务器可以使用这个状态码来告知客户端，自从上次获取资源以来，资源没有任何改变，所以客户端可以继续使用它的本地拷贝。</p></blockquote><p>设计原因：</p><ul><li><p>提高效率：如果资源自上次获取以来没有发生改变，那么重新发送该资源显然是一种浪费，特别是对于大型资源（如图像、视频、大型 <code>CSS</code> 或 <code>JavaScript</code> 文件）而言。<code>304</code> 状态码让服务器有可能仅仅通过发送一个小的 <code>HTTP</code> 头来满足请求，这显著减少了数据量，节省了带宽，提高了响应速度。</p></li><li><p>减少服务器负载：对于很多动态生成的资源（比如基于数据库的网页内容），每次请求都生成和发送新资源可能会给服务器带来很大的计算负担，通过发送一个 <code>304</code> 状态，服务器可以避开这个负担。</p></li></ul><p>总结：<code>304</code> 状态码为了提高 <code>Web</code> 性能，优化用户体验，减少服务器负载而设计。</p></details><h3 id="功能知识" tabindex="-1"><a class="header-anchor" href="#功能知识" aria-hidden="true">#</a> 功能知识</h3><h4 id="❓http-如何实现长连接" tabindex="-1"><a class="header-anchor" href="#❓http-如何实现长连接" aria-hidden="true">#</a> ❓<code>HTTP</code> 如何实现长连接</h4><details class="hint-container details"><summary>💡</summary><blockquote><p><code>HTTP</code> 长连接，又称为 “持续性连接”（<code>Persistent Connection</code>）</p></blockquote><p>实现：</p><ul><li><p><code>HTTP/1.0</code> 版本要支持 “持续性连接”，必须在 <code>HTTP</code> 头信息中指定 <code>Connection: keep-alive</code>。</p></li><li><p><code>HTTP/1.1</code> 版本中所有的连接默认都是 “持续性连接”，除非明确指定 <code>Connection: close</code> 关闭它。要实现长连接，服务器和客户端不必做任何特别的处理。</p></li></ul><p>优点：复用已建立的 <code>TCP</code> 连接，减少 <code>TCP</code> 连接的创建和关闭所带来的额外开销，降低了延迟，提高了网页加载速度。</p><p>缺点：如果服务端和客户端之间没有数据交换，这个连接将会一直占用资源，可能会引发一些问题，比如连接数过多导致服务器资源耗尽。</p><p>应用：<code>Websocket</code> 和服务器推送(<code>Server Sent Event</code>)等实时通信技术中，它们对连接的保持时间和交互模式等有更具体的要求。</p></details><h4 id="❓http-断点续传涉及到哪些字段" tabindex="-1"><a class="header-anchor" href="#❓http-断点续传涉及到哪些字段" aria-hidden="true">#</a> ❓<code>HTTP</code> 断点续传涉及到哪些字段</h4><details class="hint-container details"><summary>💡</summary><p>断点续传 <code>Header</code> 字段：</p><ul><li><p><code>Content-Length</code>：标识整个实体文件的大小，单位为字节。</p></li><li><p><code>Content-Range</code>：在整个实体中本次发送的字节位置和总大小。</p><blockquote><p>例如，<code>Content-Range: bytes 0-499/1234</code>，表示本次请求是请求第 <code>0-499</code> 字节，整个文件大小为 <code>1234</code> 字节。</p></blockquote></li><li><p><code>Accept-Ranges</code>：表示服务器是否支持范围请求，及其支持的单位，通常为<code>bytes</code>。</p></li><li><p><code>ETag</code>：表示资源的特定版本，通常是由资源内容的哈希值计算得到。</p></li></ul></details><blockquote><p>❓怎么确保分片全部传输完后，文件的完整性和无篡改</p></blockquote><details class="hint-container details"><summary>💡</summary><ul><li><p>使用 <code>Content-Length</code> 和 <code>Content-Range</code> 确认接收到的数据段的正确性。</p></li><li><p>使用 <code>ETag</code> 。在整个传输过程中，<code>ETag</code> 应该保持不变。如果在传输过程中 <code>ETag</code> 发生改变，说明文件已经被修改，需要重新开始传输。</p></li><li><p>在所有分片传输完毕后，对接收到的文件进行校验，比如使用 <code>MD5</code> 或者 <code>SHA</code> 验证其完整性。如果校验结果和预期相符，说明文件传输完整并且没有被篡改。</p></li></ul></details><hr><h2 id="https" tabindex="-1"><a class="header-anchor" href="#https" aria-hidden="true">#</a> HTTPS</h2><h3 id="❓https-vs-http" tabindex="-1"><a class="header-anchor" href="#❓https-vs-http" aria-hidden="true">#</a> ❓<code>HTTPS</code> vs <code>HTTP</code></h3><details class="hint-container details"><summary>💡</summary><p>概念：</p><ul><li><code>HTTP</code>: 是基于 <code>TCP/IP</code> 通信协议的一种数据传输协议。</li><li><code>HTTPS</code> : <code>= HTTP + SSL</code>，在 <code>HTTP</code> 协议的基础加上了加密处理。</li></ul><p>区别：</p><ul><li><p>安全性：</p><ul><li><p><code>HTTP</code>（超文本传输协议）：明文传输，数据在传输过程中如果被拦截，就可以直接查看内容，这就存在安全隐患。</p></li><li><p><code>HTTPS</code>（超文本传输安全协议）：在 <code>HTTP</code> 的基础上增加了 <code>SSL/TLS</code> 协议，通过证书来验证服务器的身份，并对客户端和服务器之间传输的数据进行加密，保护了数据的私密性和完整性。</p></li></ul></li><li><p>性能：</p><ul><li><p><code>HTTP</code>：处理速度更快，延迟更低，但这是以安全性为代价的。</p></li><li><p><code>HTTPS</code>：需要处理加密和解密过程，增加了一些处理开销，可能对性能产生影响。但随着技术的发展，这点性能影响在很多应用中已经几乎可以忽略不计。</p></li></ul></li><li><p>成本</p><ul><li><code>HTTP</code>：不要证书</li><li><code>HTTPS</code>：需要证书，虽然有免费的证书，但高级的证书可能需要付费。</li></ul></li></ul></details><h3 id="❓https-比起-http-有什么缺陷" tabindex="-1"><a class="header-anchor" href="#❓https-比起-http-有什么缺陷" aria-hidden="true">#</a> ❓<code>HTTPS</code> 比起 <code>HTTP</code> 有什么缺陷</h3><details class="hint-container details"><summary>💡</summary><ul><li><p>建立连接时需要花费更长的时间：<code>HTTPS</code> 需要进行一次 &quot;握手&quot; 过程来建立一个安全连接。这个过程需要客户端和服务器之间来回传输多次信息，可能会导致连接的延迟。然而，现代技术如 <code>HTTP/2</code>、<code>TLS 1.3</code> 及 <code>QUIC</code> 已经大大缩短了这个延迟。</p></li><li><p>更高的服务器资源消耗：由于 <code>HTTPS</code> 在传输数据前需要进行加密处理，因此会使用更多的 <code>CPU</code> 和内存资源。这可能会对处理能力有限的服务器造成一定的负担。</p></li><li><p>证书的获取和管理：<code>HTTPS</code> 需要从认证机构获取 <code>SSL/TLS</code> 证书。虽然有一些免费的证书供网站使用，但如果需要高级的证书，可能需要额外付费。此外，证书的定期更新和管理也需要投入一定的维护成本。</p></li><li><p>兼容性：有些老的设备或者系统可能不支持 <code>HTTPS</code> 或者只支持老的、安全性较低的 <code>SSL/TLS</code> 版本。</p></li></ul></details><h3 id="❓ssl-证书除了压缩加密-还有什么别的用处" tabindex="-1"><a class="header-anchor" href="#❓ssl-证书除了压缩加密-还有什么别的用处" aria-hidden="true">#</a> ❓<code>SSL</code> 证书除了压缩加密，还有什么别的用处</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>SSL</code>（Secure Sockets Layer）证书是一种安全协议。</p></blockquote><ul><li><p>加密：<code>SSL</code> 证书可以用来对客户端与服务器之间的通信进行加密，防止数据在传输过程中被拦截与窃取。</p></li><li><p>身份验证：<code>SSL</code> 证书包含了网站的公钥以及网站所有者的信息。</p><blockquote><p>当用户访问一个使用 <code>SSL</code> 证书的网站时，用户的浏览器会对这个证书进行检查，确认其有效性以及由可信的机构颁发，从而验证网站的真实身份。在这个过程中，网站所有者的信息对用户是可见的，提高了网站的可信度。</p></blockquote></li><li><p>完整性保护：<code>SSL</code> 证书还用来保护数据的完整性，确保数据在传输过程中没有被篡改。</p></li></ul><p>注意：虽然说 &quot;<code>SSL</code> 证书加密&quot;，实际上更准确的说法应该是 “<code>SSL</code> 证书提供了一种方式，让服务器和客户端之间可以建立安全的加密通信”。因为证书本身并不进行加密操作，它包含的公钥和私钥才是用来加密和解密通信数据的工具。</p></details><hr><h2 id="dns" tabindex="-1"><a class="header-anchor" href="#dns" aria-hidden="true">#</a> DNS</h2><h3 id="❓dns-是什么" tabindex="-1"><a class="header-anchor" href="#❓dns-是什么" aria-hidden="true">#</a> ❓<code>DNS</code> 是什么</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>DNS</code>（<code>Domain Name System</code>，域名系统）是互联网的一项核心服务，主要负责将易于人类理解的域名转换为计算机可理解的 <code>IP</code> 地址。这种将域名解析成 <code>IP</code> 地址的过程就称为 <code>DNS</code> 解析。</p></blockquote><p><code>DNS</code> 是一个分布式数据库，由全球众多的 <code>DNS</code> 服务器组成，它们之间相互协作，将所有的域名和 <code>IP</code> 地址信息互相传递。当在浏览器中输入一个网址时，计算机会先向 <code>DNS</code> 服务器发送一个请求，询问这个域名对应的 <code>IP</code> 地址，然后 <code>DNS</code> 服务器会返回该 <code>IP</code> 地址，最后计算机会使用这个 <code>IP</code> 地址与网站服务器建立连接。</p><p>优点：</p><ul><li>可以使用容易记忆的域名来访问需要的信息，而不需要记住复杂的 <code>IP</code> 地址。</li><li>由于是分布式的，<code>DNS</code> 系统具有很高的可扩展性和可靠性，使得可以随时随地访问互联网上的信息。</li></ul></details><h3 id="❓dns-解析过程" tabindex="-1"><a class="header-anchor" href="#❓dns-解析过程" aria-hidden="true">#</a> ❓<code>DNS</code> 解析过程</h3><details class="hint-container details"><summary>💡</summary><ul><li><p><strong>本地缓存查询</strong>：首先，客户端浏览器会在本地缓存中查询此前是否有请求过这个域名的记录，如果有，直接返回对应的 <code>IP</code> 地址，然后进行连接访问。本地缓存通常有有效期，超过一段时间后会自动清空。</p></li><li><p><strong>向本地DNS服务器查询</strong>：如果本地缓存中没有找到，客户端浏览器会向本地的 <code>DNS</code> 服务器发送请求。本地 <code>DNS</code> 服务器通常由用户的 <code>ISP</code>（<code>Internet Service Provider</code>，互联网服务提供商）提供。</p></li><li><p><strong>转发请求到根服务器</strong>：如果本地 <code>DNS</code> 服务器中也没有相应的记录，它就会将这个请求转发到根 <code>DNS</code> 服务器。</p></li><li><p><strong>转发到顶级域服务器</strong>：根 <code>DNS</code> 服务器接收到请求后，会告诉本地 <code>DNS</code> 服务器，应该去顶级域（<code>TLD</code>，<code>Top-Level Domain</code>）服务器查询，比如 <code>.com</code> 的服务器。</p></li><li><p><strong>转发到权威服务器</strong>：顶级域服务器收到请求后会告诉本地 <code>DNS</code> 服务器，应该去请求 <code>example.com</code> 域的权威 <code>DNS</code> 服务器。</p></li><li><p><strong>在权威服务器查询并返回解析结果</strong>：权威服务器找到对应的 <code>IP</code> 并返回到本地 <code>DNS</code> 服务器，本地 <code>DNS</code> 服务器将解析结果返回给客户端，同时将结果缓存到本地，以便下次查询时快速返回。</p></li><li><p>客户端收到 <code>IP</code> 地址后和服务器建立连接，从而访问网站。</p></li></ul><p>总结：整个 <code>DNS</code> 解析过程实际上是一个递归和迭代查找的过程，如果某一步已经找到了对应的 <code>IP</code> 地址，则不需再进行下一步。</p></details><h3 id="❓dns-为什么用-udp-而不用-tcp" tabindex="-1"><a class="header-anchor" href="#❓dns-为什么用-udp-而不用-tcp" aria-hidden="true">#</a> ❓<code>DNS</code> 为什么用 <code>UDP</code> 而不用 <code>TCP</code></h3><details class="hint-container details"><summary>💡</summary><ul><li><p><strong>速度</strong>：<code>UDP</code> 相比 <code>TCP</code> 更轻量级，无需进行连接建立和断开的过程，因此在传输速度上优于 <code>TCP</code>。<code>DNS</code> 查询需要快速返回结果，因此 <code>DNS</code> 选择了更为高效的 <code>UDP</code>。</p></li><li><p><strong>资源占用</strong>：<code>TCP</code> 连接需要维护连接状态，对于服务器来说，如果有大量的 <code>TCP</code> 连接，将需要维护大量的连接状态，而且 <code>TCP</code> 连接在断开后还需要维持一段时间的 <code>TIME_WAIT</code> 状态，这都是对资源的一种额外开销。而 <code>UDP</code> 是无连接的，对服务器端的资源占用更小。</p></li><li><p><strong>简单应用适合UDP</strong>：<code>DNS</code> 查询一般只需要发送一次请求，然后接受一次响应。对于这种简单的请求/响应模式，<code>UDP</code> 比 <code>TCP</code> 更适合。</p></li></ul><p>注意：虽然 <code>DNS</code> 主要使用 <code>UDP</code>，但在某些情况下也会使用 <code>TCP</code>，比如当 <code>UDP</code> 包无法容纳全部的 <code>DNS</code> 响应数据时，就需要使用 <code>TCP</code>。<code>TCP</code> 也会在区域传输（<code>zone transfers</code>）等场景下使用。</p></details><hr><h2 id="抓包" tabindex="-1"><a class="header-anchor" href="#抓包" aria-hidden="true">#</a> 抓包</h2><h3 id="❓抓包工具抓取-https-的原理" tabindex="-1"><a class="header-anchor" href="#❓抓包工具抓取-https-的原理" aria-hidden="true">#</a> ❓抓包工具抓取 <code>HTTPS</code> 的原理</h3><details class="hint-container details"><summary>💡</summary><p>原理：通过 “中间人攻击”（<code>Man-in-the-middle attack</code>, <code>MITM</code>）方式。</p><ul><li><p>当客户端向服务器发出 <code>HTTPS</code> 请求时，抓包工具会插入到它们之间，生成一对新的公钥和私钥，并向客户端发送公钥以及伪造的服务器证书，客户端由于信任这个伪造的证书，接受公钥并用它来加密发送的数据。</p></li><li><p>当抓包工具收到客户端加密后的数据，会用自己的私钥解密数据，然后读取并记录明文信息。此时的抓包工具就像是客户端向其发送 <code>HTTPS</code> 请求的服务器。接着，抓包工具用真正的服务器的公钥把数据重新加密后，发送给真正的服务器。</p></li><li><p>当真正的服务器响应以后，抓包工具再次插入到通信的过程中，使用真正的服务器的公钥解密响应消息，然后再用自己的私钥加密并发送给客户端。</p></li></ul><p>注意：这种方法需要客户端能够信任抓包工具生成的伪造证书，否则客户端将无法信任并接受这个公钥和伪造的服务器证书，通信就会失败。在实际操作中，这通常是通过在客户端安装一个由抓包工具颁发的根证书来实现的。</p></details><h3 id="❓charles-抓包软件的原理" tabindex="-1"><a class="header-anchor" href="#❓charles-抓包软件的原理" aria-hidden="true">#</a> ❓<code>Charles</code> 抓包软件的原理</h3><details class="hint-container details"><summary>💡</summary><p>可以将它理解成中间人攻击。客户端将 <code>Charles</code> 作为代理服务器(中间人)。客户端所有请求都会先发送给 <code>Charles</code>，<code>Charles</code> 再将客户端的请求转发给服务器。<code>Charles</code> 收到服务器响应之后，再将从服务器收到的回复内容转发给客户端。这样请求和响应数据都被 <code>Charles</code> 记录下来，再通过界面展示即可。</p><p>对于 <code>HTTP</code> 相对来说比较简单，直接进行接收和转发即可。而 <code>HTTPS</code> 中涉及 <code>CA</code> 认证，所以客户端需要进行的操作信任 <code>Charles</code> 的证书，这样通过 <code>Charles</code> 发送给客户端的公钥就可以通过这个证书校验成功，从而完成通信。</p></details><h3 id="❓不使用-charles-4g-网络如何抓包" tabindex="-1"><a class="header-anchor" href="#❓不使用-charles-4g-网络如何抓包" aria-hidden="true">#</a> ❓不使用 <code>Charles</code>，<code>4G</code> 网络如何抓包</h3><details class="hint-container details"><summary>💡</summary><ul><li><p><code>Wireshark</code>：这是一种广泛使用的网络封包分析软件，它可以捕获网络封包，并尽可能显示出最为详细的封包数据。使用 <code>Wireshark</code> 可以在设备（需要配合其他工具如 <code>tcpdump</code>）和无线路由器（如果它被配置为 <code>Wireshark</code> 可以在其上运行）之间抓取流量。</p></li><li><p><code>Tcpdump</code>：一个 <code>Powerful</code> 的命令行抓包工具，可以获得传输在网络上的 <code>TCP/IP</code> 数据包的详细信息。</p></li><li><p>使用 <code>Android</code> 手机的抓包应用，例如 <code>Packet Capture</code>, <code>tPacketCapture</code> 等。</p></li><li><p>使用代理服务器，把手机的网络流量通过代理服务器，然后在代理服务器上抓包。一些云服务提供商(例如<code>AWS</code>，<code>GCP</code>，<code>Azure</code> 等)可以提供方便的网络流量采集功能。</p></li></ul></details><h3 id="❓为什么-wireshark-不能直接抓取-ssl-的原始数据" tabindex="-1"><a class="header-anchor" href="#❓为什么-wireshark-不能直接抓取-ssl-的原始数据" aria-hidden="true">#</a> ❓为什么 <code>Wireshark</code> 不能直接抓取 <code>SSL</code> 的原始数据</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>SSL</code>（<code>Secure Sockets Layer</code>，安全套接字层），以及其继任者<code>TLS</code>（<code>Transport Layer Security</code>，传输层安全），是用于保护网络通信的加密协议。所有通过 <code>SSL</code> 或 <code>TLS</code> 通信的数据在网络上的传输过程中是被加密的。</p></blockquote><p>只有当数据到达目标服务器或客户端，并且使用正确的私钥进行解密后，数据的内容才可以被读取。因此，使用 <code>Wireshark</code> 等抓包工具直接抓取 <code>SSL/TLS</code> 通信的数据包，只能看到加密后的数据，而不是原始的明文数据。</p><p>如果有服务器或客户端的私钥，或者能在客户端和服务器之间设置一个可以解密数据的代理（例如“中间人攻击”方式），那么 <code>Wireshark</code> 是可以解析并显示 <code>SSL/TLS</code> 加密通信的原始明文数据。只要在 “协议” 属性中设置对应的私钥文件，或者配置 <code>SSLKEYLOGFILE</code> 环境变量，使其指向一个由浏览器或其他应用生成的密钥日志文件，就可以看到解密后的明文数据。</p><p>总结：由于 <code>SSL</code> 的设计初衷是保护网络通信的安全，防止数据在传输过程中被窃取或篡改，所以 <code>Wireshark</code> 等抓包工具不能直接抓取 <code>SSL</code> 的原始数据。这也确保了在使用 <code>HTTPS</code>、<code>IMAPS</code>、<code>POPS</code>、<code>FTPS</code> 等基于 <code>SSL/TLS</code> 的服务时，通信的安全性和隐私性。</p></details><h3 id="❓如何设计一个-https-抓包" tabindex="-1"><a class="header-anchor" href="#❓如何设计一个-https-抓包" aria-hidden="true">#</a> ❓如何设计一个 <code>HTTPS</code> 抓包</h3><details class="hint-container details"><summary>💡</summary><p>设计一个 <code>HTTPS</code> 抓包工具，实际上是要设计一个中间人（<code>Man-In-The-Middle</code>，即 <code>MITM</code>）攻击的代理服务器。前提是必须要获得客户端的信任，让客户端愿意接受我们的证书，否则客户端将无法访问 <code>HTTPS</code> 服务。</p><ul><li><p>创建一个服务器，用于接收来自客户端的 <code>HTTP</code> 或 <code>HTTPS</code> 请求。根据请求的协议和头信息，判断是否需要进行 <code>HTTPS</code> 抓包。</p></li><li><p>当接收到 <code>HTTPS</code> 请求时，先向 <code>HTTPS</code> 服务器发送一个连接请求，获取服务器的证书和公钥。</p></li><li><p>创建一个自签名的 <code>SSL</code> 证书，并将步骤 2 中获取的公钥填入其中。这样，就拥有了一个具有目标服务器公钥的证书。</p></li><li><p>返回这个自签名证书给客户端。相当于告诉客户端：“我就是你想访问的服务器，把你的数据加密后给我”。</p></li><li><p>客户端收到证书后，会验证证书的有效性。在这里有两种情况：</p><ul><li>手动安装：如果抓包工具是用户自愿使用的（如调试工具），那么用户可能会主动将证书添加到受信任的证书列表中。在这种情况下，客户端会认为证书有效，并继续与服务器进行通信。</li><li>非手动安装：在网络攻击的情况下，无法控制客户端的行为。如果客户端没有将证书加入到受信任的列表中，客户端会拒绝与服务器通信。</li></ul></li><li><p>客户端验证通过后，服务器就可以接收到客户端加密后的数据。由于拥有证书的私钥，可以对加密数据进行解密，实现了 <code>HTTPS</code> 的抓包。</p></li></ul></details><hr><h2 id="情景题" tabindex="-1"><a class="header-anchor" href="#情景题" aria-hidden="true">#</a> 情景题</h2><h3 id="通信流程" tabindex="-1"><a class="header-anchor" href="#通信流程" aria-hidden="true">#</a> 通信流程</h3><h4 id="❓访问一个网站的详细过程" tabindex="-1"><a class="header-anchor" href="#❓访问一个网站的详细过程" aria-hidden="true">#</a> ❓访问一个网站的详细过程</h4><details class="hint-container details"><summary>💡</summary><ul><li><p>浏览器解析 <code>URL</code>：在浏览器中输入网址（<code>URL</code>），浏览器首先需要解析这个 <code>URL</code>，确定要请求的是哪个网站。</p></li><li><p><code>DNS</code> 解析：浏览器通过 <code>DNS</code>（<code>Domain Name System</code>，域名系统）将网站的域名解析成服务器的 <code>IP</code> 地址。<code>DNS</code> 解析通常会在本地缓存、操作系统缓存、路由器缓存、<code>ISP DNS</code> 服务器等多个层面进行。</p></li><li><p>建立 <code>TCP</code> 连接：得到服务器的 <code>IP</code> 地址后，浏览器会向服务器发起一个 <code>TCP</code> 连接请求，通常是三次握手。</p></li><li><p>发送 <code>HTTP</code> 请求：<code>TCP</code> 连接建立好后，浏览器就可以向服务器发送 <code>HTTP</code> (<code>Hypertext Transfer Protocol</code>，超文本传输协议) 请求了。这个请求中包括要获取的资源（比如一个 <code>HTML</code> 页面）、请求的方法（比如 <code>GET</code> 或 <code>POST</code>），以及一些其他的头信息。</p></li><li><p>服务器处理请求并返回 <code>HTTP</code> 响应：服务器接收到 <code>HTTP</code> 请求后，会解析请求，然后查找请求的资源并返回给浏览器。返回的 <code>HTTP</code> 响应中包括一个状态码（比如 <code>200</code> 表示成功，<code>404</code> 表示找不到页面），以及请求的资源内容，比如一个 <code>HTML</code> 页面。</p></li><li><p>浏览器渲染页面：浏览器接收到服务器返回的 <code>HTML</code> 页面后，会对其进行解析和渲染，显示给用户。如果页面中还包含其他资源的链接（比如图片、<code>CSS</code> 样式、<code>JavaScript</code> 脚本等），浏览器会再次发起 <code>HTTP</code> 请求获取这些资源，然后一起渲染到页面上。</p></li><li><p>断开连接：如果没有设置持久连接（<code>HTTP 1.1</code>默认为持久连接），浏览器和服务器会断开 <code>TCP</code> 连接，等待下一次请求。如果是持久连接，那么在一段时间内，浏览器和服务器的 <code>TCP</code> 连接会保持，便于传输更多的资源。</p></li></ul></details><h4 id="❓打开浏览器-输入网址到看到网站首页都经历那些过程-你觉得最耗时是哪里-怎么优化" tabindex="-1"><a class="header-anchor" href="#❓打开浏览器-输入网址到看到网站首页都经历那些过程-你觉得最耗时是哪里-怎么优化" aria-hidden="true">#</a> ❓打开浏览器，输入网址到看到网站首页都经历那些过程，你觉得最耗时是哪里，怎么优化</h4><details class="hint-container details"><summary>💡</summary><p>访问流程：</p><ul><li><p><strong>DNS 查询</strong>：浏览器需要解析输入的 <code>URL</code> 中的域名到对应的 <code>IP</code> 地址，这个过程需要通过网络进行 <code>DNS</code> 查询。</p></li><li><p><strong>建立TCP连接</strong>：浏览器使用解析得到的 <code>IP</code> 地址与服务器建立 <code>TCP</code> 连接，也即进行三次握手。</p></li><li><p><strong>发送HTTP请求</strong>：浏览器通过建立好的 <code>TCP</code> 连接向服务器发送 <code>HTTP</code> 请求，包括 <code>GET、POST</code> 等请求。</p></li><li><p><strong>服务器处理请求并返回HTTP响应</strong>：服务器接收到请求后进行处理，并返回一个 <code>HTTP</code> 响应，包含了请求的文件、数据等信息。</p></li><li><p><strong>浏览器处理返回的响应</strong>：浏览器接收并处理来自服务器的 <code>HTTP</code> 响应，对响应中的 <code>HTML</code>、<code>CSS</code> 和 <code>JavaScript</code> 等资源进行解析和渲染，如果有其他资源（如图片、音视频资源），可能还需要进行额外的 <code>HTTP</code> 请求。</p></li><li><p><strong>断开连接或者在请求其他资源后保持连接</strong>，如果没有设置持久连接，浏览器和服务器会断开 <code>TCP</code> 连接，如果是持久连接，线路会在传输更多资源后保持。</p></li></ul><p>优化方案：</p><ul><li><p><strong>优化DNS查询</strong>：使用更快的 <code>DNS</code> 服务器，使用 <code>DNS</code> 缓存，使用 <code>DNS</code> 预读取等方法。</p></li><li><p><strong>减少TCP连接次数</strong>：使用 <code>HTTP</code> 持久连接（<code>HTTP/1.1</code> 默认开启），利用浏览器并行连接的特性，使用 <code>HTTP/2</code> 多路复用等。</p></li><li><p><strong>优化服务器处理</strong>：提高服务器硬件性能，优化后端代码，使用服务器缓存，使用 <code>CDN</code> 等。</p></li><li><p><strong>减少HTTP请求以及减小请求/响应大小</strong>：合并文件、压缩文件、使用浏览器缓存，使用更高效的文件格式等。</p></li><li><p><strong>优化页面渲染</strong>：避免重排和重绘，使用懒加载、异步加载等技术，对 <code>JS/CSS</code> 进行优化等。</p></li></ul></details><h4 id="❓使用-ssh-连接云服务器-整个网络通信过程" tabindex="-1"><a class="header-anchor" href="#❓使用-ssh-连接云服务器-整个网络通信过程" aria-hidden="true">#</a> ❓使用 <code>ssh</code> 连接云服务器，整个网络通信过程</h4><details class="hint-container details"><summary>💡</summary><blockquote><p><code>SSH</code>(<code>Secure Shell)</code>: 一种网络协议，用于计算机用户通过加密的方式进行远程登录到另一台计算机上。</p></blockquote><ul><li><p><strong>地址解析</strong>：连接的云服务器的IP地址或者域名。如果你使用的是域名，那么会通过 <code>DNS</code> 服务解析出服务器的真实 <code>IP</code> 地址。</p></li><li><p><strong>TCP握手</strong>：设备会向这个 <code>IP</code> 地址发起一个 <code>TCP</code> 连接。这个过程包括三次握手，确保双方都已经准备好开始通信。</p></li><li><p><strong>SSH连接</strong>：<code>TCP</code> 连接建立后，设备会发起 <code>SSH</code> 的连接请求。在这个请求中，会包含计算机的公钥（如果设置了密钥登录的话）或者用户名和密码信息。</p></li><li><p><strong>身份验证</strong>：云服务器接收到 <code>SSH</code> 请求后，如果使用的是密钥登录，那么服务器会使用存储的公钥信息来验证私钥是否匹配；如果使用的是用户名和密码，那么服务器就会验证用户名和密码是否正确。只有在验证通过后，才会允许 <code>SSH</code> 连接。</p></li><li><p><strong>会话开始</strong>：一旦获得许可，一个 <code>SSH</code> 会话就会建立，就可以开始在这个终端会话中运行命令，操作云服务器了。</p></li><li><p><strong>会话结束</strong>：当结束这个 <code>SSH</code> 会话时（比如输入 <code>exit</code> 命令），那么这个 <code>SSH</code> 连接就会关闭，并释放这个 <code>TCP</code> 连接。</p></li></ul><p>注意：<code>SSH</code> 协议提供了一种安全的、加密的网络通信机制，所以在整个通信过程中，所有的数据都是被加密的，这就保证了数据的安全性和隐私性。</p></details><h3 id="音视频" tabindex="-1"><a class="header-anchor" href="#音视频" aria-hidden="true">#</a> 音视频</h3><h4 id="❓在整个视频面试的过程中-可能会用到哪些协议-都在哪几层" tabindex="-1"><a class="header-anchor" href="#❓在整个视频面试的过程中-可能会用到哪些协议-都在哪几层" aria-hidden="true">#</a> ❓在整个视频面试的过程中，可能会用到哪些协议，都在哪几层</h4><details class="hint-container details"><summary>💡</summary><ul><li><p><strong>物理层和链路层</strong>：<code>Ethernet</code>（以太网）协议用于实现局域网中的设备交互，<code>Wi-Fi</code> 用于无线网络通信。这些通常在物理层和数据链路层起作用。</p></li><li><p><strong>网络层</strong>：<code>IP</code> 协议（Internet Protocol）用于在网络中定位设备，并在设备之间传输数据包，它在网络层起作用。</p></li><li><p><strong>传输层</strong>：<code>TCP</code> 协议（传输控制协议）用于在网络中创建连接并提供可靠的数据传输。而 <code>UDP</code> 协议（用户数据报协议）则提供无连接的快速数据传输，用于实时通信，如音视频传输。</p></li><li><p><strong>会话层和表示层</strong>：这两层在现代网络中并不明确区分，不过 <code>SSL/TLS</code> 协议提供了数据加密的服务，可视为在此两层中。</p></li><li><p><strong>应用层</strong>：<code>HTTP/HTTPS</code> 协议用于网络浏览器与服务器之间的通信，<code>RTMP</code>(<code>Real Time Messaging Protocol</code>) 或者 <code>WebRTC</code>（<code>Web</code> 实时通信）等是专为流媒体和通信设计的协议，用于实时音视频数据传输。</p></li></ul></details><h4 id="❓为什么视频会议用-udp" tabindex="-1"><a class="header-anchor" href="#❓为什么视频会议用-udp" aria-hidden="true">#</a> ❓为什么视频会议用 <code>UDP</code></h4><details class="hint-container details"><summary>💡</summary><ul><li><p>实时性：视频会议要求音频和视频数据能够尽快地传输和播放，这需要低延迟的传输协议。<code>UDP</code> 协议是一种无连接协议，不需要建立和维护复杂的连接状态，因此可以减少很多网络延迟。</p></li><li><p>容忍数据丢失：在视频会议中，如果偶尔丢失一些音频或视频数据包，并不会对整体的通信质量产生太大影响，相反，如果使用了 <code>TCP</code> 协议，<code>TCP</code> 会尝试重传丢失的数据包，这可能引入更多的网络延迟，影响通信的实时性。</p></li><li><p>简单高效：和 <code>TCP</code> 相比，<code>UDP</code> 的协议头部更简单，处理起来更高效，可以用于构建高性能的实时应用。</p></li><li><p>处理网络拥塞：<code>UDP</code> 不会像 <code>TCP</code> 那样根据网络拥塞来调整数据的发送速率，这样即使在网络不稳定的环境下，也可以保证视频会议的流畅性。</p></li><li><p>更好的支持多播和广播：视频会议常常需要同时向多个端点发送同样的数据，这种场景下 <code>UDP</code> 比 <code>TCP</code> 更有优势。</p></li></ul><p>结论：由于 <code>UDP</code> 协议的实时性、容错性、简单高效和对多播和广播的良好支持，视频会议通常会选择使用 <code>UDP</code> 协议。然后，通过在应用层添加一些错误控制和恢复机制，来确保通信质量。</p></details><h4 id="❓用-udp-实现音视频-有什么方法可以保证通话质量" tabindex="-1"><a class="header-anchor" href="#❓用-udp-实现音视频-有什么方法可以保证通话质量" aria-hidden="true">#</a> ❓用 <code>UDP</code> 实现音视频，有什么方法可以保证通话质量</h4><details class="hint-container details"><summary>💡</summary><ul><li><p>应用层的重传：在关键数据流（例如关键帧）丢失时，应用可以选择重新发送丢包。</p></li><li><p>使用前向纠错（<code>FEC</code>）：<code>FEC</code> 可以在发送端加入冗余数据，即使部分数据丢失，也能借助冗余数据进行恢复。</p></li><li><p>使用差错控制编码：如 <code>RS</code>(<code>Reed-Solomon</code>) 编码等，可以帮助接收端修复部分丢失的数据。</p></li><li><p>交错和抖动缓冲：将数据打包为更大的单位并交错发送，可以减少丢包率对于解码的影响。另外，应用可以在客户端使用抖动缓冲区，对接收的数据包进行排序和缓冲，以适应网络延迟的变化。</p></li><li><p>利用 <code>QoS</code>(<code>Quality of Service</code>)：通过对网络进行优化，如设置优先级，保证音视频流的带宽、延迟等。</p></li><li><p>码率自适应：根据网络状态动态调整音视频的编码率。</p></li><li><p>使用实时传输协议（<code>RTP</code>）以及实时传输控制协议（<code>RTCP</code>）</p><ul><li><code>RTP</code> 提供了标准化的包结构用于音视频数据。</li><li><code>RTCP</code> 提供关于网络状况的反馈。</li></ul></li></ul></details><h4 id="❓如果用-tcp-实现音视频-需要建立几次连接" tabindex="-1"><a class="header-anchor" href="#❓如果用-tcp-实现音视频-需要建立几次连接" aria-hidden="true">#</a> ❓如果用 <code>TCP</code> 实现音视频，需要建立几次连接</h4><details class="hint-container details"><summary>💡</summary><blockquote><p>至少需要建立一次连接。</p></blockquote><ul><li><p><code>TCP</code> 是一种面向连接的协议，它需要在传输数据前与另一台设备建立一个连接。</p><blockquote><p>在一个音视频通话场景中，至少需要建立一次连接，这个连接用来传输音频和视频数据。</p></blockquote></li><li><p>某些情况下，可能需要建立多个TCP连接。</p><blockquote><p>例如，如果音频和视频数据需要由不同的服务器分别处理，那么就可能需要分别对每个服务器建立一个连接。又或者，如果需要在音视频传输的同时进行其他的数据交换（比如文本聊天，文件传输等），那么也可能需要额外建立一个或多个 <code>TCP</code> 连接。</p></blockquote></li><li><p><code>TCP</code> 连接的数量也可能与特定的应用架构或协议有关。</p><blockquote><p>例如，在 <code>WebRTC</code>（一种用于实时通信的开放源代码项目）中，音频和视频流通常会使用单独的连接，以便单独控制它们的传输质量。</p></blockquote></li></ul></details><h3 id="故障分析" tabindex="-1"><a class="header-anchor" href="#故障分析" aria-hidden="true">#</a> 故障分析</h3><h4 id="❓如果发现微信和-qq-都可以正常使用-但是浏览器网页打不开-可能是什么原因-有什么排查的办法" tabindex="-1"><a class="header-anchor" href="#❓如果发现微信和-qq-都可以正常使用-但是浏览器网页打不开-可能是什么原因-有什么排查的办法" aria-hidden="true">#</a> ❓如果发现微信和 QQ 都可以正常使用，但是浏览器网页打不开，可能是什么原因，有什么排查的办法</h4><details class="hint-container details"><summary>💡</summary><ul><li><p>浏览器设置问题：可能浏览器的代理设置被修改，或者被某些恶意软件更改了网络设置。</p></li><li><p><code>DNS</code> 解析问题：微信和 <code>QQ</code> 服务器的 <code>IP</code> 地址可能已经在本地缓存中，不需要 <code>DNS</code> 解析，但是浏览器访问网站需要 <code>DNS</code> 解析域名到 <code>IP</code>，如果 <code>DNS</code> 解析出现问题，就会导致网页无法打开。</p></li><li><p>网络连接类型：有些网络环境对不同类型的网络连接有限制，可能对浏览器使用的 <code>HTTP/HTTPS</code> 协议进行了限制。</p></li></ul></details><blockquote><p>❓有什么排查的办法</p></blockquote><details class="hint-container details"><summary>💡</summary><ul><li><p>检查并重置浏览器设置：确认浏览器的网络设置是正确的，没有被错误的代理服务或 <code>VPN</code> 干扰。也可以尝试重置浏览器设置，或者使用另外一种浏览器试试。</p></li><li><p>更换 <code>DNS</code>：试着更换一下 <code>DNS</code> 服务器地址。</p><blockquote><p>例如，更改为 <code>Google</code> 的公共 <code>DNS</code> 地址 <code>8.8.8.8</code> 或 <code>8.8.4.4</code>。</p></blockquote></li><li><p>使用命令行工具：可以使用 <code>Ping</code> 命令检查网络连接，使用 <code>nslookup</code> 命令检查 <code>DNS</code> 解析是否正常。</p></li><li><p>查看防火墙设置：检查一下个人电脑的防火墙或者路由器设置，看看是否对 <code>HTTP/HTTPS</code> 协议有所限制。</p></li><li><p>在移动设备上测试：如果有条件的话，可以尝试在手机或者其他电脑上连同样的网络，看看能否正常使用浏览器访问网页。</p></li></ul></details><h4 id="❓在北京-http-请求服务器响应快-可能离服务器距离近-而在上海访问就非常慢-会是什么原因" tabindex="-1"><a class="header-anchor" href="#❓在北京-http-请求服务器响应快-可能离服务器距离近-而在上海访问就非常慢-会是什么原因" aria-hidden="true">#</a> ❓在北京 <code>HTTP</code> 请求服务器响应快，可能离服务器距离近；而在上海访问就非常慢，会是什么原因</h4><details class="hint-container details"><summary>详情</summary><ul><li><p>网络路径和距离：尽管距离在物理上相近，但在网络传输上，信息可能要经过多个节点才能到达目的地。网络堵塞、路由器性能、网络提供商等都会影响网络的传输速度。从上海到服务器的网络路径可能比从北京到服务器的网络路径复杂，进而造成延迟增加。</p></li><li><p>服务器负载：如果服务器在处理上海的请求时负载过高，可能会导致响应速度下降。</p><blockquote><p>比如，如果服务器同时处理的请求太多，或者服务器上运行的其他应用占用了大量资源，都可能导致服务器处理请求的速度降低。</p></blockquote></li><li><p><code>CDN</code> 配置：如果服务器使用了内容分发网络（<code>CDN</code>），但没有在上海或者附近地区设置节点，那么上海的用户就需要从远处的服务器获取数据，这会增加延迟。</p></li><li><p><code>DNS</code> 解析：如果服务器的 <code>DNS</code> 解析服务在上海的效率较低，也会使得上海用户在获取服务器地址时花费更多的时间。</p></li></ul></details><blockquote><p>❓如果用户投诉，怎么分析这个问题</p></blockquote><details class="hint-container details"><summary>详情</summary><ul><li><p>网络状况检测：首先可以进行一些基础的网络性能测试。</p><blockquote><p>比如 <code>Ping</code> 和 <code>Traceroute</code>，用来检测数据包到达服务器所需的时间以及经过的节点。<code>Ping</code> 可以查看网络延迟，<code>Traceroute</code> 可以看到数据包到达服务器所经过的所有路由节点。如果发现某一跳的延迟特别高，可能就是出问题的地方。</p></blockquote></li><li><p><code>CDN</code> 是否使用：如果服务器使用了内容分发网络 (<code>CDN</code>)，检查 <code>CDN</code> 是否在有问题的地方正常工作。</p><blockquote><p><code>CDN</code> 运营商通常会在全国各地设立节点，如果某个地方的节点出现问题，可能会导致该地区的访问速度变慢。</p></blockquote></li><li><p>带宽查看：查看服务器的带宽使用情况，如果带宽使用过高，可能会导致访问速度变慢。</p></li><li><p>服务器性能查看：分析服务器性能指标。</p><blockquote><p>如 <code>CPU</code> 使用率、内存使用情况、<code>I/O</code>等，如果服务器负载过高，可能会影响服务的响应时间。</p></blockquote></li><li><p>投诉用户所在网络环境分析：了解投诉用户的网络环境。</p><blockquote><p>如网络运营商，网络类型（光纤、<code>ADSL</code>、<code>4G</code>等），或者在其他网络环境下访问情况，以排除是用户本身网络原因导致的问题。</p></blockquote></li><li><p>应用层面的检查：除了硬件和网络，还要检查应用层面。</p><blockquote><p>比如服务器是不是出现了错误、是否有大量的请求等。</p></blockquote></li><li><p>最后，如果问题还是无法定位，或者是跨越多个网络运营商的问题，则需要与网络服务提供商进行沟通，可能能提供更多的信息或者解决方案。</p></li></ul></details><h4 id="❓整个网络过程中-网络耗时会在什么地方-怎么优化" tabindex="-1"><a class="header-anchor" href="#❓整个网络过程中-网络耗时会在什么地方-怎么优化" aria-hidden="true">#</a> ❓整个网络过程中，网络耗时会在什么地方，怎么优化</h4><details class="hint-container details"><summary>💡</summary><ul><li><p><code>DNS</code> 查询：当你向一个 <code>URL</code> 发送请求时，浏览器或应用需要首先通过 <code>DNS</code> 查询这个 <code>URL</code> 的 <code>IP</code> 地址。<code>DNS</code> 查询有时会非常耗时，特别是在初次查询或 <code>DNS</code> 缓存失效的情况下。</p><blockquote><p>优化方法：可以在服务端的解析服务器采用 <code>CDN</code> 来加速 <code>DNS</code> 的解析速度，或者使用 <code>DNS</code> 预获取技术，在加载页面或者应用的时候，预先进行 <code>DNS</code> 查询。</p></blockquote></li><li><p>建立连接：根据协议的不同（<code>HTTP/HTTPs</code>），建立连接需要消耗不同的时间，特别是在握手过程中。</p><blockquote><p>优化方法：可以使用 <code>HTTP/2</code>，支持单一连接上并行交错（<code>multiplexing</code>）请求和响应，从而避免 <code>HTTP/1.1</code> 中的队头阻塞（<code>Head-of-line blocking</code>）问题。</p></blockquote></li><li><p>服务器处理：服务器处理请求并生成响应数据也会需要一些时间。特别是在处理复杂查询或生成大量数据时，这部分时间可能会非常长。</p><blockquote><p>优化方法：在于服务端的性能优化，例如使用合适的算法和数据结构，以及适当的系统和应用层缓存。针对数据库查询，可以优化 <code>SQL</code> 语句或者进行合适的数据库设计和索引。</p></blockquote></li><li><p>数据传输：数据在网络传输中耗时，取决于数据量和网络带宽。</p><blockquote><p>优化方法：可以使用数据压缩技术，尽量减少传输的数据量。还可以使用分块传输编码（<code>Chunked transfer encoding</code>），让服务器生成响应时就可以开始发送数据。</p></blockquote></li></ul></details><h4 id="❓如果手机应用与服务器通过-tcp-连接-这个时候手机切换为飞行模式-服务器可以短时间内知道到手机离线状态吗" tabindex="-1"><a class="header-anchor" href="#❓如果手机应用与服务器通过-tcp-连接-这个时候手机切换为飞行模式-服务器可以短时间内知道到手机离线状态吗" aria-hidden="true">#</a> ❓如果手机应用与服务器通过 <code>TCP</code> 连接，这个时候手机切换为飞行模式，服务器可以短时间内知道到手机离线状态吗</h4><details class="hint-container details"><summary>💡</summary><p>服务器通过 <code>TCP</code> 短时间内是不能知晓手机的离线状态的。因为 <code>TCP</code> 主要是为了保证数据的可靠传输，通信双方是通过数据交换来了解对方状态。而 <code>TCP</code> 并没有设计心跳检测机制，所有就没有实时检测对方是否离线的能力。</p><p>回到 <code>TCP</code> 的运行机制，当一方断开连接时，通常会发送一个 <code>FIN</code> 包到另一方。但是当手机进入飞行模式时，它并没有发送任何类型的 <code>TCP</code> 包到服务器，所以服务器并没有明显的迹象表明手机已经离线。</p><p>两种机制：</p><ul><li><p><code>TCP</code> 超时：<code>TCP</code> 连接有一个超时机制，一旦连接上没有数据传输并且超过了给定的时间限制，那么连接就会被关闭，服务器会知道手机已经离线。</p></li><li><p><code>Keep-Alive</code>：如果在服务器和手机之间启用了 <code>TCP</code> 或应用层的 <code>Keep-Alive</code> 机制，服务器会定期向手机发送小的数据包来检查连接是否仍然有效。如果手机没有响应这些数据包，服务器将知道手机已经离线。</p></li></ul><p>结论：两种机制都需要一段时间才能工作。因此，如果手机切换到飞行模式，服务器并不能立即知道这一点。但是经过一段时间后，一旦服务器尝试向手机发送数据或者执行 <code>Keep-Alive</code> 检查并且失败，那么服务器就会知道手机已经离线。</p></details>`,168);function t(s,p){return o(),d("div",null,[c(" more "),a])}const u=e(l,[["render",t],["__file","0x05.network.html.vue"]]);export{u as default};
