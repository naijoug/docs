import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as t,o,c,a as p,b as n,e as i,d as l,f as a}from"./app-8mRKGi0B.js";const u={},d=a(`<h2 id="❓如何自己高效实现-nsuserdefault" tabindex="-1"><a class="header-anchor" href="#❓如何自己高效实现-nsuserdefault" aria-hidden="true">#</a> ❓如何自己高效实现 <code>NSUserDefault</code></h2><details class="hint-container details"><summary>💡</summary><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">@interface</span> MyUserDefault <span class="token punctuation">:</span> NSObject
<span class="token operator">+</span> <span class="token punctuation">(</span>instancetype<span class="token punctuation">)</span>defaultUser<span class="token punctuation">;</span>
<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>setValue<span class="token punctuation">:</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>value forKey<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>key<span class="token punctuation">;</span>
<span class="token operator">-</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span>valueForKey<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>key<span class="token punctuation">;</span>
<span class="token keyword">@end</span>

<span class="token keyword">@interface</span> <span class="token function">MyUserDefault</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">@property</span> <span class="token punctuation">(</span>nonatomic<span class="token punctuation">,</span> strong<span class="token punctuation">)</span> NSMutableDictionary <span class="token operator">*</span>userDict<span class="token punctuation">;</span>
<span class="token keyword">@property</span> <span class="token punctuation">(</span>nonatomic<span class="token punctuation">,</span> strong<span class="token punctuation">)</span> NSString <span class="token operator">*</span>filePath<span class="token punctuation">;</span>
<span class="token keyword">@end</span>

<span class="token keyword">@implementation</span> MyUserDefault

<span class="token operator">+</span> <span class="token punctuation">(</span>instancetype<span class="token punctuation">)</span>defaultUser <span class="token punctuation">{</span>
    <span class="token keyword">static</span> MyUserDefault <span class="token operator">*</span>user <span class="token operator">=</span> nil<span class="token punctuation">;</span>
    <span class="token keyword">static</span> dispatch_once_t onceToken<span class="token punctuation">;</span>
    <span class="token function">dispatch_once</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>onceToken<span class="token punctuation">,</span> <span class="token operator">^</span><span class="token punctuation">{</span>
        user <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token keyword">self</span> alloc<span class="token punctuation">]</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> user<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token operator">-</span> <span class="token punctuation">(</span>instancetype<span class="token punctuation">)</span>init<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">self</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">super</span> init<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        NSArray <span class="token operator">*</span>doc <span class="token operator">=</span> <span class="token function">NSSearchPathForDirectoriesInDomains</span><span class="token punctuation">(</span>NSDocumentDirectory<span class="token punctuation">,</span> NSUserDomainMask<span class="token punctuation">,</span> YES<span class="token punctuation">)</span><span class="token punctuation">;</span>
        NSString <span class="token operator">*</span>path <span class="token operator">=</span> <span class="token punctuation">[</span>doc objectAtIndex<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        _filePath <span class="token operator">=</span> <span class="token punctuation">[</span>path stringByAppendingPathComponent<span class="token punctuation">:</span><span class="token string">@&quot;userinfo.dat&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        NSData <span class="token operator">*</span>readData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>NSData alloc<span class="token punctuation">]</span> initWithContentsOfFile<span class="token punctuation">:</span>_filePath<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// NSKeyedUnarchiver 反序列化读取数据</span>
        _userDict <span class="token operator">=</span> <span class="token punctuation">[</span>NSKeyedUnarchiver unarchiveObjectWithData<span class="token punctuation">:</span>readData<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>_userDict<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            _userDict <span class="token operator">=</span> <span class="token punctuation">[</span>NSMutableDictionary dictionary<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">self</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>setValue<span class="token punctuation">:</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>value forKey<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>key <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>_userDict setValue<span class="token punctuation">:</span>value forKey<span class="token punctuation">:</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span><span class="token keyword">self</span> save<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token operator">-</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span>valueForKey<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>key <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>_userDict valueForKey<span class="token punctuation">:</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>save <span class="token punctuation">{</span>
    <span class="token comment">// 使用 NSKeyedArchiver 序列化保存数据</span>
    NSData <span class="token operator">*</span>data <span class="token operator">=</span> <span class="token punctuation">[</span>NSKeyedArchiver archivedDataWithRootObject<span class="token punctuation">:</span>_userDict<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>data writeToFile<span class="token punctuation">:</span>_filePath atomically<span class="token punctuation">:</span>YES<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">@end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="❓fmdb-vs-coredata-vs-swiftdata" tabindex="-1"><a class="header-anchor" href="#❓fmdb-vs-coredata-vs-swiftdata" aria-hidden="true">#</a> ❓<code>FMDB</code> vs <code>CoreData</code> vs <code>SwiftData</code></h2><details class="hint-container details"><summary>💡</summary><ul><li><p><code>FMDB</code>：是一个用 <code>Objective-C</code> 编写的 <code>SQLite</code> 数据库的封装库。。它提供的接口相比 <code>SQLite</code> 的 <code>C API</code> 更容易使用。</p></li><li><p><code>CoreData</code>：是 <code>Apple</code> 开发的一个功能强大的持久化存储框架。虽然用起来复杂一些，但是它提供了许多像对象关系映射(<code>ORM</code>)这样的高级功能。可以用面向对象的方式来处理数据，也能使用到 <code>CoreData</code> 的一些特性，例如版本管理、模型迁移、撤销和恢复等。</p></li><li><p><code>SwiftData</code>：<code>iOS 17 </code> 中引入的较新的框架。<code>SwiftData</code> 建立在 <code>CoreData</code> 之上，提供了更现代化和对 <code>Swift</code> 更友好的 <code>API</code>。它比 <code>CoreData</code> 更高效，并且与 <code>SwiftUI</code> 无缝集成。</p></li></ul></details><h2 id="❓coredata-的底层实现" tabindex="-1"><a class="header-anchor" href="#❓coredata-的底层实现" aria-hidden="true">#</a> ❓<code>CoreData</code> 的底层实现</h2><details class="hint-container details"><summary>💡</summary><p><code>CoreData</code> 是一个强大的 <code>iOS</code> 持久化框架，同时也是 <code>macOS</code> 的数据持久化框架。它处理的范围相当广，包括图形数据模型化、属性类型检查、对象图管理和持久化、数据变更和版本控制、灵活的查询语句以及 <code>iCloud</code> 集成等。</p><p><code>CoreData</code>并不是一个关系型数据库，<code>SQLite</code> 只是它底层的持久化方式之一。也可以选择其他的存储方式，如<code>XML</code>、二进制等。其实 <code>CoreData</code> 更像是一个 <code>ORM</code>（对象关系映射）框架。</p><ul><li><p><code>NSManagedObjectModel</code>: 托管对象模型</p><blockquote><p>这是核心数据的数据模型，用来定义在当前应用的对象关系映射的名称、属性、数据类型。</p></blockquote></li><li><p><code>NSPersistentStoreCoordinator</code>: 持久性存储协调者</p><blockquote><p>用于协调来自对象上下文的请求，并将这些请求路由到适当的持久性存储区。</p></blockquote></li><li><p><code>NSManagedObjectContext</code>: 托管对象上下文</p><blockquote><p>处理的所有对象基本上都属于某个对象上下文。所有的创建、更新、删除操作都在这个上下文之中操作。</p></blockquote></li></ul><p>工作流程：从托管对象上下文 (<code>NSManagedObjectContext</code>) 中请求对象，通过对象的增删改查，然后返回到托管对象上下文中。当需要保存数据的时候，就会把托管对象上下文的变化持久化到存储协调器 (<code>NSPersistentStoreCoordinator</code>)，存储协调器再把这些变化保存到持久化存储器 (<code>Persistent Store</code>) 中，例如 <code>SQLite</code> 数据库。</p></details><h2 id="❓swiftdata-的底层实现" tabindex="-1"><a class="header-anchor" href="#❓swiftdata-的底层实现" aria-hidden="true">#</a> ❓<code>SwiftData</code> 的底层实现</h2>`,7),r={class:"hint-container details"},k=n("summary",null,"💡",-1),v={href:"https://developer.apple.com/documentation/swiftdata",target:"_blank",rel:"noopener noreferrer"},m=a('<h2 id="❓realm-了解吗" tabindex="-1"><a class="header-anchor" href="#❓realm-了解吗" aria-hidden="true">#</a> ❓<code>realm</code> 了解吗</h2><details class="hint-container details"><summary>💡</summary><blockquote><p><code>Realm</code> 是一个用于移动设备的数据库，并非仅限于 <code>iOS</code>，也可以用于 <code>Android</code>。它是用 <code>C++</code> 编写的，然后为不同的平台和语言提供接口，比如 <code>Swift</code> 和 <code>Objctive-C</code> 以及 <code>Java</code> 等。<code>Realm</code> 的目标是提供比 <code>Core Data</code> 和 <code>SQLite</code> 更简单、更快速的持久化存储解决方案。</p></blockquote><ul><li>面向对象的数据库</li><li>跨平台。这意味着你在一个平台上保存的数据可以在其他平台使用。</li><li>易于使用，对象持久化的过程极其简单，只需要进行简单的读写操作。</li><li>性能出色，它的读写速度常常超过 <code>SQLite</code> 和 <code>CoreData</code>。</li><li>支持关联，可以很容易地在对象之间创建关联关系。</li><li>数据加密，提供了<code>256-bit AES</code>加密来保护你的数据安全。</li><li>还具有实时自动更新、数据迁移支持、线程安全性和可视化编辑器等独特的优点。</li></ul></details>',2);function b(h,y){const s=t("ExternalLinkIcon");return o(),c("div",null,[p(" more "),d,n("details",r,[k,n("p",null,[n("a",v,[i("SwiftData"),l(s)])])]),m])}const D=e(u,[["render",b],["__file","0x09.store.html.vue"]]);export{D as default};
