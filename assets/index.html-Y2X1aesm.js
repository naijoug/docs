import{_ as r}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as c,o as s,c as a,b as t,e,d as o,a as l,f as n}from"./app-8FswgYYv.js";const i={},h=t("p",null,"参考源码",-1),_={href:"https://github.com/apple-oss-distributions/objc4/blob/objc4-876/runtime",target:"_blank",rel:"noopener noreferrer"},u={href:"https://github.com/apple-oss-distributions/libmalloc/tree/libmalloc-409.40.6",target:"_blank",rel:"noopener noreferrer"},m=t("h2",{id:"reference",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#reference","aria-hidden":"true"},"#"),e(" reference")],-1),p={href:"https://github.com/apple-oss-distributions/objc4",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/RetVal/objc-runtime",target:"_blank",rel:"noopener noreferrer"},f={href:"https://github.com/nst/iOS-Runtime-Headers",target:"_blank",rel:"noopener noreferrer"},g=t("blockquote",null,[t("p",null,"iOS Objective-C headers as derived from runtime introspection")],-1),C={href:"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ObjCRuntimeGuide",target:"_blank",rel:"noopener noreferrer"},j={href:"https://github.com/steipete/Aspects",target:"_blank",rel:"noopener noreferrer"},k=t("blockquote",null,[t("p",null,"Delightful, simple library for aspect oriented programming in Objective-C and Swift.")],-1),y=t("h2",{id:"runtime-是什么",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#runtime-是什么","aria-hidden":"true"},"#"),e(),t("code",null,"runtime"),e(" 是什么")],-1),v={href:"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ObjCRuntimeGuide",target:"_blank",rel:"noopener noreferrer"},O=n('<blockquote><p>The Objective-C language defers as many decisions as it can from compile time and link time to runtime. Whenever possible, it does things dynamically. This means that the language requires not just a compiler, but also a runtime system to execute the compiled code. The runtime system acts as a kind of operating system for the Objective-C language; it’s what makes the language work.</p><p>Objective-C 语言尽可能地将许多决策从编译时间和链接时间推迟到运行时。它就会尽可能地动态地执行任务。 这意味着该语言不仅需要一个编译器，而且还需要一个运行时系统来执行编译过的代码。 运行时系统就像是 Objective-C 语言的操作系统；这是语言运行工作的原理所在。</p></blockquote><p>这段说明可以分三段理解</p><ul><li><code>OC</code> 的设计者为了让它具备动态能力，所以将只要可以动态处理的任务都迁移到运行时。</li><li>编译器只完成了部分代码编译链接工作，还剩一部分需要运行时处理，所以需要设计这个 <code>runtime</code> 来进行代码的动态处理。</li><li>将 <code>runtime</code> 看做 <code>OC</code> 语言的操作系统。操作系统是计算机运行的核心，用来进行系统资源分配，各种任务调度，是计算机可以正常运行的关键。说明了 <code>runtime</code> 对于 <code>OC</code> 语言的重要性，也是必不可少的一部分。</li></ul><p>这也很好地解释了“为什么是 OC 是一个动态语言？”。</p><h2 id="struct-运行时结构体" tabindex="-1"><a class="header-anchor" href="#struct-运行时结构体" aria-hidden="true">#</a> struct - “运行时结构体”</h2><table><thead><tr><th>结构体</th><th>说明</th></tr></thead><tbody><tr><td><code>objc_object</code></td><td><code>objc</code> 对象 <code>id</code>，<code>isa</code> 指针包含指向对象的地址</td></tr><tr><td><code>objc_class</code></td><td><code>objc</code> 对象的类 <code>Class</code></td></tr><tr><td><code>class_data_bits_t</code></td><td>包含 <code>class_rw_t</code> 信息</td></tr><tr><td><code>class_rw_t</code></td><td><code>rw</code> : 可读可写，包含指向 <code>class_rw_ext_t</code> 或 <code>class_ro_t</code> 的指针</td></tr><tr><td><code>class_rw_ext_t</code></td><td>类在运行时才确定的方法、属性、协议 (包含指向 <code>class_ro_t</code>的指针)</td></tr><tr><td><code>class_ro_t</code></td><td><code>ro</code> : 只读，类在编译期间就确定的方法、属性、协议</td></tr><tr><td><code>cache_t</code></td><td>缓存已经使用过的方法</td></tr><tr><td><code>bucket_t</code></td><td>缓存使用的哈希表结构体 (<code>key: SEL ; value: IMP</code>)</td></tr></tbody></table><h2 id="function-运行时函数" tabindex="-1"><a class="header-anchor" href="#function-运行时函数" aria-hidden="true">#</a> function - “运行时函数”</h2><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td><em>Class</em></td><td></td></tr><tr><td><code>class_getName</code></td><td>获取类名</td></tr><tr><td><code>class_getSuperclass</code></td><td>获取父类</td></tr><tr><td><code>class_getInstanceSize</code></td><td>获取实例尺寸</td></tr><tr><td><code>class_getInstanceVariable</code></td><td>获取实例变量的信息</td></tr><tr><td><code>class_getClassVariable</code></td><td>获取类成员变量的信息</td></tr><tr><td><code>class_getVersion</code></td><td>获取类版本号</td></tr><tr><td><code>class_setVersion</code></td><td>设置类版本号</td></tr><tr><td><code>class_isMetaClass</code></td><td>是否是一个元类</td></tr><tr><td><em>Ivar</em></td><td></td></tr><tr><td><code>class_addIvar</code></td><td>添加成员变量</td></tr><tr><td><code>class_copyIvarList</code></td><td>获取整个成员变量列表</td></tr><tr><td><em>Property</em></td><td></td></tr><tr><td><code>class_addProperty</code></td><td>为类添加属性</td></tr><tr><td><code>class_replaceProperty</code></td><td>替换类属性</td></tr><tr><td><code>class_getProperty</code></td><td>获取指定的属性</td></tr><tr><td><code>class_copyPropertyList</code></td><td>获取属性列表</td></tr><tr><td><em>Method</em></td><td></td></tr><tr><td><code>class_addMethod</code></td><td>添加方法</td></tr><tr><td><code>class_replaceMethod</code></td><td>替换方法实现</td></tr><tr><td><code>class_getInstanceMethod</code></td><td>获取实例方法</td></tr><tr><td><code>class_getClassMethod</code></td><td>获取类方法</td></tr><tr><td><code>class_copyMethodList</code></td><td>获取所有方法的数组</td></tr><tr><td><code>class_getMethodImplementation</code></td><td>返回方法实现</td></tr><tr><td><code>class_respondsToSelector</code></td><td>类实例是否响应指定的 <code>selector</code></td></tr><tr><td><em>Protocol</em></td><td></td></tr><tr><td><code>class_addProtocol</code></td><td>添加协议</td></tr><tr><td><code>class_conformsToProtocol</code></td><td>是否实现指定的协议</td></tr></tbody></table>',8);function x(P,I){const d=c("ExternalLinkIcon");return s(),a("div",null,[t("blockquote",null,[h,t("ul",null,[t("li",null,[t("a",_,[e("objc-876"),o(d)])]),t("li",null,[t("a",u,[e("libmalloc-409.40.6"),o(d)])])])]),l(" more "),m,t("ul",null,[t("li",null,[t("a",p,[e("objc4"),o(d)])]),t("li",null,[t("a",b,[e("A debuggable objc runtime"),o(d)])]),t("li",null,[t("a",f,[e("iOS-Runtime-Headers"),o(d)]),e(" : iOS 运行时头文件(包括私有 API) "),g]),t("li",null,[t("a",C,[e("Objective-C Runtime Programming Guide"),o(d)])]),t("li",null,[t("a",j,[e("Aspects"),o(d)]),k])]),y,t("p",null,[t("a",v,[e("Objective-C Runtime Programming Guide"),o(d)])]),O])}const M=r(i,[["render",x],["__file","index.html.vue"]]);export{M as default};
