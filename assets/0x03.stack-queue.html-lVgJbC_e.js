import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as t,c as o,a as c,b as e,f as r}from"./app-ma-gf7Uv.js";const h={},d=e("blockquote",null,[e("p",null,"03 - 栈 & 队列 (6)")],-1),u=r('<h2 id="_3-1-三合一" tabindex="-1"><a class="header-anchor" href="#_3-1-三合一" aria-hidden="true">#</a> 3.1 三合一</h2><blockquote><p>描述如何只用一个数组来实现三个栈。</p></blockquote><h2 id="_3-2-栈的最小值" tabindex="-1"><a class="header-anchor" href="#_3-2-栈的最小值" aria-hidden="true">#</a> 3.2 栈的最小值</h2><blockquote><p>请设计一个栈，除了pop与push函数，还支持min函数，其可返回栈元素中的最小值。执行push、pop和min操作的时间复杂度必须为 O(1)。</p></blockquote><h2 id="_3-3-堆盘子" tabindex="-1"><a class="header-anchor" href="#_3-3-堆盘子" aria-hidden="true">#</a> 3.3 堆盘子</h2><blockquote><p>设想有一堆盘子，堆太高可能会倒下来。因此，在现实生活中，盘子堆到一定高度时，我们就会另外堆一堆盘子。请实现数据结构SetOfStacks，模拟这种行为。SetOfStacks应该由多个栈组成，并且在前一个栈填满时新建一个栈。此外，SetOfStacks.push()和SetOfStacks.pop()应该与普通栈的操作方法相同（也就是说，pop()返回的值，应该跟只有一个栈时的情况一样）。进阶：实现一个popAt(int index)方法，根据指定的子栈，执行pop操作。</p></blockquote><h2 id="_3-4-化栈为队" tabindex="-1"><a class="header-anchor" href="#_3-4-化栈为队" aria-hidden="true">#</a> 3.4 化栈为队</h2><blockquote><p>实现一个MyQueue类，该类用两个栈来实现一个队列。</p></blockquote><h2 id="_3-5-栈排序" tabindex="-1"><a class="header-anchor" href="#_3-5-栈排序" aria-hidden="true">#</a> 3.5 栈排序</h2><blockquote><p>编写程序，对栈进行排序使最小元素位于栈顶。最多只能使用一个其他的临时栈存放数据，但不得将元素复制到别的数据结构（如数组）中。该栈支持如下操作：push、pop、peek和isEmpty。</p></blockquote><h2 id="_3-6-动物收容所" tabindex="-1"><a class="header-anchor" href="#_3-6-动物收容所" aria-hidden="true">#</a> 3.6 动物收容所</h2><blockquote><p>有家动物收容所只收容狗与猫，且严格遵守“先进先出”的原则。在收养该收容所的动物时，收养人只能收养所有动物中“最老”（由其进入收容所的时间长短而定）的动物，或者可以挑选猫或狗（同时必须收养此类动物中“最老”的）。换言之，收养人不能自由挑选想收养的对象。请创建适用于这个系统的数据结构，实现各种操作方法，比如enqueue、dequeueAny、dequeoueDog和dequeueCat。允许使用Java内置的LinkedList数据结构。</p></blockquote>',12);function n(s,i){return t(),o("div",null,[d,c(" more "),u])}const _=a(h,[["render",n],["__file","0x03.stack-queue.html.vue"]]);export{_ as default};
