import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as n,a as s,f as o}from"./app-R4SeOK86.js";const c={},d=o(`<h2 id="设计理念" tabindex="-1"><a class="header-anchor" href="#设计理念" aria-hidden="true">#</a> 设计理念</h2><p><code>OC</code> 底层是使用 <code>C/C++</code> 实现。定一个继承 <code>NSObject</code> 的类，这个类底层使用 <code>C</code> 语言中的 <code>struct</code> 结构体来实现的。</p><h3 id="java、python、oc-运行效率孰高" tabindex="-1"><a class="header-anchor" href="#java、python、oc-运行效率孰高" aria-hidden="true">#</a> <code>Java、python、OC</code> 运行效率孰高？</h3><h3 id="❓oc-的动态性" tabindex="-1"><a class="header-anchor" href="#❓oc-的动态性" aria-hidden="true">#</a> ❓<code>OC</code> 的动态性</h3><details class="hint-container details"><summary>💡</summary><p>首先理解两个“动态语言与静态语言”</p><p><code>OC</code> 的 <code>runtime</code> 文档中介绍中就详细写明了，<code>runtime</code> 的设计是为了将 <code>OC</code> 中的更多的处理延迟到编译后。</p><ul><li>动态类型 (Dynamic typing) : 编译时并不确定对象类型，在运行时才判断对象的类型。<code>OC</code> 中一切对象都可以用 <code>id</code> 指针指向。</li><li>动态绑定 (Dynamic binding) : 方法的调用也是运行时才决定，而并非编译时。</li><li>动态加载 (Dynamic loading) : 运行时可以动态加载其它模块或框架</li></ul></details><h3 id="oc-是否支持重载-为什么" tabindex="-1"><a class="header-anchor" href="#oc-是否支持重载-为什么" aria-hidden="true">#</a> <code>OC</code> 是否支持重载? 为什么?</h3><h3 id="说说对-self-和-super-的理解" tabindex="-1"><a class="header-anchor" href="#说说对-self-和-super-的理解" aria-hidden="true">#</a> 说说对 <code>self</code> 和 <code>super</code> 的理解？</h3><h3 id="说一下-dealloc-的实现机制" tabindex="-1"><a class="header-anchor" href="#说一下-dealloc-的实现机制" aria-hidden="true">#</a> 说一下 <code>dealloc</code> 的实现机制？</h3><h3 id="❓oc-底层方法列表的数据结构是什么" tabindex="-1"><a class="header-anchor" href="#❓oc-底层方法列表的数据结构是什么" aria-hidden="true">#</a> ❓<code>OC</code> 底层方法列表的数据结构是什么？</h3><details class="hint-container details"><summary>💡</summary><p>底层是通过结构体来实现了，结构里面的通过数组来存储方法列表</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// 方法列表结构体</span>
<span class="token keyword">struct</span> method_list_t <span class="token punctuation">{</span>
  uint32_t entsize<span class="token punctuation">;</span>        <span class="token comment">// 结构体的大小</span>
  uint32_t method_count<span class="token punctuation">;</span>   <span class="token comment">// 方法的数量</span>
  method_t method_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 方法列表</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 方法结构体</span>
<span class="token keyword">struct</span> method_t <span class="token punctuation">{</span>
  SEL sel<span class="token punctuation">;</span>                <span class="token comment">// 方法的名称</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>types<span class="token punctuation">;</span>      <span class="token comment">// 方法的类型</span>
  IMP imp<span class="token punctuation">;</span>                <span class="token comment">// 对应的实现（函数指针）</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="id-vs-nsobject" tabindex="-1"><a class="header-anchor" href="#id-vs-nsobject" aria-hidden="true">#</a> <code>id</code> vs <code>NSObject</code></h3><ul><li><code>id</code> : 可以指向任意的 <code>OC</code> 对象</li></ul><h3 id="id-vs-instancetype" tabindex="-1"><a class="header-anchor" href="#id-vs-instancetype" aria-hidden="true">#</a> <code>id</code> vs <code>instancetype</code>？</h3><h3 id="id-为什么不能用点语法" tabindex="-1"><a class="header-anchor" href="#id-为什么不能用点语法" aria-hidden="true">#</a> <code>id</code> 为什么不能用点语法？</h3><h3 id="❓nil-vs-nil-vs-null-vs-nsnull" tabindex="-1"><a class="header-anchor" href="#❓nil-vs-nil-vs-null-vs-nsnull" aria-hidden="true">#</a> ❓<code>nil</code> vs <code>Nil</code> vs <code>NULL</code> vs <code>NSNull</code></h3><details class="hint-container details"><summary>💡</summary><ul><li><code>nil</code> : 一种特殊的指针，指向为空的 <code>OC</code> 对象</li><li><code>Nil</code> :</li><li><code>NULL</code> : 也是表示空指针，一般代表 <code>C</code> 指针为空</li><li><code>NSNull</code> :</li></ul></details><h3 id="❓designated-initializer-如何添加" tabindex="-1"><a class="header-anchor" href="#❓designated-initializer-如何添加" aria-hidden="true">#</a> ❓<code>Designated Initializer</code> 如何添加？</h3><h3 id="❓-load-与-initialize-区别" tabindex="-1"><a class="header-anchor" href="#❓-load-与-initialize-区别" aria-hidden="true">#</a> ❓<code>+load</code> 与 <code>+initialize</code> 区别</h3><details class="hint-container details"><summary>💡</summary><p>这两个都是类方法，可以从下面几个方面去对比两者的区别</p><ul><li><p>调用时机</p><ul><li><code>+load</code> : 这是在运行时加载时，进行触发调用。</li><li><code>+initialize</code> : 会在类第一次使用时，进行触发调用。</li></ul></li><li><p>调用次数</p><ul><li><code>+load</code> : 只会在运行时加载时，调用一次。</li><li><code>+initialize</code> : 第一次调用时，调用一次。</li></ul></li><li><p>调用父类</p><ul><li><code>+load</code> : 不会调用父类的 <code>+load</code></li><li><code>+initialize</code> : 如果当前类没有</li></ul></li><li><p>手动调用</p><ul><li><code>+load</code> : 不能手动调用，运行时进行调用的。手动调用会触发异常。</li><li><code>+initialize</code> : 可以手动调用。</li></ul></li></ul></details><blockquote><p>❓<code>+load</code> 的调用顺序</p></blockquote><details class="hint-container details"><summary>💡</summary><ul><li><code>+load</code> 方法调用顺序与编译连接顺序有关。</li><li>不同类之间的<code>+load</code>方法的调用顺序不能确定，取决于编译连接顺序。</li><li>如果父类、子类和分类都实现了 <code>+load</code> 方法，<code>+load</code> 方法的调用顺序是：先调用父类的<code>+load</code>，再调用子类的<code>+load</code>，最后调用分类的<code>+load</code>。</li></ul></details><h3 id="oc-中的内省和反射-底层实现原理-应用场景有哪些" tabindex="-1"><a class="header-anchor" href="#oc-中的内省和反射-底层实现原理-应用场景有哪些" aria-hidden="true">#</a> <code>OC</code> 中的内省和反射，底层实现原理？应用场景有哪些？</h3><h3 id="oc-如何实现多重继承" tabindex="-1"><a class="header-anchor" href="#oc-如何实现多重继承" aria-hidden="true">#</a> <code>OC</code> 如何实现多重继承？</h3><h3 id="静态方法是否能被重写" tabindex="-1"><a class="header-anchor" href="#静态方法是否能被重写" aria-hidden="true">#</a> 静态方法是否能被重写?</h3><h3 id="怎么保证自己的类一定能调用到自己写的方法" tabindex="-1"><a class="header-anchor" href="#怎么保证自己的类一定能调用到自己写的方法" aria-hidden="true">#</a> 怎么保证自己的类一定能调用到自己写的方法？</h3><h3 id="类簇的优缺点" tabindex="-1"><a class="header-anchor" href="#类簇的优缺点" aria-hidden="true">#</a> 类簇的优缺点？</h3><hr><h2 id="nsstring" tabindex="-1"><a class="header-anchor" href="#nsstring" aria-hidden="true">#</a> NSString</h2><h3 id="nsstring-如何计算字符的个数" tabindex="-1"><a class="header-anchor" href="#nsstring-如何计算字符的个数" aria-hidden="true">#</a> <code>NSString</code> 如何计算字符的个数？</h3><h3 id="❓oc-中的三种字符串" tabindex="-1"><a class="header-anchor" href="#❓oc-中的三种字符串" aria-hidden="true">#</a> ❓<code>OC</code> 中的三种字符串？</h3><details class="hint-container details"><summary>💡</summary><ul><li><p><code>__NSCFConstantString</code> ：在编译时被创建的常量字符串对象，如<code>NSString *str = @&quot;Hello, World!&quot;</code>。这些对象会在编译时就被创建，并且在程序的整个生命周期中都不会被销毁。</p></li><li><p><code>__NSTaggedPointerString</code> ：使用 <code>Tagged Pointer</code> 技术来提高内存使用效率，通常用于存储较小的字符串数据。</p></li><li><p><code>__NSCFString</code> ：本质上是一个 <code>Core Foundation</code> 字符串的引用（<code>CFStringRef</code>），这种类型的字符串通常会在运行时程序动态创建的对象字符串。</p></li></ul></details><blockquote><p><code>Tagged Pointer</code> 了解吗？</p></blockquote><details class="hint-container details"><summary>💡</summary><blockquote><p><code>iOS 7</code> 之后 Apple 为了优化引入的一项技术。从字面意思上来看<code>Tagged Pointer</code>就是带有标签的指针。</p></blockquote><p>一般来说，在 64-bit 架构下，一个指针的值需要占用 8 byte 的内存空间；然而对于一些非常小的数据，比如 NSNumber、NSDate、NSString 等，使用 8 byte 存储对象指针就显得非常浪费。为了解决这个问题，苹果引入了 <code>Tagged Pointer</code> 技术，通过标签直接将小的数据对象嵌入到指针中，这样对于小的数据对象，就无需额外的内存来存储了，能够显著提高内存的利用率。需要注意，一个对象是否使用 <code>Tagged Pointer</code> 是由系统决定的，不能人为控制。</p><p>具体到 <code>NSString</code> 这种场景中，如果字符串的内容非常短，那么它的实现方式可能就是 <code>Tagged Pointer</code>，直接将字符串内容存在指针中，提高了内存利用率。</p></details><hr><h2 id="nsdictionary" tabindex="-1"><a class="header-anchor" href="#nsdictionary" aria-hidden="true">#</a> NSDictionary</h2><h3 id="❓nsdictionary-大致实现原理" tabindex="-1"><a class="header-anchor" href="#❓nsdictionary-大致实现原理" aria-hidden="true">#</a> ❓<code>NSDictionary</code> 大致实现原理</h3><details class="hint-container details"><summary>💡</summary><p><code>NSDictionary</code> 在内部实现上采用了哈希表的数据结构</p></details><h3 id="❓nscache-vs-nsdictionary" tabindex="-1"><a class="header-anchor" href="#❓nscache-vs-nsdictionary" aria-hidden="true">#</a> ❓<code>NSCache</code> vs <code>NSDictionary</code></h3><h3 id="nscache-中缓存的对象-在什么时候被释放" tabindex="-1"><a class="header-anchor" href="#nscache-中缓存的对象-在什么时候被释放" aria-hidden="true">#</a> <code>NSCache</code> 中缓存的对象，在什么时候被释放？</h3><hr><h2 id="nsmutablearray" tabindex="-1"><a class="header-anchor" href="#nsmutablearray" aria-hidden="true">#</a> NSMutableArray</h2><h3 id="nsmutablearray-alloc-init-和-nsmutablearray-array-有什么区别" tabindex="-1"><a class="header-anchor" href="#nsmutablearray-alloc-init-和-nsmutablearray-array-有什么区别" aria-hidden="true">#</a> <code>[[NSMutableArray alloc] init]</code> 和 <code>[NSMutableArray array]</code> 有什么区别?</h3><h3 id="nsmutablearray-是怎么实现的-做增删操作的时候内存空间是怎么改变的-可以用别的方法实现吗" tabindex="-1"><a class="header-anchor" href="#nsmutablearray-是怎么实现的-做增删操作的时候内存空间是怎么改变的-可以用别的方法实现吗" aria-hidden="true">#</a> <code>NSMutableArray</code> 是怎么实现的，做增删操作的时候内存空间是怎么改变的，可以用别的方法实现吗？&quot;</h3><hr><h2 id="拷贝" tabindex="-1"><a class="header-anchor" href="#拷贝" aria-hidden="true">#</a> 拷贝</h2><h3 id="❓自定义类如何实现拷贝功能-如何重写带-copy-关键字的-setter" tabindex="-1"><a class="header-anchor" href="#❓自定义类如何实现拷贝功能-如何重写带-copy-关键字的-setter" aria-hidden="true">#</a> ❓自定义类如何实现拷贝功能？如何重写带 <code>copy</code> 关键字的 <code>setter</code>？</h3><h3 id="❓copy-和-mutablecopy-的区别" tabindex="-1"><a class="header-anchor" href="#❓copy-和-mutablecopy-的区别" aria-hidden="true">#</a> ❓<code>copy</code> 和 <code>mutablecopy</code> 的区别？</h3><h3 id="❓-property-copy-nsmutablearray-array-这个写法正确吗" tabindex="-1"><a class="header-anchor" href="#❓-property-copy-nsmutablearray-array-这个写法正确吗" aria-hidden="true">#</a> ❓<code>@property (copy) NSMutableArray *array;</code> 这个写法正确吗？</h3><h2 id="属性" tabindex="-1"><a class="header-anchor" href="#属性" aria-hidden="true">#</a> 属性</h2><h3 id="property-属性是什么" tabindex="-1"><a class="header-anchor" href="#property-属性是什么" aria-hidden="true">#</a> <code>@property</code> 属性是什么？</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>@property</code> 是 <code>Objective-C</code> 中的一个关键字，用于声明一个属性。主要作用是为类的实例变量（属性）生成对应的访问器方法，即 <code>getter</code> 方法和 <code>setter</code> 方法。</p></blockquote><p><code>@property</code> 访问器</p><ul><li>原子性 : <code>atomic</code>、<code>nonatomic</code></li><li>读写性 : <code>readwrite</code>、<code>readonly</code></li><li>内存管理 : <code>assign</code>、<code>strong</code>、<code>weak</code>、<code>copy</code></li></ul><p><code>@property</code> 优点</p><ul><li>隔离性：可以封装实例变量的直接访问，将类的内部实现与外部接口隔离，提高数据的安全性。</li><li>可维护性：可以在 <code>getter</code> 和 <code>setter</code> 中添加特定的逻辑如设置新值时进行验证，获取值时返回一个计算后的值等，提高代码的可维护性。</li></ul></details><h3 id="property-的默认关键字" tabindex="-1"><a class="header-anchor" href="#property-的默认关键字" aria-hidden="true">#</a> <code>@property</code> 的默认关键字？</h3><details class="hint-container details"><summary>💡</summary><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// 基本数据类型 =&gt; 默认是: atomic, readwrite, assign</span>
<span class="token keyword">@property</span> <span class="token keyword">int</span> num<span class="token punctuation">;</span>
<span class="token comment">// 对象数据类型 =&gt; 默认是: atomic, readwrite, strong</span>
<span class="token keyword">@property</span> NSObject <span class="token operator">*</span>obj<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="❓assign、strong、weak、copy-区别" tabindex="-1"><a class="header-anchor" href="#❓assign、strong、weak、copy-区别" aria-hidden="true">#</a> ❓<code>assign</code>、<code>strong</code>、<code>weak</code>、<code>copy</code> 区别？</h3><details class="hint-container details"><summary>💡</summary><ul><li><p><code>assign</code>：是赋值特性，简单设置变量，不更改引用计数。</p><blockquote><p>主要用在基本的数据类型（如 int、float）或 C 数据类型（如 结构体、C 数组）而不是对象。</p></blockquote></li><li><p><code>strong</code>（类似于：retain）：是所有权（owning）特性。</p><blockquote><p>采用 <code>ARC</code>（自动引用计数）环境下，编译器会自动在设置方法中插入 <code>retain</code> 调用，使对象的引用计数增加，从而表示当前对象拥有数据值。</p></blockquote></li><li><p><code>weak</code>：是非拥有关系（non-owning）特性，即弱引用。</p><blockquote><p>当用 <code>weak</code> 修饰对象时，被指向的对象引用计数不会增加，更重要的是，当对象被释放时，被 <code>weak</code> 修饰的变量会自动被置为 <code>nil</code>，防止野指针的出现。<code>weak</code> 修饰的属性适合在已经存在对对象的<code>strong</code>引用，或者对象之间存在相互循环引用的情况下使用。</p></blockquote></li><li><p><code>copy</code>：是拷贝特性。</p><blockquote><p>适合 <code>NSString</code>、<code>NSArray</code>、<code>NSDictionary</code> 等不可变对象。最重要的一点是：使用 <code>copy</code> 保持封装性，对象在内部可能需要一个数据的完整副本，并且把这个副本给外界使用，防止作为接口提供的对象的初始数据被改变。</p></blockquote></li></ul><p>选择哪种属性修饰符要视情况而定，如果数据是不可变的，那么选择 <code>assign</code> 或 <code>copy</code> 较好；如果数据是可变的，可以选择 <code>strong</code> 或 <code>weak</code>。</p></details><h3 id="nonnull-用过吗" tabindex="-1"><a class="header-anchor" href="#nonnull-用过吗" aria-hidden="true">#</a> <code>nonnull</code> 用过吗？</h3><h3 id="nsstring-为什么使用-copy-可以使用-strong-吗" tabindex="-1"><a class="header-anchor" href="#nsstring-为什么使用-copy-可以使用-strong-吗" aria-hidden="true">#</a> <code>NSString</code> 为什么使用 <code>copy</code>，可以使用 <code>strong</code> 吗？</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>NSString</code> 使用 <code>copy</code> 是为了防止在赋值可变字符串时由于原字符串发生改变而引发非预期问题。</p></blockquote><ul><li><p><code>NSString</code> 的子类 <code>NSMutableString</code> 是可以变化的。如果使用 <code>strong</code> 并把一个 <code>NSMutableString</code> 实例赋值给 <code>NSString</code> 对象，然后改变该<code>NSMutableString</code> 实例，那么 <code>NSString</code> 实例也会随之改变。</p></li><li><p>如果使用 <code>copy</code>，当一个 <code>NSMutableString</code> 实例赋值给 <code>NSString</code> 对象时，实际上会复制一个不可变的副本。这样即使原字符串改变 <code>NSString</code> 实例也不会受影响。</p></li></ul></details><h3 id="dynamic和-synthesize-关键字的作用" tabindex="-1"><a class="header-anchor" href="#dynamic和-synthesize-关键字的作用" aria-hidden="true">#</a> <code>@dynamic</code>和 <code>@synthesize</code> 关键字的作用？</h3><details class="hint-container details"><summary>💡</summary><ul><li><p><code>@synthesize</code>：告诉编译器编译时自动创建 <code>getter/setter</code> 方法，如果你没有手动实现这些方法的话。</p></li><li><p><code>@dynamic</code>：这个关键字告诉编译器,属性的getter和setter方法由用户自己实现，不自动生成（当然对于<code>@dynamic var</code>，编译器还是会默认添加其成员变量<code>_var</code>），如果我们没有手动实现setter和getter，那么程序运行时，编译器发现找不到setter/getter就会崩溃。但是一个好处是它可以让我们在运行时动态绑定对象。</p></li></ul><blockquote><p><code>@dynamic</code>常常和运行时函数class_addMethod配合使用,我们可以动态添加方法。最常见的应用是在Core Data的NSManagedObject子类中，Core Data的属性经常被设置为@dynamic, NSManagedObject利用Core Data的底层存储访问这些属性，以便将对象的实际数据保存在磁盘上，而不是内存中。</p></blockquote><p>简单来说：</p><p>@synthesize 用于当你不想手动实现 getter 和 setter 方法时，告诉编译器帮你添加这些方法。</p><p>@dynamic 用于告诉编译器不自动生成 setter 和 getter 方法， 需要开发者手动创建还是动态添加。</p></details><h3 id="synthesize-合成实例变量的规则是什么-假如属性名为-foo-存在一个名为-foo-的实例变量-那么还会自动合成新变量么" tabindex="-1"><a class="header-anchor" href="#synthesize-合成实例变量的规则是什么-假如属性名为-foo-存在一个名为-foo-的实例变量-那么还会自动合成新变量么" aria-hidden="true">#</a> <code>@synthesize</code> 合成实例变量的规则是什么？假如属性名为 <code>foo</code>，存在一个名为 <code>_foo</code> 的实例变量，那么还会自动合成新变量么？</h3><h3 id="在有了自动合成属性实例变量之后-synthesize-还有哪些使用场景" tabindex="-1"><a class="header-anchor" href="#在有了自动合成属性实例变量之后-synthesize-还有哪些使用场景" aria-hidden="true">#</a> 在有了自动合成属性实例变量之后，<code>@synthesize</code> 还有哪些使用场景？</h3><h3 id="❓-property-的底层实现" tabindex="-1"><a class="header-anchor" href="#❓-property-的底层实现" aria-hidden="true">#</a> ❓<code>@property</code> 的底层实现？</h3><details class="hint-container details"><summary>💡</summary><p>声明 <code>@property</code> 后，编译器会根据属性的特性在 <code>class_rw_t</code> 结构中的 <code>methods</code> 和 <code>properties</code> 中生成 <code>getter</code> 和 <code>setter</code> 方法以及相应的属性。然后在运行时，这些 <code>getter</code> 和 <code>setter</code> 方法以及属性被引入到<code>objc_class</code>的结构中。</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">struct</span> objc_class <span class="token punctuation">{</span>
    Class isa<span class="token punctuation">;</span>              <span class="token comment">// metaclass 的指针</span>
    Class super_class<span class="token punctuation">;</span>      <span class="token comment">// 父类</span>
    cache_t cache<span class="token punctuation">;</span>          <span class="token comment">// 缓存</span>
    class_data_bits_t bits<span class="token punctuation">;</span> <span class="token comment">// 类的相关信息，包含了一个指向 class_rw_t 数据结构的指针</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 可读写结构，存储运行时添加的类信息</span>
<span class="token keyword">struct</span> class_rw_t <span class="token punctuation">{</span>
    uint32_t flags<span class="token punctuation">;</span>
    uint32_t version<span class="token punctuation">;</span>
    <span class="token keyword">const</span> class_ro_t <span class="token operator">*</span>ro<span class="token punctuation">;</span>           <span class="token comment">// 只读结构体，保存编译时确定的类信息</span>
    method_array_t methods<span class="token punctuation">;</span>         <span class="token comment">// 方法列表</span>
    property_array_t properties<span class="token punctuation">;</span>    <span class="token comment">// 属性列表</span>
    protocol_array_t protocols<span class="token punctuation">;</span>     <span class="token comment">// 协议列表</span>
    Class firstSubclass<span class="token punctuation">;</span>
    Class nextSiblingClass<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><hr><h2 id="block" tabindex="-1"><a class="header-anchor" href="#block" aria-hidden="true">#</a> Block</h2><h3 id="❓block-与-代理的区别" tabindex="-1"><a class="header-anchor" href="#❓block-与-代理的区别" aria-hidden="true">#</a> ❓<code>block</code> 与 代理的区别?</h3><h3 id="❓block-与-函数指针" tabindex="-1"><a class="header-anchor" href="#❓block-与-函数指针" aria-hidden="true">#</a> ❓<code>block</code> 与 函数指针</h3><details class="hint-container details"><summary>💡</summary><ul><li><p><code>block</code>：一种特殊的数据类型，可以存储一段代码，并且这段代码可以在任何时候被执行。可以访问在声明他的那个作用域中定义的变量，这被称为“变量捕获”。</p></li><li><p>函数指针：函数指针是存储着函数地址的指针变量，本质上是一个地址值，也就是函数在内存中的起始地址。函数指针不能像 <code>block</code> 那样访问变量，只能通过传参的方式去使用外部的数据。</p></li></ul></details><h3 id="block-时什么情况会发生引用循环" tabindex="-1"><a class="header-anchor" href="#block-时什么情况会发生引用循环" aria-hidden="true">#</a> <code>block</code> 时什么情况会发生引用循环？</h3><h3 id="uiview-动画函数-block-版本使用-是否需要处理循环引用" tabindex="-1"><a class="header-anchor" href="#uiview-动画函数-block-版本使用-是否需要处理循环引用" aria-hidden="true">#</a> <code>UIView</code> 动画函数 <code>block</code> 版本使用，是否需要处理循环引用？</h3><h3 id="block-内如何修改-block-外部变量" tabindex="-1"><a class="header-anchor" href="#block-内如何修改-block-外部变量" aria-hidden="true">#</a> <code>block</code> 内如何修改 <code>block</code> 外部变量？</h3><h3 id="block-在捕获自变量-局部静态变量-全局变量-全局静态变量有什么区别" tabindex="-1"><a class="header-anchor" href="#block-在捕获自变量-局部静态变量-全局变量-全局静态变量有什么区别" aria-hidden="true">#</a> <code>block</code> 在捕获自变量，局部静态变量，全局变量，全局静态变量有什么区别?</h3><h3 id="❓-block-的作用" tabindex="-1"><a class="header-anchor" href="#❓-block-的作用" aria-hidden="true">#</a> ❓<code>__block</code> 的作用？</h3><h3 id="block-vs-weak" tabindex="-1"><a class="header-anchor" href="#block-vs-weak" aria-hidden="true">#</a> <code>__block</code> vs <code>__weak</code>？</h3><h3 id="block-在-arc-和非-arc-有区别吗" tabindex="-1"><a class="header-anchor" href="#block-在-arc-和非-arc-有区别吗" aria-hidden="true">#</a> <code>__block</code> 在 <code>ARC</code> 和非 <code>ARC</code> 有区别吗？</h3><h3 id="block-捕获外部局部变量实际上发生了什么-block-的作用" tabindex="-1"><a class="header-anchor" href="#block-捕获外部局部变量实际上发生了什么-block-的作用" aria-hidden="true">#</a> <code>block</code> 捕获外部局部变量实际上发生了什么？<code>__block</code> 的作用？</h3><h3 id="一个-int-变量用-block-修饰与不修饰有区别吗" tabindex="-1"><a class="header-anchor" href="#一个-int-变量用-block-修饰与不修饰有区别吗" aria-hidden="true">#</a> 一个 <code>int</code> 变量用 <code>__block</code> 修饰与不修饰有区别吗？</h3><h3 id="在-block-中修改-nsmutablearray-需不需要添加-block" tabindex="-1"><a class="header-anchor" href="#在-block-中修改-nsmutablearray-需不需要添加-block" aria-hidden="true">#</a> 在 <code>block</code> 中修改 <code>NSMutableArray</code>，需不需要添加<code>__block</code>？</h3><h3 id="❓为什么在-block-外部使用-weak-修饰的同时需要在内部使用-strong-修饰" tabindex="-1"><a class="header-anchor" href="#❓为什么在-block-外部使用-weak-修饰的同时需要在内部使用-strong-修饰" aria-hidden="true">#</a> ❓为什么在 <code>block</code> 外部使用 <code>__weak</code> 修饰的同时需要在内部使用 <code>__strong</code> 修饰？</h3><details class="hint-container details"><summary>💡</summary></details><h3 id="❓block-底层实现" tabindex="-1"><a class="header-anchor" href="#❓block-底层实现" aria-hidden="true">#</a> ❓<code>block</code> 底层实现？</h3><details class="hint-container details"><summary>💡</summary><p><code>block</code> 底层是使用结构体实现的。</p><p>根据内存分区不同，分为三种 <code>block</code></p><ul><li><code>__NSGlobalBlock__</code> : 全局 <code>block</code>，类似全局静态变量，存放在静态区</li><li><code>__NSStackBlock__</code> : 栈区 <code>block</code>，保存在栈区</li><li><code>__NSMallocBlock__</code> : 堆区 <code>block</code>，保存在堆区</li></ul><blockquote><p>结构体是什么样?</p></blockquote></details><h3 id="block-一般使用-copy-修饰-可以使用-strong-吗-发生-copy-的时机" tabindex="-1"><a class="header-anchor" href="#block-一般使用-copy-修饰-可以使用-strong-吗-发生-copy-的时机" aria-hidden="true">#</a> <code>block</code> 一般使用 <code>copy</code> 修饰，可以使用 <code>strong</code> 吗？发生 <code>copy</code> 的时机？</h3><h3 id="block-如何进行内存管理的" tabindex="-1"><a class="header-anchor" href="#block-如何进行内存管理的" aria-hidden="true">#</a> <code>block</code> 如何进行内存管理的？</h3><h3 id="block-访问对象类型的-auto-变量时-在-arc-和-mrc-下有什么区别" tabindex="-1"><a class="header-anchor" href="#block-访问对象类型的-auto-变量时-在-arc-和-mrc-下有什么区别" aria-hidden="true">#</a> <code>block</code> 访问对象类型的 <code>auto</code> 变量时，在 <code>ARC</code> 和 <code>MRC</code> 下有什么区别？</h3><h3 id="在block里面使用-property会造成循环引用吗-怎么解决-除了使用self-property-可以使用valueforkey来访问吗-在block里面可以修改它的值吗setvalueforkey-可以修改它的值-可以用valueforkey来解决-显式的的使用self-block外先持有self的弱引用。" tabindex="-1"><a class="header-anchor" href="#在block里面使用-property会造成循环引用吗-怎么解决-除了使用self-property-可以使用valueforkey来访问吗-在block里面可以修改它的值吗setvalueforkey-可以修改它的值-可以用valueforkey来解决-显式的的使用self-block外先持有self的弱引用。" aria-hidden="true">#</a> 在block里面使用_property会造成循环引用吗？怎么解决？除了使用self-&gt;_property，可以使用valueforkey来访问吗 在block里面可以修改它的值吗setvalueforkey？可以修改它的值，可以用valueforkey来解决，显式的的使用self，block外先持有self的弱引用。</h3><hr><h2 id="分类" tabindex="-1"><a class="header-anchor" href="#分类" aria-hidden="true">#</a> 分类</h2><h3 id="oc-中-category-vs-extension" tabindex="-1"><a class="header-anchor" href="#oc-中-category-vs-extension" aria-hidden="true">#</a> OC 中 <code>Category</code> vs <code>Extension</code></h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>Category</code>(类别)：<code>Objective-C</code> 的一个特性，提供了一种给已存在类添加方法的机制.</p></blockquote><ul><li><code>Category</code> : 只能添加方法，不能添加实例变量(除非通过关联对象)。分类中的方法是运行时添加到方法列表中的。</li><li><code>Extension</code> : 可以添加方法和计算属性，也可以添加构造方法，也可以实现以一个协议。编译时已经确定，不支持动态添加方法。</li></ul></details><h3 id="给-nsobject-添加-extension-会怎么样" tabindex="-1"><a class="header-anchor" href="#给-nsobject-添加-extension-会怎么样" aria-hidden="true">#</a> 给 <code>NSObject</code> 添加 <code>Extension</code> 会怎么样？</h3><h3 id="❓如果分类中添加与类相同的方法签名会发生什么" tabindex="-1"><a class="header-anchor" href="#❓如果分类中添加与类相同的方法签名会发生什么" aria-hidden="true">#</a> ❓如果分类中添加与类相同的方法签名会发生什么？</h3><details class="hint-container details"><summary>💡</summary><p>分类中的方法是运行时添加到方法列表中，并且是添加中已有方法的前面。所以当分类与原类中的方法相同时，分类中的方法会优先调用，覆盖掉原类中的方法。</p></details><h3 id="❓分类是如何实现的-它为什么会覆盖掉原来的方法" tabindex="-1"><a class="header-anchor" href="#❓分类是如何实现的-它为什么会覆盖掉原来的方法" aria-hidden="true">#</a> ❓分类是如何实现的？它为什么会覆盖掉原来的方法？</h3><details class="hint-container details"><summary>💡</summary><p>底层实现：是一个 <code>objc_category</code> 结构体，它包含了类名(name)、类(cls)、类别中所有方法的列表(method_list)、类别的协议列表(protocol_list)、类别中所有的属性列表(property_list)。</p><p>加载过程：在程序运行时的 <code>load</code> 阶段进行的，所有类和分类的 <code>+load</code> 方法（如果有）被调用。在调用 <code>+load</code> 方法之前，<code>runtime</code> 会先将分类的方法、协议、属性合并到类的数据结构中。这个过程中，分类的方法被放在了原来类方法列表的前面，所以在类和分类中有相同方法名的方法的时候，分类的方法会被优先调用，原类的方法被覆盖。</p></details><h3 id="一个类-有个多个分类都实现了相同的方法-会调用哪个方法" tabindex="-1"><a class="header-anchor" href="#一个类-有个多个分类都实现了相同的方法-会调用哪个方法" aria-hidden="true">#</a> 一个类，有个多个分类都实现了相同的方法，会调用哪个方法？</h3><h3 id="分类中有与主类相同的方法-我想要调用主类中的方法-有什么办法吗" tabindex="-1"><a class="header-anchor" href="#分类中有与主类相同的方法-我想要调用主类中的方法-有什么办法吗" aria-hidden="true">#</a> 分类中有与主类相同的方法，我想要调用主类中的方法，有什么办法吗？</h3><h3 id="两个分类的-load-方法的加载顺序" tabindex="-1"><a class="header-anchor" href="#两个分类的-load-方法的加载顺序" aria-hidden="true">#</a> 两个分类的 <code>load</code> 方法的加载顺序？</h3><h3 id="两个分类的同名方法的加载顺序" tabindex="-1"><a class="header-anchor" href="#两个分类的同名方法的加载顺序" aria-hidden="true">#</a> 两个分类的同名方法的加载顺序？</h3><h3 id="❓分类的结构体里面有哪些成员" tabindex="-1"><a class="header-anchor" href="#❓分类的结构体里面有哪些成员" aria-hidden="true">#</a> ❓分类的结构体里面有哪些成员？</h3><h3 id="分类中为什么不能添加-property" tabindex="-1"><a class="header-anchor" href="#分类中为什么不能添加-property" aria-hidden="true">#</a> 分类中为什么不能添加 <code>@property</code>？</h3><details class="hint-container details"><summary>💡</summary></details><h3 id="❓分类中如何添加属性" tabindex="-1"><a class="header-anchor" href="#❓分类中如何添加属性" aria-hidden="true">#</a> ❓分类中如何添加属性？</h3><details class="hint-container details"><summary>💡</summary><p>可以使用关联对象（<code>Associated Objects</code>）让分类拥有“伪属性”。</p><p>在Objective-C中，分类（Category）的定义中并不支持直接添加属性（instance variable）。但我们可以通过 Objective-C 的关联对象（Associative References）机制实现给分类添加属性。</p><p>以下是一个例子，演示如何给一个分类添加一个属性：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">import</span> <span class="token string">&quot;NSObject+Property.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">import</span> <span class="token expression"><span class="token operator">&lt;</span>objc<span class="token operator">/</span>runtime<span class="token punctuation">.</span>h<span class="token operator">&gt;</span></span></span>

<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>MyKey <span class="token operator">=</span> <span class="token operator">&amp;</span>MyKey<span class="token punctuation">;</span>

<span class="token keyword">@implementation</span> <span class="token function">NSObject</span> <span class="token punctuation">(</span>Property<span class="token punctuation">)</span>
<span class="token comment">// getter</span>
<span class="token operator">-</span> <span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>myProperty <span class="token punctuation">{</span>
  <span class="token comment">// \`objc_getAssociatedObject\` 用于取关联对象。</span>
  <span class="token comment">//  - 首个参数是要存取的对象</span>
  <span class="token comment">//  - 第二个参数是键，我们用一个静态常量 \`MyKey\` 作为键（每个关联到对象的键必须全局唯一）</span>
  <span class="token keyword">return</span> <span class="token function">objc_getAssociatedObject</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">,</span> MyKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// setter</span>
<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>setMyProperty<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>myProperty <span class="token punctuation">{</span>
  <span class="token comment">// \`objc_setAssociatedObject\` 第三个参数是存储的值，第四个参数是关联策略</span>
  <span class="token comment">// \`OBJC_ASSOCIATION_COPY_NONATOMIC\`，表示这是一个 copy ，非原子操作的特性</span>
  <span class="token function">objc_setAssociatedObject</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">,</span> MyKey<span class="token punctuation">,</span> myProperty<span class="token punctuation">,</span> OBJC_ASSOCIATION_COPY_NONATOMIC<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">@end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，我们定义了一个 <code>NSObject</code> 的分类并为它添加了一个 <code>myProperty</code> 属性。</p><p>。对于 ，例如在这里我们将它设为了 。</p><p>通过关联对象可以间接实现在分类中&quot;添加&quot;属性，这也是 <code>Objective-C</code> 动态的特性之一。</p></details><hr><h2 id="关联对象" tabindex="-1"><a class="header-anchor" href="#关联对象" aria-hidden="true">#</a> 关联对象</h2><h3 id="关联对象的如何进行内存管理的" tabindex="-1"><a class="header-anchor" href="#关联对象的如何进行内存管理的" aria-hidden="true">#</a> 关联对象的如何进行内存管理的？</h3><h3 id="关联对象如何实现-weak-属性" tabindex="-1"><a class="header-anchor" href="#关联对象如何实现-weak-属性" aria-hidden="true">#</a> 关联对象如何实现 <code>weak</code> 属性？</h3><h3 id="关联对象的底层实现" tabindex="-1"><a class="header-anchor" href="#关联对象的底层实现" aria-hidden="true">#</a> 关联对象的底层实现？</h3><h3 id="关联对象需要在主对象-dealloc-的时候手动释放吗" tabindex="-1"><a class="header-anchor" href="#关联对象需要在主对象-dealloc-的时候手动释放吗" aria-hidden="true">#</a> 关联对象需要在主对象 <code>dealloc</code> 的时候手动释放吗？</h3><h3 id="关联对象有什么应用-系统如何管理关联对象-其被释放的时候需要手动将所有的关联对象的指针置空吗" tabindex="-1"><a class="header-anchor" href="#关联对象有什么应用-系统如何管理关联对象-其被释放的时候需要手动将所有的关联对象的指针置空吗" aria-hidden="true">#</a> 关联对象有什么应用，系统如何管理关联对象？其被释放的时候需要手动将所有的关联对象的指针置空吗？</h3><hr><h2 id="消息发送" tabindex="-1"><a class="header-anchor" href="#消息发送" aria-hidden="true">#</a> 消息发送</h2><h3 id="oc-中的类方法和实例方法有什么本质区别和联系" tabindex="-1"><a class="header-anchor" href="#oc-中的类方法和实例方法有什么本质区别和联系" aria-hidden="true">#</a> <code>OC</code> 中的类方法和实例方法有什么本质区别和联系？</h3><h3 id="在类方法中是否可以使用-self" tabindex="-1"><a class="header-anchor" href="#在类方法中是否可以使用-self" aria-hidden="true">#</a> 在类方法中是否可以使用 <code>self</code>？</h3><h3 id="sel、-cmd-是什么" tabindex="-1"><a class="header-anchor" href="#sel、-cmd-是什么" aria-hidden="true">#</a> <code>sel</code>、<code>_cmd</code> 是什么？</h3><h3 id="❓oc-中对象消息发送的大致流程" tabindex="-1"><a class="header-anchor" href="#❓oc-中对象消息发送的大致流程" aria-hidden="true">#</a> ❓<code>OC</code> 中对象消息发送的大致流程？</h3><h3 id="❓向一个-nil-对象发送消息将会发生什么" tabindex="-1"><a class="header-anchor" href="#❓向一个-nil-对象发送消息将会发生什么" aria-hidden="true">#</a> ❓向一个 <code>nil</code> 对象发送消息将会发生什么？</h3><h3 id="向一个对象发送消息-obj-foo-和-objc-msgsend-函数之间有什么关系" tabindex="-1"><a class="header-anchor" href="#向一个对象发送消息-obj-foo-和-objc-msgsend-函数之间有什么关系" aria-hidden="true">#</a> 向一个对象发送消息 <code>[obj foo]</code> 和 <code>objc_msgSend()</code> 函数之间有什么关系？</h3><h3 id="❓unrecognized-selector-异常是怎么发生的-如何避免" tabindex="-1"><a class="header-anchor" href="#❓unrecognized-selector-异常是怎么发生的-如何避免" aria-hidden="true">#</a> ❓<code>unrecognized selector</code> 异常是怎么发生的？如何避免？</h3><h3 id="objc-msgforward-函数是做什么的-直接调用它将会发生什么" tabindex="-1"><a class="header-anchor" href="#objc-msgforward-函数是做什么的-直接调用它将会发生什么" aria-hidden="true">#</a> <code>_objc_msgForward</code> 函数是做什么的，直接调用它将会发生什么？</h3><h3 id="❓oc-中是如何通过-selector-找到对应的-imp-地址" tabindex="-1"><a class="header-anchor" href="#❓oc-中是如何通过-selector-找到对应的-imp-地址" aria-hidden="true">#</a> ❓<code>OC</code> 中是如何通过 <code>selector</code> 找到对应的 <code>IMP</code> 地址</h3><details class="hint-container details"><summary>💡</summary><ul><li>消息的接受者（receiver）会在自己的类和超类（superclasses）的方法列表中查找与消息匹配的 <code>selector</code>。</li><li>如果找到了匹配的 <code>selector</code>，那么会从方法列表中取出对应的函数指针（IMP），并且调用这个函数。</li><li>如果没有找到匹配的 <code>selector</code>，那么会进入消息转发（forwarding）流程。</li></ul><p>类方法与实例方法</p></details><h3 id="消息转发机制和其他语言的消息机制优劣对比" tabindex="-1"><a class="header-anchor" href="#消息转发机制和其他语言的消息机制优劣对比" aria-hidden="true">#</a> 消息转发机制和其他语言的消息机制优劣对比？</h3><h3 id="在方法调用的时候-方法查询-动态解析-消息转发-之前做了什么" tabindex="-1"><a class="header-anchor" href="#在方法调用的时候-方法查询-动态解析-消息转发-之前做了什么" aria-hidden="true">#</a> 在方法调用的时候，<code>方法查询-&gt; 动态解析-&gt; 消息转发</code> 之前做了什么？</h3><h3 id="下面代码能正常运行吗-如果可以输出是什么" tabindex="-1"><a class="header-anchor" href="#下面代码能正常运行吗-如果可以输出是什么" aria-hidden="true">#</a> 下面代码能正常运行吗，如果可以输出是什么？</h3><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">@interface</span> Person <span class="token punctuation">:</span> NSObject 
<span class="token keyword">@property</span><span class="token punctuation">(</span>nonatomic<span class="token punctuation">,</span>copy<span class="token punctuation">)</span> NSString <span class="token operator">*</span>name<span class="token punctuation">;</span> 
<span class="token keyword">@end</span>
<span class="token keyword">@implementation</span> Person
<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>speak <span class="token punctuation">{</span>
    <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;My name is:%@&quot;</span><span class="token punctuation">,</span><span class="token keyword">self</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
<span class="token keyword">@end</span>

<span class="token keyword">@implementation</span> ViewController
<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>viewDidLoad <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token keyword">super</span> viewDidLoad<span class="token punctuation">]</span><span class="token punctuation">;</span>
    
    id cls <span class="token operator">=</span> <span class="token punctuation">[</span>Person class<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>obj <span class="token operator">=</span> <span class="token operator">&amp;</span>cls<span class="token punctuation">;</span>
    <span class="token punctuation">[</span><span class="token punctuation">(</span>__bridge id<span class="token punctuation">)</span>obj speak<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">@end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,128);function i(t,r){return a(),n("div",null,[s(" more "),d])}const h=e(c,[["render",i],["__file","objective-c.html.vue"]]);export{h as default};
