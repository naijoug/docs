import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as n,f as t}from"./app-swKH3ngO.js";const s={},d=t(`<h2 id="类" tabindex="-1"><a class="header-anchor" href="#类" aria-hidden="true">#</a> 类</h2><h3 id="访问修饰符" tabindex="-1"><a class="header-anchor" href="#访问修饰符" aria-hidden="true">#</a> 访问修饰符</h3><table><thead><tr><th>位置</th><th style="text-align:center;"><code>public</code></th><th style="text-align:center;"><code>protected</code></th><th style="text-align:center;"><code>default</code></th><th style="text-align:center;"><code>private</code></th></tr></thead><tbody><tr><td>同一类中</td><td style="text-align:center;">✅</td><td style="text-align:center;">✅</td><td style="text-align:center;">✅</td><td style="text-align:center;">✅</td></tr><tr><td>同一包中</td><td style="text-align:center;">✅</td><td style="text-align:center;">✅</td><td style="text-align:center;">✅</td><td style="text-align:center;"></td></tr><tr><td>子类</td><td style="text-align:center;">✅</td><td style="text-align:center;">✅</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td>不同包中</td><td style="text-align:center;">✅</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr></tbody></table><h2 id="接口" tabindex="-1"><a class="header-anchor" href="#接口" aria-hidden="true">#</a> 接口</h2><h3 id="interface-接口默认修饰符" tabindex="-1"><a class="header-anchor" href="#interface-接口默认修饰符" aria-hidden="true">#</a> <code>interface</code> 接口默认修饰符</h3><ul><li>属性 : <code>public static final</code></li><li>方法 : <code>public abstract</code></li></ul><h2 id="抽象类" tabindex="-1"><a class="header-anchor" href="#抽象类" aria-hidden="true">#</a> 抽象类</h2><h3 id="abstract-不可共存的关修饰符" tabindex="-1"><a class="header-anchor" href="#abstract-不可共存的关修饰符" aria-hidden="true">#</a> <code>abstract</code> 不可共存的关修饰符</h3><ul><li><code>final</code> : 修饰类不能继承，修饰方法不能重写；abstract 修饰必须继承和重写</li><li><code>static</code> : 使用类名调用；abstract 修饰方法没有实现，不能直接调用</li><li><code>private</code> : 修饰的类智能在本类使用；abstract 修饰需要子类重写</li></ul><h2 id="面向对象编程-三特性" tabindex="-1"><a class="header-anchor" href="#面向对象编程-三特性" aria-hidden="true">#</a> 面向对象编程 - 三特性</h2><h3 id="封装" tabindex="-1"><a class="header-anchor" href="#封装" aria-hidden="true">#</a> 封装</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="继承" tabindex="-1"><a class="header-anchor" href="#继承" aria-hidden="true">#</a> 继承</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="多态" tabindex="-1"><a class="header-anchor" href="#多态" aria-hidden="true">#</a> 多态</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="pojo-vs-javabean" tabindex="-1"><a class="header-anchor" href="#pojo-vs-javabean" aria-hidden="true">#</a> <code>POJO</code> vs <code>JavaBean</code></h2><blockquote><p><code>POJO</code>（Plain Old Java Object）和JavaBean都是Java中的两种类型，它们的主要区别在于使用方式和规范。</p></blockquote><ul><li><p><code>POJO</code> (Plain Old Java Object) : 简单 Java 对象 (纯洁的老式 JAVA 对象)</p><ul><li>没有继承任何类</li><li>没有实现任何接口</li><li>不依赖任何框架</li><li>可以包含业务逻辑</li><li>可以包含持久化逻辑</li><li>可以包含属性访问方法(get &amp; set)</li></ul><blockquote><p><code>POJO</code> 的目的：尽量减少引入不必要的复杂性，让代码更加简单、灵活。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    
    <span class="token comment">// getters and setters</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>JavaBean</code> : 一种符合特定规范的 <code>Java</code> 类，主要用于封装数据。</p><ul><li>必须具有公共 <code>Public</code> 无参数构造函数</li><li>所有属性私有化 <code>Private</code>, 并且提供公共 <code>Public</code> 的访问方法(get &amp; set)</li><li>可以序列化(如: 实现 <code>Serializable</code> 接口)</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
    
    <span class="token comment">// getters and setters</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,19),i=[d];function l(c,r){return a(),n("div",null,i)}const u=e(s,[["render",l],["__file","0x02.object-oriented.html.vue"]]);export{u as default};
