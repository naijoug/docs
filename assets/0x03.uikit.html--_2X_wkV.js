import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as s,a as e,f as t}from"./app-03m8YoZv.js";const o={},i=t(`<hr><h2 id="uikit" tabindex="-1"><a class="header-anchor" href="#uikit" aria-hidden="true">#</a> UIKit</h2><h3 id="❓ios-从点击程序图标到展示界面完成-这个启动流程说一下" tabindex="-1"><a class="header-anchor" href="#❓ios-从点击程序图标到展示界面完成-这个启动流程说一下" aria-hidden="true">#</a> ❓<code>iOS</code> 从点击程序图标到展示界面完成，这个启动流程说一下</h3><details class="hint-container details"><summary>💡</summary><p>在 iOS 系统中，应用启动的过程大致可以分为以下几步：</p><ol><li><p>用户点击应用图标后，系统会启动 <code>Launchd</code> 进程。<code>Launchd</code> 通过查找应用的 <code>info.plist</code> 文件找到 <code>main</code> 函数所在的位置，开始执行 <code>main</code> 函数。</p></li><li><p>在 <code>main</code> 函数中，会执行 <code>UIApplicationMain</code> 函数。这个函数会创建应用代理对象（<code>AppDelegate</code>），创建主线程 <code>RunLoop</code>，以及设置 <code>UIApplication</code> 对象，并将 <code>UIApplication</code> 对象的代理设置为应用代理对象。</p></li><li><p><code>UIApplication</code> 对象在接收到 <code>didFinishLaunchingWithOptions</code> 事件后，进入事件循环。在这个过程中，系统初始化了 <code>UIApplication</code> 和 <code>AppDelegate</code>，然后触发 <code>UIApplicationDelegate</code> 的 <code>application:didFinishLaunchingWithOptions</code> 方法。</p></li><li><p>在 <code>AppDelegate</code> 的 <code>application:didFinishLaunchingWithOptions</code> 方法中，通常我们会加载并配置应用启动时需要的各种数据和状态，同时这里也会启动 <code>rootViewController</code>。系统会将设置的主 <code>window</code> 的 <code>rootViewController</code> 的 <code>view</code> 添加到 <code>window</code> 中，并且显示出来。</p></li><li><p>系统将启动画面逐渐淡出，显示应用主界面。</p></li><li><p>主 <code>RunLoop</code> 开始运行，开始接收并处理用户触摸及各种系统时间。</p></li></ol><p>至此，应用启动过程基本结束。剩下就是主 <code>RunLoop</code> 处理时间，等待接收用户的输入操作。</p></details><h3 id="❓了解的-uikit-结构" tabindex="-1"><a class="header-anchor" href="#❓了解的-uikit-结构" aria-hidden="true">#</a> ❓了解的 <code>UIKit</code> 结构</h3><details class="hint-container details"><summary>💡</summary><p>UIKit 这个框架提供了在 iOS 中开发图形化、事件驱动的应用所需要的所有基础工具和基础结构。以下是主要的组件：</p><ol><li><p>UIWindow: 一个 iOS 应用通常会有一个或多个 UIWindow，这是展示 UIViews 的地方，是 UIView 的最顶层容器。它通常与设备的屏幕一样大小。</p></li><li><p>UIView 和 UIViewController: UIView 是 iOS 中的基础组件，负责绘制和布局界面元素，处理与用户交互的事件。UIViewControllers 每个 UIKit 的对应一个 UIView，它管理着 UIView 的生命周期，负责处理用户交互和视图切换等逻辑。</p></li><li><p>控件： UIKit 提供了一组预封装的常见 UI 元素组件，如按钮（UIButton）、标签（UILabel）、滚动视图（UIScrollView）、表格视图（UITableView）、集合视图（UICollectionView）等。</p></li><li><p>图形和动画: UIKit 提供了一套强大的 2D 图形和动画框架，包括基础的画图 API、复杂的形状和路径、渐变、屏幕刷新和动画等。</p></li><li><p>文本处理: UIKit 提供了一套强大的文本处理和布局系统。不仅提供了基础的 UILabel 用于显示文本，还有 UITextField、UITextView 等用于文本输入，以及 NSLayoutManager 和 NSTextContainer 等高级 API 用于复杂的文本布局。</p></li><li><p>触摸事件处理: UIKit 提供了一套事件处理机制，包括触摸事件、手势识别等，非常方便地可以让我们对用户的交互作出响应。</p></li><li><p>响应者链： UIKit 针对 UI 事件提供了响应者链的机制，当一个事件产生后，通过响应者链，逐层寻找可以处理该事件的对象。比如触屏事件，先从最上层的 view 开始，如果该 view 不能处理，则逐层向上传递至其父 view，直到找到可以处理该事件的对象。</p></li><li><p>自动布局： 利用 UIKit 框架的自动布局系统，开发者可以创建灵活且响应的界面布局。开发者可以使用 AutoLayout 和 UIStackView 来布局界面。</p></li><li><p>CoreAnimation: UIKit 的绚丽动画效果就是 Core Animation 提供支持。我们可以通过他构建具有复杂视觉效果的动画，例如在两个视图状态之间平滑过渡，或者是在屏幕上移动、缩放、旋转视图。</p></li><li><p>Alert 和 Action Sheet: UIKit 提供了 UIAlertController 来显示警告框和动作表，以便在适当的时机提醒用户或由用户做出决定。</p></li></ol><p>除此之外，UIKit 还有导航和标签栏控制器、拾取视图、弹簧加载行为、刷新控件、Popover 视图等众多组件。</p></details><h3 id="❓uiscene-了解吗" tabindex="-1"><a class="header-anchor" href="#❓uiscene-了解吗" aria-hidden="true">#</a> ❓<code>UIScene</code> 了解吗</h3><details class="hint-container details"><summary>💡</summary><p><code>UIScene</code> 是在 iOS 13 中引入的一种新的应用生命周期模型，它提供了管理应用 UI 以及该 UI 如何响应系统和用户事件的更细粒度的方式。</p><p>在 iOS 13 以前，iOS 应用由单一的 UIWindow 实例进行管理，并且该 UIWindow 实例存在于整个应用的生命周期中。AppDelegate 要负责所有 UI 设置以及与应用生命周期相关的事件。</p><p>而 <code>UIScene</code> 则是对此进行了优化，每一个 <code>UIScene</code> 实例代表应用 UI 的一个单一实例。当应用在前台运行时，可以有多个 <code>UIScene</code> 实例，从而实现多窗口的多任务管理。例如在 iPadOS 上，用户可以开启多个窗口。</p><p>每个 <code>Scene</code> 由一个 <code>Scene Delegate</code> 来进行管理，各种 UI 设置以及和场景（Scene）生命周期相关的事件都由 <code>Scene Delegate</code> 来处理。就像原来 <code>AppDelegate</code> 处理应用级别的事件一样，<code>Scene Delegate</code> 负责处理和特定 <code>Scene</code> 相关的事件。只有当进行 App 级别的事件处理，譬如接收远程消息通知，处理后台下载任务，这些工作才会交给 <code>AppDelegate</code> 去完成。</p><p>这样的设计，使得在做一些 UI 设置以及响应生命周期事件时，更加的清晰和方便，同时也带来了更好的多任务管理能力。</p></details><blockquote><p><code>SceneDelegate</code> 详细说说</p></blockquote><details class="hint-container details"><summary>💡</summary><p>SceneDelegate 是从 iOS 13 开始引入的一个新的代理模型，用于处理和 UI Scene Session 相关的事件，并控制和管理与其关联的 Scene。</p><p>我们可以在 SceneDelegate 中处理以下一些事件：</p><ol><li><p><code>func scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions)</code> 方法：这个方法是在创建新的 scene 时被调用，相当于 AppDelegate 中的 <code>application:didFinishLaunchingWithOptions:</code> 方法。我们通常会在该方法中设置窗口和根视图控制器。</p></li><li><p><code>func sceneDidDisconnect(_ scene: UIScene)</code> 方法：当 scene 与 app 断开连接时候调用。发生在 scene 进入后台并且系统决定需要释放 scene 时。</p></li><li><p><code>func sceneDidBecomeActive(_ scene: UIScene)</code> 方法：当 scene 进入活跃状态或者进入前台时调用，对应的是 AppDelegate 中的 <code>applicationDidBecomeActive:</code> 方法。</p></li><li><p><code>func sceneWillResignActive(_ scene: UIScene)</code> 方法：当 scene 准备进入非活跃状态或者进入后台时调用，对应的是 AppDelegate 中的 <code>applicationWillResignActive:</code> 方法。</p></li><li><p><code>func sceneWillEnterForeground(_ scene: UIScene)</code> 方法：当 scene 从后台恢复到前台时调用，对应的是 AppDelegate 中的 <code>applicationWillEnterForeground:</code> 方法。</p></li><li><p><code>func sceneDidEnterBackground(_ scene: UIScene)</code> 方法：当 scene 进入后台时调用，对应的是 AppDelegate 中的 <code>applicationDidEnterBackground:</code> 方法。</p></li><li><p><code>func stateRestorationActivity(for scene: UIScene)</code> 方法: 应用状态恢复时调用的方法，用以保存应用的当前状态。</p></li></ol><p>上述方法基本涵盖了 Scene 的生命周期，可用于管理和响应与 Scene 相关的各种事件。</p></details><h3 id="❓applicationwillenterforeground-和-applicationdidbecomeactive-都会在哪些场景下被调用" tabindex="-1"><a class="header-anchor" href="#❓applicationwillenterforeground-和-applicationdidbecomeactive-都会在哪些场景下被调用" aria-hidden="true">#</a> ❓<code>applicationWillEnterForeground</code> 和 <code>applicationDidBecomeActive</code> 都会在哪些场景下被调用</h3><details class="hint-container details"><summary>💡</summary><p>这两个方法是iOS应用生命周期管理中非常重要的部分，他们的调用主要取决于应用的状态转换。下面是他们被调用的一些常见情况：</p><ol><li><p>用户通过主屏幕点击图标打开应用： 这种情况下首先调用 <code>applicationWillEnterForeground</code>，之后紧接着调用 <code>applicationDidBecomeActive</code>。</p></li><li><p>应用在后台，通过通知或者系统打开应用： 也是先调用 <code>applicationWillEnterForeground</code>，之后紧接着调用 <code>applicationDidBecomeActive</code>。</p></li><li><p>应用从后台切换到前台： 这种情况下，两个函数的调用顺序和之前一样，首先调用 <code>applicationWillEnterForeground</code>，之后紧接着调用 <code>applicationDidBecomeActive</code>。</p></li><li><p>应用内部弹出系统视图，例如电话，信息，分享等视图，视图消失后： 这个情况下只会调用 <code>applicationDidBecomeActive</code>，<code>applicationWillEnterForeground</code> 不会被调用，因为应用实际上并没有进入后台，只是暂时失去了焦点。</p></li></ol><p>综上所述，<code>applicationWillEnterForeground</code> 和 <code>applicationDidBecomeActive</code> 一般是成对出现的，但在一些特殊情况下（例如应用内部弹出系统视图），可能只有 <code>applicationDidBecomeActive</code> 被调用。</p></details><h3 id="❓uitableview-的-delegate-和-datasource-代理有什么区别" tabindex="-1"><a class="header-anchor" href="#❓uitableview-的-delegate-和-datasource-代理有什么区别" aria-hidden="true">#</a> ❓<code>UITableView</code> 的 <code>delegate</code> 和 <code>dataSource</code> 代理有什么区别</h3><details class="hint-container details"><summary>💡</summary><p><code>UITableView</code> 的 <code>delegate</code> 和 <code>dataSource</code> 是两个非常重要的组件，它们都是 <code>UITableView</code> 正常工作的必要条件，但作用是不同的。</p><p><code>dataSource</code> 主要是向 <code>UITableView</code> 提供数据，例如数据源中有多少个 section，每个 section 有多少行，以及每一行的具体内容等等。<code>dataSource</code> 必须实现下面两个方法：</p><ul><li><code>func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int</code>：设置每个 section 中的 row 数量。</li><li><code>func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell</code>：提供具体的 cell。</li></ul><p>这两个方法是 <code>UITableViewDataSource</code> 协议的必要方法，没有这两个方法，<code>UITableView</code> 就没办法正常工作。</p><p>而 <code>delegate</code> 主要是处理 <code>UITableView</code> 的视觉效果以及与用户的交互，例如设置 header 和 footer、设置 cell 的高度、处理 cell 的选择和取消选择等等。例如：</p><ul><li><code>func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -&gt; CGFloat</code>：设置 cell 的高度。</li><li><code>func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath)</code>：处理 cell 的选择事件。</li></ul><p>这些方法都不是必须的，不过如果我们想要更加细致地控制 <code>UITableView</code> 的外观和行为，就需要实现这些方法。</p><p>总的来说，<code>dataSource</code> 是设置和提供数据，<code>delegate</code> 是控制外观和处理用户交互。</p></details><h3 id="❓uicollectionview-自定义布局如何处理" tabindex="-1"><a class="header-anchor" href="#❓uicollectionview-自定义布局如何处理" aria-hidden="true">#</a> ❓<code>UICollectionView</code> 自定义布局如何处理</h3><details class="hint-container details"><summary>💡</summary><p>要自定义 <code>UICollectionView</code> 的布局，首先需要创建一个 <code>UICollectionViewLayout</code> 或 <code>UICollectionViewFlowLayout</code> 的子类，然后重写其中与布局相关的一些方法。</p><p>以下是一些最重要的需要重写的方法：</p><ul><li><p><code>prepare()</code>: 在这个方法中计算出所有 cell 和视图的位置。当布局被无效化并需要更新的时候，会首先调用该方法。</p></li><li><p><code>layoutAttributesForElements(in rect: CGRect) -&gt; [UICollectionViewLayoutAttributes]?</code>: 这个方法返回的是在给定矩形中所有 cell 和视图的布局属性。这个方法负责提供一个布局属性数组，数组中的数据表示了对应位置的 cell 的排布和样式。</p></li><li><p><code>layoutAttributesForItem(at indexPath: IndexPath) -&gt; UICollectionViewLayoutAttributes?</code>: 这个方法返回的是对应于路径的所有项目的布局属性，也就是在 collection view 中指定位置的 cell 的排布和样式。</p></li><li><p><code>collectionViewContentSize: CGSize</code>: 这个方法返回的是整个 collectionView 的内容的宽度和高度。collectionView 会使用这个尺寸来配置自己的内容大小，从而实现滚动。</p></li></ul><p>创建了自定义布局类之后，就可以在创建 <code>UICollectionView</code> 的时候，将这个布局类的对象作为参数传入 <code>UICollectionView</code> 的初始化方法中，这样创建出来的 <code>UICollectionView</code> 将会按照我们自定义的方式进行布局。</p></details><h3 id="❓uiviewcontroller-的生命周期" tabindex="-1"><a class="header-anchor" href="#❓uiviewcontroller-的生命周期" aria-hidden="true">#</a> ❓<code>UIViewController</code> 的生命周期</h3><details class="hint-container details"><summary>💡</summary><p><code>UIViewController</code> 的生命周期包含多个阶段，主要涉及到以下几个方法：</p><ol><li><p><code>loadView()</code>: 这个方法是用来创建或加载视图控制器的视图层次结构。是视图控制器生命周期的起始。大部分时间，我们不需要去重写或者直接调用它。</p></li><li><p><code>viewDidLoad()</code>: 这个方法会在视图控制器的视图被装载后调用。您可以在该方法中实现任何额外的初始化工作。</p></li><li><p><code>viewWillAppear(_:)</code>: 这个方法会在视图控制器的视图被添加到窗口并且即将显示出来的时候调用。</p></li><li><p><code>viewDidAppear(_:)</code>: 这个方法会在视图控制器的视图已经显示出来之后调用。</p></li><li><p><code>viewWillDisappear(_:)</code>: 这个方法会在视图控制器的视图即将从窗口中移除或者被覆盖而消失的时候调用。</p></li><li><p><code>viewDidDisappear(_:)</code>: 这个方法会在视图控制器的视图已经消失、被移除或覆盖的时候调用。</p></li></ol><p>这些方法主要用于处理视图和数据加载、更新、释放等相关工作，以及执行某些与动画和过渡相关的操作。通过在这些方法中添加自定义的代码，您可以改变应用的行为和性能。</p></details><h3 id="❓loadview-的作用" tabindex="-1"><a class="header-anchor" href="#❓loadview-的作用" aria-hidden="true">#</a> ❓<code>loadView</code> 的作用</h3><details class="hint-container details"><summary>💡</summary><p><code>loadView()</code> 是 UIViewController 的一个生命周期方法，它在访问控制器的 <code>view</code> 属性时，如果该属性当前为 <code>nil</code>，则会被系统自动调用。</p><p><code>loadView()</code> 用于创建并加载视图控制器的主视图（即 <code>self.view</code>）。通常情况下，我们并不需要重写这个方法，因为默认的实现能够处理大部分常规的初始化需求。比如，如果控制器在 Storyboard 中定义，那么 <code>loadView()</code> 会加载和设置来自 Storyboard 的视图。如果有一个同名的 nib 文件，它会加载和设置来自该 nib 文件的视图。</p><p>然而，在我们需要以编程方式创建视图，或者提供自定义的视图加载机制时，我们可以通过重写 <code>loadView()</code> 方法来实现。在重写的 <code>loadView()</code> 中，你需要手动创建一个 <code>UIView</code> 对象或其子类的实例，并赋值给控制器的 <code>view</code> 属性。</p><p>注意：</p><ul><li>当你重写 <code>loadView()</code> 方法时，不需要调用 <code>super</code>，并且在方法的最后要确保 <code>self.view</code> 不为 <code>nil</code>。</li><li>除非有特殊需求，否则不建议重写 <code>loadView()</code> 方法。对于大部分情况，我们可以在 <code>viewDidLoad()</code> 方法中做视图的初始化配置和其他设置，这更为常见。</li></ul></details><h3 id="❓没有使用-ib-时-也没有重写-loadview-这个-viewcontroller-view-如何创建的" tabindex="-1"><a class="header-anchor" href="#❓没有使用-ib-时-也没有重写-loadview-这个-viewcontroller-view-如何创建的" aria-hidden="true">#</a> ❓没有使用 <code>IB</code> 时，也没有重写<code> loadView()</code> 这个 <code>viewController.view</code> 如何创建的</h3><details class="hint-container details"><summary>💡</summary><p>如果没有使用 Interface Builder（IB）来创建和管理视图，并且也没有重写 <code>loadView()</code> 方法，那么在 <code>UIViewController</code> 的 <code>loadView()</code> 方法中会默认创建一个 <code>UIView</code> 实例，然后赋值给 <code>self.view</code>。</p><p>简单的说，<code>loadView()</code> 方法的默认实现会创建一个空的 <code>UIView</code> 实例。这就是为什么即使你没有使用 <code>IB</code> 并且没有重写 <code>loadView()</code> 方法，仍然可以在 <code>viewDidLoad()</code> 或者其他生命周期的方法中访问到 <code>self.view</code> 并进行一些例如添加子视图，修改背景色等操作。</p><p>总的来说，无论是使用 <code>IB</code> （storyboard 或 xib），还是重写 <code>loadView()</code> 来自行创建视图，还是直接采用默认的实现，<code>UIViewController</code> 都会确保当其视图被访问时有一个 <code>UIView</code> 的实例被创建并赋值给 <code>self.view</code>。</p></details><h3 id="❓在-init-方法里面设置背景颜色-会生效吗" tabindex="-1"><a class="header-anchor" href="#❓在-init-方法里面设置背景颜色-会生效吗" aria-hidden="true">#</a> ❓在 <code>init</code> 方法里面设置背景颜色，会生效吗</h3><details class="hint-container details"><summary>💡</summary><p>对于 <code>UIView</code> 来说，如果你在使用 <code>initWithFrame:</code> 初始化方法来创建视图，那么在 <code>init</code> 方法中设置背景色是生效的。但是如果你是在 <code>Interface Builder</code>（即<code>storyboard</code> 或者 <code>xib</code>）中创建的视图，这个时候初始化方法是 <code>initWithCoder:</code>，同时设置视图属性大多放在 <code>awakeFromNib</code> 方法中。</p><p>对于 <code>UIViewController</code> 来说，由于控制器的视图 <code>view</code> 在 <code>init</code> 方法调用时还没有被加载，所以在<code>init</code>方法里设置背景颜色是不会生效的。你需要在 <code>viewDidLoad</code> 或者 <code>loadView</code> 这样的方法之后设置，这个时候视图已经被初始化并加载完成了。</p><p>总的来说，设置背景颜色是否生效，取决于何时设置和何时初始化和加载视图，应确保在视图初始化和加载完成后设置颜色。</p></details><h3 id="❓自定义导航跳转如何实现" tabindex="-1"><a class="header-anchor" href="#❓自定义导航跳转如何实现" aria-hidden="true">#</a> ❓自定义导航跳转如何实现</h3><details class="hint-container details"><summary>💡</summary><p>自定义导航跳转主要涉及两点，自定义动画及自定义转场方式。下面是实现过程:</p><p>1.定义一个类遵循 <code>UIViewControllerAnimatedTransitioning</code> 协议，编写自定义的动画逻辑。</p><p>代码示例:</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">class</span> <span class="token class-name">CustomTransition</span><span class="token punctuation">:</span> <span class="token class-name">NSObject</span><span class="token punctuation">,</span> <span class="token class-name">UIViewControllerAnimatedTransitioning</span> <span class="token punctuation">{</span>
    <span class="token keyword">func</span> <span class="token function-definition function">transitionDuration</span><span class="token punctuation">(</span>using transitionContext<span class="token punctuation">:</span> <span class="token class-name">UIViewControllerContextTransitioning</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">TimeInterval</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">1.0</span> <span class="token comment">// 返回动画时长</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">func</span> <span class="token function-definition function">animateTransition</span><span class="token punctuation">(</span>using transitionContext<span class="token punctuation">:</span> <span class="token class-name">UIViewControllerContextTransitioning</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 这里编写你的动画逻辑</span>
        
        <span class="token comment">// 获取到待呈现的视图</span>
        <span class="token keyword">if</span> <span class="token keyword">let</span> toView <span class="token operator">=</span> transitionContext<span class="token punctuation">.</span><span class="token function">view</span><span class="token punctuation">(</span>forKey<span class="token punctuation">:</span> <span class="token punctuation">.</span>to<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 添加到容器视图中</span>
            transitionContext<span class="token punctuation">.</span>containerView<span class="token punctuation">.</span><span class="token function">addSubview</span><span class="token punctuation">(</span>toView<span class="token punctuation">)</span>
            
            <span class="token comment">// 编写动画逻辑, 以下是一个简单的淡入淡出动画</span>
            toView<span class="token punctuation">.</span>alpha <span class="token operator">=</span> <span class="token number">0.0</span>
            <span class="token class-name">UIView</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span>withDuration<span class="token punctuation">:</span> <span class="token function">transitionDuration</span><span class="token punctuation">(</span>using<span class="token punctuation">:</span> transitionContext<span class="token punctuation">)</span><span class="token punctuation">,</span> animations<span class="token punctuation">:</span> <span class="token punctuation">{</span> 
                toView<span class="token punctuation">.</span>alpha <span class="token operator">=</span> <span class="token number">1.0</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token omit keyword">_</span><span class="token punctuation">)</span> <span class="token keyword">in</span>
                <span class="token comment">// 动画结束时，一定要调用 completeTransition 方法</span>
                transitionContext<span class="token punctuation">.</span><span class="token function">completeTransition</span><span class="token punctuation">(</span><span class="token operator">!</span>transitionContext<span class="token punctuation">.</span>transitionWasCancelled<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>在视图控制器中指定转场代理，并在代理方法中返回自定义的转场动画对象。</li></ol><p>代码示例:</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">class</span> <span class="token class-name">ViewController</span><span class="token punctuation">:</span> <span class="token class-name">UIViewController</span><span class="token punctuation">,</span> <span class="token class-name">UINavigationControllerDelegate</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> customTransition <span class="token operator">=</span> <span class="token class-name">CustomTransition</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    <span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">viewDidLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">viewDidLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment">// 指定代理</span>
        navigationController<span class="token punctuation">.</span>delegate <span class="token operator">=</span> <span class="token keyword">self</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">func</span> <span class="token function-definition function">navigationController</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> navigationController<span class="token punctuation">:</span> <span class="token class-name">UINavigationController</span><span class="token punctuation">,</span>
                              animationControllerFor operation<span class="token punctuation">:</span> <span class="token class-name">UINavigationController</span><span class="token punctuation">.</span><span class="token class-name">Operation</span><span class="token punctuation">,</span>
                              from fromVC<span class="token punctuation">:</span> <span class="token class-name">UIViewController</span><span class="token punctuation">,</span>
                              to toVC<span class="token punctuation">:</span> <span class="token class-name">UIViewController</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">UIViewControllerAnimatedTransitioning</span><span class="token operator">?</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> customTransition
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：记住要在准备要使用自定义转场的控制器里指定代理，并返回你的自定义动画。</p><p>以上就实现了自定义导航栏跳转动画。</p></details><hr><h2 id="uiview" tabindex="-1"><a class="header-anchor" href="#uiview" aria-hidden="true">#</a> UIView</h2><h3 id="❓uiview-calayer-是什么关系" tabindex="-1"><a class="header-anchor" href="#❓uiview-calayer-是什么关系" aria-hidden="true">#</a> ❓<code>UIView</code> &amp; <code>CALayer</code> 是什么关系？</h3><details class="hint-container details"><summary>详情</summary><p>每个<code>UIView</code>都有一个对应的<code>CALayer</code>，称之为 <code>UIView</code> 的 backing layer（背部层）。<code>UIView</code> 和 <code>CALayer</code> 之间是互相关联的，<code>UIView</code> 负责处理触摸事件，而 <code>CALayer</code> 负责显示视图的内容。</p><ul><li><p><code>UIView</code>：视图的基类，负责处理用户交互（例如触摸事件），也负责管理子视图（包括添加、删除、遍历子视图）。可以使用 <code>UIView</code> 的子类（如<code>UILabel</code>，<code>UIButton</code>等）创建特定的用户界面，也可以创建自定义视图来绘制复杂的界面。</p></li><li><p><code>CALayer</code>：是核心动画库(<code>Core Animation</code>)中的类，它负责呈现视图的内容。<code>UIView</code> 将很多渲染任务委派给 <code>CALayer</code>，例如视图的边框、圆角、阴影、图片等都是由 <code>CALayer</code> 来绘制和渲染的。此外 <code>CALayer</code> 还负责处理动画效果。</p></li></ul></details><blockquote><p>为什么要这样设计？</p></blockquote><details class="hint-container details"><summary>详情</summary><p>这是由于iOS系统的历史原因。在早期的iOS版本中，只有 <code>CALayer</code>，并没有 <code>UIView</code>，所有的界面渲染和动画都需要通过手动控制 <code>CALayer</code> 来完成。</p><p>后来，苹果引入了 <code>UIView</code>，用以简化界面的创建和管理，并将一些低层的渲染和动画任务委派给 <code>CALayer</code>。</p><p>这样的设计使得开发者可以更高效地创建和管理用户界面，同时也保持了对底层渲染和动画的高级控制能力。</p></details><h3 id="❓uicontrol-vs-uiresponder" tabindex="-1"><a class="header-anchor" href="#❓uicontrol-vs-uiresponder" aria-hidden="true">#</a> ❓<code>UIControl</code> vs <code>UIResponder</code></h3><details class="hint-container details"><summary>💡</summary><p><code>UIControl</code> 和 <code>UIResponder</code> 都是继承自 <code>UIView</code>，是 UIKit 框架中重要的两个类，在处理用户交互和事件传递中有着重要的作用。主要有以下区别：</p><ol><li><p><code>UIControl</code> 是一种特殊类型的 <code>UIView</code>，它主要用于处理用户的交互事件，像按钮（<code>UIButton</code>）、开关（<code>UISwitch</code>）等都是 <code>UIControl</code> 的子类。它为用户交互定义了一组控制事件（比如 <code>touchUpInside</code>，表示手指在控件内部抬起），并提供了添加事件处理方法的接口（<code>addTarget:action:forControlEvents:</code>）。</p></li><li><p><code>UIResponder</code> 是处理和路由应用程序事件的基类，是 iOS 事件处理机制中的一个核心组成部分，比如触摸事件、摇动事件、远程控制事件等，都是通过 <code>UIResponder</code> 的实例进行处理和转发的。所有的 <code>UIView</code>、<code>UIViewController</code> 以及 <code>UIApplication</code> 都是 <code>UIResponder</code> 的子类，因此它们都有能力成为第一响应者（first responder）来处理应用程序事件。</p></li><li><p>所有的 <code>UIControl</code> 也是 <code>UIResponder</code> 的子类，一般 <code>UIControl</code> 处理好事件后就不会把它转发出去，而是截获事件。如果 <code>UIControl</code> 没有处理事件，事件才会沿着响应者链条（Responder Chain）向上传播，接着就由 <code>UIResponder</code> 领域的类（如 <code>UIView</code>、<code>UIViewController</code>）来处理事件。</p></li></ol><p>总的说，<code>UIControl</code> 是处理具有明确交互意图（例如按钮点击）的 UI 元素的类，而 <code>UIResponder</code> 是处理和传递应用程序事件的基类，是 iOS 事件处理框架的一部分。</p></details><h3 id="❓uibutton-继承链" tabindex="-1"><a class="header-anchor" href="#❓uibutton-继承链" aria-hidden="true">#</a> ❓<code>UIButton</code> 继承链</h3><details class="hint-container details"><summary>💡</summary><p><code>UIButton</code> 类属于 UIKit 框架，在其继承链中，更具体的类在前，更抽象的超类在后，继承链如下：</p><ul><li>UIButton</li><li>UIControl</li><li>UIView</li><li>UIResponder</li><li>NSObject</li></ul><p>其中，</p><ol><li><p><code>NSObject</code> 是所有 Objective-C 类的基类，提供了对象的基本行为特征和特性。</p></li><li><p><code>UIResponder</code> 是 iOS 事件传递体系中的一个重要组成部分，此类提供了一种机制来处理和路由在应用程序中发生的触摸事件、手势识别、远程控制等事件。</p></li><li><p><code>UIView</code> 是基本的展示视图和处理视图相关事件的类，几乎所有的 UI 元素都是直接或间接继承自 <code>UIView</code>，此类提供了一种机制以支持在其矩形区域内绘制、布局和处理事件。</p></li><li><p><code>UIControl</code> 是 <code>UIView</code> 的一个直接子类，是一些具有目标-动作机制的 UI 元素的基类，比如按钮(<code>UIButton</code>)、滑块(<code>UISlider</code>)等，能够响应用户的交互行为并向感兴趣的目标发送讯息。</p></li><li><p><code>UIButton</code> 是 <code>UIControl</code> 的一个子类，主要用来制作按钮。它在父类 <code>UIControl</code> 的基础上又添加了一些按钮特有的行为，比如按钮的标题、图片等。</p></li></ol><p>以上就是 <code>UIButton</code> 的类继承链。</p></details><h3 id="❓根据-uicontrol-实现-uibutton" tabindex="-1"><a class="header-anchor" href="#❓根据-uicontrol-实现-uibutton" aria-hidden="true">#</a> ❓根据 <code>UIControl</code> 实现 <code>UIButton</code></h3><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">protocol</span> <span class="token class-name">ButtonProtocol</span> <span class="token punctuation">{</span>
    <span class="token keyword">func</span> <span class="token function-definition function">setTitle</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> title<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">func</span> <span class="token function-definition function">setTitleColor</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> titleColor<span class="token punctuation">:</span> <span class="token class-name">UIColor</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">func</span> <span class="token function-definition function">setTitleEdgeInsets</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> edgeInsets<span class="token punctuation">:</span> <span class="token class-name">UIEdgeInsets</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">func</span> <span class="token function-definition function">setImage</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> image<span class="token punctuation">:</span> <span class="token class-name">UIImage</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">func</span> <span class="token function-definition function">setBackgroundImage</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> image<span class="token punctuation">:</span> <span class="token class-name">UIImage</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">func</span> <span class="token function-definition function">setImageEdgeInsets</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> edgeInsets<span class="token punctuation">:</span> <span class="token class-name">UIEdgeInsets</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">MyButton</span><span class="token punctuation">:</span> <span class="token class-name">UIControl</span><span class="token punctuation">,</span> <span class="token class-name">ButtonProtocol</span> <span class="token punctuation">{</span> 
    <span class="token comment">// todo</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>详情</summary><p>在实现 <code>UIButton</code> 的同时，我们不能忘记，<code>UIButton</code>本质上是一个视图（对象），因此它应该包含一些像视图、标签、图片视图等子视图。在您的实例中，看起来要求 <code>MyButton</code> 能够具有设置标题、标题颜色、标题边距、题图像、背景图像以及图像边距的能力。那么，带着这些需求，我们来实现一下：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">class</span> <span class="token class-name">MyButton</span><span class="token punctuation">:</span> <span class="token class-name">UIControl</span><span class="token punctuation">,</span> <span class="token class-name">ButtonProtocol</span> <span class="token punctuation">{</span>
    
    <span class="token keyword">let</span> titleLabel<span class="token punctuation">:</span> <span class="token class-name">UILabel</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> label <span class="token operator">=</span> <span class="token class-name">UILabel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        label<span class="token punctuation">.</span>textAlignment <span class="token operator">=</span> <span class="token punctuation">.</span>center
        <span class="token keyword">return</span> label
    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    <span class="token keyword">let</span> imageView<span class="token punctuation">:</span> <span class="token class-name">UIImageView</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> imageView <span class="token operator">=</span> <span class="token class-name">UIImageView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        imageView<span class="token punctuation">.</span>contentMode <span class="token operator">=</span> <span class="token punctuation">.</span>scaleAspectFit
        <span class="token keyword">return</span> imageView
    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    <span class="token keyword">let</span> backgroundImageView<span class="token punctuation">:</span> <span class="token class-name">UIImageView</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> imageView <span class="token operator">=</span> <span class="token class-name">UIImageView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        imageView<span class="token punctuation">.</span>contentMode <span class="token operator">=</span> <span class="token punctuation">.</span>scaleToFill
        <span class="token keyword">return</span> imageView
    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    <span class="token keyword">override</span> <span class="token keyword">init</span><span class="token punctuation">(</span>frame<span class="token punctuation">:</span> <span class="token class-name">CGRect</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>frame<span class="token punctuation">:</span> frame<span class="token punctuation">)</span>
        
        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">addSubview</span><span class="token punctuation">(</span>backgroundImageView<span class="token punctuation">)</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">addSubview</span><span class="token punctuation">(</span>imageView<span class="token punctuation">)</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">addSubview</span><span class="token punctuation">(</span>titleLabel<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">required</span> <span class="token keyword">init</span><span class="token operator">?</span><span class="token punctuation">(</span>coder<span class="token punctuation">:</span> <span class="token class-name">NSCoder</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>coder<span class="token punctuation">:</span> coder<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">layoutSubviews</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">layoutSubviews</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        
        backgroundImageView<span class="token punctuation">.</span>frame <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>bounds
    <span class="token punctuation">}</span>
    
    <span class="token keyword">func</span> <span class="token function-definition function">setTitle</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> title<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        titleLabel<span class="token punctuation">.</span>text <span class="token operator">=</span> title
    <span class="token punctuation">}</span>
    
    <span class="token keyword">func</span> <span class="token function-definition function">setTitleColor</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> titleColor<span class="token punctuation">:</span> <span class="token class-name">UIColor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        titleLabel<span class="token punctuation">.</span>textColor <span class="token operator">=</span> titleColor
    <span class="token punctuation">}</span>
    
    <span class="token keyword">func</span> <span class="token function-definition function">setTitleEdgeInsets</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> edgeInsets<span class="token punctuation">:</span> <span class="token class-name">UIEdgeInsets</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        titleLabel<span class="token punctuation">.</span>frame <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>bounds<span class="token punctuation">.</span><span class="token function">inset</span><span class="token punctuation">(</span>by<span class="token punctuation">:</span> edgeInsets<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">func</span> <span class="token function-definition function">setImage</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> image<span class="token punctuation">:</span> <span class="token class-name">UIImage</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        imageView<span class="token punctuation">.</span>image <span class="token operator">=</span> image
    <span class="token punctuation">}</span>
    
    <span class="token keyword">func</span> <span class="token function-definition function">setBackgroundImage</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> image<span class="token punctuation">:</span> <span class="token class-name">UIImage</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        backgroundImageView<span class="token punctuation">.</span>image <span class="token operator">=</span> image
    <span class="token punctuation">}</span>
    
    <span class="token keyword">func</span> <span class="token function-definition function">setImageEdgeInsets</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> edgeInsets<span class="token punctuation">:</span> <span class="token class-name">UIEdgeInsets</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        imageView<span class="token punctuation">.</span>frame <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>bounds<span class="token punctuation">.</span><span class="token function">inset</span><span class="token punctuation">(</span>by<span class="token punctuation">:</span> edgeInsets<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>为了处理背景图像，标题和图像，我们需要三个子视图：一个背景图像视图、一个图像视图和一个标签。</li><li><code>setTitleEdgeInsets</code> 和 <code>setImageEdgeInsets</code> 方法只需要调整 titleLabel 和 imageView 的 frame 即可。</li><li>别忘了在 <code>layoutSubviews()</code> 中设置 <code>backgroundImageView</code> 的 frame，以保证其总是充满整个视图。</li></ul><p>当然，请注意，“实现 <code>UIButton</code>”需要更多的特性和设置，例如处理高亮状态和禁用状态，添加点击事件等。这里仅仅是一个简单的示例，按照特定需求，可以进行进一步的扩展和完善。</p></details><hr><h2 id="布局" tabindex="-1"><a class="header-anchor" href="#布局" aria-hidden="true">#</a> 布局</h2><h3 id="❓viewwilllayoutsubview-的作用" tabindex="-1"><a class="header-anchor" href="#❓viewwilllayoutsubview-的作用" aria-hidden="true">#</a> ❓<code>viewWillLayoutSubView</code> 的作用</h3><details class="hint-container details"><summary>💡</summary><p><code>viewWillLayoutSubviews</code> 是 UIViewController 的一个生命周期方法，该方法在视图控制器的视图即将布局其子视图时被调用。这通常发生在视图的尺寸发生改变之后，例如设备的方向发生改变，或者视图被添加到父视图中并且父视图需要调整子视图的位置或大小。</p><p>在 <code>layoutSubviews</code> 之前调用 <code>viewWillLayoutSubviews</code>，因此这是在预计的布局之前，可以进行一些特定的设置或者变化。</p><p>注意，因为 <code>viewWillLayoutSubviews</code> 能被多次调用，因此需要避免在该方法中进行一些不必要的高开销计算或者更新操作。</p><p><code>viewWillLayoutSubviews</code> 的主要用途之一是提供了一个时机，允许您在更改子视图的大小或位置之前进行一些额外的配置，也可以在此方法中进行一些必要的布局更新。</p></details><h3 id="❓layoutsubviews-那些情况下会触发" tabindex="-1"><a class="header-anchor" href="#❓layoutsubviews-那些情况下会触发" aria-hidden="true">#</a> ❓<code>layoutSubviews</code> 那些情况下会触发</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>layoutSubviews</code> 在 iOS 的 UIView 的生命周期中，是负责布局及排版子视图的方法。</p></blockquote><ul><li>在初始化 <code>UIView</code> 并添加到界面上时，系统会自动调用 <code>layoutSubviews</code> 方法进行子视图的布局。</li><li>当 <code>UIView</code> 的 <code>bounds</code> 发生变化，如改变宽高、旋转设备时，系统会调用 <code>layoutSubviews</code>。</li><li>当直接调用 <code>UIView</code> 的 <code>setNeedsLayout</code>或者 <code>layoutIfNeeded</code> 方法时，系统会调用 <code>layoutSubviews</code>。 <ul><li><code>setNeedsLayout</code> 会标记当前视图被标记为需要重新布局，然后在接下来的更新周期中，调用 <code>layoutSubviews</code> 对标记进行重新布局</li><li><code>layoutIfNeeded</code> 则会立即对视图进行重新布局，通常在动画的 <code>block</code> 内使用</li></ul></li><li>当视图的某个子视图的 <code>frame</code> 被显式地修改，也会触发父视图的 <code>layoutSubviews</code>。</li><li>添加或者删除子视图的时候，也会触发父视图的 <code>layoutSubviews</code>。</li></ul></details><h3 id="❓drawrect-有使用过吗-调用时机-会有性能影响吗" tabindex="-1"><a class="header-anchor" href="#❓drawrect-有使用过吗-调用时机-会有性能影响吗" aria-hidden="true">#</a> ❓<code>drawRect</code> 有使用过吗，调用时机，会有性能影响吗</h3><details class="hint-container details"><summary>💡</summary><p><code>drawRect:</code> 是一个 <code>UIView</code> 类的方法，用于在视图的矩形区域进行绘制。如果你的自定义视图需要展示一些特殊的展示效果，比如绘制一些自定义的形状、渐变、阴影等，就可以重写这个方法完成这些绘制。</p><p>调用时机：</p><p><code>drawRect:</code> 方法并不是时时刻刻都在调用，它的调用时机主要是视图第一次加载和视图的内容需要重绘时。也就是说当 <code>UIView</code> 准备好进行绘制操作的时候，系统会自动调用 <code>drawRect:</code> 方法。视图渲染的过程中可能会遇到以下两个方面的原因需要调用 <code>drawRect:</code></p><ol><li>视图第一次出现在屏幕上时，会调用一次 <code>drawRect:</code> 方法进行视图的渲染。</li><li>调用了 <code>setNeedsDisplay</code> 或者 <code>setNeedsDisplayInRect:</code> 方法后，系统会在下一个绘制周期中调用 <code>drawRect:</code> 方法进行视图的重绘。</li></ol><p>性能影响：</p><p>由于 <code>drawRect:</code> 方法会占用大量 CPU 资源进行图形的绘制，因此过度使用或者不合理使用 <code>drawRect:</code> 方法会导致 CPU 使用率上升，从而影响应用的性能。为了避免性能问题，有以下几个注意事项：</p><ul><li>避免在 <code>drawRect:</code> 方法中进行复杂的计算或者耗时的操作，这会降低绘制的效率。</li><li>不要主动直接调用 <code>drawRect:</code>，而是应当通过 <code>setNeedsDisplay</code> 或 <code>setNeedsDisplayInRect:</code> 让系统来决定何时调用 <code>drawRect:</code>。</li><li>如果可能，尽量减少绘制的区域。你可以通过 <code>setNeedsDisplayInRect:</code> 只重绘视图中改变的那部分区域，而不是整个视图。</li><li>考虑使用 Core Animation 或者直接操作 CALayer，而不是使用 <code>drawRect:</code>，以提高性能。因为 Core Animation 运行在专门的绘图线程，而不是主线程上，所以它的性能要优于 <code>drawRect:</code>。</li><li>如果视图是静态的，即一旦被绘制就不会改变，那么可以使用 <code>shouldRasterize</code> 属性来缓存视图的绘制结果，以提高性能。</li></ul></details><h3 id="❓layoutifneeded-vs-setneedslayout" tabindex="-1"><a class="header-anchor" href="#❓layoutifneeded-vs-setneedslayout" aria-hidden="true">#</a> ❓<code>layoutIfNeeded</code> vs <code>setNeedsLayout</code></h3><details class="hint-container details"><summary>💡</summary><p><code>layoutIfNeeded</code> 和 <code>setNeedsLayout</code> 是 UIView 的两个方法，都涉及到视图的布局更新，但是使用场景和触发方式不同。</p><ul><li><p><code>setNeedsLayout</code>: 这个方法被调用后，并不会立即触发重新布局。它标记了视图的布局需要更新，然后在下一次视图更新周期（通常是下一次 run loop），系统会自动调用 <code>layoutSubviews</code> 方法来进行实际的布局更新。如果期间多次调用 <code>setNeedsLayout</code>，实际上 <code>layoutSubviews</code> 只会被调用一次。</p></li><li><p><code>layoutIfNeeded</code>: 这个方法则会立刻触发视图的布局更新，调用这个方法后，系统会立即执行布局更新，包括调用 <code>layoutSubviews</code> 方法。这个方法通常用于需要立即更新视图布局的情况，比如在 UIView 的动画块中。</p></li></ul><p>总的来说，<code>setNeedsLayout</code> 是标记需要重新布局，具体要等到下一个更新周期自动触发，而 <code>layoutIfNeeded</code> 则是立刻触发重新布局。</p></details><h3 id="❓autolayout-的原理-性能如何" tabindex="-1"><a class="header-anchor" href="#❓autolayout-的原理-性能如何" aria-hidden="true">#</a> ❓<code>AutoLayout</code> 的原理，性能如何</h3><details class="hint-container details"><summary>💡</summary><p><code>AutoLayout</code> 的原理：</p><p>AutoLayout 通过制定一组约束来描述用户界面中的一些布局关系和尺寸属性。这些约束代表了视图与其他视图的相对位置关系、视图自身的尺寸以及视图的尺寸和父视图之间的相对关系等等。然后使用数学算法计算出满足所有约束条件下视图的最优位置和大小。</p><p>当屏幕尺寸、视图层次、约束条件以及设备方向等条件改变时，系统可以自动的通过算法重新计算并调整视图的位置和尺寸。因此，AutoLayout 提供了强大的工具，让开发者能够设计出能在各种尺寸和条件下都能良好显示的界面。</p><p>性能：</p><p>使用 AutoLayout 可以省去很多手动计算和调整布局的工作，大大提高了开发效率，同样在处理各种设备尺寸和方向变化时，可以保持良好的界面显示。</p><p>但是，AutoLayout 的性能并不总是最佳的。因为满足约束条件需要通过数学计算，并且复杂的界面和大量的约束可能使得这个计算过程变得复杂和耗时，特别是在一些动态改变约束和布局的情况下。</p><p>总的来说，AutoLayout 是一个功能强大，使用方便的布局工具，适合大多数情况下使用。但如果面临一些复杂和高效能需求的界面，可能需要考虑其他的布局方式，比如手动布局或使用第三方布局库。</p></details><h3 id="❓masonry-的约束应该写在哪里" tabindex="-1"><a class="header-anchor" href="#❓masonry-的约束应该写在哪里" aria-hidden="true">#</a> ❓<code>Masonry</code> 的约束应该写在哪里</h3><details class="hint-container details"><summary>💡</summary><p><code>Masonry</code> 是一个轻量级的布局框架，采用链式编程的方式，让我们的 AutoLayout 使用变得更加简单。我们通常在初始化视图和更新视图布局的地方使用 <code>Masonry</code>。</p><p>在 UIKit 中，你可以把 <code>Masonry</code> 的约束写在以下地方：</p><ol><li><p>对于 <code>UIView</code>，你可以在初始化方法 <code>init</code> 或者 <code>initWithFrame:</code> 中设置约束。例如：</p><div class="language-objective-c line-numbers-mode" data-ext="objective-c"><pre class="language-objective-c"><code>- (instancetype)init {
    self = [super init];
    if (self) {
        [self setupViews];
        [self setupConstraints];
    }
    return self;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>setupViews</code> 方法中完成子视图的添加，在 <code>setupConstraints</code> 中设置 Masonry 的约束。</p></li><li><p>对于 <code>UIViewController</code>，你可以在 <code>viewDidLoad</code> 方法中设置视图约束。例如：</p><div class="language-objective-c line-numbers-mode" data-ext="objective-c"><pre class="language-objective-c"><code>- (void)viewDidLoad {
    [super viewDidLoad];
    [self setupViews];
    [self setupConstraints];
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>如果你的视图布局会在运行时动态改变，那可以在 <code>updateViewConstraints</code> 方法中更新约束。例如：</p><div class="language-objective-c line-numbers-mode" data-ext="objective-c"><pre class="language-objective-c"><code>- (void)updateViewConstraints {
    [super updateViewConstraints];
    // 更新 Masonry 的约束
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>不论在哪里设置约束，都必须确保在设置约束的时候，视图已经被添加到其父视图上，否则会导致约束无法正确设置。</p><p>总的来说，Masonry 的约束应该写在视图初始化或者布局更新的地方，确保视图已经被正确添加，并且在需要的时候可以更新约束。</p></details><h3 id="❓sizetofit、sizethatfits-了解吗" tabindex="-1"><a class="header-anchor" href="#❓sizetofit、sizethatfits-了解吗" aria-hidden="true">#</a> ❓<code>sizeToFit</code>、<code>sizeThatFits</code> 了解吗</h3><details class="hint-container details"><summary>💡</summary><p><code>sizeToFit</code> 和 <code>sizeThatFits</code> 是 UIKit 中 UIView 的两个方法，涉及到视图的尺寸调整。</p><ul><li><p><code>sizeToFit</code>：这是一个无参数的方法，调用这个方法会使得视图的 frame 变为能刚好包裹住它的子视图的大小。具体的行为依赖于视图的 <code>sizeThatFits:</code> 方法的实现。注意，这个方法并不会修改视图的位置，只会影响到视图的大小。</p></li><li><p><code>sizeThatFits:</code>：这个方法需要一个参数，表示期望的尺寸。然后这个方法返回一个适合视图及其子视图的大小。这个方法并不会改变视图的实际大小，需要调用者根据返回的大小来更新视图的 frame。</p></li></ul><p>一般来说，视图的默认行为是返回一个等于当前视图大小或者等于传入参数的值，具体取决于子视图的要求。如果你的自定义视图有特殊的需求，你可以重写 <code>sizeThatFits:</code> 方法来实现特定的尺寸调整行为。</p><p>总的来说，<code>sizeToFit</code> 和 <code>sizeThatFits:</code> 都是用来调整视图尺寸的方法，但具体的行为取决于具体视图的 <code>sizeThatFits:</code> 的实现。</p></details><h3 id="❓intrinsiccontentsize-使用过吗" tabindex="-1"><a class="header-anchor" href="#❓intrinsiccontentsize-使用过吗" aria-hidden="true">#</a> ❓<code>intrinsicContentSize</code> 使用过吗</h3><details class="hint-container details"><summary>💡</summary><p><code>intrinsicContentSize</code> 是<code>UIView</code>的一个属性，它表示一个视图的自然大小或者说内在大小。举例来说，对于一个UILabel，它的<code>intrinsicContentSize</code>就是刚好能包裹住它所包含的文本的大小。</p><p>这个属性在使用<code>AutoLayout</code>进行布局的时候非常有用。一些需要根据内容自适应大小的控件，比如UILabel、UIButton等，都可以通过设置<code>intrinsicContentSize</code>来告诉布局系统它们需要的空间大小。</p><p>你可以通过重写这个属性的getter方法来提供自定义的大小。需要注意的是，当视图的内在内容改变，可能会影响到<code>intrinsicContentSize</code>时，你需要调用<code>invalidateIntrinsicContentSize</code>方法来通知布局系统<code>intrinsicContentSize</code>发生了变化，这样布局系统就会在下一个布局循环中重新计算布局。</p><p>总的来说，<code>intrinsicContentSize</code>是在使用AutoLayout进行布局时，用于表示视图自适应内容大小的一个重要属性。</p></details><hr><h2 id="渲染" tabindex="-1"><a class="header-anchor" href="#渲染" aria-hidden="true">#</a> 渲染</h2><h3 id="❓ios-中界面渲染机制" tabindex="-1"><a class="header-anchor" href="#❓ios-中界面渲染机制" aria-hidden="true">#</a> ❓<code>iOS</code> 中界面渲染机制？</h3><details class="hint-container details"><summary>💡</summary><p>iOS 的界面渲染机制涉及到的主要技术包括 Core Animation 和 OpenGL/ Metal。</p><ol><li><p>Core Animation：是 Mac OS X 和 iOS 中用于实现图形渲染和动画的一种技术。它主要通过硬件加速来实现高效的绘图和动画效果。在 Core Animation 中，所有的界面元素都是呈现在一个叫做图层（layer）的概念上。每个 UIView 都有一个 CALayer 实例作为 backing layer，UIView 的内容和样式都是通过这个图层来显示的。</p></li><li><p>OpenGL/ Metal：OpenGL ES 是一个专门用于嵌入式系统（如智能手机或游戏机等）的 2D/3D 绘图 API，而 Metal 则是 Apple 的一种低层次、高效率的图形和计算技术。这些技术都是直接运行在 GPU 上，用于处理复杂且性能要求较高的图形计算和渲染。</p></li></ol><p>在绘制一个 UIView 时，系统将按照以下步骤进行：</p><ol><li>创建一个 bitmap context。</li><li>UIView 会调用 <code>-drawRect:</code> 方法进行绘制操作（如果这个 UIView 重写了这个方法的话）。</li><li>接下来会处理这个 UIView 的 subviews，将每个 subview 的内容递归的绘制到 bitmap context 中。</li><li>bitmap context 上的内容将会被复制到 backing layer 的寄宿图片上。</li><li>backing layer 和其他的图层一起被提交到 GPU 进行渲染。最后的渲染结果将会显示在屏幕上。</li></ol><p>这个过程在每一帧都会执行，通常帧率为 60FPS，即每秒 60 次。如果在一帧的时间内（大约 16.7ms）无法完成渲染，就会出现丢帧的现象，导致用户界面卡顿。</p><p>所以在开发中，我们要尽可能地优化界面渲染，比如避免使用复杂的视图层级、避免在 <code>-drawRect:</code> 中做复杂的绘制操作、尽量使用合适的图层属性而不是自定义绘制等等，以提高界面的流畅度。</p></details><h3 id="❓ui-的渲染步骤" tabindex="-1"><a class="header-anchor" href="#❓ui-的渲染步骤" aria-hidden="true">#</a> ❓<code>UI</code> 的渲染步骤？</h3><details class="hint-container details"><summary>💡</summary><p>在 iOS 中，UI 的渲染步骤主要包括以下几个阶段：</p><ol><li><p><strong>布局阶段</strong>：在这个阶段，UIKit 会计算出所有的视图的大小和位置。这个过程涉及到 AutoLayout 和 Core Animation，视图的位置和大小会被更新，同时所有的视图约束也会得到满足。对于 UIView，这一步涉及到了 <code>layoutSubviews</code> 方法。</p></li><li><p><strong>显示阶段</strong>：在这个阶段，所有需要的视图都会被调用 drawRect: 方法进行绘制。这里会调用 Core Graphics 来进行实际的绘制操作，在视图的 layer 上生成一张 bitmap 图片代表这个视图。</p></li><li><p><strong>准备阶段</strong>：这一步主要是将所有的 Core Animation 动画提交给渲染服务器。</p></li><li><p><strong>渲染阶段</strong>：</p><ul><li>这一步会进行事务的提交，所有的 layer tree 结构会在主线程中拷贝一份到渲染线程。</li><li>然后，渲染线程会将视图的 layer tree 全部转换为 OpenGL 命令或者 Metal 命令，最后将其提交给 GPU。</li><li>GPU 会进行实际的绘制操作，包括光栅化、混合等步骤，最后将渲染结果显示到屏幕上。</li></ul></li></ol><p>在整个渲染过程中，对 CPU 和 GPU 的使用是需要权衡的。对于由 CPU 进行的布局和显示工作，如果过于复杂，可能导致帧率下降，因为 CPU 无法在每帧刷新的时间限制内完成所有工作。对于 GPU 来说，过于复杂的渲染操作也可能导致性能问题，比如复杂的渲染效果或者过深的视图层次都可能导致 GPU 无法及时完成渲染。</p><p>总结一下，UIKit 布局 =&gt; Display =&gt; Prepare =&gt; Core Animation 提交事务 =&gt; GPU 渲染。整个过程如果在 16.7ms 之内完成，就能保证界面动画的流畅性。如果超过这个时间，就会出现丢帧卡顿现象。所以在开发中要尽量优化布局和渲染过程，避免过于复杂的操作。</p></details><h3 id="❓视图打包流程" tabindex="-1"><a class="header-anchor" href="#❓视图打包流程" aria-hidden="true">#</a> ❓视图打包流程？</h3><details class="hint-container details"><summary>💡</summary><p>“视图打包流程”一词也许不太常见，但它通常被用来解释在UIKit和Core Animation框架中试图在屏幕上显示视图时的一系列操作。流程主要包括以下步骤：</p><ol><li><p><strong>布局</strong>：首先，应用程序需要确定视图的位置和大小。它可以使用Auto Layout约束，或者开发人员可以通过编写代码来手动设置frame和bounds值。</p></li><li><p><strong>绘图</strong>：在布局完成后，接下来就需要将视图绘制到bitmap中。这是通过调用每个view的drawRect方法完成的。此步骤产生一个bitmap，之后将被赋值给视图的layer。</p></li><li><p><strong>合成</strong>：一旦所有的视图都被绘制到bitmap中，下一步就是将这些单独的视图合成为一张完整的、包含所有视图的图像。这个步骤称为图层树的合成，由Core Animation的图层树管理。</p></li><li><p><strong>渲染</strong>：最后，完整的图像将会被发送到渲染服务器进行渲染。此过程会在GPU上进行，将bitmap图像转化为可以在设备屏幕上显示的像素。完成这个步骤后，用户就可以在设备上看到这个视图了。</p></li></ol><p>这个过程在每一次屏幕刷新时，比如60FPS的情况下的每一帧，都会执行一次。如果任何步骤无法在一帧的时间里完成，这就会导致屏幕刷新速度下降，用户可能会看到卡顿或者掉帧现象。因此，对布局和绘制代码进行优化以减少他们的执行时间是非常重要的。</p></details><h3 id="❓cpu-和-gpu-是如何工作-为什么要双缓冲区" tabindex="-1"><a class="header-anchor" href="#❓cpu-和-gpu-是如何工作-为什么要双缓冲区" aria-hidden="true">#</a> ❓<code>CPU</code> 和 <code>GPU</code> 是如何工作，为什么要双缓冲区</h3><details class="hint-container details"><summary>💡</summary><p>首先，让我们了解一下CPU和GPU的基本功能：</p><ol><li><p><strong>CPU（Central Processing Unit）</strong>：CPU是计算机的主处理器，能够执行大部分的运算和逻辑操作。CPU通常负责彼此之间有依赖关系，需要按顺序执行的任务。</p></li><li><p><strong>GPU（Graphics Processing Unit）</strong>：GPU是专门用于处理图形的处理器。GPU通常执行大量并行操作，例如渲染及光线追踪等。</p></li></ol><p>然后，我们再来理解一下双缓冲区：</p><p>双缓冲相当于有两块画布，一块在前台展示，一块在后台绘制。当后台绘制完成后，将后台画布交换到前台，这样就能够确保每次屏幕刷新时，画面都是完整的，从而提高了渲染的效率和质量。</p><p>在CPU和GPU的工作过程中，一种常见的模式是CPU负责准备渲染命令及所有相关的数据（如纹理、顶点数据等），然后将这些数据发送给GPU。再由GPU执行实际的渲染操作——这包括图形的光栅化（把几何图形转换为像素格式）、纹理映射、混合等。</p><p>这就是为什么需要双缓冲区的原因，一块缓冲区用于存储CPU的输出（即GPU的输入），另一块用于存储GPU的输出（即下一帧的图像）。这样的设计让CPU和GPU可以并行工作：当GPU在处理当前帧的渲染时，CPU可以同时准备下一帧的数据。</p></details><h3 id="❓什么是屏幕渲染" tabindex="-1"><a class="header-anchor" href="#❓什么是屏幕渲染" aria-hidden="true">#</a> ❓什么是屏幕渲染？</h3><details class="hint-container details"><summary>💡</summary><table><thead><tr><th>渲染类型</th><th>说明</th></tr></thead><tbody><tr><td>CPU 渲染</td><td>简单视图 CPU 渲染可能高于 GPU (不需要创建缓冲区和上下文切换)</td></tr><tr><td>GPU 渲染</td><td>GPU 浮点运算能力强于 CPU，所以 GPU 渲染效率高于 CPU</td></tr></tbody></table><ul><li><strong>屏幕渲染</strong>(On-Screen Rendering) : 在当前屏幕的缓冲区进行渲染。优点：不需要创建新的缓存，也不需要进行上下文切换，性能较好；缺点：缓存大小受限制，无法进行复杂的操作。</li><li><strong>离屏渲染</strong>(Off-Screen Rendering) : GPU 在当前屏幕外，新开辟了一个缓冲区进行图片的渲染和合成。渲染完成之后再放入当前屏幕的缓冲区。这个过程需要 CPU 调度，将任务分配给 GPU 进行渲染然后再将渲染结果返回，需要进行上下文切换和内存读写等操作，对性能影响较大。</li></ul></details><h3 id="❓哪些场景可以触发离屏渲染" tabindex="-1"><a class="header-anchor" href="#❓哪些场景可以触发离屏渲染" aria-hidden="true">#</a> ❓哪些场景可以触发离屏渲染？</h3><details class="hint-container details"><summary>💡</summary><p>离屏渲染的意思是，图形或文字无法在当前屏幕缓冲区完成渲染，需要额外创建一个图形缓冲区进行操作，完成后再加载到当前屏幕缓冲区显示。</p><p><code>iOS</code> 以下几种场景会触发离屏渲染：</p><ul><li><p>使用阴影效果：如果给 <code>UIView</code> 添加阴影效果，会触发离屏渲染。如果可以的话，使用 <code>shadowPath</code> 来指定阴影路径，可以避免离屏渲染。</p><blockquote><p><code>layer.shadowXXX</code></p></blockquote></li><li><p>使用圆角效果：对 <code>UIView</code> 的图层进行圆角裁剪(<code>cornerRadius</code>)时，如果同时设置了 <code>masksToBounds</code> 也会触发离屏渲染。</p><blockquote><p><code>layer.masksToBounds = true &amp; layer.cornerRadius &gt; 0</code></p></blockquote></li><li><p>使用遮罩(mask)：<code>CALayer</code> 的 <code>mask</code> 属性可以设置遮罩，给视图层添加遮罩也会触发离屏渲染。</p><blockquote><p><code>layer.mask</code></p></blockquote></li><li><p>使用光栅化：<code>shouldRasterize</code> 属性可以将图层缓存为位图并在 <code>GPU</code> 中重用，但这同时也会触发离屏渲染。</p><blockquote><p><code>layer.shouldRasterize = true</code></p></blockquote></li><li><p>抗锯齿：设置视图的 <code>layer</code> 的 <code>allowsEdgeAntialiasing</code> 属性为 <code>true</code> 会触发离屏渲染。因为抗锯齿需要对视图的边缘像素进行额外的计算和混合，这些操作不能在当前屏幕的缓冲区完成，因此需要离屏渲染。所以，在大部分情况下，如果不是对视觉效果有非常高要求，通常不推荐开启抗锯齿，因为这会增加GPU压力，降低性能。</p><blockquote><p><code>layer.allowsEdgeAntialiasing = true</code></p></blockquote></li><li><p>不透明度：设置视图的 <code>alpha</code> 值本身不会触发离屏渲染。但是有一种场景需要注意，那就是对有子视图的视图设置 <code>alpha</code> 值，并且该视图的 <code>opaque</code> 属性为 <code>true</code> 时，可能会造成额外的离屏渲染。这是因为系统需要先单独绘制这个视图和它的子视图到一个临时的缓冲区，然后将这个临时的缓冲区以指定的 <code>alpha</code> 值（也就是透明度）绘制到屏幕上。因此，为了避免这种离屏渲染，当你需要设置视图的<code>alpha</code> 值时，应该设置它的 <code>opaque</code> 属性为 <code>false</code>。</p><blockquote><p><code>opacity &amp; opaque = true</code></p></blockquote></li></ul><p>离屏渲染对系统资源消耗比较大，因为它需要创建新的缓冲区，进行上下文切换，最后再把缓冲区的内容载入到屏幕缓冲区。如果在一个视图中使用过多的离屏渲染，可能会导致性能问题，所以在开发过程中需要尽量避免触发离屏渲染。</p></details><hr><h2 id="图片" tabindex="-1"><a class="header-anchor" href="#图片" aria-hidden="true">#</a> 图片</h2><h3 id="❓imagename-vs-imagewithcontentsoffile" tabindex="-1"><a class="header-anchor" href="#❓imagename-vs-imagewithcontentsoffile" aria-hidden="true">#</a> ❓<code>imageName</code> vs <code>imageWithContentsOfFile</code></h3><details class="hint-container details"><summary>💡</summary><p><code>UIImage</code> 的 <code>imageName:</code> 和 <code>imageWithContentsOfFile:</code> 是两种不同的方法，用于从应用的bundle中加载图片。这两个方法在使用上有许多区别。</p><ul><li><p><code>imageName:</code> 方法是用于从应用的主bundle中加载图片的，它会自动根据设备的屏幕类型（比如，Retina屏幕）来选择合适的图片（比如，自动选择@2x和@3x的图片）。这个方法也会自动地对加载的图片进行缓存，所以如果你使用该方法多次加载同一张图片，实际上只会加载一次，剩下的调用会直接从缓存中获取图片。这就意味着这个方法在加载大量重复图片时，处理速度会很快。</p></li><li><p><code>imageWithContentsOfFile:</code> 方法则是直接从指定的文件路径中加载图片，它并不会根据屏幕类型来自动选择图片，也不会对加载的图片进行缓存。意味着每次调用这个方法时，系统都会从磁盘中读取图片数据，这可能会花费更多的时间。如果你想要加载一次性使用并且不需要缓存的大图片，这个方法可能会更适合。</p></li></ul><p>总的来说，<code>imageName:</code> 更适合用来加载经常使用的小图片，而 <code>imageWithContentsOfFile:</code> 则更适合加载一次性使用的大图片。</p></details><h3 id="❓多个相同的图片-会重复加载吗" tabindex="-1"><a class="header-anchor" href="#❓多个相同的图片-会重复加载吗" aria-hidden="true">#</a> ❓多个相同的图片，会重复加载吗</h3><details class="hint-container details"><summary>💡</summary><p>如果你使用<code>UIImage</code>的<code>init(named:)</code>或<code>imageNamed:</code>方法来创建一个图片对象，这个方法会先在缓存中查找是否已经存在相同的图片。如果缓存中存在，那么就会直接从缓存中返回，而不会重新加载。因此，这个方法在加载相同图片时不需要加载多次，会直接从缓存中读取，性能更好。</p><p>但是，如果你使用<code>UIImage</code>的<code>init(contentsOfFile:)</code>或<code>imageWithContentsOfFile:</code>方法来加载图片，那么每次调用都会从文件中重新读取，即使在前面已经加载过同一个文件的图片。这是因为这种方法不会使用系统的图片缓存。</p><p>因此，如果你有多个相同的图片需要加载，且这些图片会频繁使用，那么推荐使用<code>init(named:)</code>或<code>imageNamed:</code>方法，利用系统的缓存机制，避免重复加载图片，提升性能。如果你的图片仅用一次，或者图片文件非常大，不适合放入缓存，那么可以考虑使用<code>init(contentsOfFile:)</code>或<code>imageWithContentsOfFile:</code>方法。</p></details><h3 id="❓如何高性能的给-uiimageview-加圆角" tabindex="-1"><a class="header-anchor" href="#❓如何高性能的给-uiimageview-加圆角" aria-hidden="true">#</a> ❓如何高性能的给 <code>UIImageView</code> 加圆角</h3><details class="hint-container details"><summary>💡</summary><p>给UIImageView添加圆角有多种方式，但并非所有方法都是高效的。一些常见的方式可能会引入性能问题，例如直接修改视图的.layer.cornerRadius属性，因为这会导致离屏渲染，影响到性能。</p><p>以下是一种高效的给UIImageView添加圆角的方法，该方法使用了Core Graphics框架：</p><ol><li><p>首先，确定好圆角半径。</p></li><li><p>创建一个CGRect，其尺寸与UIImageView的frame匹配。</p></li><li><p>创建一个CGMutablePath，并将该路径添加到一个CAShapeLayer。</p></li><li><p>将这个CAShapeLayer设置为UIImageView的遮罩层。</p></li></ol><p>以下是Swift代码的例子：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> imageView <span class="token operator">=</span> <span class="token class-name">UIImageView</span><span class="token punctuation">(</span>image<span class="token punctuation">:</span> <span class="token class-name">UIImage</span><span class="token punctuation">(</span>named<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;example&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> radius<span class="token punctuation">:</span> <span class="token class-name">CGFloat</span> <span class="token operator">=</span> <span class="token number">10.0</span>

<span class="token keyword">let</span> rect <span class="token operator">=</span> <span class="token class-name">CGRect</span><span class="token punctuation">(</span>origin<span class="token punctuation">:</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> size<span class="token punctuation">:</span> imageView<span class="token punctuation">.</span>frame<span class="token punctuation">.</span>size<span class="token punctuation">)</span>
<span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token class-name">UIBezierPath</span><span class="token punctuation">(</span>roundedRect<span class="token punctuation">:</span> rect<span class="token punctuation">,</span> cornerRadius<span class="token punctuation">:</span> radius<span class="token punctuation">)</span>

<span class="token keyword">let</span> maskLayer <span class="token operator">=</span> <span class="token class-name">CAShapeLayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
maskLayer<span class="token punctuation">.</span>path <span class="token operator">=</span> path<span class="token punctuation">.</span>cgPath

imageView<span class="token punctuation">.</span>layer<span class="token punctuation">.</span>mask <span class="token operator">=</span> maskLayer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方式不会导致离屏渲染，只会在合成阶段发生，因此比直接修改视图的 <code>.layer.cornerRadius</code> 属性更为高效。</p></details><h3 id="❓uitableview-中的图片加载逻辑" tabindex="-1"><a class="header-anchor" href="#❓uitableview-中的图片加载逻辑" aria-hidden="true">#</a> ❓<code>UITableView</code> 中的图片加载逻辑</h3><details class="hint-container details"><summary>💡</summary><p>在<code>UITableView</code>中加载图片是一个常见的需求，但如果处理不当，可能会导致性能问题。以下是一种标准的、高效的图片加载逻辑：</p><ol><li><p><strong>异步获取</strong>：图片获取过程需要在后台线程中进行，避免阻塞主线程。对于网络图片，可以使用如SDWebImage等优秀的图片加载库来进行异步图片下载和缓存。</p></li><li><p><strong>复用Cell</strong>：在<code>UITableView</code>中，由于Cell的复用机制，在<code>tableView(_:cellForRowAt:)</code>方法中设置图片时，必须确保你设置的图片是当前IndexPath的图片。</p></li><li><p><strong>占位图</strong>：在加载图片时，先显示一个占位图，等图片加载完成后再替换。这样能够避免出现空白。</p></li><li><p><strong>取消无效加载</strong>：在复用Cell的情况下，由于滚动速度快，当前行已经滚出屏幕，但此时图片可能刚下载好，这时候如果还进行赋值，就会出现图片错位。所以我们需要对图片的设置增加有效性验证，验证当前Cell对应的IndexPath是否已经变化。</p></li></ol><p>例如，使用SDWebImage在Swift中实现如下：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">tableView</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> tableView<span class="token punctuation">:</span> <span class="token class-name">UITableView</span><span class="token punctuation">,</span> cellForRowAt indexPath<span class="token punctuation">:</span> <span class="token class-name">IndexPath</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">UITableViewCell</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> cell <span class="token operator">=</span> tableView<span class="token punctuation">.</span><span class="token function">dequeueReusableCell</span><span class="token punctuation">(</span>withIdentifier<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;CellId&quot;</span></span><span class="token punctuation">,</span> <span class="token keyword">for</span><span class="token punctuation">:</span> indexPath<span class="token punctuation">)</span> <span class="token keyword">as</span><span class="token operator">!</span> <span class="token class-name">CustomCell</span>
    
    <span class="token keyword">let</span> imageUrl <span class="token operator">=</span> imageUrls<span class="token punctuation">[</span>indexPath<span class="token punctuation">.</span>row<span class="token punctuation">]</span> <span class="token comment">// imageUrls是放置图片URL的数组</span>
    cell<span class="token punctuation">.</span>imageView<span class="token punctuation">.</span><span class="token function">sd_setImage</span><span class="token punctuation">(</span>with<span class="token punctuation">:</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> imageUrl<span class="token punctuation">)</span><span class="token punctuation">,</span> placeholderImage<span class="token punctuation">:</span> <span class="token class-name">UIImage</span><span class="token punctuation">(</span>named<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;placeholder&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    
    <span class="token keyword">return</span> cell
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：这种方式适用于图片数量不是太多（比如几百张以内）的情况。如果你的表格视图需要显示大量的图片，你可能需要实现更复杂的图片管理方案，例如预加载、图片解压缩、离屏渲染优化等。</p></details><h3 id="❓bitmap-的结构" tabindex="-1"><a class="header-anchor" href="#❓bitmap-的结构" aria-hidden="true">#</a> ❓<code>bitmap</code> 的结构</h3><details class="hint-container details"><summary>💡</summary><p>位图（Bitmap）是一种将图像根据每个像素点分别存储和表示的方式。位图由许多称为像素的矩阵组成，每个像素表示一个点的颜色。</p><p>一个Bitmap的基本组成结构包括：</p><ol><li>位图文件头（Bitmap File Header）：包含位图文件的类型、大小和处理方式的信息。</li><li>位图信息头（Bitmap Information Header）：包含位图的尺寸、颜色、压缩方式等图像的详细信息。</li><li>颜色表（Color Table）：包含整个图像可能使用的所有颜色信息。</li><li>像素数据（Pixel Data）：真正的位图数据，记录了位图中每一个像素的颜色信息。</li></ol><p>我们是按位图文件头、位图信息头、颜色表的顺序来一一存储的，而像素数据中每个像素的总位数决定了图像可以显示的颜色数目，也被称为“色深”（Color depth）。例如色深为24的图像（也就是24位图像），每个像素用24位存储，可以显示大约1,677万种颜色。</p><p>Bitmap有着良好的图像效果和兼容性，但与矢量图形相比，其缺点是文件相对较大，且如果将位图进行放大操作，可能会出现失真和马赛克现象。</p></details><h3 id="❓图片是什么时候解码的-如何优化" tabindex="-1"><a class="header-anchor" href="#❓图片是什么时候解码的-如何优化" aria-hidden="true">#</a> ❓图片是什么时候解码的，如何优化</h3><details class="hint-container details"><summary>💡</summary><p>在iOS中，当图片被显示在屏幕上时，图片的解码操作通常是在渲染前由<code>GPU</code>进行的。然后，解码后的位图像素被存储在内存中，用于显示。此过程可能会对性能产生影响，尤其是在滚动动画或切换动画等场景中。</p><p>如果希望优化图片解码，有一种常用的方法是对图片进行预解码。预解码是在主线程渲染前，提前在后台线程将图片解码，而不是等待<code>GPU</code> 在显示的时候进行解码。在其进行解码的过程中，CPU的压力会提高，但同时可以降低GPU负载，避免在渲染过程中进行解码导致的帧数下降。</p><p>在Objective-C和Swift中，可以通过使用Core Graphics 的API来对图片进行预解码。具体过程是使用<code>CGImage</code>创建一个<code>CGBitmapContext</code>，然后将图片绘制到这个context中。这样，当图片第一次显示在屏幕上时，就无需再进行解码操作。</p><p>预解码的代码可能如下（Swift）：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">predecode</span><span class="token punctuation">(</span>image originalImage<span class="token punctuation">:</span> <span class="token class-name">UIImage</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">UIImage</span><span class="token operator">?</span> <span class="token punctuation">{</span>
    <span class="token class-name">UIGraphicsBeginImageContextWithOptions</span><span class="token punctuation">(</span>originalImage<span class="token punctuation">.</span>size<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> originalImage<span class="token punctuation">.</span>scale<span class="token punctuation">)</span>
    <span class="token keyword">guard</span> <span class="token keyword">let</span> context <span class="token operator">=</span> <span class="token class-name">UIGraphicsGetCurrentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token nil constant">nil</span> <span class="token punctuation">}</span>
    originalImage<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>at<span class="token punctuation">:</span> <span class="token punctuation">.</span>zero<span class="token punctuation">)</span>
    <span class="token keyword">let</span> decodedImage <span class="token operator">=</span> <span class="token class-name">UIGraphicsGetImageFromCurrentImageContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token class-name">UIGraphicsEndImageContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> decodedImage
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于预解码会增加CPU压力和内存消耗，所以需要在合适的时机进行，比如在后台线程，用户滚动列表的滑动减速或者停止的时候，或者在图片将要显示之前的闲暇时间。务必要避免在用户滑动列表的过程中进行预解码，因为这个时候进行预解码可能会导致卡顿。另外，过多的预解码也可能导致内存暴涨，所以需要权衡当下的需求和设备性能。</p></details><h3 id="❓图片渲染怎么优化" tabindex="-1"><a class="header-anchor" href="#❓图片渲染怎么优化" aria-hidden="true">#</a> ❓图片渲染怎么优化</h3><details class="hint-container details"><summary>💡</summary><p>优化图片渲染是一门科学，下面有几点常见的优化技巧：</p><ol><li><p><strong>图片大小适配</strong>：尽量保持加载的图片大小接近于它在设备屏幕上的显示大小。如果一个很小的<code>UIImageView</code>需要显示一个非常大的图片，那么这张图片在显示之前需要被缩放。如果图片实际尺寸过大，会导致额外的内存使用和解压缩成本。</p></li><li><p><strong>图片预解码</strong>：图片在渲染到屏幕之前，需要被解码成位图。这个操作会在图片第一次显示时进行，并且可能会产生一定的性能消耗。可以通过预解码（在后台线程提前进行解码）的方式把这个消耗提前。</p></li><li><p><strong>使用正确的图片格式</strong>：不同的图片格式有不同的解压缩性能。例如，对于静态图片，PNG和JPEG是常见的格式。通常，JPEG格式的图片解压缩速度会比PNG 快，但是PNG对透明度的支持更好。</p></li><li><p><strong>避免透明像素</strong>：如果一张图片包含透明像素，那么在混合像素时GPU负担会更重。如果你的图片不需要透明度，最好选择不带alpha通道的图片格式，如JPG。</p></li><li><p><strong>后台线程加载和准备图片</strong>：为了避免阻塞主线程，一定要在后台线程进行图片的加载、解压缩和其他准备工作。</p></li><li><p><strong>利用图片缓存</strong>：频繁地从磁盘加载图像是一种昂贵的操作。使用图片缓存可以避免频繁地加载同一张图片。</p></li><li><p><strong>合理设置图片分辨率</strong>：@2x 和 @3x 的图片分辨率分别是原始尺寸的2倍和3倍，根据设备屏幕的特性选择合理的图片分辨率，避免不必要的内存消耗。</p></li></ol><p>以上的一些诀窍可以根据具体情况灵活运用，优化图片的加载和渲染。</p></details><h3 id="❓图片怎么显示的-以及图片缓冲区" tabindex="-1"><a class="header-anchor" href="#❓图片怎么显示的-以及图片缓冲区" aria-hidden="true">#</a> ❓图片怎么显示的，以及图片缓冲区</h3><details class="hint-container details"><summary>💡</summary><p>图片在屏幕上显示的流程主要经过以下步骤：</p><ol><li><p><strong>加载</strong>：首先从磁盘或网络上将二进制数据加载入内存，这些二进制数据描述了图像信息。</p></li><li><p><strong>解码</strong>：加载完毕后，图像会被解码成位图（bitmap）。位图是一种非常详细的矩阵，其中每个单元（像素）记录了在对应位置的颜色信息。因此，位图的大小通常比原始的图像文件要大。</p></li><li><p><strong>渲染</strong>：渲染图片就是将位图中的每个像素翻译成屏幕上的每个点，这个过程通常由GPU（图形处理器）完成。</p></li></ol><p>至于图片缓冲区，通常我们会通过一些图像库（如SDWebImage）的帮助，将常用图片保存在内存中以备快速访问。这就是所谓的图片缓冲区，也叫做图片缓存。</p><p>图片缓存的目的是提高性能和减少网络或磁盘I/O的使用。当应用程序需要显示一张图片时，它首先查看缓存，如果缓存中有这张图片，就直接用缓存中的图片，避免了从网络或磁盘上加载。如果缓存中没有，就必须从网络或磁盘加载，加载后的图片会被保存到缓存中，以便下次使用。</p><p>请注意，任何缓存策略都需要考虑内存使用和过期策略。缓存太多图片会消耗大量内存，可能影响应用程序的性能或触发内存警告。同时，缓存中的图片可能会过时，应定期清除不再需要的图片。</p></details><h3 id="❓如何用-uiimageview-显示超大分辨率的图-如何支持缩放" tabindex="-1"><a class="header-anchor" href="#❓如何用-uiimageview-显示超大分辨率的图-如何支持缩放" aria-hidden="true">#</a> ❓如何用 <code>UIImageView</code> 显示超大分辨率的图，如何支持缩放</h3><details class="hint-container details"><summary>💡</summary><p><code>UIKit</code> 提供了一个叫做 <code>UIScrollView</code> 的组件，它支持在iOS设备上进行滚动和缩放操作。如果我们希望显示一张大图并支持缩放，应该把 <code>UIImageView</code> 作为 <code>UIScrollView</code> 的子视图。以下是一个简单的例子：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">class</span> <span class="token class-name">ViewController</span><span class="token punctuation">:</span> <span class="token class-name">UIViewController</span><span class="token punctuation">,</span> <span class="token class-name">UIScrollViewDelegate</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> imageView<span class="token punctuation">:</span> <span class="token class-name">UIImageView</span><span class="token operator">!</span>
    <span class="token keyword">var</span> scrollView<span class="token punctuation">:</span> <span class="token class-name">UIScrollView</span><span class="token operator">!</span>

    <span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">viewDidLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">viewDidLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token comment">// 创建一个 UIScrollView 实例</span>
        scrollView <span class="token operator">=</span> <span class="token class-name">UIScrollView</span><span class="token punctuation">(</span>frame<span class="token punctuation">:</span> view<span class="token punctuation">.</span>bounds<span class="token punctuation">)</span>
        <span class="token comment">// 设定 zoom 缩放的最小\\最大倍数</span>
        scrollView<span class="token punctuation">.</span>minimumZoomScale <span class="token operator">=</span> <span class="token number">1.0</span>
        scrollView<span class="token punctuation">.</span>maximumZoomScale <span class="token operator">=</span> <span class="token number">6.0</span>

        <span class="token comment">// 加载一张大图(up to you)</span>
        <span class="token keyword">let</span> image <span class="token operator">=</span> <span class="token class-name">UIImage</span><span class="token punctuation">(</span>named<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;LargeImageName&quot;</span></span><span class="token punctuation">)</span>    
        imageView <span class="token operator">=</span> <span class="token class-name">UIImageView</span><span class="token punctuation">(</span>image<span class="token punctuation">:</span> image<span class="token punctuation">)</span>
        imageView<span class="token punctuation">.</span>frame <span class="token operator">=</span> <span class="token class-name">CGRect</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> image<span class="token operator">?</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span>width <span class="token operator">??</span> <span class="token number">0</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> image<span class="token operator">?</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span>height <span class="token operator">??</span> <span class="token number">0</span><span class="token punctuation">)</span>
        
        <span class="token comment">//将 ImageView 添加到 ScrollView 中 </span>
        scrollView<span class="token punctuation">.</span><span class="token function">addSubview</span><span class="token punctuation">(</span>imageView<span class="token punctuation">)</span>
        scrollView<span class="token punctuation">.</span>contentSize <span class="token operator">=</span> imageView<span class="token punctuation">.</span>bounds<span class="token punctuation">.</span>size
        
        <span class="token comment">//设置代理</span>
        scrollView<span class="token punctuation">.</span>delegate <span class="token operator">=</span> <span class="token keyword">self</span>

        <span class="token comment">//添加 ScrollView 到主视图中</span>
        view<span class="token punctuation">.</span><span class="token function">addSubview</span><span class="token punctuation">(</span>scrollView<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">func</span> <span class="token function-definition function">viewForZooming</span><span class="token punctuation">(</span><span class="token keyword">in</span> scrollView<span class="token punctuation">:</span> <span class="token class-name">UIScrollView</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">UIView</span><span class="token operator">?</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> imageView
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在以上代码中，在启动的时候我们初始化一个 UIScrollView 并设定其最大和最小缩放比例。然后，我们加载那张大图，创建UIImageView实例并把它放到UIScrollView的视图中。在用户使用手势进行缩放操作的时候，UIScrollView就会通知代理（delegate）来进行缩放操作。在这种情况下，代理就是我们这个 ViewController 实例。</p><p>然后，我们需要实现 UIScrollViewDelegate方法 viewForZooming(in:)，当 UIScrollView需要知道应该缩放或滚动哪个视图的时候，就会调用这个方法。在这个方法中我们返回 UIImageView。这样，用户就可以通过平移、捏合手势来滚动和缩放图片了。</p><p>这个方法虽然在大部分情况下可以工作，但是对于极其大的图片还是可能有内存问题。如需处理这种情况，可能需要使用像 CATiledLayer 这样的技术，它可以分块渲染视图，而不是一次性渲染整个大图。但这将会涉及更多复杂的编程技术。</p></details><h3 id="❓如何将一张内存极大的图片可以像地图一样的加载出来" tabindex="-1"><a class="header-anchor" href="#❓如何将一张内存极大的图片可以像地图一样的加载出来" aria-hidden="true">#</a> ❓如何将一张内存极大的图片可以像地图一样的加载出来</h3><details class="hint-container details"><summary>💡</summary><p>处理极大图片（比如说地图）时，加载整张大图到内存通常是不可行的，因为将会占用太大内存，而手机设备的内存是有限的。为了处理这个问题，通常的做法是分块加载和显示图片——只把当前需要显示在屏幕上的那一部分加载到内存。当用户滚动或缩放图片时，就加载新的部分，同时释放不再需要的部分。这就是所谓的 &quot;切片&quot;（tiling）技术。</p><p>在iOS中，你可以使用<code>CATiledLayer</code>来实现图片的切片加载。<code>CATiledLayer</code>是一种特殊的<code>CALayer</code>，它将内容分成多个小的矩形块或&quot;切片&quot;，并且只在需要的时候绘制这些切片。当提供内容时，你只需画出指定的矩形区域即可，其它区域则由Core Animation自动处理。此外，<code>CATiledLayer</code>甚至支持多级别的细节，这使得你可以非常容易地实现复杂的地图或图片浏览器功能。</p><p>要注意的是，<code>CATiledLayer</code>的使用相对复杂，它需要你自己管理图片资源并根据需要进行绘制。不过，也有许多库（比如MapKit）或者教程可以帮助你开始。</p><p>另外，一些图片浏览器库，如FastImageCache，也可以处理大图，它实现了自己的切片和缓存机制。</p><p>无论你选择哪种方式，都应注意内存管理，并合理地在需要的时候清理不再需要的资源。</p></details><hr><h2 id="动画" tabindex="-1"><a class="header-anchor" href="#动画" aria-hidden="true">#</a> 动画</h2><h3 id="❓uikit-animation-vs-core-animation" tabindex="-1"><a class="header-anchor" href="#❓uikit-animation-vs-core-animation" aria-hidden="true">#</a> ❓<code>UIKit Animation</code> vs <code>Core Animation</code></h3><details class="hint-container details"><summary>💡</summary><p><code>UIKit Animation</code> 和 <code>Core Animation</code> 都是iOS框架的一部分，用于动画效果，但他们的主要用途和使用的方式是不同的。</p><p><strong>UIKit Animation</strong>: UIKit Animation 是在一个更高的抽象层进行编程操作。您可以简单的使用 UIView 类的动画方法，如 <code>UIView.animate(withDuration:animations:)</code>，轻松实现许多动画，如移动、旋转、改变透明度、改变颜色等。以下是一个简单的例子，将一个视图在2秒内从屏幕左边移到右边：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token class-name">UIView</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span>withDuration<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    view<span class="token punctuation">.</span>frame<span class="token punctuation">.</span>origin<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>view<span class="token punctuation">.</span>frame<span class="token punctuation">.</span>width <span class="token operator">-</span> view<span class="token punctuation">.</span>frame<span class="token punctuation">.</span>width
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>UIKit动画编写简单，且支持很多常见效果。但如果需要更复杂的动画效果，可能就需要使用CoreAnimation了。</p><p><strong>Core Animation</strong>: Core Animation提供了更底层和更强大的动画控制。与UIKit动画相比，它可以实现更复杂的动画，如复杂的转换，3D效果，关键帧动画等。例如，以下是一个使用CoreAnimation创建关键帧动画的代码：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token comment">// 创建一个CAKeyframeAnimation实例</span>
<span class="token keyword">let</span> animation <span class="token operator">=</span> <span class="token class-name">CAKeyframeAnimation</span><span class="token punctuation">(</span>keyPath<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;position&quot;</span></span><span class="token punctuation">)</span>

<span class="token comment">//设置关键帧</span>
animation<span class="token punctuation">.</span>values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">NSValue</span><span class="token punctuation">(</span>cgPoint<span class="token punctuation">:</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token class-name">NSValue</span><span class="token punctuation">(</span>cgPoint<span class="token punctuation">:</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token class-name">NSValue</span><span class="token punctuation">(</span>cgPoint<span class="token punctuation">:</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token comment">// 动画时间</span>
animation<span class="token punctuation">.</span>duration <span class="token operator">=</span> <span class="token number">2</span>

<span class="token comment">// 将动画添加到视图层</span>
view<span class="token punctuation">.</span>layer<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>animation<span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个动画会使视图在2秒内沿着预定的路径移动.</p><p>总的来说，对于大多数简单场景，UIKit动画已经足够用了。但是对于复杂动画，或者需要更精确地控制动画时序和动画过程的情况，CoreAnimation会是一个更好的选择。</p></details><h3 id="❓uikit-animation-vs-ui-dynamics" tabindex="-1"><a class="header-anchor" href="#❓uikit-animation-vs-ui-dynamics" aria-hidden="true">#</a> ❓<code>UIKit Animation</code> vs <code>UI Dynamics</code></h3><details class="hint-container details"><summary>💡</summary><p><code>UIKit Animation</code>和<code>UI Dynamics</code>都是在UIKit框架中创建动画的两种主要技术，但它们的使用场景和工作原理是不一样的。</p><p><strong>UIKit Animation</strong> UIKit Animation主要用于创建简单，直观和以时间为基础的动画。例如，如果你想在2秒内移动一个视图从A点到B点或改变视图的大小，颜色等，那么UIKit动画就非常适合。此外，它提供的API也相对简单，轻松上手。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token class-name">UIView</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span>withDuration<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    view<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token punctuation">.</span>blue
    view<span class="token punctuation">.</span>frame<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token class-name">CGSize</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上的动画会在1秒内改变视图的背景颜色和大小。</p><p><strong>UI Dynamics</strong> 另一方面，UI Dynamics提供了一种创建物理基础的模拟动画的方法。这意味着你可以为视图创建如弹力，碰撞，重力这样的物理特性的动画。当你希望你的视图的动画看起来“感觉像现实世界中的物体那样移动”，那么UI Dynamics是你的好选择。</p><p>例如，下面是一个创建重力行为的代码片段：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> gravity <span class="token operator">=</span> <span class="token class-name">UIGravityBehavior</span><span class="token punctuation">(</span>items<span class="token punctuation">:</span> <span class="token punctuation">[</span>myView<span class="token punctuation">]</span><span class="token punctuation">)</span>
animator <span class="token operator">=</span> <span class="token class-name">UIDynamicAnimator</span><span class="token punctuation">(</span>referenceView<span class="token punctuation">:</span> view<span class="token punctuation">)</span>
animator<span class="token punctuation">.</span><span class="token function">addBehavior</span><span class="token punctuation">(</span>gravity<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在以上的例子中，我们创建了一个<code>UIGravityBehavior</code> ，并将其添加到<code>UIDynamicAnimator</code>中，myView视图会根据重力方向进行动画模拟。</p><p>总的来说，如果你正在寻找创建物理模拟动画，UI Dynamics是一个非常强大的工具。如果只是需要基本的时间驱动动画，UIKit Animation就已经足够了。</p></details><h3 id="❓隐式动画-vs-显示动画" tabindex="-1"><a class="header-anchor" href="#❓隐式动画-vs-显示动画" aria-hidden="true">#</a> ❓隐式动画 vs 显示动画</h3><details class="hint-container details"><summary>💡</summary><p>隐式动画和显示动画是在Core Animation框架中用来描述动画类型的两个术语。</p><p><strong>隐式动画</strong> 在Core Animation中，隐式动画是默认的动画类型。当修改CALayer的可动画属性时，系统会自动创建并运行动画——这就是所谓的隐式动画。例如，我们可以简单地修改一个图层的位置或背景颜色，Core Animation会自动为这个改变创建并应用动画：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code>layer<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在上面的代码示例中，图层的位置会以动画的形式移动到新位置，而不是立即跳到那里。</p><p><strong>显示动画</strong> 与隐式动画相比，显示动画需要明确地创建一个CAAnimation对象，设置它的属性，然后将它添加到图层。显示动画给了开发者对动画行为更精细的控制，包括动画的时间线和动画的进度曲线等。例如，以下代码展示了如何创建一个显示动画来修改图层的位置：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> animation <span class="token operator">=</span> <span class="token class-name">CABasicAnimation</span><span class="token punctuation">(</span>keyPath<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;position&quot;</span></span><span class="token punctuation">)</span>
animation<span class="token punctuation">.</span>fromValue <span class="token operator">=</span> <span class="token class-name">NSValue</span><span class="token punctuation">(</span>cgPoint<span class="token punctuation">:</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
animation<span class="token punctuation">.</span>toValue <span class="token operator">=</span> <span class="token class-name">NSValue</span><span class="token punctuation">(</span>cgPoint<span class="token punctuation">:</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
animation<span class="token punctuation">.</span>duration <span class="token operator">=</span> <span class="token number">1</span>
layer<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>animation<span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个动画会在1秒内将图层的位置从(100, 100)移动到(200, 200)。</p><p>总的来说，隐式动画适用于简单和常规的动画，而显示动画则适用于需要更复杂和定制的动画效果的情况。</p></details><h3 id="❓做一些基于-calayer-的动画时-有时需要设置-layer-的锚点来配合动画-需要注意什么" tabindex="-1"><a class="header-anchor" href="#❓做一些基于-calayer-的动画时-有时需要设置-layer-的锚点来配合动画-需要注意什么" aria-hidden="true">#</a> ❓做一些基于 <code>CALayer</code> 的动画时，有时需要设置 <code>layer</code> 的锚点来配合动画，需要注意什么</h3><details class="hint-container details"><summary>💡</summary><p>CALayer的锚点或<code>anchorPoint</code>属性决定了图层的哪一点会被放在<code>position</code>所指的位置，也就是图层的旋转，缩放等变换动画都是围绕这个点进行的。其默认值为(0.5, 0.5)，代表图层的中心点。</p><p>当我们需要修改锚点时，需要注意以下几点：</p><ol><li><p><strong>位置变化</strong>：锚点的改变会导致图层的位置移动，因为系统会自动将图层的anchorPoint放到图层的position所指的位置。因此，当你改变锚点时，可能会看到图层“跳跃”到新位置。如果你不希望图层移动，那么就需要在改变anchorPoint后，相应地调整图层的position。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code>layer<span class="token punctuation">.</span>anchorPoint <span class="token operator">=</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span>  
layer<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>布局影响</strong>：如果有基于图层的<code>Auto Layout</code>约束，改变<code>anchorPoint</code>可能会破坏这些约束。</p></li><li><p><strong>动画影响</strong>：由于图层的旋转，缩放等变化动画都是围绕<code>anchorPoint</code>进行的，修改此点也会影响这些动画的表现。</p></li><li><p><strong>几何形状</strong>：需要注意的是，<code>anchorPoint</code>的值的范围是在[0,1]之间，表示在图层的大小中的相对位置，而不是具体的像素点。</p></li></ol><p>总的来说，在修改图层的<code>anchorPoint</code>时，最佳做法是首先考虑将会产生哪些影响，然后适当调整图层的位置或者其他属性，以符合你的期待。</p></details><h3 id="❓core-animation-的实现原理" tabindex="-1"><a class="header-anchor" href="#❓core-animation-的实现原理" aria-hidden="true">#</a> ❓<code>Core Animation</code> 的实现原理</h3><details class="hint-container details"><summary>💡</summary><p>Core Animation的实现原理非常复杂，但基本概念并不难理解。</p><p>在iOS的绘图体系中，每个UIView都对应的有一个CALayer对象（称为 backing layer或层），UIView负责处理用户的交互，而CALayer负责处理内容的绘制和动画。实际上，当你移动、旋转或改变UIView的其他属性时，你实际上是在操作它对应的CALayer。</p><p>Core Animation的工作原理基于一个重要的假设：像素在一帧到下一帧之间不会改变。为了提高性能，Core Animation使用了一种称为“图层树”的数据结构。图层树是由多个CALayer对象组成的层次结构，每个CALayer都包含一个位图，该图包含了其对应的UIView的内容，你的所有UIView的内容在内存中都有一份映射，这就是它的位图。当一个动画开始时，Core Animation会在动画的每一帧利用之前的位图，并应用变换矩阵，生成动画过程中的每一帧的图像，然后发送到GPU进行渲染。</p><p>Core Animation还使用了许多优化技术来提高性能，例如硬件加速，这是因为GPU在位图合成和插值计算上非常擅长；后台线程渲染，这允许CPU在动画执行时继续进行其他工作。</p><p>总的来说，Core Animation的实现原理主要基于图层树，位图和GPU硬件加速。所有的动画，并不是实时计算和渲染的，而是预先生成好的位图，通过GPU渲染出动画效果，所以能够高效且流畅地运行。</p></details><h3 id="❓core-animation-实现交互效果-比如让动画播放一半-点击让它停止" tabindex="-1"><a class="header-anchor" href="#❓core-animation-实现交互效果-比如让动画播放一半-点击让它停止" aria-hidden="true">#</a> ❓<code>Core Animation</code> 实现交互效果(比如让动画播放一半, 点击让它停止)</h3><details class="hint-container details"><summary>💡</summary><p>要使用Core Animation来实现交互（如在动画过程中点击停止），我们需要访问和控制当前正在进行的动画。以下是一个示例，说明了如何使用CAAnimation和CALayer的presentationLayer属性来暂停和恢复动画：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">var</span> isPaused <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token comment">// 用于追踪动画是否已暂停</span>

<span class="token keyword">func</span> <span class="token function-definition function">toggleAnimation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> layer <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>myView<span class="token punctuation">.</span>layer
    <span class="token keyword">if</span> isPaused <span class="token punctuation">{</span>
        <span class="token comment">// 恢复动画</span>
        <span class="token keyword">let</span> pausedTime <span class="token operator">=</span> layer<span class="token punctuation">.</span>timeOffset
        layer<span class="token punctuation">.</span>speed <span class="token operator">=</span> <span class="token number">1.0</span>
        layer<span class="token punctuation">.</span>timeOffset <span class="token operator">=</span> <span class="token number">0.0</span>
        layer<span class="token punctuation">.</span>beginTime <span class="token operator">=</span> <span class="token number">0.0</span>
        <span class="token keyword">let</span> timeSincePause <span class="token operator">=</span> layer<span class="token punctuation">.</span><span class="token function">convertTime</span><span class="token punctuation">(</span><span class="token class-name">CACurrentMediaTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> from<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span> <span class="token operator">-</span> pausedTime
        layer<span class="token punctuation">.</span>beginTime <span class="token operator">=</span> timeSincePause
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 暂停动画</span>
        <span class="token keyword">let</span> pausedTime <span class="token operator">=</span> layer<span class="token punctuation">.</span><span class="token function">convertTime</span><span class="token punctuation">(</span><span class="token class-name">CACurrentMediaTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> from<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span>
        layer<span class="token punctuation">.</span>speed <span class="token operator">=</span> <span class="token number">0.0</span>
        layer<span class="token punctuation">.</span>timeOffset <span class="token operator">=</span> pausedTime
    <span class="token punctuation">}</span>
    isPaused <span class="token operator">=</span> <span class="token operator">!</span>isPaused
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，我们使用了CALayer的timeOffset和speed属性来暂停和恢复动画。当speed为0时，动画将停止；将timeOffset设置为当前的媒体时间将“定格”动画在当前帧。要恢复动画，我们将speed重置为1，并调整beginTime以跳过我们暂停时的时间。</p><p>要在动画进行时点击停止，你只需要在相应的手势识别器或touch事件处理方法中调用此toggleAnimation()方法即可。</p></details><hr><h2 id="事件分发" tabindex="-1"><a class="header-anchor" href="#事件分发" aria-hidden="true">#</a> 事件分发</h2><h3 id="❓响应者链条-一个视图不响应的原因" tabindex="-1"><a class="header-anchor" href="#❓响应者链条-一个视图不响应的原因" aria-hidden="true">#</a> ❓响应者链条，一个视图不响应的原因</h3><details class="hint-container details"><summary>💡</summary><p>响应者链条（Responder Chain）是 iOS 中用来处理界面的 touch、motion、键盘事件的机制。每个事件有一个接收者，叫做第一响应者 (First Responder)，由 UIApplication 管理。如果该对象不能处理这个事件，那么它会沿着响应者链向上查找可以处理这个事件的响应者。</p><p>一个 UIView 可能在以下情形中无法响应事件：</p><ol><li><code>userInteractionEnabled</code> 属性被设置为 <code>false</code>。默认情况下，所有 UIView 对象的 <code>userInteractionEnabled</code> 属性为 <code>true</code>。但是如果手动设置为 <code>false</code>，这个视图和它的所有子视图都不能再响应用户的操作。</li><li>视图隐藏或者透明度极低。视图的 <code>hidden</code> 属性设为 <code>YES</code> 或者 <code>alpha</code> 的值小于 0.01，这个视图除非成为第一响应者，否则对事件无响应。</li><li>视图被其它视图遮挡。如果视图 A 被视图 B 完全或者部分遮挡，并且覆盖部分位于用户点击的位置，那么这个事件将被视图 B 捕获。</li><li>视图超出超视图 bounds。当视图自身超出其父视图的区域范围，超出部分不再响应事件。</li><li>视图不在视图层级中。如果视图还未被添加（或被移除）到视图层级中，那么它将不能响应事件。</li></ol></details><h3 id="❓用户点击屏幕上按钮-整个过程讲一下" tabindex="-1"><a class="header-anchor" href="#❓用户点击屏幕上按钮-整个过程讲一下" aria-hidden="true">#</a> ❓用户点击屏幕上按钮，整个过程讲一下</h3><details class="hint-container details"><summary>💡</summary><p>iOS 系统用户点击屏幕上的按钮大致过程如下：</p><ul><li><p>当用户触摸屏幕时，硬件会将触摸事件转化为一个或一系列的 <code>UITouch</code> 对象，并将它们与一次特定的事件(<code>UIEvent</code>对象)关联起来。系统会将触摸事件派发给对应的 <code>UIApplication</code> 对象。</p></li><li><p><code>UIApplication</code> 对象接收到触摸事件后，会将事件传递给合适的 <code>UIWindow</code> 对象。<code>UIWindow</code> 对象再将其分发给正在显示的、并且能够响应事件的 <code>UIView</code> 对象。</p></li><li><p>如果此 <code>UIView</code> 对象就是我们所点击的视图(如：按钮 <code>UIButton</code> 对象)，那么此按钮会接收到此点击事件。</p></li><li><p><code>UIButton</code> 对象接收到手势事件后，便会根据事件类型来调用对应的方法。</p></li><li><p>若 <code>UIButton</code> 对象存在 <code>UIControl</code> 事件（比如 <code>TouchUpInside</code>）并且挂接有对应的 Action（函数方法），那么系统就会执行这个 Action。</p></li></ul></details><h3 id="❓事件响应链-event-responder-chain-这个详细的讲讲" tabindex="-1"><a class="header-anchor" href="#❓事件响应链-event-responder-chain-这个详细的讲讲" aria-hidden="true">#</a> ❓事件响应链（Event Responder Chain） 这个详细的讲讲</h3><details class="hint-container details"><summary>💡</summary><p><code>Event Responder Chain</code> 事件响应链 : 是指当某一个事件发生，如触摸事件、系统事件等，这个事件会从一个对象传递到另一个对象的链式机制。</p><p>当手指触摸屏幕时，<code>UIKit</code> 会创建一个包含了触摸的所有信息的事件对象，并会将该事件对象发送给视图层级中最前面的视图对象，即被触摸的视图。 如果该视图不能处理该事件，那系统就会将事件传递给它的上一级视图，也就是它的 <code>superview</code>； 如果上级视图也不能处理，那就接着向上传递，直到传递给窗口，再接着传递给 <code>UIApplication</code>，最后传递给 <code>UIApplication</code> 的代理。</p><p>这样从一个对象向另一个对象传递的链式过程就是事件响应链。</p><p>详细的事件传递流程如下：</p><ul><li><p>如果一个视图是用户交互禁用的（<code>userInteractionEnabled = false</code>），或是隐藏的（<code>hidden = true</code>），或者是透明的(<code>alpha = 0</code>), 那么这个视图和他的子视图就无法成为第一响应者，也就接收不到任何事件。</p></li><li><p>如果当前视图无法处理接收到的事件或者消息，那么它会将这个事件或消息传递给自己的 <code>superview</code>，如此往复，如果都处理不了的话，那么最后会传递给 <code>UIWindow</code> 对象。</p></li><li><p>如果 <code>UIWindow</code> 对象也无法处理接收的事件或消息，那么就会传递给 <code>UIApplication</code> 对象。</p></li><li><p>最后由 <code>UIApplication</code> 将事件或消息传递给应用程序的代理对象（也就是通常所说的<code>AppDelegate</code>）。</p></li></ul><p>这种设计机制可以保证所有的事件或消息都能得到处理，并且事件或消息的处理是有优先级的，即由具体的视图优先处理，若其无法处理再逐级上报，直到找到可以处理的对象。且每一个响应者都可以选择向上层的响应者传递事件，以便于上层响应者做一些统一的处理。</p></details><h3 id="❓叠在一起的两个-view-哪个会响应" tabindex="-1"><a class="header-anchor" href="#❓叠在一起的两个-view-哪个会响应" aria-hidden="true">#</a> ❓叠在一起的两个 <code>View</code> 哪个会响应</h3><details class="hint-container details"><summary>💡</summary><p>两个View叠在一起哪个响应取决于视图的层次结构和z轴的高度。</p><p>在iOS中，如果两个视图A和B叠在一起，那么对事件的响应权取决于这两个视图在其父视图中的添加顺序。UIView的子视图是按照数组的顺序存放的，后添加的子视图会在数组的后面，而响应事件的优先级则是从数组的后面向前遍历的。所以如果视图A是后添加到其父视图中，那么视图A会遮挡住视图B，并捕获并处理用户的触摸事件。</p><p>另外，如果为视图设置了zPosition，可以改变视图在z轴上的位置，zPosition值越大，视图越靠前，更可能接收到事件。</p><p>总的来说，被后添加或zPosition值更大的视图更可能响应事件。当然，这也取决于视图的userInteractionEnabled、hidden、alpha等属性，这些属性可能会阻止视图响应事件。</p></details><blockquote><p>如果不想让上面的 <code>View</code> 响应，怎么解决</p></blockquote><details class="hint-container details"><summary>💡</summary><p>如果你不想让上面的View响应触摸事件，你可以使用以下方法：</p><ol><li>设置<code>userInteractionEnabled</code>属性为<code>false</code>。这将禁用用户在上面的视图上的交互，把事件传递到它下面的视图。</li></ol><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code>topView<span class="token punctuation">.</span>userInteractionEnabled <span class="token operator">=</span> <span class="token boolean">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>重载上面视图的<code>hitTest:withEvent:</code>方法。这个方法的使用有点复杂，它的目的是找到能响应事件的最佳视图。你可以重写这个方法，让它返回下面的视图：</li></ol><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">hitTest</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> point<span class="token punctuation">:</span> <span class="token class-name">CGPoint</span><span class="token punctuation">,</span> with event<span class="token punctuation">:</span> <span class="token class-name">UIEvent</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">UIView</span><span class="token operator">?</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> hitView <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">hitTest</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> with<span class="token punctuation">:</span> event<span class="token punctuation">)</span>
    <span class="token keyword">if</span> hitView <span class="token operator">==</span> <span class="token keyword">self</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> underlyingView
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> hitView
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>重写视图的<code>pointInside:withEvent:</code>方法，此方法用于检查触摸点是否在视图内。如果点在上面的视图外，触摸事件就会传递给它的底层视图：</li></ol><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">point</span><span class="token punctuation">(</span>inside point<span class="token punctuation">:</span> <span class="token class-name">CGPoint</span><span class="token punctuation">,</span> with event<span class="token punctuation">:</span> <span class="token class-name">UIEvent</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Bool</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在这里检查点是否在你想要的区域内</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，这些方法可能需要根据具体应用场景进行调整。</p></details><blockquote><p>如果两个 <code>View</code> 都要响应呢</p></blockquote><details class="hint-container details"><summary>💡</summary><p>如果你想让两个重叠的视图都响应同一触摸事件，那么你可能需要一个稍微不同的策略，这就涉及到事件的传递和响应者链。预设的UIKit行为中，一旦一种事件被一个视图接收并且处理，那么这个事件就会停止导航到视图层级。但是，你可以覆盖这种行为。</p><ol><li>自定义UIView子类并重写<code>hitTest</code>方法或者<code>pointInside:withEvent:</code>方法来决定哪个视图需要处理接收到的触摸事件。</li><li>在一个父视图中进行触摸事件的处理并在适当的时候传递给子视图。</li></ol><p>下面就是重写hitTest:withEvent:方法的一个例子：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">hitTest</span><span class="token punctuation">(</span>point<span class="token punctuation">:</span> <span class="token class-name">CGPoint</span><span class="token punctuation">,</span> withEvent event<span class="token punctuation">:</span> <span class="token class-name">UIEvent</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">UIView</span><span class="token operator">?</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> view <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">hitTest</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> withEvent<span class="token punctuation">:</span> event<span class="token punctuation">)</span>
    <span class="token keyword">if</span> view <span class="token operator">==</span> <span class="token keyword">self</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> otherView<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> view
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在此代码中，如果触摸事件始于该视图，我们改为返回otherView作为需要接收事件的视图。</p><p>还可以在你的控制器中使用手势识别器(gesture recognizers)，可以更好地处理较为复杂的触摸交互问题，或者在触摸开始响应方法touchesBegan中，对不同的视图各自处理。</p><p>需要注意的是，确保所有的view的 userInteractionEnabled 均为true，否则是无法接收到触摸事件的。</p></details><h3 id="❓hittest-和-pointinside-的关系" tabindex="-1"><a class="header-anchor" href="#❓hittest-和-pointinside-的关系" aria-hidden="true">#</a> ❓<code>hitTest</code> 和 <code>pointInside</code> 的关系</h3><details class="hint-container details"><summary>💡</summary><p><code>hitTest:withEvent:</code>和<code>pointInside:withEvent:</code>都是UIKit框架圆形事件系统的一部分，它们经常一起使用来确定某个触摸事件应该由哪个视图处理。</p><p>以下是这两个函数的常见用法和它们之间的关系：</p><ol><li><p><code>hitTest:withEvent:</code>是我们用来确定触摸事件应该由哪个子视图处理的方法。当用户触摸屏幕时，UIKit会询问顶级视图来找出正确的视图处理事件。它会调用<code>hitTest:withEvent:</code>，把触摸点的坐标和触摸事件作为参数传入。</p></li><li><p><code>hitTest:withEvent:</code> 方法的实现通常会调用 <code>pointInside:withEvent:</code> 来检查触摸点是否在视图的bounds内。如果 <code>pointInside:withEvent:</code> 返回 <code>true</code>，那么 <code>hitTest:withEvent:</code> 就会返回这个视图，表示这个视图可以接收并处理这个触摸事件。</p></li><li><p>如果视图是一个容器视图，并且包含其他子视图，<code>hitTest:withEvent:</code> 的实现通常会遍历所有的子视图，并且这个遍历通常是按照反序进行（也就是从顶层子视图到底层子视图）。对于每个子视图，都会调用 <code>hitTest:withEvent:</code>。如果这个方法返回了一个非 <code>nil</code> 的视图，那么遍历就会立即停止，并且这个被返回的视图会被认为是最合适处理这次触摸事件的视图。</p></li><li><p>如果 <code>pointInside:withEvent:</code> 对所有子视图都返回 <code>false</code>，那么 <code>hitTest:withEvent:</code> 也就会返回 <code>nil</code>，表示这个视图和它的子视图都没有接收这次触摸事件。</p></li></ol><p>根据这些步骤，我们可以得到以下的结论：<code>pointInside:withEvent:</code> 方法用于检测触摸点是否在视图内，而 <code>hitTest:withEvent:</code> 则用于找到一个最合适处理事件的子视图。所以说，<code>hitTest：withEvent:</code> 是根据 <code>pointInside:withEvent:</code> 的结果来决定返回哪个视图的。具体会返回哪个视图，取决于 <code>pointInside:withEvent:</code> 在检测触摸点是否在视图范围内时的结果。</p></details><h3 id="❓hittest-有重写吗" tabindex="-1"><a class="header-anchor" href="#❓hittest-有重写吗" aria-hidden="true">#</a> ❓<code>hitTest</code> 有重写吗</h3><details class="hint-container details"><summary>💡</summary><p>是的，<code>hitTest:withEvent:</code> 可以在子类中重新实现，以更改触摸事件处理的默认行为。默认的实现会遍历视图层次结构，找出在给定点的视图，而你可以通过重写这个方法来定制这一行为。</p><p>例如，下面的代码将扩大了一个视图的触摸区域：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">hitTest</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> point<span class="token punctuation">:</span> <span class="token class-name">CGPoint</span><span class="token punctuation">,</span> with event<span class="token punctuation">:</span> <span class="token class-name">UIEvent</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">UIView</span><span class="token operator">?</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> biggerRect <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>bounds<span class="token punctuation">.</span><span class="token function">insetBy</span><span class="token punctuation">(</span>dx<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">,</span> dy<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> biggerRect<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">self</span> <span class="token punctuation">:</span> <span class="token nil constant">nil</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，新的 <code>hitTest:withEvent:</code> 实现使得即使用户点击了这个视图的范围外面，只要在扩大后的范围之内，这个视图仍然会接收到触摸事件。</p><p>当然，需要在设计时考虑清楚，避免重写<code>hitTest:withEvent:</code>后导致视图层次内的其他视图由于触摸事件的分发问题而出现预期外的行为。</p></details><h3 id="❓使用-method-swizzling-父-view-的-touchbegin-的方法-会对子-view-造成什么影响" tabindex="-1"><a class="header-anchor" href="#❓使用-method-swizzling-父-view-的-touchbegin-的方法-会对子-view-造成什么影响" aria-hidden="true">#</a> ❓使用 <code>Method Swizzling</code> 父 <code>View</code> 的 <code>touchBegin</code> 的方法, 会对子 <code>View</code> 造成什么影响</h3><details class="hint-container details"><summary>💡</summary><p>Method Swizzling，又称方法交换，是 Objective-C 的运行时特性。这种特性允许我们交换方法的实现，这样在执行特定方法时，实际上会执行另一个方法。</p><p>如果你在父View中使用Method Swizzling来交换<code>touchesBegan:withEvents:</code>方法的实现，那么当你点击父View或其子View时，实际上调用的将是你交换后的方法。这会影响到子View原本应有的行为。</p><p>例如你可能会遇到这样的问题：</p><ol><li><p>如果你在新的方法实现中没有调用原始方法，那么在点击视图时，原始的touchesBegan:withEvent:方法中的行为就不会执行，可能会失去一些应有的效果或者触摸反馈。</p></li><li><p>如果你在新的方法实现中改变了触摸事件的处理方式，可能会影响到子View的交互响应。例如如果你做了一些拦截处理，那么子View可能会无法收到触摸事件。</p></li></ol><p>所以，当你需要在触摸事件处理方法中使用 Method Swizzling时，通常需要在新的方法实现中调用原始方法，以确保符合预期的行为。同时，你需要仔细评估和测试这种实现对于整个视图层次可能造成的影响。</p></details><hr><h2 id="算法" tabindex="-1"><a class="header-anchor" href="#算法" aria-hidden="true">#</a> 算法</h2><h3 id="❓寻找最近的公共-view" tabindex="-1"><a class="header-anchor" href="#❓寻找最近的公共-view" aria-hidden="true">#</a> ❓寻找最近的公共 <code>View</code></h3><details class="hint-container details"><summary>💡</summary><p>你可以通过以下方式实现寻找两个子视图最近的公共父视图的函数：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">findNearestCommonAncestor</span><span class="token punctuation">(</span>view1<span class="token punctuation">:</span> <span class="token class-name">UIView</span><span class="token punctuation">,</span> view2<span class="token punctuation">:</span> <span class="token class-name">UIView</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">UIView</span><span class="token operator">?</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> currentView<span class="token punctuation">:</span> <span class="token class-name">UIView</span><span class="token operator">?</span> <span class="token operator">=</span> view1
    <span class="token keyword">while</span> <span class="token keyword">let</span> view <span class="token operator">=</span> currentView <span class="token punctuation">{</span>
        <span class="token keyword">if</span> view2<span class="token punctuation">.</span><span class="token function">isDescendant</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> view<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> view
        <span class="token punctuation">}</span>
        currentView <span class="token operator">=</span> view<span class="token punctuation">.</span>superview
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token nil constant">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个函数首先从第一个视图开始，检查第二个视图是否是第一个视图的后代。如果是，就返回当前的视图。如果不是，就继续检查第一个视图的父视图。</p><p>最后需要注意的是，<code>findCommonSuperviewWithView:</code> 这个函数本身并没有考虑如果两个视图处在不同窗口或者不同视图层级的情况，这种情况需要额外处理。</p></details><h3 id="❓打印一个-view-的所有子-view-要求分层打印" tabindex="-1"><a class="header-anchor" href="#❓打印一个-view-的所有子-view-要求分层打印" aria-hidden="true">#</a> ❓打印一个 <code>View</code> 的所有子 <code>View</code>，要求分层打印</h3><details class="hint-container details"><summary>💡</summary><p>树的层序遍历问题</p><p>在 Swift 中，可以利用队列(Queue)来实现树的层次遍历。以下是一个实现比:</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">printSubviewsInLevelOrder</span><span class="token punctuation">(</span><span class="token keyword">for</span> view<span class="token punctuation">:</span> <span class="token class-name">UIView</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">UIView</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    queue<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span>
    <span class="token keyword">while</span> <span class="token operator">!</span>queue<span class="token punctuation">.</span>isEmpty <span class="token punctuation">{</span>
        <span class="token keyword">var</span> count <span class="token operator">=</span> queue<span class="token punctuation">.</span>count <span class="token comment">// 当前层数量</span>
        <span class="token keyword">var</span> levelViews <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">UIView</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 当前层视图</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> levelView <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            levelViews<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>levelView<span class="token punctuation">)</span>
            count <span class="token operator">-=</span> <span class="token number">1</span>
            <span class="token comment">// 将当前层视图子视图继续加入队列</span>
            <span class="token keyword">for</span> subview <span class="token keyword">in</span> levelView<span class="token punctuation">.</span>subviews <span class="token punctuation">{</span>
                queue<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>subview<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token function">print</span><span class="token punctuation">(</span>levelViews<span class="token punctuation">)</span> <span class="token comment">// 打印当前层视图   </span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上就是使用 Swift 对 View 进行层次遍历的代码, 这样可以按照从上到下，从左到右的顺序打印出所有子 view。</p></details>`,133);function c(p,l){return a(),s("div",null,[e(" more "),i])}const r=n(o,[["render",c],["__file","0x03.uikit.html.vue"]]);export{r as default};
