import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as e,c as i,a as d,f as r}from"./app-ri5NbhQI.js";const l={},s=r('<h2 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h2><h3 id="❓为什么大部分编程语言中的数组下标都是从-0-开始" tabindex="-1"><a class="header-anchor" href="#❓为什么大部分编程语言中的数组下标都是从-0-开始" aria-hidden="true">#</a> ❓为什么大部分编程语言中的数组下标都是从 0 开始？</h3><details class="hint-container details"><summary>💡</summary><p>这个与数组的结构特性和内存寻址有关系。数组是一块存储相同类型数据的连续内存空间，而数组的指针或引用是指向数组的一个元素的。访问数组其它位置的元素就是计算其位置的指针地址。</p><p>如果第一元素下标从 0 开始，则寻址公式为：<code>a[i] = a0 + i * dataSize</code>。</p><p>如果第一元素下标从 1 开始，则寻址公式为：<code>a[i] = a1 + (i - 1) * dataSize</code>。</p><p>可以看出如果下标为 0，寻址公式少了一次减法运算，提高了数组的访问效率。</p></details><h3 id="❓为什么数组访问效率优于链表" tabindex="-1"><a class="header-anchor" href="#❓为什么数组访问效率优于链表" aria-hidden="true">#</a> ❓为什么数组访问效率优于链表？</h3><details class="hint-container details"><summary>💡</summary><p>归根到底是因为数组分配的一块连续内存。</p><p>其一是数组的访问的可以直接通过下标计算出元素地址，到达了 <code>O(1)</code> 的时间复杂度，而链表访问数据需要遍历整个链表时间复杂度为 <code>O(n)</code>。</p><p>其二是 <code>CPU</code> 的缓存机制，因为 <code>CPU</code> 访问数据时为了提高效率，每次读取数据时并不是只读指定地址内存，而是读取一个内存块保存到 <code>CPU</code> 缓存中。以数组来说会将数组后面的数据以加载到 <code>CPU</code> 缓存中，当再次读取数组元素时会直接中缓存中读取。</p></details><h2 id="链表" tabindex="-1"><a class="header-anchor" href="#链表" aria-hidden="true">#</a> 链表</h2><h3 id="❓数组可以实现链表吗" tabindex="-1"><a class="header-anchor" href="#❓数组可以实现链表吗" aria-hidden="true">#</a> ❓数组可以实现链表吗？</h3><details class="hint-container details"><summary>💡</summary><p>可以使用两个数组实现。一个数据数组，一个节点数组(对应数据数组的索引，值为下一个节点的索引)。</p></details><h3 id="❓带头链表的好处" tabindex="-1"><a class="header-anchor" href="#❓带头链表的好处" aria-hidden="true">#</a> ❓带头链表的好处？</h3><details class="hint-container details"><summary>💡</summary><p>带头链表可以简化链表的添加、删除操作。如果是不带头链表，添加时需要判断链表为空的情况，删除时需要判断链表仅剩一个节点的情况。</p><ul><li>不带头链表 : 链表头节点指向链表的第一个数据节点。链表为空时，头结点为空。</li><li>带头链表 : 会有一个不包含数据的节点，头结点一直指向这个节点。链表为空时，也会包含这个头结点。</li></ul></details><h2 id="栈" tabindex="-1"><a class="header-anchor" href="#栈" aria-hidden="true">#</a> 栈</h2><h3 id="❓栈的实现" tabindex="-1"><a class="header-anchor" href="#❓栈的实现" aria-hidden="true">#</a> ❓栈的实现？</h3><details class="hint-container details"><summary>💡</summary><p>栈的实现核心是通过维护栈顶指针来进行栈操作。</p><ul><li>顺序栈 : 使用数组实现栈</li><li>链式栈 : 使用链表实现栈</li></ul></details><h3 id="❓栈有哪些使用场景" tabindex="-1"><a class="header-anchor" href="#❓栈有哪些使用场景" aria-hidden="true">#</a> ❓栈有哪些使用场景？</h3><details class="hint-container details"><summary>💡</summary><ul><li>函数调用栈 : 函数调用时，在函数作用域内的局部变量，数据的内存分配刚好符合栈先进先出的特性。</li><li>表达式求值</li><li>括号匹配</li><li>浏览器的前进和后退功能</li></ul></details><h2 id="队列" tabindex="-1"><a class="header-anchor" href="#队列" aria-hidden="true">#</a> 队列</h2><h3 id="❓队列的实现" tabindex="-1"><a class="header-anchor" href="#❓队列的实现" aria-hidden="true">#</a> ❓队列的实现？</h3><details class="hint-container details"><summary>💡</summary><p>堆列的实现核心是通过队头指针和队尾指针来进行队列操作。</p><ul><li>顺序队列 : 使用数组实现队列</li><li>链式队列 : 使用链表实现队列</li></ul></details><h3 id="❓高级队列了解吗" tabindex="-1"><a class="header-anchor" href="#❓高级队列了解吗" aria-hidden="true">#</a> ❓高级队列了解吗？</h3><details class="hint-container details"><summary>💡</summary><ul><li>循环队列 : 一般使用数组实现，解决的数组队列的在删除数据时的数据迁移问题，在实际应用广泛。</li><li>阻塞队列 : 在队列操作中加入阻塞逻辑就是阻塞队列。入队时如果队列已满则阻塞，等待队列有空位置再入队；出队时如果队列为空则阻塞，等队列有数据时再出队。“生产者-消费者”就是基于阻塞队列实现。</li><li>并发队列 : 多线程的情况下会有多个线程同时访问队列的情况，就会存在线程安全问题，而加入解决多线程访问安全问题的队列的就是并发队列。 <ul><li>解决多线程并发最普遍的解决方案，在入队操作和出队操作时，进行加锁。</li><li>基于数组的循环队列 + <code>CAS</code> 原子操作就可以高效的实现并发队列。</li></ul></li></ul></details><h3 id="❓队列有哪些使用场景" tabindex="-1"><a class="header-anchor" href="#❓队列有哪些使用场景" aria-hidden="true">#</a> ❓队列有哪些使用场景？</h3><details class="hint-container details"><summary>💡</summary><ul><li>线程池</li><li>数据库连接池</li><li>(分布式)消息队列 : <code>kafaka</code></li></ul></details><h2 id="图" tabindex="-1"><a class="header-anchor" href="#图" aria-hidden="true">#</a> 图</h2><h3 id="强连通分量算法了解嘛" tabindex="-1"><a class="header-anchor" href="#强连通分量算法了解嘛" aria-hidden="true">#</a> 强连通分量算法了解嘛？</h3><details class="hint-container details"><summary>💡</summary><blockquote><p>强连通分量是描述有向图中的一个特性。在有向图中，如果从一个节点A出发，可以通过有向边到达节点B，然后再从节点B出发，通过有向边返回到节点A，那么节点A和节点B就构成了一个强连通分量。如果这样的节点集合在图中有多个，那么这个图就可以分为多个强连通分量。</p></blockquote><p>至于计算一个有向图中的所有强连通分量的算法，有很多种。最著名的可能就是Tarjan算法和Kosaraju算法了。</p><ul><li><p><code>Tarjan</code> 算法：从任意一个节点开始，深度优先搜索整个图，利用一个栈和两个时间戳数组，进行回溯，找到所有的强连通分量。</p></li><li><p><code>Kosaraju</code> 算法：先对原图进行一次深度优先搜索，按照退出的顺序（即在DFS中，最后一个退出DFS的节点为最先），反向建立新图。然后再对新图进行深度优先搜索，搜索的每一轮所能到达的所有节点，即为一个强连通分量。</p></li></ul><p>两个算法的时间复杂度都是线性的，即<code>O(n + m)</code>，其中 n 是节点数，m 是边数。</p></details>',25);function t(h,c){return e(),i("div",null,[d(" more "),s])}const u=a(l,[["render",t],["__file","data-structure.html.vue"]]);export{u as default};
