import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as l,o as r,c as i,a as c,b as n,e,d as t,f as a}from"./app-_jE41G-y.js";const d={},p=n("h2",{id:"_0100",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0100","aria-hidden":"true"},"#"),e(" 0100")],-1),u=n("p",null,"// #region 0100",-1),h={href:"https://leetcode.cn/problems/same-tree",target:"_blank",rel:"noopener noreferrer"},_=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),m=n("p",null,"// #endregion 0100",-1),k=n("h2",{id:"_0101",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0101","aria-hidden":"true"},"#"),e(" 0101")],-1),b=n("p",null,"// #region 0101",-1),g={href:"https://leetcode.cn/problems/symmetric-tree",target:"_blank",rel:"noopener noreferrer"},f=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),v=n("p",null,"// #endregion 0101",-1),y=n("h2",{id:"_0102",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0102","aria-hidden":"true"},"#"),e(" 0102")],-1),x=n("p",null,"// #region 0102",-1),w={href:"https://leetcode.cn/problems/binary-tree-level-order-traversal",target:"_blank",rel:"noopener noreferrer"},I=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),q=n("p",null,"// #endregion 0102",-1),O=n("h2",{id:"_0103",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0103","aria-hidden":"true"},"#"),e(" 0103")],-1),C=n("p",null,"// #region 0103",-1),L={href:"https://leetcode.cn/problems/binary-tree-zigzag-level-order-traversal",target:"_blank",rel:"noopener noreferrer"},j=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),N=n("p",null,"// #endregion 0103",-1),V=n("h2",{id:"_0104",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0104","aria-hidden":"true"},"#"),e(" 0104")],-1),A=n("p",null,"// #region 0104",-1),S={href:"https://leetcode.cn/problems/maximum-depth-of-binary-tree",target:"_blank",rel:"noopener noreferrer"},z=n("blockquote",null,[n("p",null,"给定一个二叉树根节点，返回该二叉树的最大深度。")],-1),B=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),D=n("p",null,"// #endregion 0104",-1),E=n("h2",{id:"_0105",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0105","aria-hidden":"true"},"#"),e(" 0105")],-1),P=n("p",null,"// #region 0105",-1),R={href:"https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal",target:"_blank",rel:"noopener noreferrer"},T=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),U=n("p",null,"// #endregion 0105",-1),F=n("h2",{id:"_0106",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0106","aria-hidden":"true"},"#"),e(" 0106")],-1),G=n("p",null,"// #region 0106",-1),H={href:"https://leetcode.cn/problems/construct-binary-tree-from-inorder-and-postorder-traversal",target:"_blank",rel:"noopener noreferrer"},J=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),K=n("p",null,"// #endregion 0106",-1),M=n("h2",{id:"_0107",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0107","aria-hidden":"true"},"#"),e(" 0107")],-1),Q=n("p",null,"// #region 0107",-1),W={href:"https://leetcode.cn/problems/binary-tree-level-order-traversal-ii",target:"_blank",rel:"noopener noreferrer"},X=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Y=n("p",null,"// #endregion 0107",-1),Z=n("h2",{id:"_0108",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0108","aria-hidden":"true"},"#"),e(" 0108")],-1),$=n("p",null,"// #region 0108",-1),nn={href:"https://leetcode.cn/problems/convert-sorted-array-to-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},en=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),sn=n("p",null,"// #endregion 0108",-1),tn=n("h2",{id:"_0109",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0109","aria-hidden":"true"},"#"),e(" 0109")],-1),an=n("p",null,"// #region 0109",-1),on={href:"https://leetcode.cn/problems/convert-sorted-list-to-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},ln=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),rn=n("p",null,"// #endregion 0109",-1),cn=n("h2",{id:"_0110",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0110","aria-hidden":"true"},"#"),e(" 0110")],-1),dn=n("p",null,"// #region 0110",-1),pn={href:"https://leetcode.cn/problems/balanced-binary-tree",target:"_blank",rel:"noopener noreferrer"},un=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),hn=n("p",null,"// #endregion 0110",-1),_n=n("h2",{id:"_0111",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0111","aria-hidden":"true"},"#"),e(" 0111")],-1),mn=n("p",null,"// #region 0111",-1),kn={href:"https://leetcode.cn/problems/minimum-depth-of-binary-tree",target:"_blank",rel:"noopener noreferrer"},bn=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),gn=n("p",null,"// #endregion 0111",-1),fn=n("h2",{id:"_0112",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0112","aria-hidden":"true"},"#"),e(" 0112")],-1),vn=n("p",null,"// #region 0112",-1),yn={href:"https://leetcode.cn/problems/path-sum",target:"_blank",rel:"noopener noreferrer"},xn=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),wn=n("p",null,"// #endregion 0112",-1),In=n("h2",{id:"_0113",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0113","aria-hidden":"true"},"#"),e(" 0113")],-1),qn=n("p",null,"// #region 0113",-1),On={href:"https://leetcode.cn/problems/path-sum-ii",target:"_blank",rel:"noopener noreferrer"},Cn=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Ln=n("p",null,"// #endregion 0113",-1),jn=n("h2",{id:"_0114",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0114","aria-hidden":"true"},"#"),e(" 0114")],-1),Nn=n("p",null,"// #region 0114",-1),Vn={href:"https://leetcode.cn/problems/flatten-binary-tree-to-linked-list",target:"_blank",rel:"noopener noreferrer"},An=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Sn=n("p",null,"// #endregion 0114",-1),zn=n("h2",{id:"_0115",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0115","aria-hidden":"true"},"#"),e(" 0115")],-1),Bn=n("p",null,"// #region 0115",-1),Dn={href:"https://leetcode.cn/problems/distinct-subsequences",target:"_blank",rel:"noopener noreferrer"},En=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Pn=n("p",null,"// #endregion 0115",-1),Rn=n("h2",{id:"_0116",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0116","aria-hidden":"true"},"#"),e(" 0116")],-1),Tn=n("p",null,"// #region 0116",-1),Un={href:"https://leetcode.cn/problems/populating-next-right-pointers-in-each-node",target:"_blank",rel:"noopener noreferrer"},Fn=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Gn=n("p",null,"// #endregion 0116",-1),Hn=n("h2",{id:"_0117",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0117","aria-hidden":"true"},"#"),e(" 0117")],-1),Jn=n("p",null,"// #region 0117",-1),Kn={href:"https://leetcode.cn/problems/populating-next-right-pointers-in-each-node-ii",target:"_blank",rel:"noopener noreferrer"},Mn=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Qn=n("p",null,"// #endregion 0117",-1),Wn=n("h2",{id:"_0118",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0118","aria-hidden":"true"},"#"),e(" 0118")],-1),Xn=n("p",null,"// #region 0118",-1),Yn={href:"https://leetcode.cn/problems/pascals-triangle",target:"_blank",rel:"noopener noreferrer"},Zn=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),$n=n("p",null,"// #endregion 0118",-1),ne=n("h2",{id:"_0119",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0119","aria-hidden":"true"},"#"),e(" 0119")],-1),ee=n("p",null,"// #region 0119",-1),se={href:"https://leetcode.cn/problems/pascals-triangle-ii",target:"_blank",rel:"noopener noreferrer"},te=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),ae=n("p",null,"// #endregion 0119",-1),oe=n("h2",{id:"_0120",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0120","aria-hidden":"true"},"#"),e(" 0120")],-1),le=n("p",null,"// #region 0120",-1),re={href:"https://leetcode.cn/problems/triangle",target:"_blank",rel:"noopener noreferrer"},ie=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),ce=n("p",null,"// #endregion 0120",-1),de=n("h2",{id:"_0121",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0121","aria-hidden":"true"},"#"),e(" 0121")],-1),pe=n("p",null,"// #region 0121",-1),ue={href:"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock",target:"_blank",rel:"noopener noreferrer"},he=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),_e=n("p",null,"// #endregion 0121",-1),me=n("h2",{id:"_0122",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0122","aria-hidden":"true"},"#"),e(" 0122")],-1),ke=n("p",null,"// #region 0122",-1),be={href:"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii",target:"_blank",rel:"noopener noreferrer"},ge=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),fe=n("p",null,"// #endregion 0122",-1),ve=n("h2",{id:"_0123",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0123","aria-hidden":"true"},"#"),e(" 0123")],-1),ye=n("p",null,"// #region 0123",-1),xe={href:"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iii",target:"_blank",rel:"noopener noreferrer"},we=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Ie=n("p",null,"// #endregion 0123",-1),qe=n("h2",{id:"_0124",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0124","aria-hidden":"true"},"#"),e(" 0124")],-1),Oe=n("p",null,"// #region 0124",-1),Ce={href:"https://leetcode.cn/problems/binary-tree-maximum-path-sum",target:"_blank",rel:"noopener noreferrer"},Le=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),je=n("p",null,"// #endregion 0124",-1),Ne=n("h2",{id:"_0125",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0125","aria-hidden":"true"},"#"),e(" 0125")],-1),Ve=n("p",null,"// #region 0125",-1),Ae={href:"https://leetcode.cn/problems/valid-palindrome",target:"_blank",rel:"noopener noreferrer"},Se=n("blockquote",null,[n("p",null,"判断字符串中的字母(大小不敏感，大写字母与小字可以看作相等)和数字是否为回文串，字符中的的其它字符不参与回文串校验。")],-1),ze=a(`<details class="hint-container details"><summary>💡</summary><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span>
  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span> left <span class="token operator">&lt;</span> right <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 寻找左边第一个字母或数字</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span> left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isLetterOrDigit</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            left <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 寻找右边第一个字母或数字</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span> left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isLetterOrDigit</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            right <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> left <span class="token operator">&gt;=</span> right <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token comment">// 左右指针，判断字符是否相等</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 不相等，则表明不是回文串</span>
        <span class="token punctuation">}</span> 
        <span class="token comment">// 相等，跳转到下一个字符进行匹配</span>
        left <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        right <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>// #endregion 0125</p><h2 id="_0126" tabindex="-1"><a class="header-anchor" href="#_0126" aria-hidden="true">#</a> 0126</h2><p>// #region 0126</p>`,4),Be={href:"https://leetcode.cn/problems/word-ladder-ii",target:"_blank",rel:"noopener noreferrer"},De=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Ee=n("p",null,"// #endregion 0126",-1),Pe=n("h2",{id:"_0127",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0127","aria-hidden":"true"},"#"),e(" 0127")],-1),Re=n("p",null,"// #region 0127",-1),Te={href:"https://leetcode.cn/problems/word-ladder",target:"_blank",rel:"noopener noreferrer"},Ue=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Fe=n("p",null,"// #endregion 0127",-1),Ge=n("h2",{id:"_0128",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0128","aria-hidden":"true"},"#"),e(" 0128")],-1),He=n("p",null,"// #region 0128",-1),Je={href:"https://leetcode.cn/problems/longest-consecutive-sequence",target:"_blank",rel:"noopener noreferrer"},Ke=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Me=n("p",null,"// #endregion 0128",-1),Qe=n("h2",{id:"_0129",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0129","aria-hidden":"true"},"#"),e(" 0129")],-1),We=n("p",null,"// #region 0129",-1),Xe={href:"https://leetcode.cn/problems/sum-root-to-leaf-numbers",target:"_blank",rel:"noopener noreferrer"},Ye=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Ze=n("p",null,"// #endregion 0129",-1),$e=n("h2",{id:"_0130",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0130","aria-hidden":"true"},"#"),e(" 0130")],-1),ns=n("p",null,"// #region 0130",-1),es={href:"https://leetcode.cn/problems/surrounded-regions",target:"_blank",rel:"noopener noreferrer"},ss=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),ts=n("p",null,"// #endregion 0130",-1),as=n("h2",{id:"_0131",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0131","aria-hidden":"true"},"#"),e(" 0131")],-1),os=n("p",null,"// #region 0131",-1),ls={href:"https://leetcode.cn/problems/palindrome-partitioning",target:"_blank",rel:"noopener noreferrer"},rs=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),is=n("p",null,"// #endregion 0131",-1),cs=n("h2",{id:"_0132",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0132","aria-hidden":"true"},"#"),e(" 0132")],-1),ds=n("p",null,"// #region 0132",-1),ps={href:"https://leetcode.cn/problems/palindrome-partitioning-ii",target:"_blank",rel:"noopener noreferrer"},us=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),hs=n("p",null,"// #endregion 0132",-1),_s=n("h2",{id:"_0133",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0133","aria-hidden":"true"},"#"),e(" 0133")],-1),ms=n("p",null,"// #region 0133",-1),ks={href:"https://leetcode.cn/problems/clone-graph",target:"_blank",rel:"noopener noreferrer"},bs=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),gs=n("p",null,"// #endregion 0133",-1),fs=n("h2",{id:"_0134",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0134","aria-hidden":"true"},"#"),e(" 0134")],-1),vs=n("p",null,"// #region 0134",-1),ys={href:"https://leetcode.cn/problems/gas-station",target:"_blank",rel:"noopener noreferrer"},xs=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),ws=n("p",null,"// #endregion 0124",-1),Is=n("h2",{id:"_0135",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0135","aria-hidden":"true"},"#"),e(" 0135")],-1),qs=n("p",null,"// #region 0135",-1),Os={href:"https://leetcode.cn/problems/candy",target:"_blank",rel:"noopener noreferrer"},Cs=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Ls=n("p",null,"// #endregion 0135",-1),js=n("h2",{id:"_0136",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0136","aria-hidden":"true"},"#"),e(" 0136")],-1),Ns=n("p",null,"// #region 0136",-1),Vs={href:"https://leetcode.cn/problems/single-number/",target:"_blank",rel:"noopener noreferrer"},As=n("blockquote",null,[n("p",null,"一个非空的整数数组，除了某个元素只出现一次外，其余元素均出现两次。找出只出现一次的数字")],-1),Ss=n("details",{class:"hint-container details"},[n("summary",null,"💡"),n("p",null,[e("【思路】 由于存在相同的元素均出现两次，刚好可以使用 "),n("code",null,"x ^ x = 0"),e(" 的特性。将所有数字进行异或操作，则相同的数字异或结果为 0，只出现一次的数与 0 进行异或结果就是只出现一次的数。 时间复杂度: O(n) 空间复杂度: O(1)")])],-1),zs=n("p",null,"// #endregion 0136",-1),Bs=n("h2",{id:"_0137",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0137","aria-hidden":"true"},"#"),e(" 0137")],-1),Ds=n("p",null,"// #region 0137",-1),Es={href:"https://leetcode.cn/problems/single-number-ii",target:"_blank",rel:"noopener noreferrer"},Ps=n("blockquote",null,[n("p",null,"一个非空的整数数组中，除了某个元素只出现一次外，其余元素均出现三次。找出只出现一次的数字 时间复杂度: O(n) 空间复杂度: O(1)")],-1),Rs=n("details",{class:"hint-container details"},[n("summary",null,"💡"),n("p",null,[e("【思路】 这道题是 136 的变形版本，不能使用 "),n("code",null,"x ^ x = 0"),e(" 特性。但是但是还是可以使用位运算的特性进行求解。")])],-1),Ts=n("p",null,"// #endregion 0137",-1),Us=n("h2",{id:"_0138",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0138","aria-hidden":"true"},"#"),e(" 0138")],-1),Fs=n("p",null,"// #region 0138",-1),Gs={href:"https://leetcode.cn/problems/copy-list-with-random-pointer",target:"_blank",rel:"noopener noreferrer"},Hs=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Js=n("p",null,"// #endregion 0138",-1),Ks=n("h2",{id:"_0139",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0139","aria-hidden":"true"},"#"),e(" 0139")],-1),Ms=n("p",null,"// #region 0139",-1),Qs={href:"https://leetcode.cn/problems/word-break",target:"_blank",rel:"noopener noreferrer"},Ws=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Xs=n("p",null,"// #endregion 0139",-1),Ys=n("h2",{id:"_0140",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0140","aria-hidden":"true"},"#"),e(" 0140")],-1),Zs=n("p",null,"// #region 0140",-1),$s={href:"https://leetcode.cn/problems/word-break-ii",target:"_blank",rel:"noopener noreferrer"},nt=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),et=n("p",null,"// #endregion 0140",-1),st=n("h2",{id:"_0141",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0141","aria-hidden":"true"},"#"),e(" 0141")],-1),tt=n("p",null,"// #region 0141",-1),at={href:"https://leetcode.cn/problems/linked-list-cycle",target:"_blank",rel:"noopener noreferrer"},ot=n("blockquote",null,[n("p",null,"判断单链表是否有环？")],-1),lt=n("details",{class:"hint-container details"},[n("summary",null,"💡"),n("p",null,"【技巧】使用快慢指针，fast 指针每次走两步，slow 指针每次走一步，如果两个指针相遇，则表明链表有环。如果没有相遇，fast 直接走到链表最后 nil 空指针，则表明链表没有环。"),n("p",null,"【原理】")],-1),rt=n("p",null,"// #endregion 0141",-1),it=n("h2",{id:"_0142",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0142","aria-hidden":"true"},"#"),e(" 0142")],-1),ct=n("p",null,"// #region 0142",-1),dt={href:"https://leetcode.cn/problems/linked-list-cycle-ii",target:"_blank",rel:"noopener noreferrer"},pt=n("blockquote",null,[n("p",null,"求环形链表入环位置的节点？")],-1),ut=a('<details class="hint-container details"><summary>💡</summary><p>【结论】相遇点 ~ 连接点 = 头指针 ~ 连接点</p><p>数学公式推导</p><blockquote><p>求环形链表的环长？</p></blockquote><p>【思路1】slow 指针视角，记录第一次相遇点位置，之后使用计数器记录步长，当 slow 指针再次走到该位置时，则计数器步长就是环长。</p><p>【思路2】fast 指针视角，由于 fast 刚好比 slow 指针多走一倍，所以当两个指针再次相遇时，则 fast 刚好走了环长的两倍。</p></details><p>// #endregion 0142</p><h2 id="_0143" tabindex="-1"><a class="header-anchor" href="#_0143" aria-hidden="true">#</a> 0143</h2><p>// #region 0143</p>',4),ht={href:"https://leetcode.cn/problems/reorder-list",target:"_blank",rel:"noopener noreferrer"},_t=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),mt=n("p",null,"// #endregion 0143",-1),kt=n("h2",{id:"_0144",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0144","aria-hidden":"true"},"#"),e(" 0144")],-1),bt=n("p",null,"// #region 0144",-1),gt={href:"https://leetcode.cn/problems/binary-tree-preorder-traversal",target:"_blank",rel:"noopener noreferrer"},ft=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),vt=n("p",null,"// #endregion 0144",-1),yt=n("h2",{id:"_0145",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0145","aria-hidden":"true"},"#"),e(" 0145")],-1),xt=n("p",null,"// #region 0145",-1),wt={href:"https://leetcode.cn/problems/binary-tree-postorder-traversal",target:"_blank",rel:"noopener noreferrer"},It=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),qt=n("p",null,"// #endregion 0145",-1),Ot=n("h2",{id:"_0146",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0146","aria-hidden":"true"},"#"),e(" 0146")],-1),Ct=n("p",null,"// #region 0146",-1),Lt={href:"https://leetcode.cn/problems/lru-cache",target:"_blank",rel:"noopener noreferrer"},jt=n("blockquote",null,[n("p",null,[n("code",null,"get"),e(),n("code",null,"put"),e(" 操作需要 O(1) 的平均时间复杂度")])],-1),Nt=a('<details class="hint-container details"><summary>💡</summary><p>【思路】: 哈希表 + 双向链表</p><ul><li>首先解决数据的缓存问题。由于需要 O(1) 的时间复杂度，所以应该很自然的想到了使用哈希表来保存数据。这样保存和查询都可以做到 O(1) 的时间复杂度。</li><li>再来解决最近最少使用的问题。这需要使用双向链表的结构来保存数据，链表头部为最少使用的数据，链表尾部为最近使用的数据。 <ul><li>查询数据时，这个查询过的数据为最近使用，也就是需要移除就之前链表中的这个数据，将这个数据重新加入到链表尾部。</li><li>添加数据时，如果这个 key 已存在，则移除旧数据，将新数据加入链表尾部；如果 key 不存在，需要判断缓存是否已满，如果已满则移除链表头部最少使用数据，添加新数据到链表尾部，如果未满则直接添加新数据到链表尾部。</li></ul></li></ul></details><p>// #endregion 0146</p><h2 id="_0147" tabindex="-1"><a class="header-anchor" href="#_0147" aria-hidden="true">#</a> 0147</h2><p>// #region 0147</p>',4),Vt={href:"https://leetcode.cn/problems/insertion-sort-list",target:"_blank",rel:"noopener noreferrer"},At=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),St=n("p",null,"// #endregion 0147",-1),zt=n("h2",{id:"_0148",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0148","aria-hidden":"true"},"#"),e(" 0148")],-1),Bt=n("p",null,"// #region 0148",-1),Dt={href:"https://leetcode.cn/problems/sort-list",target:"_blank",rel:"noopener noreferrer"},Et=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Pt=n("p",null,"// #endregion 0148",-1),Rt=n("h2",{id:"_0149",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0149","aria-hidden":"true"},"#"),e(" 0149")],-1),Tt=n("p",null,"// #region 0149",-1),Ut={href:"https://leetcode.cn/problems/max-points-on-a-line",target:"_blank",rel:"noopener noreferrer"},Ft=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Gt=n("p",null,"// #endregion 0149",-1),Ht=n("h2",{id:"_0150",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0150","aria-hidden":"true"},"#"),e(" 0150")],-1),Jt=n("p",null,"// #region 0150",-1),Kt={href:"https://leetcode.cn/problems/evaluate-reverse-polish-notation",target:"_blank",rel:"noopener noreferrer"},Mt=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Qt=n("p",null,"// #endregion 0150",-1),Wt=n("h2",{id:"_0151",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0151","aria-hidden":"true"},"#"),e(" 0151")],-1),Xt=n("p",null,"// #region 0151",-1),Yt={href:"https://leetcode.cn/problems/reverse-words-in-a-string",target:"_blank",rel:"noopener noreferrer"},Zt=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),$t=n("p",null,"// #endregion 0151",-1),na=n("h2",{id:"_0160",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0160","aria-hidden":"true"},"#"),e(" 0160")],-1),ea=n("p",null,"// #region 0160",-1),sa={href:"https://leetcode.cn/problems/intersection-of-two-linked-lists",target:"_blank",rel:"noopener noreferrer"},ta=n("blockquote",null,[n("p",null,"求两个相交链表的相交起始节点？")],-1),aa=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),oa=n("p",null,"// #endregion 0160",-1),la=n("h2",{id:"_0167",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0167","aria-hidden":"true"},"#"),e(" 0167")],-1),ra=n("p",null,"// #region 0167",-1),ia={href:"https://leetcode.cn/problems/two-sum-ii-input-array-is-sorted",target:"_blank",rel:"noopener noreferrer"},ca=n("blockquote",null,[n("p",null,"给定目标值，在有序数组中查找两个索引对应的值相加等于目标值。")],-1),da=a(`<details class="hint-container details"><summary>💡</summary><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> right <span class="token operator">=</span> numbers<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span> left <span class="token operator">&lt;</span> right <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> sum <span class="token operator">=</span> numbers<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> numbers<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span> sum <span class="token operator">==</span> target <span class="token punctuation">)</span> <span class="token punctuation">{</span> 
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> sum <span class="token operator">&lt;</span> target <span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 小于目标值，调整左边</span>
                left <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// sum &gt; target</span>
                <span class="token comment">// 大于目标值，调整右边</span>
                right <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>// #endregion 0167</p><h2 id="_0172" tabindex="-1"><a class="header-anchor" href="#_0172" aria-hidden="true">#</a> 0172</h2><p>// #region 0172</p>`,4),pa={href:"https://leetcode.cn/problems/factorial-trailing-zeroes",target:"_blank",rel:"noopener noreferrer"},ua=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),ha=n("p",null,"// #endregion 0172",-1),_a=n("h2",{id:"_0174",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0174","aria-hidden":"true"},"#"),e(" 0174")],-1),ma=n("p",null,"// #region 0174",-1),ka={href:"https://leetcode.cn/problems/dungeon-game",target:"_blank",rel:"noopener noreferrer"},ba=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),ga=n("p",null,"// #endregion 0174",-1),fa=n("h2",{id:"_0187",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0187","aria-hidden":"true"},"#"),e(" 0187")],-1),va=n("p",null,"// #region 0187",-1),ya={href:"https://leetcode.cn/problems/repeated-dna-sequences",target:"_blank",rel:"noopener noreferrer"},xa=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),wa=n("p",null,"// #endregion 0187",-1),Ia=n("h2",{id:"_0188",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0188","aria-hidden":"true"},"#"),e(" 0188")],-1),qa=n("p",null,"// #region 0188",-1),Oa={href:"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iv",target:"_blank",rel:"noopener noreferrer"},Ca=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),La=n("p",null,"// #endregion 0188",-1),ja=n("h2",{id:"_0189",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0189","aria-hidden":"true"},"#"),e(" 0189")],-1),Na=n("p",null,"// #region 0189",-1),Va={href:"https://leetcode.cn/problems/house-robber",target:"_blank",rel:"noopener noreferrer"},Aa=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Sa=n("p",null,"// #endregion 0189",-1),za=n("h2",{id:"_0191",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0191","aria-hidden":"true"},"#"),e(" 0191")],-1),Ba=n("p",null,"// #region 0191",-1),Da={href:"https://leetcode.cn/problems/number-of-1-bits",target:"_blank",rel:"noopener noreferrer"},Ea=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Pa=n("p",null,"// #endregion 0191",-1);function Ra(Ta,Ua){const s=l("ExternalLinkIcon");return r(),i("div",null,[c(" more "),p,u,n("ul",null,[n("li",null,[n("a",h,[e("🟢 100 - 相同的树"),t(s)])])]),_,m,k,b,n("ul",null,[n("li",null,[n("a",g,[e("🟢 101 - 对称二叉树"),t(s)])])]),f,v,y,x,n("ul",null,[n("li",null,[n("a",w,[e("🟠 102 - 二叉树的层序遍历"),t(s)])])]),I,q,O,C,n("ul",null,[n("li",null,[n("a",L,[e("🟠 103 - 二叉树的锯齿形层序遍历"),t(s)])])]),j,N,V,A,n("ul",null,[n("li",null,[n("a",S,[e("🟢 104 - 二叉树的最大深度"),t(s)]),z])]),B,D,E,P,n("ul",null,[n("li",null,[n("a",R,[e("🟠 105 - 从前序与中序遍历序列构造二叉树"),t(s)])])]),T,U,F,G,n("ul",null,[n("li",null,[n("a",H,[e("🟠 106 - 从中序与后序遍历序列构造二叉树"),t(s)])])]),J,K,M,Q,n("ul",null,[n("li",null,[n("a",W,[e("🟠 107 - 二叉树的层序遍历 II"),t(s)])])]),X,Y,Z,$,n("ul",null,[n("li",null,[n("a",nn,[e("🟢 108 - 将有序数组转换为二叉搜索树"),t(s)])])]),en,sn,tn,an,n("ul",null,[n("li",null,[n("a",on,[e("🟠 109 - 有序链表转换二叉搜索树"),t(s)])])]),ln,rn,cn,dn,n("ul",null,[n("li",null,[n("a",pn,[e("🟢 110 - 平衡二叉树"),t(s)])])]),un,hn,_n,mn,n("ul",null,[n("li",null,[n("a",kn,[e("🟢 111 - 二叉树的最小深度"),t(s)])])]),bn,gn,fn,vn,n("ul",null,[n("li",null,[n("a",yn,[e("🟢 112 - 路径总和"),t(s)])])]),xn,wn,In,qn,n("ul",null,[n("li",null,[n("a",On,[e("🟠 113 - 路径总和 II"),t(s)])])]),Cn,Ln,jn,Nn,n("ul",null,[n("li",null,[n("a",Vn,[e("🟠 114 - 二叉树展开为链表"),t(s)])])]),An,Sn,zn,Bn,n("ul",null,[n("li",null,[n("a",Dn,[e("🔴 115 - 不同的子序列"),t(s)])])]),En,Pn,Rn,Tn,n("ul",null,[n("li",null,[n("a",Un,[e("🟠 116 - 填充每个节点的下一个右侧节点指针"),t(s)])])]),Fn,Gn,Hn,Jn,n("ul",null,[n("li",null,[n("a",Kn,[e("🟠 117 - 填充每个节点的下一个右侧节点指针 II"),t(s)])])]),Mn,Qn,Wn,Xn,n("ul",null,[n("li",null,[n("a",Yn,[e("🟢 118 - 杨辉三角"),t(s)])])]),Zn,$n,ne,ee,n("ul",null,[n("li",null,[n("a",se,[e("🟢 119 - 杨辉三角 II"),t(s)])])]),te,ae,oe,le,n("ul",null,[n("li",null,[n("a",re,[e("🟠 120 - 三角形最小路径和"),t(s)])])]),ie,ce,de,pe,n("ul",null,[n("li",null,[n("a",ue,[e("🟢 121 - 买卖股票的最佳时机"),t(s)])])]),he,_e,me,ke,n("ul",null,[n("li",null,[n("a",be,[e("🟠 122 - 买卖股票的最佳时机 II"),t(s)])])]),ge,fe,ve,ye,n("ul",null,[n("li",null,[n("a",xe,[e("🔴 123 - 买卖股票的最佳时机 III"),t(s)])])]),we,Ie,qe,Oe,n("ul",null,[n("li",null,[n("a",Ce,[e("🔴 124 - 二叉树中的最大路径和"),t(s)])])]),Le,je,Ne,Ve,n("ul",null,[n("li",null,[n("a",Ae,[e("🟢 125 - 验证回文串"),t(s)]),Se])]),ze,n("ul",null,[n("li",null,[n("a",Be,[e("🔴 126 - 单词接龙 II"),t(s)])])]),De,Ee,Pe,Re,n("ul",null,[n("li",null,[n("a",Te,[e("🔴 - 单词接龙"),t(s)])])]),Ue,Fe,Ge,He,n("ul",null,[n("li",null,[n("a",Je,[e("🟠 128 - 最长连续序列"),t(s)])])]),Ke,Me,Qe,We,n("ul",null,[n("li",null,[n("a",Xe,[e("🟠 129 - 求根节点到叶节点数字之和"),t(s)])])]),Ye,Ze,$e,ns,n("ul",null,[n("li",null,[n("a",es,[e("🟠 130 - 被围绕的区域"),t(s)])])]),ss,ts,as,os,n("ul",null,[n("li",null,[n("a",ls,[e("🟠 131 - 分割回文串"),t(s)])])]),rs,is,cs,ds,n("ul",null,[n("li",null,[n("a",ps,[e("🔴 132 - 分割回文串 II"),t(s)])])]),us,hs,_s,ms,n("ul",null,[n("li",null,[n("a",ks,[e("🟠 133 - 克隆图"),t(s)])])]),bs,gs,fs,vs,n("ul",null,[n("li",null,[n("a",ys,[e("🟠 134 - 加油站"),t(s)])])]),xs,ws,Is,qs,n("ul",null,[n("li",null,[n("a",Os,[e("🔴 135 - 分发糖果"),t(s)])])]),Cs,Ls,js,Ns,n("ul",null,[n("li",null,[n("a",Vs,[e("🟢 136 - 只出现一次的数字"),t(s)]),As])]),Ss,zs,Bs,Ds,n("ul",null,[n("li",null,[n("a",Es,[e("🟠 137 - 只出现一次的数字 II"),t(s)]),Ps])]),Rs,Ts,Us,Fs,n("ul",null,[n("li",null,[n("a",Gs,[e("🟠 138 - 随机链表的复制"),t(s)])])]),Hs,Js,Ks,Ms,n("ul",null,[n("li",null,[n("a",Qs,[e("🟠 139 - 单词拆分"),t(s)])])]),Ws,Xs,Ys,Zs,n("ul",null,[n("li",null,[n("a",$s,[e("🔴 140 - 单词拆分 II"),t(s)])])]),nt,et,st,tt,n("ul",null,[n("li",null,[n("a",at,[e("🟢 141 - 环形链表"),t(s)]),ot])]),lt,rt,it,ct,n("ul",null,[n("li",null,[n("a",dt,[e("🟠 142 - 环形链表 II"),t(s)]),pt])]),ut,n("ul",null,[n("li",null,[n("a",ht,[e("🟠 143 - 重排链表"),t(s)])])]),_t,mt,kt,bt,n("ul",null,[n("li",null,[n("a",gt,[e("🟢 144 - 二叉树的前序遍历"),t(s)])])]),ft,vt,yt,xt,n("ul",null,[n("li",null,[n("a",wt,[e("🟢 145 - 二叉树的后序遍历"),t(s)])])]),It,qt,Ot,Ct,n("ul",null,[n("li",null,[n("a",Lt,[e("🟠 146 - LRU 缓存"),t(s)]),jt])]),Nt,n("ul",null,[n("li",null,[n("a",Vt,[e("🟠 147 - 对链表进行插入排序"),t(s)])])]),At,St,zt,Bt,n("ul",null,[n("li",null,[n("a",Dt,[e("🟠 148 - 排序链表"),t(s)])])]),Et,Pt,Rt,Tt,n("ul",null,[n("li",null,[n("a",Ut,[e("🔴 149 - 直线上最多的点数"),t(s)])])]),Ft,Gt,Ht,Jt,n("ul",null,[n("li",null,[n("a",Kt,[e("🟠 150 - 逆波兰表达式求值"),t(s)])])]),Mt,Qt,Wt,Xt,n("ul",null,[n("li",null,[n("a",Yt,[e("🟠 151 - 反转字符串中的单词"),t(s)])])]),Zt,$t,na,ea,n("ul",null,[n("li",null,[n("a",sa,[e("🟢 160 - 相交链表"),t(s)]),ta])]),aa,oa,la,ra,n("ul",null,[n("li",null,[n("a",ia,[e("🟠 167 - 两数之和 II - 输入有序数组"),t(s)]),ca])]),da,n("ul",null,[n("li",null,[n("a",pa,[e("🟠 172 - 阶乘后的零"),t(s)])])]),ua,ha,_a,ma,n("ul",null,[n("li",null,[n("a",ka,[e("🔴 714 - 地下城游戏"),t(s)])])]),ba,ga,fa,va,n("ul",null,[n("li",null,[n("a",ya,[e("🟠 187 - 重复的DNA序列"),t(s)])])]),xa,wa,Ia,qa,n("ul",null,[n("li",null,[n("a",Oa,[e("🔴 188 - 买卖股票的最佳时机 IV"),t(s)])])]),Ca,La,ja,Na,n("ul",null,[n("li",null,[n("a",Va,[e("🟠 189 - 打家劫舍"),t(s)])])]),Aa,Sa,za,Ba,n("ul",null,[n("li",null,[n("a",Da,[e("🟢 191 - 位1的个数"),t(s)])])]),Ea,Pa])}const Ha=o(d,[["render",Ra],["__file","0x0100.html.vue"]]);export{Ha as default};
