import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as e,c as n,a as o,f as s}from"./app-rtVqrOTq.js";const c={},d=s(`<h2 id="kvc" tabindex="-1"><a class="header-anchor" href="#kvc" aria-hidden="true">#</a> <code>KVC</code></h2><blockquote><p><code>KVC (Key Value Coding)</code> : 是 <code>OC</code> 的特性，可以直接通过键名访问属性和属性赋值。通过 <code>NSObject</code> 的扩展(<code>NSKeyValueCoding</code>)来实现，所有继承 <code>NSObject</code> 的类型都可以使用 <code>KVC</code> 特性。</p></blockquote><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// 通过 key 读取值</span>
<span class="token operator">-</span> <span class="token punctuation">(</span>nullable id<span class="token punctuation">)</span>valueForKey<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>key<span class="token punctuation">;</span>                          
<span class="token comment">//通过 key 来赋值</span>
<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>setValue<span class="token punctuation">:</span><span class="token punctuation">(</span>nullable id<span class="token punctuation">)</span>value forKey<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>key<span class="token punctuation">;</span>          
<span class="token comment">// keyPath 读取值</span>
<span class="token operator">-</span> <span class="token punctuation">(</span>nullable id<span class="token punctuation">)</span>valueForKeyPath<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>keyPath<span class="token punctuation">;</span>                  
<span class="token comment">// keyPath 来赋值</span>
<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>setValue<span class="token punctuation">:</span><span class="token punctuation">(</span>nullable id<span class="token punctuation">)</span>value forKeyPath<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>keyPath<span class="token punctuation">;</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="❓kvc-机制是如何通过-key-找到-value" tabindex="-1"><a class="header-anchor" href="#❓kvc-机制是如何通过-key-找到-value" aria-hidden="true">#</a> ❓<code>KVC</code> 机制是如何通过 <code>key</code> 找到 <code>value</code> ？</h3><h3 id="若一个类有实例变量-nsstring-foo-调用-setvalue-forkey-时-可以以-foo-还是-foo-作为-key" tabindex="-1"><a class="header-anchor" href="#若一个类有实例变量-nsstring-foo-调用-setvalue-forkey-时-可以以-foo-还是-foo-作为-key" aria-hidden="true">#</a> 若一个类有实例变量 <code>NSString *_foo</code>，调用 <code>setValue:forKey:</code> 时，可以以 <code>foo</code> 还是 <code>_foo</code> 作为 <code>key</code>？</h3><h3 id="kvc-的-keypath-中的集合运算符如何使用" tabindex="-1"><a class="header-anchor" href="#kvc-的-keypath-中的集合运算符如何使用" aria-hidden="true">#</a> <code>KVC</code> 的 <code>keyPath</code> 中的集合运算符如何使用？</h3><h3 id="kvc-和-kvo-的-keypath-一定是属性么" tabindex="-1"><a class="header-anchor" href="#kvc-和-kvo-的-keypath-一定是属性么" aria-hidden="true">#</a> <code>KVC</code> 和 <code>KVO</code> 的 <code>keyPath</code> 一定是属性么？</h3><h3 id="kvc-有哪些实际应用" tabindex="-1"><a class="header-anchor" href="#kvc-有哪些实际应用" aria-hidden="true">#</a> <code>KVC</code> 有哪些实际应用？</h3><ul><li>动态取值或赋值</li><li>可以读取或修改类的私有属性</li></ul><h3 id="kvc-的底层实现" tabindex="-1"><a class="header-anchor" href="#kvc-的底层实现" aria-hidden="true">#</a> <code>KVC</code> 的底层实现？</h3><h2 id="kvo" tabindex="-1"><a class="header-anchor" href="#kvo" aria-hidden="true">#</a> <code>KVO</code></h2><blockquote><p><code>KVO (Key Value Observer)</code> : 是一种观察者模式的实现。</p></blockquote><h3 id="addobserver-forkeypath-options-context-各个参数的作用分别是什么-observer-中需要实现哪个方法才能获得-kvo-回调" tabindex="-1"><a class="header-anchor" href="#addobserver-forkeypath-options-context-各个参数的作用分别是什么-observer-中需要实现哪个方法才能获得-kvo-回调" aria-hidden="true">#</a> <code>addObserver:forKeyPath:options:context:</code>各个参数的作用分别是什么，<code>observer</code> 中需要实现哪个方法才能获得 <code>KVO</code> 回调？</h3><h3 id="kvo-的优缺点" tabindex="-1"><a class="header-anchor" href="#kvo-的优缺点" aria-hidden="true">#</a> <code>KVO</code> 的优缺点？</h3><h3 id="如何手动触发一个-value-的-kvo" tabindex="-1"><a class="header-anchor" href="#如何手动触发一个-value-的-kvo" aria-hidden="true">#</a> 如何手动触发一个 <code>value</code> 的 <code>KVO</code>？</h3><h3 id="如何手动关闭-kvo" tabindex="-1"><a class="header-anchor" href="#如何手动关闭-kvo" aria-hidden="true">#</a> 如何手动关闭 <code>KVO</code>?</h3><h3 id="通过-kvc-修改属性会触发-kvo-吗" tabindex="-1"><a class="header-anchor" href="#通过-kvc-修改属性会触发-kvo-吗" aria-hidden="true">#</a> 通过 <code>KVC</code> 修改属性会触发 <code>KVO</code> 吗？</h3><h3 id="如何取消系统默认的-kvo-并手动触发-给-kvo-的触发设定条件-改变的值符合某个条件时再触发kvo" tabindex="-1"><a class="header-anchor" href="#如何取消系统默认的-kvo-并手动触发-给-kvo-的触发设定条件-改变的值符合某个条件时再触发kvo" aria-hidden="true">#</a> 如何取消系统默认的 <code>KVO</code> 并手动触发（给 <code>KVO</code> 的触发设定条件：改变的值符合某个条件时再触发<code>KVO</code>）？</h3><h3 id="如何关闭默认的-kvo-的默认实现-并进入自定义的-kvo-实现" tabindex="-1"><a class="header-anchor" href="#如何关闭默认的-kvo-的默认实现-并进入自定义的-kvo-实现" aria-hidden="true">#</a> 如何关闭默认的 <code>KVO</code> 的默认实现，并进入自定义的 <code>KVO</code> 实现？</h3><h3 id="kvo-失效了怎么办" tabindex="-1"><a class="header-anchor" href="#kvo-失效了怎么办" aria-hidden="true">#</a> <code>KVO</code> 失效了怎么办？</h3><h3 id="kvo-的底层实现" tabindex="-1"><a class="header-anchor" href="#kvo-的底层实现" aria-hidden="true">#</a> <code>KVO</code> 的底层实现？</h3><h3 id="kvo-为什么要创建一个子类来实现" tabindex="-1"><a class="header-anchor" href="#kvo-为什么要创建一个子类来实现" aria-hidden="true">#</a> <code>KVO</code> 为什么要创建一个子类来实现？</h3><h3 id="哪些情况下会引发-kvo-崩溃-怎么防护" tabindex="-1"><a class="header-anchor" href="#哪些情况下会引发-kvo-崩溃-怎么防护" aria-hidden="true">#</a> 哪些情况下会引发 <code>KVO</code> 崩溃，怎么防护？</h3>`,23);function t(r,i){return e(),n("div",null,[o(" more "),d])}const h=a(c,[["render",t],["__file","kvc-kvo.html.vue"]]);export{h as default};
