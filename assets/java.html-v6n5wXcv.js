import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as e,a as d,f as n}from"./app-SDsRO-JA.js";const s={},o=n(`<blockquote><p><code>Java</code> 是 SUN ( Stanford University Network 斯坦福大学网络公司 ) 1995 年推出的一门高级编程语言。Java 名称的来源 Java 最初被命名为 Oak，目标在于家用电器等小型系统的编程语言，随着市场的变化，SUN 着眼于网络应用的开发。Java 的名字的来源：Java 是印度尼西亚爪哇岛的英文名称，因盛产咖啡而闻名。</p><p>&quot;write once run anywhere&quot;</p></blockquote><h2 id="concept" tabindex="-1"><a class="header-anchor" href="#concept" aria-hidden="true">#</a> Concept</h2><ul><li><p>Java 的三大平台</p><table><thead><tr><th>类型</th><th>全称</th><th>说明</th></tr></thead><tbody><tr><td>Java SE</td><td>Java Platform Standard Edition</td><td>基础版本，开发 Java 应用程序</td></tr><tr><td>Java EE</td><td>Java Platform Enterprise Edition</td><td>企业版本，开发 Java 服务端程序...</td></tr><tr><td>Java ME</td><td>Java Platform Micro Edition</td><td>嵌入(移动)设备版本</td></tr></tbody></table></li><li><p>JDK &amp; JRE &amp; JVM</p><table><thead><tr><th>类型</th><th>全称</th><th>说明</th></tr></thead><tbody><tr><td>JDK</td><td>Java Development Kit</td><td>包括了Java运行环境、Java工具和Java基础类库。</td></tr><tr><td>JRE</td><td>Java Runtime Environment</td><td>包括Java虚拟机和Java程序所需的核心类库等</td></tr><tr><td>JVM</td><td>Java Virtual Machine</td><td>Java虚拟机</td></tr></tbody></table></li><li><p>JDK 目录</p><blockquote><ul><li><code>bin</code> : 存放Java的编译器、解释器等工具(可执行文件)。</li><li><code>include</code> : 存放的调用系统资源的接口文件。</li><li><code>jre</code> : 存放Java运行环境文件。</li><li><code>lib</code> : 存放Java的类库文件。</li><li><code>man</code> : man帮助文件</li><li><code>src.zip</code> : JDK提供的类的源代码。</li></ul></blockquote></li><li><p>jar &amp; war &amp; ear</p><table><thead><tr><th>打包类型</th><th>全称</th><th>说明</th></tr></thead><tbody><tr><td>jar</td><td>java archive file</td><td>java 程序打包文件，与 zip 兼容</td></tr><tr><td>war</td><td>web archive file</td><td>web 程序打包文件</td></tr><tr><td>ear</td><td>enterprise archive file</td><td>企业打包文件</td></tr></tbody></table></li><li><p>访问修饰符</p><table><thead><tr><th>位置</th><th>public</th><th>protected</th><th>default</th><th>private</th></tr></thead><tbody><tr><td>同一类中</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>同一包中</td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>子类</td><td>√</td><td>√</td><td></td><td></td></tr><tr><td>不同包中</td><td>√</td><td></td><td></td><td></td></tr></tbody></table></li><li><p>基本数据类型</p><table><thead><tr><th>类型</th><th>说明</th><th>比特位</th><th>位数</th><th>范围</th></tr></thead><tbody><tr><td>byte</td><td>一个字节的大小</td><td>8 bit</td><td>2(8)</td><td>-128~127</td></tr><tr><td>short</td><td>两个字节的大小</td><td>16 bit</td><td>2(16)</td><td>-2(15)~2(15)-1</td></tr><tr><td>int</td><td>四个字节的大小</td><td>32 bit</td><td>2(32)</td><td>-2(31)~2(31)-1</td></tr><tr><td>long</td><td>八个字节的大小</td><td>64 bit</td><td>2(64)</td><td>-2(63)~2(63)-1</td></tr><tr><td>float</td><td>四个字节的大小</td><td>32 bit</td><td></td><td></td></tr><tr><td>double</td><td>八个字节的大小</td><td>64 bit</td><td></td><td></td></tr><tr><td>char</td><td>两个字节的大小</td><td>16 bit</td><td>2(16)</td><td></td></tr><tr><td>boolean</td><td>一个字节的大小</td><td>8 bit</td><td></td><td></td></tr></tbody></table></li></ul><h2 id="代码执行顺序" tabindex="-1"><a class="header-anchor" href="#代码执行顺序" aria-hidden="true">#</a> 代码执行顺序</h2><blockquote><p><code>静态代码块</code> -&gt; <code>main方法</code> -&gt; <code>构造代码块</code> -&gt; <code>构造方法</code></p><ul><li>普通代码块 : 定义在方法中的的 <code>{}</code> 代码块</li><li>构造代码块 : 定义在类中，但是没有 static 修饰的 <code>{}</code> 代码块</li><li>静态代码块 : 定义在类中，使用 static 修饰的 <code>{}</code> 代码块</li></ul></blockquote><h2 id="pojo-javabean" tabindex="-1"><a class="header-anchor" href="#pojo-javabean" aria-hidden="true">#</a> POJO &amp; JavaBean</h2><ul><li><p><code>POJO</code> (Plain Old Java Object) : 简单 Java 对象 (纯洁的老式 JAVA 对象)</p><ul><li>没有继承任何类</li><li>没有实现任何接口</li><li>不依赖任何框架</li><li>可以包含业务逻辑</li><li>可以包含持久化逻辑</li><li>可以包含属性访问方法(get &amp; set)</li></ul></li><li><p><code>JavaBean</code> : 一种特殊的 JAVA 类, 是一个 Java 的可重用组件</p><ul><li>必须具有公共 <code>Public</code> 无参数构造函数</li><li>所有属性私有化 <code>Private</code>, 并且提供公共 <code>Public</code> 的访问方法(get &amp; set)</li><li>可以序列化(如: 实现 <code>Serializable</code> 接口)</li></ul></li></ul><h2 id="泛型通配符" tabindex="-1"><a class="header-anchor" href="#泛型通配符" aria-hidden="true">#</a> <code>?</code> 泛型通配符</h2><blockquote><ul><li><code>? extends T</code> : 限定通配符的上边界，接收 T 类型或者 T 的子类型</li><li><code>? super T</code> : 限定通配符的下边界，接收 T 类型或者 T 的父类型</li></ul></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// extends，接收 Number 类型或者 Number 的子类型</span>
<span class="token class-name">Vector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token punctuation">&gt;</span></span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 正确</span>
<span class="token class-name">Vector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token punctuation">&gt;</span></span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 错误</span>
<span class="token comment">// super，接收 Integer 或者 Integer 的父类型</span>
<span class="token class-name">Vector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Number</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 正确</span>
<span class="token class-name">Vector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Byte</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 错误</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="abstract-不可共存的关修饰符" tabindex="-1"><a class="header-anchor" href="#abstract-不可共存的关修饰符" aria-hidden="true">#</a> <code>abstract</code> 不可共存的关修饰符</h2><ul><li><code>final</code> : 修饰类不能继承，修饰方法不能重写；abstract 修饰必须继承和重写</li><li><code>static</code> : 使用类名调用；abstract 修饰方法没有实现，不能直接调用</li><li><code>private</code> : 修饰的类智能在本类使用；abstract 修饰需要子类重写</li></ul><h2 id="interface-接口默认修饰符" tabindex="-1"><a class="header-anchor" href="#interface-接口默认修饰符" aria-hidden="true">#</a> <code>interface</code> 接口默认修饰符</h2><ul><li>属性 : <code>public static final</code></li><li>方法 : <code>public abstract</code></li></ul><h2 id="字节流-字符流" tabindex="-1"><a class="header-anchor" href="#字节流-字符流" aria-hidden="true">#</a> 字节流 &amp; 字符流</h2><table><thead><tr><th>类型</th><th>Input (输入流)</th><th>Output (输出流)</th><th>特点</th></tr></thead><tbody><tr><td>字节流</td><td><code>InputStream</code></td><td><code>OutputStream</code></td><td>处理单元是一个字节，用于操作二进制文件</td></tr><tr><td>字符流</td><td><code>Reader</code></td><td><code>Writer</code></td><td>字节流 + 编码表，用于处理文字数据</td></tr></tbody></table><h2 id="error-exception" tabindex="-1"><a class="header-anchor" href="#error-exception" aria-hidden="true">#</a> Error &amp; Exception</h2><blockquote><ul><li><code>Throwable</code> : <code>Error</code> &amp; <code>Exception</code> 的基类</li><li><code>Error</code> : 错误，一般不通过代码去处理</li><li><code>Exception</code> : 异常 * RuntimeException : 运行时异常 * CheckedException : 非运行时异常 (可检测异常)</li></ul></blockquote><ul><li><p>运行时异常: <code>RuntimeException</code></p><table><thead><tr><th>运行时异常</th><th>说明</th></tr></thead><tbody><tr><td><code>ClassCastException</code></td><td>类型转换异常</td></tr><tr><td><code>ArithmeticException</code></td><td>算术异常，如:除数为0</td></tr><tr><td><code>NullPointerException</code></td><td>空指针异常</td></tr><tr><td><code>ArrayIndexOutOfBoundsException</code></td><td>数组越界异常</td></tr><tr><td><code>ArrayStoreException</code></td><td>数组数据存储异常</td></tr></tbody></table></li><li><p>非运行时异常</p><table><thead><tr><th>非运行时异常</th><th>说明</th></tr></thead><tbody><tr><td><code>IOException</code></td><td>IO 异常</td></tr><tr><td><code>ClassNotFoundException</code></td><td>类型 class 未找到</td></tr></tbody></table></li><li><p><code>throw</code> &amp; <code>throws</code></p><table><thead><tr><th>类型</th><th>作用</th><th>使用位置</th><th>特点</th></tr></thead><tbody><tr><td><code>throw</code></td><td>抛出异常</td><td>在函数内部使用</td><td>抛出可能异常类，多个用逗号分割</td></tr><tr><td><code>throws</code></td><td>抛出异常</td><td>定义在函数后面</td><td>抛出异常对象</td></tr></tbody></table></li></ul>`,19);function c(l,r){return a(),e("div",null,[d(" more "),o])}const h=t(s,[["render",c],["__file","java.html.vue"]]);export{h as default};
