import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o,c as t,a as r,b as e,f as c}from"./app-KNMb9TXZ.js";const d={},h=e("blockquote",null,[e("p",null,"10 - 排序 & 查找 (11)")],-1),n=c(`<h2 id="_10-1-合并排序的数组" tabindex="-1"><a class="header-anchor" href="#_10-1-合并排序的数组" aria-hidden="true">#</a> 10.1 合并排序的数组</h2><blockquote><p>给定两个排序后的数组A和B，其中A的末端有足够的缓冲空间容纳B。编写一个方法，将B合并入A并排序。</p></blockquote><h2 id="_10-2-变位词组" tabindex="-1"><a class="header-anchor" href="#_10-2-变位词组" aria-hidden="true">#</a> 10.2 变位词组</h2><blockquote><p>编写一种方法，对字符串数组进行排序，将所有变位词排在相邻的位置。</p></blockquote><h2 id="_10-3-搜索旋转数组" tabindex="-1"><a class="header-anchor" href="#_10-3-搜索旋转数组" aria-hidden="true">#</a> 10.3 搜索旋转数组</h2><blockquote><p>给定一个排序后的数组，包含n个整数，但这个数组已被旋转过很多次了，次数不详。请编写代码找出数组中的某个元素，假设数组元素原先是按升序排列的。</p></blockquote><pre><code>示例：
    输入：在数组{15, 16, 19, 20, 25, 1, 3, 4, 5, 7, 10, 14}中找出5
    输出：8（元素5在该数组中的索引）
</code></pre><h2 id="_10-4-排序集合的查找" tabindex="-1"><a class="header-anchor" href="#_10-4-排序集合的查找" aria-hidden="true">#</a> 10.4 排序集合的查找</h2><blockquote><p>给定一个类似数组的长度可变的数据结构Listy，它有个elementAt(i)方法，可以在O(1) 的时间内返回下标为i的值，但越界会返回-1。因此，该数据结构只支持正整数。给定一个排好序的正整数Listy，找到值为x的下标。如果x多次出现，任选一个返回。</p></blockquote><h2 id="_10-5-稀疏数组搜索" tabindex="-1"><a class="header-anchor" href="#_10-5-稀疏数组搜索" aria-hidden="true">#</a> 10.5 稀疏数组搜索</h2><blockquote><p>有个排好序的字符串数组，其中散布着一些空字符串，编写一种方法，找出给定字符串的位置。</p></blockquote><pre><code>示例：
    输入：在字符串数组{&quot;at&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;ball&quot;, &quot;&quot;, &quot;&quot;, &quot;car&quot;, &quot;&quot;, &quot;&quot;, &quot;dad&quot;, &quot;&quot;, &quot;&quot;}中查找“ball”
    输出：4
</code></pre><h2 id="_10-6-大文件排序" tabindex="-1"><a class="header-anchor" href="#_10-6-大文件排序" aria-hidden="true">#</a> 10.6 大文件排序</h2><blockquote><p>设想你有个20 GB的文件，每行有一个字符串，请阐述一下将如何对这个文件进行排序。</p></blockquote><h2 id="_10-7-失踪的整数" tabindex="-1"><a class="header-anchor" href="#_10-7-失踪的整数" aria-hidden="true">#</a> 10.7 失踪的整数</h2><blockquote><p>给定一个输入文件，包含40亿个非负整数，请设计一种算法，生成一个不包含在该文件中的整数，假定你有1GB内存来完成这项任务。</p></blockquote><h2 id="_10-8-寻找重复数" tabindex="-1"><a class="header-anchor" href="#_10-8-寻找重复数" aria-hidden="true">#</a> 10.8 寻找重复数</h2><blockquote><p>给定一个数组，包含1到N的整数，N最大为32000，数组可能含有重复的值，且N的取值不定。若只有4KB内存可用，该如何打印数组中所有重复的元素。</p></blockquote><h2 id="_10-9-排序矩阵查找" tabindex="-1"><a class="header-anchor" href="#_10-9-排序矩阵查找" aria-hidden="true">#</a> 10.9 排序矩阵查找</h2><blockquote><p>给定M×N矩阵，每一行、每一列都按升序排列，请编写代码找出某元素。</p></blockquote><h2 id="_10-10-数字流的秩" tabindex="-1"><a class="header-anchor" href="#_10-10-数字流的秩" aria-hidden="true">#</a> 10.10 数字流的秩</h2><blockquote><p>假设你正在读取一串整数。每隔一段时间，你希望能找出数字x的秩（小于或等于x的值的个数）。请实现数据结构和算法来支持这些操作，也就是说，实现track(int x)方法，每读入一个数字都会调用该方法；实现getRankOfNumber(int x)方法，返回小于或等于x（x除外）的值的个数。</p></blockquote><pre><code>示例：
    数据流为（按出现的先后顺序）：5, 1, 4, 4, 5, 9, 7, 13, 3
    getRankOfNumber(1) = 0
    getRankOfNumber(3) = 1
    getRankOfNumber(4) = 3
</code></pre><h2 id="_10-11-峰与谷" tabindex="-1"><a class="header-anchor" href="#_10-11-峰与谷" aria-hidden="true">#</a> 10.11 峰与谷</h2><blockquote><p>在一个整数数组中，“峰”是大于或等于相邻整数的元素，相应地，“谷”是小于或等于相邻整数的元素。例如，在数组{5, 8, 6, 2, 3, 4, 6}中，{8, 6}是峰，{5, 2}是谷。现在给定一个整数数组，将该数组按峰与谷的交替顺序排序。</p></blockquote><pre><code>示例：
    输入：[5, 3, 1, 2, 3]
    输出：[5, 1, 3, 2, 3]
</code></pre>`,26);function u(i,l){return o(),t("div",null,[h,r(" more "),n])}const b=a(d,[["render",u],["__file","0x10.sort-search.html.vue"]]);export{b as default};
