import{_ as l}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as t,c as p,a as e,b as o,f as u}from"./app-LpJmjHHK.js";const i={},n=o("blockquote",null,[o("p",null,"Coding Interviews: Questions, Analysis and Solutions (剑指 Offer 2th) (66)")],-1),c=u('<h2 id="数据结构-45" tabindex="-1"><a class="header-anchor" href="#数据结构-45" aria-hidden="true">#</a> 数据结构 (45)</h2><h3 id="字符串-9" tabindex="-1"><a class="header-anchor" href="#字符串-9" aria-hidden="true">#</a> 字符串 (9)</h3><ul><li><p><strong>替换空格</strong> (5)</p><blockquote><p>请实现一个函数，将一个字符串中的空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。</p></blockquote></li><li><p><strong>正则表达式匹配</strong> (19)</p><blockquote><p>请实现一个函数用来匹配包括&#39;.&#39;和&#39;*&#39;的正则表达式。模式中的字符&#39;.&#39;表示任意一个字符，而&#39;*&#39;表示它前面的字符可以出现任意次（包含0次）。 在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串&quot;aaa&quot;与模式&quot;a.a&quot;和&quot;ab*ac*a&quot;匹配，但是与&quot;aa.a&quot;和&quot;ab*a&quot;均不匹配</p></blockquote></li><li><p><strong>表示数值的字符串</strong> (20)</p><blockquote><p>请实现一个函数用来判断字符串是否表示数值（包括整数和小数）。例如，字符串&quot;+100&quot;,&quot;5e2&quot;,&quot;-123&quot;,&quot;3.1416&quot;和&quot;-1E-16&quot;都表示数值。 但是&quot;12e&quot;,&quot;1a3.14&quot;,&quot;1.2.3&quot;,&quot;+-5&quot;和&quot;12e+4.3&quot;都不是。</p></blockquote></li><li><p><strong>字符串的排列</strong> (38)</p><blockquote><p>输入一个字符串,按字典序打印出该字符串中字符的所有排列。例如输入字符串abc,则打印出由字符a,b,c所能排列出来的所有字符串abc,acb,bac,bca,cab和cba。</p></blockquote></li><li><p><strong>把数字翻译成字符串</strong> (46)</p><blockquote><p>给定一个数字，我们按照如下规则把它翻译为字符串：0翻译成“a”，1翻译成“b”，……，11翻译成“1”,……，25翻译成“z”。一个数字可能有多个翻译。例如：12258有5种不同的翻译，分别是“bccfi”、“bwfi”、“bczi”、“mcfi”和“mzi”。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。</p></blockquote></li><li><p><strong>最长不含重复字符的子字符串</strong> (48)</p><blockquote><p>请从字符串中找出一个最长的不包含重复字符的子字符串，计算该最长子字符串的长度。假设字符串中只包含 &#39;a&#39;~&#39;z&#39; 的字符。例如，在字符串 &quot;arabcacfr&quot; 中，最长的不含重复的子字符串是 &quot;acfr&quot;，长度为4。</p></blockquote></li><li><p><strong>第一次只出现一次的字符</strong> (50)</p><ul><li><p>字符串中第一个只出现一次的字符</p><blockquote><p>在一个字符串(1&lt;=字符串长度&lt;=10000，全部由字母组成)中找到第一个只出现一次的字符,并返回它的位置</p></blockquote></li><li><p>字符流中第一个自出现一次的字符</p><blockquote><p>请实现一个函数用来找出字符流中第一个只出现一次的字符。例如，当从字符流中只读出前两个字符&quot;go&quot;时，第一个只出现一次的字符是&quot;g&quot;。当从该字符流中读出前六个字符“google&quot;时，第一个只出现一次的字符是&quot;l&quot;。</p></blockquote></li></ul></li><li><p><strong>翻转字符串</strong> (58)</p><ul><li><p>翻转单词顺序</p><blockquote><p>输入一个英文句子，翻转句子中单词的顺序，但单词内字符的顺序不变。为简单起见，标点符号和普通字母一样处理。例如，输入字符串“I am a student.”，则输出“student. a am I”。</p></blockquote></li><li><p>左旋转字符串</p><blockquote><p>字符串的左旋转操作是把字符串前面的若干个字符转移到字符串的尾部。请定义一个函数实现字符串左旋操作的功能。例如，输入字符串“abcdefg”和数字2，该函数将返回左旋两位得到的结果“cdefgab”。</p></blockquote></li></ul></li><li><p><strong>把字符串转换成整数</strong> (67)</p><blockquote><p>将一个字符串转换成一个整数，要求不能使用字符串转换整数的库函数。 数值为0或者字符串不是一个合法的数值则返回0</p></blockquote></li></ul><h3 id="数组-11" tabindex="-1"><a class="header-anchor" href="#数组-11" aria-hidden="true">#</a> 数组 (11)</h3><ul><li><p><strong>数组中重复的数字</strong> (3)</p><ul><li><p>找出数组中重复的数字</p><blockquote><p>在一个长度为 n 的数组里的所有数字都在 0~n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。例如，如果输入长度为 7 的数组 {2,3,1,0,2,5,3}, 那么对应的输出是重复的数字 2 或者 3。</p></blockquote></li><li><p>不修改数组找出重复的数字</p><blockquote><p>在一个长度为 n+1 的数组里的所有数字都在 0~n 的范围内，数组中至少有一个数字是重复的。请找出数组中任意一个重复的数字，但是不能修改输入的数组。例如，如果输入长度为 8 的数组 {2,3,5,4,3,2,6，7}, 那么对应的输出是重复的数字 2 或者 3。</p></blockquote></li></ul></li><li><p><strong>二维数组中的查找</strong> (4)</p><blockquote><p>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p></blockquote></li><li><p><strong>调整数组顺序使奇数位于偶数前面</strong> (21)</p><blockquote><p>输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。</p></blockquote></li><li><p><strong>顺时针打印矩阵</strong> (29)</p><blockquote><p>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。例如，如果输入如下矩阵： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 则依次打印出数字1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10.</p></blockquote></li><li><p><strong>数组中出现次数超过一半的数字</strong> (39)</p><blockquote><p>数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。例如输入一个长度为9的数组{1,2,3,2,2,2,5,4,2}。由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2。如果不存在则输出0。</p></blockquote></li><li><p><strong>数字序列中某一位的数字</strong> (44)</p><blockquote><p>数字以 0123456789101112131415...的格式序列化一个字符序列中。在这个序列中，第 5 位(从 0 开始计数)是 5，第 13 位是 1，第 19 位是 4，等等。请写一个函数，求任意第 n 位对应的数字。</p></blockquote></li><li><p><strong>把数组排成最小的数</strong> (45)</p><blockquote><p>输入一个正整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。例如输入数组{3，32，321}，则打印出这三个数字能排成的最小数字为321323。</p></blockquote></li><li><p><strong>丑数</strong> (49)</p><blockquote><p>把只包含因子2、3和5的数称作丑数（Ugly Number）。例如6、8都是丑数，但14不是，因为它包含因子7。 习惯上我们把1当做是第一个丑数。求按从小到大的顺序的第N个丑数。</p></blockquote></li><li><p><strong>数组中的逆序对</strong> (51)</p><blockquote><p>在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组,求出这个数组中的逆序对的总数P。并将P对1000000007取模的结果输出。 即输出P%1000000007</p></blockquote></li><li><p><strong>数组中数字出现的次数</strong> (56)</p><ul><li><p>数组中只出现一次的两个数字</p><blockquote><p>一个整型数组里除了两个数字之外，其他的数字都出现了两次。请写程序找出这两个只出现一次的数字。要求时间复杂度O(n)，空间复杂度O(1)。</p></blockquote></li><li><p>数组中唯一只出现一次的数字</p><blockquote><p>在一个数组中除一个数字只出现一次之外，其他数字都出现了三次。请找出哪个只出现一次的数字。</p></blockquote></li></ul></li><li><p><strong>构建乘积数组</strong> (66)</p><blockquote><p>给定一个数组A[0,1,...,n-1],请构建一个数组B[0,1,...,n-1],其中B中的元素B[i]=A[0] x A[1] x ... x A[i-1] x A[i+1] x ... x A[n-1]。不能使用除法。</p></blockquote></li></ul><h3 id="链表-8" tabindex="-1"><a class="header-anchor" href="#链表-8" aria-hidden="true">#</a> 链表 (8)</h3><ul><li><p><strong>从尾到头打印链表</strong> (6)</p><blockquote><p>输入一个链表，从尾到头打印链表每个节点的值。</p></blockquote></li><li><p><strong>删除链表的节点</strong> (18)</p><ul><li><p>在 O(1) 时间内删除链表节点</p><blockquote><p>给定单向链表的头指针和一个节点指针，定义一个函数在 O(1) 时间内删除该节点。</p></blockquote></li><li><p>删除链表中重复的节点</p><blockquote><p>在一个排序的链表中，存在重复的结点，请删除该链表中重复的结点，重复的结点不保留，返回链表头指针。 例如，链表1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5 处理后为 1-&gt;2-&gt;5</p></blockquote></li></ul></li><li><p><strong>链表中倒数第 k 个节点</strong> (22)</p><blockquote><p>输入一个链表，输出该链表中倒数第k个结点。为符合计数习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。例如：一个链表有6个节点，从头节点开始，它们的值一次是1、2、3、4、5、6。这个链表的倒数第3个节点是值为4的节点。</p></blockquote></li><li><p><strong>链表中环的入口结点</strong> (23)</p><blockquote><p>如果一个链表中包含环，请找出该链表的环的入口结点。例如：在1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6-&gt;3的链表中，包含一个环，环的入口节点是3。</p></blockquote></li><li><p><strong>反转链表</strong> (24)</p><blockquote><p>输入一个链表，反转链表后，输出反转链表的头结点。</p></blockquote></li><li><p><strong>合并两个排序链表</strong> (25)</p><blockquote><p>输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调递增规则。例如：链表1：1-&gt;3-&gt;5；链表2：2-&gt;4-&gt;6；合并后为：1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6。</p></blockquote></li><li><p><strong>复杂链表的复制</strong> (35)</p><blockquote><p>输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，另一个特殊指针指向任意一个节点），返回结果为复制后复杂链表的head。（注意，输出结果中请不要返回参数中的节点引用，否则判题程序会直接返回空）</p></blockquote></li><li><p><strong>两个链表的第一个公共节点</strong> (52)</p><blockquote><p>输入两个链表，找出它们的第一个公共结点。</p></blockquote></li></ul><h3 id="栈-队列-4" tabindex="-1"><a class="header-anchor" href="#栈-队列-4" aria-hidden="true">#</a> 栈 &amp; 队列 (4)</h3><ul><li><p><strong>用两个栈实现队列</strong> (9)</p><blockquote><p>用两个栈来实现一个队列。实现该队列的两个函数appendTail和deleteHead，分别完成在队列尾部插入节点和在队列头部删除节点的功能。队列中的元素为int类型。</p></blockquote></li><li><p><strong>包含 min 函数的栈</strong> (30)</p><blockquote><p>定义栈的数据结构，请在该类型中实现一个能够得到栈最小元素的min函数。在该栈中，调用min、push以及pop的时间复杂度都是O(1)。</p></blockquote></li><li><p><strong>栈的压入、弹出序列</strong> (31)</p><blockquote><p>输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4，5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）</p></blockquote></li><li><p><strong>队列的最大值</strong> (59)</p><ul><li><p>滑动窗口的最大值</p><blockquote><p>给定一个数组和滑动窗口的大小，找出所有滑动窗口里数值的最大值。 例如，如果输入数组{2,3,4,2,6,2,5,1}及滑动窗口的大小3，那么一共存在6个滑动窗口，他们的最大值分别为{4,4,6,6,6,5}； 针对数组{2,3,4,2,6,2,5,1}的滑动窗口有以下6个： {[2,3,4],2,6,2,5,1}， {2,[3,4,2],6,2,5,1}， {2,3,[4,2,6],2,5,1}， {2,3,4,[2,6,2],5,1}， {2,3,4,2,[6,2,5],1}， {2,3,4,2,6,[2,5,1]}。</p></blockquote></li><li><p>队列的最大值</p><blockquote><p>请定义一个队列并实现函数 max 得到队列里的最大值，要求函数 max、push_back 和 pop_front 的时间复杂度都是 O(1)。</p></blockquote></li></ul></li></ul><h3 id="树-13" tabindex="-1"><a class="header-anchor" href="#树-13" aria-hidden="true">#</a> 树 (13)</h3><ul><li><p><strong>重建二叉树</strong> (7)</p><blockquote><p>输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。</p></blockquote></li><li><p><strong>二叉树的下一个结点</strong> (8)</p><blockquote><p>给定一个二叉树和其中的一个结点，请找出中序遍历顺序的下一个结点并且返回。注意，树中的结点不仅包含左右子结点，同时包含指向父结点的指针。</p></blockquote></li><li><p><strong>树的子结构</strong> (26)</p><blockquote><p>输入两棵二叉树A，B，判断B是不是A的子结构。</p></blockquote></li><li><p><strong>二叉树的镜像</strong> (27)</p><blockquote><p>操作给定的二叉树，将其变换为源二叉树的镜像。 输入描述: 二叉树的镜像定义: 源二叉树 8 / <br> 6 10 / \\ / <br> 5 7 9 11 镜像二叉树 8 / <br> 10 6 / \\ / <br> 11 9 7 5</p></blockquote></li><li><p><strong>对称的二叉树</strong> (28)</p><blockquote><p>请实现一个函数，用来判断一棵二叉树是不是对称的。如果二叉树和它的镜像一样，那么它是对称的。</p></blockquote></li><li><p><strong>从上到下打印二叉树</strong> (32)</p><ul><li><p>不分行从上到下打印二叉树</p><blockquote><p>从上倒下打印出二叉树的每个节点，同一层的节点按照从左到右的顺序打印。</p></blockquote></li><li><p>分行从上到下打印二叉树</p><blockquote><p>从上到下按层打印二叉树，同一层的节点按从左到右的顺序打印，每一层打印到一行。</p></blockquote></li><li><p>之字形打印二叉树</p><blockquote><p>请实现一个函数按照之字形打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右至左的顺序打印，第三行按照从左到右的顺序打印，其他行以此类推。</p></blockquote></li></ul></li><li><p><strong>二叉搜索树的后序遍历序列</strong> (33)</p><blockquote><p>输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历结果。如果是则返回true，否则返回false。假设输入的数组的任意两个数字都互不相同。例如，输入数组{5,7,6,9,11,10,8}，则返回true，因为这个整数序列是可以展开为一二叉搜索树的后序遍历结果。如果输入的数组是{7,4,6,5}，则由于没有哪棵二叉搜索树的后序遍历结果是这个序列，因此返回false。</p></blockquote></li><li><p><strong>二叉树中和为某一值的路径</strong> (34)</p><blockquote><p>输入一颗二叉树和一个整数，打印出二叉树中结点值的和为输入整数的所有路径。路径定义为从树的根结点开始往下一直到叶结点所经过的结点形成一条路径。</p></blockquote></li><li><p><strong>二叉搜索树与双向链表</strong> (36)</p><blockquote><p>输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。</p></blockquote></li><li><p><strong>序列化二叉树</strong> (37)</p><blockquote><p>请实现两个函数，分别用来序列化和反序列化二叉树</p></blockquote></li><li><p><strong>二叉搜索树的第 k 大节点</strong> (54)</p><blockquote><p>给定一颗二叉搜索树，请找出其中的第k大的结点。 例如， 5 / \\ 3 7 /\\ /\\ 2 4 6 8 中，按结点数值大小顺序第三个结点的值为4。</p></blockquote></li><li><p><strong>二叉树的深度</strong> (55)</p><ul><li><p>二叉树的深度</p><blockquote><p>输入一棵二叉树，求该树的深度。从根结点到叶结点依次经过的结点（含根、叶结点）形成树的一条路径，最长路径的长度为树的深度。</p></blockquote></li><li><p>平衡二叉树</p><blockquote><p>输入一棵二叉树，判断该二叉树是否是平衡二叉树。如果某二叉树中任意节点的左、右子树的深度相差不超过1，那么它就是一棵平衡二叉树。</p></blockquote></li></ul></li><li><p><strong>数中两个节点的最低公共祖先</strong> (68)</p><blockquote><p>输入两个树节点，求他们的最低公共祖先。</p></blockquote><ul><li>二叉树（二叉搜索树）：二叉搜索树是排序的，如果当前节点大于两个节点的值，去左子树中寻找；如果当前节点小于两个节点的值，去右子树中寻找；如果当前节点位于两个节点值之间，则该节点就是要寻找的最低公共祖先。</li><li>普通树（存在指向父节点的指针）：从给定节点出发，由父节点指针回到到根结点，形成链表。从而将问题转化为求两个链表的第一个公共节点的问题。</li><li>普通树（不存在指向父节点的指针）：利用两个辅助链表通过递归遍历的方法找到两条到达给定节点的路径，寻找两个链表最后一个公共节点，就是最低公共祖先。</li></ul></li></ul><h2 id="算法-数据操作-21" tabindex="-1"><a class="header-anchor" href="#算法-数据操作-21" aria-hidden="true">#</a> 算法 &amp; 数据操作 (21)</h2><h3 id="位运算-2" tabindex="-1"><a class="header-anchor" href="#位运算-2" aria-hidden="true">#</a> 位运算 (2)</h3><ul><li><p><strong>二进制中 1 的个数</strong> (15)</p><blockquote><p>请实现一个函数，输入一个整数，输出该数二进制表示中1的个数。例如，把9表示成二进制是1001，有2位是1。因此如果输入9，则该函数输出2。</p></blockquote></li><li><p><strong>不用加减乘除做加法</strong> (65)</p><blockquote><p>写一个函数，求两个整数之和，要求在函数体内不得使用+、-、*、/四则运算符号。</p></blockquote></li></ul><h3 id="递归-循环-6" tabindex="-1"><a class="header-anchor" href="#递归-循环-6" aria-hidden="true">#</a> 递归 &amp; 循环 (6)</h3><ul><li><p><strong>斐波那契数列</strong>（10）</p><ul><li><p>求斐波那契数列的第 n 项</p><blockquote><p>大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项。</p></blockquote></li><li><p>青蛙跳台阶</p><blockquote><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p></blockquote></li><li><p>变态跳台阶</p><blockquote><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p></blockquote></li><li><p>矩形覆盖</p><blockquote><p>我们可以用2x1的小矩形横着或者竖着去覆盖更大的矩形。问用8个2x1的小矩阵无重叠地覆盖一个2x8的大矩阵，共有多少种方法？</p></blockquote></li></ul></li><li><p><strong>数值的整数次方</strong> (16)</p><blockquote><p>实现函数 <code>double Power(double base, int exponent)</code>。求 base 的 exponent 次方。不得使用库函数，同时不需要考虑大数问题。</p></blockquote></li><li><p><strong>打印从 1 到最大的 n 位数</strong> (17)</p><blockquote><p>输入数字 n，按书序打印出从 1 到最大的 n 位十进制数。比如输入 3，则打印出1、2、3 一直到最大 3 位数 999。</p></blockquote></li><li><p><strong>n 个骰子的点数</strong> (60)</p><blockquote><p>把n个骰子扔在地上，所有骰子朝上的一面的点数之和为s.输入n，打印出s的所有可能的值出现的概率。</p></blockquote></li><li><p><strong>圆圈中最后剩下的数字</strong> (62)</p><blockquote><p>0、1…n-1这n个数字排成一个圆圈，从数字0开始，每次从这个圆圈里删除第m个数字。求出这个圆圈里剩下的最后一个数字。</p></blockquote></li><li><p><strong>求 1+2+...+n</strong> (64)</p><blockquote><p>求1+2+3+...+n，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）。</p></blockquote></li></ul><h3 id="查找-排序-7" tabindex="-1"><a class="header-anchor" href="#查找-排序-7" aria-hidden="true">#</a> 查找 &amp; 排序 (7)</h3><ul><li><p><strong>旋转数组的最小数字</strong> (11)</p><blockquote><p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 输入一个非递减排序的数组的一个旋转，输出旋转数组的最小元素。 例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。 NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。</p></blockquote></li><li><p><strong>最小的 k 个数</strong> (40)</p><blockquote><p>输入n个整数，找出其中最小的K个数。例如输入4,5,1,6,2,7,3,8这8个数字，则最小的4个数字是1,2,3,4,。</p></blockquote></li><li><p><strong>数据流中的中位数</strong> (41)</p><blockquote><p>如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。</p></blockquote></li><li><p><strong>1 ~ n 整数中 1 出现的次数</strong> (43)</p><blockquote><p>输入一个整数n，求1<sub>n这n个整数的十进制表示中1出现的次数。例如输入12,1</sub>12这些整数中包含1的数字有1、10、11和12，1一共出现了5次。</p></blockquote></li><li><p><strong>在排序数组中查找数字</strong> (53)</p><ul><li><p>数字在排序数组中出现的次数</p><blockquote><p>统计一个数字在排序数组中出现的次数。例如，输入排序数组 {1,2,3,3,3,3,4,5} 和数字 3，由于 3 在这个数组中出现了 4 次，因此输出 4。</p></blockquote></li><li><p>0 ~ n-1 中缺失的数字</p><blockquote><p>一个长度为 n-1 的递增排序数组中的所有数字都是唯一的，并且每个数字都在范围 0~n-1 之内。在范围 0~n-1 内的 n 个数字中有且只有一个数字不在改数组中，请找出这个数字。</p></blockquote></li><li><p>数组中数值和下标相等的元素</p><blockquote><p>假设一个单调递增的数组里的每个元素都是整数并且是唯一的。请编程实现一个函数，找出数组中任意一个数值等于其下标的元素。例如，在数组 {-3, -1, 1, 3, 5} 中，数字 3 和他们下标相等。</p></blockquote></li></ul></li><li><p><strong>和为 s 的数字</strong> (57)</p><ul><li><p>和为 s 的两个数字</p><blockquote><p>输入一个递增排序的数组和一个数字，在数组中查找两个数，使得他们的和正好是s，如果有多对数字的和等于s，则输出任意一对即可。</p></blockquote></li><li><p>和为 s 的连续正数序列</p><blockquote><p>输入一个正数s，输出所有和为s的连续正数序列（至少含有两个数）。</p></blockquote></li></ul></li><li><p><strong>扑克牌中的顺子</strong> (61)</p><blockquote><p>从扑克牌中随机抽取5张牌，判断是不是一个顺子，即这5张牌是不是连续的。2~10为数字本身，A为1，J为11，Q为12，K为13，而大、小王可以看成任意数字。</p></blockquote></li></ul><h3 id="回溯法-2" tabindex="-1"><a class="header-anchor" href="#回溯法-2" aria-hidden="true">#</a> 回溯法 (2)</h3><ul><li><p><strong>矩阵中的路径</strong> (12)</p><blockquote><p>请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一个格子开始，每一步可以在矩阵中向左，向右，向上，向下移动一个格子。如果一条路径经过了矩阵中的某一个格子，则该路径不能再进入该格子。 例如 a b c e s f c s a d e e 矩阵中包含一条字符串&quot;bcced&quot;的路径，但是矩阵中不包含&quot;abcb&quot;路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入该格子。</p></blockquote></li><li><p><strong>机器儿的运动范围</strong> (13)</p><blockquote><p>地上有一个m行和n列的方格。一个机器人从坐标0,0的格子开始移动，每一次只能向左，右，上，下四个方向移动一格，但是不能进入行坐标和列坐标的数位之和大于k的格子。请问该机器人能够达到多少个格子？例如，当k为18时，机器人能够进入方格（35,37），因为3+5+3+7 = 18。但是，它不能进入方格（35,38），因为3+5+3+8 = 19。</p></blockquote></li></ul><h3 id="动态规划-贪婪算法-4" tabindex="-1"><a class="header-anchor" href="#动态规划-贪婪算法-4" aria-hidden="true">#</a> 动态规划 &amp; 贪婪算法 (4)</h3><ul><li><p><strong>剪绳子</strong>(14)</p><blockquote><p>给你一根长度为n的绳子，请把绳子剪成m段 (m和n都是整数，n&gt;1并且m&gt;1)每段绳子的长度记为 k[0],k[1],...,k[m]。请问 k[0] x k[1] x ... x k[m] 可能的最大乘积是多少？例如，当绳子的长度为8时，我们把它剪成长度分别为2,3,3的三段，此时得到的最大乘积是18.</p></blockquote></li><li><p><strong>连续子数组的最大和</strong>(42)</p><blockquote><p>输入一个整型数组，数组里有整数也有负数。数组汇总的一个或连续多个整数组成一个子数组。求所有子数组的和的最大值。要求时间复杂度为O(n)。例如输入的数组为{1,-2,3,10,-4,7,2,-5}，和最大的子数组为{3,10,-4,7,2}，输出为该子数组的和18。</p></blockquote></li><li><p><strong>礼物的最大价值</strong> (47)</p><blockquote><p>在一个m*n的棋盘的每一格都放有一个礼物，每个礼物都有一定的价值（价值大于0）。你可以从棋盘的左上角开始拿格子里的礼物，并每次向左或者向下移动一格，知道到达棋盘的右下角。给定一个棋盘及其上面的礼物，请计算你最多能拿多少价值的礼物？</p></blockquote></li><li><p><strong>股票的最大利润</strong> (63)</p><blockquote><p>假设把某股票的价格按照时间先后顺序存储在数组中，请问买卖该股票一次可获得的最大利润是多少？</p></blockquote></li></ul>',22);function r(b,q){return t(),p("div",null,[n,e(" more "),c])}const a=l(i,[["render",r],["__file","index.html.vue"]]);export{a as default};
