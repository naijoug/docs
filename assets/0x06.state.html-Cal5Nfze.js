import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,a as e,f as t}from"./app-932Ytx5b.js";const c={},i=t(`<hr><h2 id="state-状态" tabindex="-1"><a class="header-anchor" href="#state-状态" aria-hidden="true">#</a> State - “状态”</h2><h3 id="❓说一下什么是状态管理" tabindex="-1"><a class="header-anchor" href="#❓说一下什么是状态管理" aria-hidden="true">#</a> ❓说一下什么是状态管理</h3><details class="hint-container details"><summary>💡</summary><blockquote><p>状态管理：处理应用中数据改变以及数据如何影响应用界面的过程。在开发应用程序时，操作的是用户的交互行为，后台数据，以及应用向用户展示的视图，这些因素的改变都需要被适当地管理。数据管理和视图反馈的过程就是状态管理。</p></blockquote><p>为什么我们需要状态管理？</p><ul><li><p>在复杂的应用中，有些数据需要在很多页面中使用。使用全局的状态管理可以使应用保持同步，避免数据在各个页面之间产生不一致。</p></li><li><p>状态管理利于代码的结构清晰，具有可控性、可预测性。在大型项目中尤其重要，因为它有助于降低调试和理解代码的复杂性。</p></li><li><p>状态管理能提高渲染效率。在 <code>React</code> 或者 <code>Flutter</code> 这种声明式编程框架中，当本地状态发生变化时，会引起组件的重新渲染，而状态管理库通过维护一个单一的状态树，能够有选择性地通知某一部分的组件去更新，提高渲染效率。</p></li></ul></details><h3 id="❓state-怎么实现跨帧共享" tabindex="-1"><a class="header-anchor" href="#❓state-怎么实现跨帧共享" aria-hidden="true">#</a> ❓<code>State</code> 怎么实现跨帧共享</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>State</code> 跨帧共享是指在 Flutter 应用中，当一个 Widget 被重建时，如何保持其状态不丢失。</p></blockquote><p>实现方式：</p><ol><li><p><code>GlobalKey</code></p><ul><li>通过 <code>GlobalKey</code> 可以在整个应用中唯一标识一个 Widget</li><li>可以通过 <code>GlobalKey</code> 获取对应 Widget 的 State</li><li>适用于需要在 Widget 树的不同位置访问同一个 State 的场景</li></ul></li><li><p><code>InheritedWidget</code></p><ul><li>通过 <code>InheritedWidget</code> 可以在 Widget 树中共享数据</li><li>子 Widget 可以通过 <code>BuildContext</code> 获取 <code>InheritedWidget</code> 中的数据</li><li>当 <code>InheritedWidget</code> 中的数据发生变化时，依赖该数据的子 Widget 会自动重建</li></ul></li><li><p><code>Provider</code></p><ul><li>基于 <code>InheritedWidget</code> 封装的状态管理方案</li><li>可以在 Widget 树的任何位置访问数据</li><li>支持数据的响应式更新</li></ul></li><li><p><code>GetX</code></p><ul><li>轻量级的状态管理解决方案</li><li>提供简单的 API 进行状态管理</li><li>支持响应式编程和依赖注入</li></ul></li></ol></details><h3 id="❓setstate-底层实现" tabindex="-1"><a class="header-anchor" href="#❓setstate-底层实现" aria-hidden="true">#</a> ❓<code>setState</code> 底层实现</h3><details class="hint-container details"><summary>💡</summary><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">setState</span><span class="token punctuation">(</span><span class="token class-name">VoidCallback</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 进行一些断言检查，确定当前的 State 对象已经 mounted（即已经被添加到了 widgets 树中），并且没有被disposed（即还没有被销毁）。</span>
  <span class="token keyword">assert</span><span class="token punctuation">(</span>fn <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>_debugLifecycleState <span class="token operator">==</span> _ElementLifecycle<span class="token punctuation">.</span>defunct<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 一个 StatefulWidget 的 state 已经被销毁（dispose）之后，仍然去调用 setState 方法</span>
      <span class="token keyword">throw</span> <span class="token class-name">FlutterError</span><span class="token punctuation">.</span><span class="token function">fromParts</span><span class="token punctuation">(</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DiagnosticsNode</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">/** 
      典型场景：的发生场景是在 StatefulWidget 的 state 中启动了一个定时器或者动画，
              但是当 Widget 不再需要显示，并被系统销毁后，
              这个定时器或者动画 callback 仍然在后台运行，并尝试去调用 setState 方法。
      解决方案：
          1&gt; 在 state 的 dispose 方法中，停止所有的定时器或者动画。这会阻止它们在销毁后继续运行。
             具体实现方法是在 dispose 方法中调用定时器的 cancel 方法或者动画的 stop 方法。
          2&gt; 在调用 setState 之前，首先检查一下 mounted 属性。
             如果 mounted 返回 false，那么就说明这个 state 已经被移除出 Widget 树，不应再去调用 setState 方法。
      */</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>_debugLifecycleState <span class="token operator">!=</span> _ElementLifecycle<span class="token punctuation">.</span>active<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 在错误的上下文或错误的状态调用 setState() 方法</span>
      <span class="token keyword">throw</span> <span class="token class-name">FlutterError</span><span class="token punctuation">.</span><span class="token function">fromParts</span><span class="token punctuation">(</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DiagnosticsNode</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">/**
      典型场景：不能在一个 Widget 的构建方法 build() 中调用 setState() 。
              原因是 setState() 会通知有状态的数据已更改，从而触发 build 方法重建 widget。
              然而已经在 build 方法中，在构建过程中无法通知系统关于状态的更改。
              这将导致不一致的状态，并可能导致其他问题。
      解决方案：将可能会改变 Widget 状态的逻辑放在事件处理、异步处理等地方，
              而不是直接在用户界面的渲染过程中进行更改。这样可以避免这个错误。
      */</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 调用 Element 的 markNeedsBuild 方法，标记这个 Element 在下一次 build 阶段需要重建。</span>
  _element<span class="token punctuation">.</span>_element<span class="token punctuation">.</span><span class="token function">markNeedsBuild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="❓markneedsbuild-底层实现" tabindex="-1"><a class="header-anchor" href="#❓markneedsbuild-底层实现" aria-hidden="true">#</a> ❓<code>markNeedsBuild</code> 底层实现</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>markNeedsBuild</code> 是 <code>Element</code> 类的一个方法，用于标记需要重建此 <code>Element</code>。</p></blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">markNeedsBuild</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>_dirty<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token comment">//  _dirty 标记被设置为 true，表示该 Element 已被“弄脏”，需要在下一个 build 阶段进行重建。</span>
  _dirty <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token comment">// 该元素被传递给 _scheduleBuildFor 方法，以便在下一个 build 布局周期中进行重新构建。</span>
  <span class="token function">_scheduleBuildFor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基本思想：延迟和分批进行 UI 更新。当发生了可能会改变UI的事件并且调用了 <code>markNeedsBuild</code>，而不是立即进行 <code>UI</code> 的更新，<code>Flutter</code> 将会延迟到下一帧，然后一次处理所有的脏元素，这种方式提高了整体的性能效率。</p></details><h3 id="❓inflatewidget-的作用" tabindex="-1"><a class="header-anchor" href="#❓inflatewidget-的作用" aria-hidden="true">#</a> ❓<code>inflateWidget</code> 的作用</h3><details class="hint-container details"><summary>💡</summary><p><code>inflateWidget</code> 这个方法位于 <code>Element</code> 类中。它的作用是根据提供的 <code>Widget</code> 创建或更新对应的 <code>Element</code>。</p><p><code>Element</code> 在 <code>Flutter</code> 中是非常关键的概念，它是 <code>Widget</code> 和 <code>RenderObject</code> 的桥接层。<code>Widget</code> 是一次性配置，它是不可变的。而 <code>RenderObject</code> 是一个在屏幕上显示的对象，它是可变的。<code>Element</code> 就是将这两者联系了起来，它包含对 <code>Widget</code> 和 <code>RenderObject</code> 的引用。</p><p>当一个新的 <code>Widget</code> 要显示在屏幕上（或者已有<code>Widget</code>的配置发生改变）时，<code>Flutter</code> 引擎就会调用 <code>inflateWidget</code> 方法。<code>inflateWidget</code> 会根据新的 <code>Widget</code> 创建对应的 <code>Element</code>（如果不存在），或者更新已存在 <code>Element</code> 的配置。</p></details><hr><h2 id="inheritedwidget-状态共享" tabindex="-1"><a class="header-anchor" href="#inheritedwidget-状态共享" aria-hidden="true">#</a> InheritedWidget - “状态共享”</h2><h3 id="❓inheritedwidget-作用" tabindex="-1"><a class="header-anchor" href="#❓inheritedwidget-作用" aria-hidden="true">#</a> ❓<code>InheritedWidget</code> 作用</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>InheritedWidget</code>：<code>Flutter</code> 中一个非常重要的幕后角色，主要用于在 <code>Widget</code> 树中有效地传递数据。</p></blockquote><p>问题：<code>Flutter</code> 中 <code>Widget</code> 是不可变的，由于其自身不能改变，所以如果有任何数据更改，总是按照从上到下的方式重新构建所有的 <code>Widget</code>。然而这可能导致重绘的性能问题，特别是对于大型树状结构来说。</p><p>解决方案：<code>InheritedWidget</code> 则为这个问题提供了解决方案。它允许开发者在 <code>Widget</code> 树的顶部或任何位置提供数据，然后这些数据可以在树的任何下层都能获取到。当 <code>InheritedWidget</code> 更新时，它会通知使用其数据的所有 <code>Widget</code>，这些 <code>Widget</code> 只需通过 <code>BuildContext</code> 即可访问到这些数据，这个过程称为依赖。</p><p>作用：可以让开发者更高效地分享数据，避免了不必要的 <code>Widget</code> 重置，避免了一些性能问题，同时让 <code>Widget</code> 树的状态管理更加清晰和方便。</p><p>🌰 <code>Flutter</code> 的 <code>Theme</code> 和 <code>Locale</code> 就是通过 <code>InheritedWidget</code> 来传递的。</p></details><h3 id="❓inheritedwidget-是如何实现共享数据的" tabindex="-1"><a class="header-anchor" href="#❓inheritedwidget-是如何实现共享数据的" aria-hidden="true">#</a> ❓<code>InheritedWidget</code> 是如何实现共享数据的</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>InheritedWidget</code> 通过以下机制实现数据共享：</p></blockquote><ol><li><p>数据传递</p><ul><li>在 Widget 树顶部创建 InheritedWidget</li><li>在 InheritedWidget 中存储共享数据</li><li>子 Widget 可以通过 BuildContext 访问数据</li></ul><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">SharedData</span> <span class="token keyword">extends</span> <span class="token class-name">InheritedWidget</span> <span class="token punctuation">{</span>
  <span class="token keyword">final</span> <span class="token class-name">String</span> data<span class="token punctuation">;</span>
  
  <span class="token class-name">SharedData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>
    required <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">,</span>
    required <span class="token class-name">Widget</span> child<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">,</span> child<span class="token punctuation">:</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token keyword">static</span> <span class="token class-name">SharedData</span><span class="token operator">?</span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> context<span class="token punctuation">.</span>dependOnInheritedWidgetOfExactType<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SharedData</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token metadata function">@override</span>
  bool <span class="token function">updateShouldNotify</span><span class="token punctuation">(</span><span class="token class-name">SharedData</span> oldWidget<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> data <span class="token operator">!=</span> oldWidget<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>依赖收集</p><ul><li>当子 Widget 通过 <code>context.dependOnInheritedWidgetOfExactType()</code> 访问数据时</li><li>Flutter 自动建立子 Widget 和 InheritedWidget 之间的依赖关系</li><li>系统会追踪哪些 Widget 依赖于这个 InheritedWidget</li></ul><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 在子 widget 中访问数据</span>
<span class="token keyword">class</span> <span class="token class-name">ChildWidget</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>
  <span class="token metadata function">@override</span>
  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> data <span class="token operator">=</span> <span class="token class-name">SharedData</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span>data <span class="token operator">?</span><span class="token operator">?</span> <span class="token string-literal"><span class="token string">&#39;&#39;</span></span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>更新机制</p><ul><li>当 InheritedWidget 中的数据发生变化时</li><li>Flutter 会调用 updateShouldNotify() 方法</li><li>如果返回 true，所有依赖的子 Widget 都会重新构建</li></ul><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 在父 widget 中使用 SharedData</span>
<span class="token keyword">class</span> <span class="token class-name">ParentWidget</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>
  <span class="token metadata function">@override</span>
  <span class="token class-name">Widget</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">SharedData</span><span class="token punctuation">(</span>
      data<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;Hello World&#39;</span></span><span class="token punctuation">,</span>
      child<span class="token punctuation">:</span> <span class="token class-name">ChildWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></details><h3 id="❓inheritfromwidgetofexacttype-了解吗" tabindex="-1"><a class="header-anchor" href="#❓inheritfromwidgetofexacttype-了解吗" aria-hidden="true">#</a> ❓<code>inheritFromWidgetOfExactType</code> 了解吗</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>inheritFromWidgetOfExactType</code> 是 Flutter 中用于获取 InheritedWidget 的一个方法，现在已被废弃，推荐使用 <code>dependOnInheritedWidgetOfExactType</code>。</p></blockquote><p>主要功能：</p><ol><li><p>向上查找Widget树</p><ul><li>从当前context开始向上遍历Widget树</li><li>查找指定类型的InheritedWidget</li><li>返回最近的匹配实例</li></ul></li><li><p>建立依赖关系</p><ul><li>自动在当前Element和找到的InheritedWidget之间建立依赖关系</li><li>当InheritedWidget发生变化时，依赖它的Widget会重新构建</li></ul></li><li><p>使用示例：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 定义一个 InheritedWidget</span>
<span class="token keyword">class</span> <span class="token class-name">MyInheritedWidget</span> <span class="token keyword">extends</span> <span class="token class-name">InheritedWidget</span> <span class="token punctuation">{</span>
  <span class="token keyword">final</span> <span class="token class-name">String</span> data<span class="token punctuation">;</span> 
  <span class="token class-name">MyInheritedWidget</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token class-name">Key</span><span class="token operator">?</span> key<span class="token punctuation">,</span>
    required <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">,</span>
    required <span class="token class-name">Widget</span> child<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">,</span> child<span class="token punctuation">:</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 定义一个方法用于获取 InheritedWidget</span>
  <span class="token keyword">static</span> <span class="token class-name">MyInheritedWidget</span><span class="token operator">?</span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> context<span class="token punctuation">.</span>dependOnInheritedWidgetOfExactType<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyInheritedWidget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 重写 updateShouldNotify 方法</span>
  <span class="token metadata function">@override</span>
  bool <span class="token function">updateShouldNotify</span><span class="token punctuation">(</span><span class="token class-name">MyInheritedWidget</span> oldWidget<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> data<span class="token operator">!=</span> oldWidget<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></details><h3 id="❓inheritedwidget-与-didchangedependencies-的关系" tabindex="-1"><a class="header-anchor" href="#❓inheritedwidget-与-didchangedependencies-的关系" aria-hidden="true">#</a> ❓<code>InheritedWidget</code> 与 <code>didChangeDependencies()</code> 的关系</h3><details class="hint-container details"><summary>💡</summary></details><h3 id="❓inheritedwidget-实现原理" tabindex="-1"><a class="header-anchor" href="#❓inheritedwidget-实现原理" aria-hidden="true">#</a> ❓<code>InheritedWidget</code> 实现原理</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>InheritedWidget</code> 允许在 <code>Widget</code> 树中有效地传递数据。</p></blockquote><ul><li><p>在应用的顶部创建一个 <code>InheritedWidget</code> 时，其子 <code>Widget</code> 可以通过调用 <code>context.dependOnInheritedWidgetOfExactType&lt;MyInheritedWidget&gt;()</code> 来获取这个 <code>InheritedWidget</code>。</p></li><li><p>在 <code>InheritedWidget</code> 的内部，它的数据的存储和访问实际上是通过 <code>BuildContext</code> 来实现的。<code>BuildContext</code> 实际上就像是 <code>Widget</code> 树的一级一级节点的快照，它知道当前节点在树中的位置，知道它的父节点是谁，也知道它是在什么时间被创建的。</p></li><li><p>调用 <code>context.dependOnInheritedWidgetOfExactType&lt;MyInheritedWidget&gt;()</code> 的时候，<code>BuildContext</code> 实际上是在 <code>Widget</code> 树中向上寻找，直到找到对应的 <code>InheritedWidget</code> 为止。如此一来，即使当前的 <code>Widget</code> 在树中很深的地方，也可以非常高效地访问到树中更高层的 <code>InheritedWidget</code>。</p></li></ul><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  <span class="token keyword">class</span> <span class="token class-name">MyInheritedWidgetData</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token class-name">MyInheritedWidgetData</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">class</span> <span class="token class-name">MyInheritedWidget</span> <span class="token keyword">extends</span> <span class="token class-name">InheritedWidget</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token class-name">MyInheritedWidget</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token class-name">Key</span> key<span class="token punctuation">,</span>
      <span class="token metadata function">@required</span> <span class="token class-name">Widget</span> child<span class="token punctuation">,</span>
      <span class="token metadata function">@required</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">,</span> child<span class="token punctuation">:</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">final</span> <span class="token class-name">MyInheritedWidgetData</span> data<span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token class-name">MyInheritedWidgetData</span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">final</span> <span class="token class-name">MyInheritedWidget</span> result <span class="token operator">=</span>
          context<span class="token punctuation">.</span>dependOnInheritedWidgetOfExactType<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyInheritedWidget</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> result<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token metadata function">@override</span>
    bool <span class="token function">updateShouldNotify</span><span class="token punctuation">(</span><span class="token class-name">MyInheritedWidget</span> oldWidget<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> data<span class="token punctuation">.</span>message <span class="token operator">!=</span> oldWidget<span class="token punctuation">.</span>data<span class="token punctuation">.</span>message<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><hr><h2 id="state-manager-状态管理" tabindex="-1"><a class="header-anchor" href="#state-manager-状态管理" aria-hidden="true">#</a> State Manager - “状态管理”</h2><h3 id="❓flutter-中状态管理框架的真正作用-与-setstate-的区别-两者使用的最佳实践" tabindex="-1"><a class="header-anchor" href="#❓flutter-中状态管理框架的真正作用-与-setstate-的区别-两者使用的最佳实践" aria-hidden="true">#</a> ❓<code>Flutter</code> 中状态管理框架的真正作用？与 <code>setState</code> 的区别？两者使用的最佳实践？</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>setState</code></p></blockquote><ul><li><p><code>setState</code> 是 <code>Flutter</code> 提供的最基础的状态管理方式：</p><ul><li>仅能在 <code>StatefulWidget</code> 内部使用，用于管理组件自身的状态</li><li>当调用 <code>setState</code> 时，会触发组件的重建(rebuild)</li><li>适合处理简单的、局部的状态管理需求</li></ul></li><li><p><code>setState</code> 局限性：</p><ul><li>无法跨组件共享状态</li><li>对于深层组件树，需要通过层层传递参数，导致代码冗余</li><li>难以处理复杂的状态依赖关系</li><li>状态分散在各个组件中，不易维护</li></ul></li><li><p><code>setState</code> 适用场景：</p><ul><li>简单的页面级状态管理</li><li>组件内部的临时状态</li><li>不需要共享的局部状态</li></ul></li></ul><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">CounterWidget</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>
  <span class="token metadata function">@override</span>
  _CounterWidgetState <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">_CounterWidgetState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> _CounterWidgetState <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CounterWidget</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
  int count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  
  <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> count<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>状态管理框架(如 <code>Provider</code>、<code>Riverpod</code>、<code>GetX</code>、<code>Bloc</code> 等)提供了更强大的能力。</p></blockquote><ul><li>状态共享与访问</li></ul><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// Provider 示例</span>
<span class="token keyword">final</span> counterProvider <span class="token operator">=</span> <span class="token class-name">StateProvider</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ref<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 在任意组件中访问</span>
<span class="token class-name">Consumer</span><span class="token punctuation">(</span>
  builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> ref<span class="token punctuation">,</span> child<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> count <span class="token operator">=</span> ref<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span>counterProvider<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">count</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>状态集中管理：</p><ul><li>将业务逻辑与 UI 解耦</li><li>便于状态的统一管理和追踪</li><li>更容易实现复杂的状态依赖关系</li></ul></li><li><p>性能优化：</p><ul><li>精确控制组件重建范围</li><li>避免不必要的重建</li><li>提供状态变化的细粒度控制</li></ul></li><li><p>状态管理框架适用场景：</p><ul><li>需要跨组件共享状态</li><li>复杂的业务逻辑</li><li>需要统一管理的全局状态</li></ul></li></ul><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 使用 Provider 的示例</span>
<span class="token keyword">class</span> <span class="token class-name">CounterNotifier</span> <span class="token keyword">extends</span> <span class="token class-name">ChangeNotifier</span> <span class="token punctuation">{</span>
  int _count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  int <span class="token keyword">get</span> count <span class="token operator">=</span><span class="token operator">&gt;</span> _count<span class="token punctuation">;</span>
  
  <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    _count<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token function">notifyListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 在 widget tree 顶层提供状态</span>
<span class="token class-name">MultiProvider</span><span class="token punctuation">(</span>
  providers<span class="token punctuation">:</span> <span class="token punctuation">[</span>
    <span class="token class-name">ChangeNotifierProvider</span><span class="token punctuation">(</span>create<span class="token punctuation">:</span> <span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">CounterNotifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  child<span class="token punctuation">:</span> <span class="token class-name">MyApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>最佳实践</p></blockquote><ul><li>优先使用 <code>setState</code> 处理简单场景</li><li>当遇到复杂的业务逻辑情况时，考虑使用状态管理框架： <ul><li>状态需要在多个页面共享</li><li>业务逻辑较为复杂</li><li>需要更好的代码组织</li><li>团队开发需要统一的状态管理方案</li></ul></li><li>在同一个项目中，可以混合使用： <ul><li>简单的局部状态用 <code>setState</code></li><li>复杂的共享状态用状态管理框架</li></ul></li></ul></details><h3 id="❓provider-bloc-getx-区别" tabindex="-1"><a class="header-anchor" href="#❓provider-bloc-getx-区别" aria-hidden="true">#</a> ❓<code>Provider</code> <code>BLoc</code> <code>GetX</code> 区别</h3><details class="hint-container details"><summary>💡</summary><ul><li><p><code>Provider</code> 是业界并且 <code>Google</code> 官方推荐的状态管理库，它是基于 <code>InheritedWidget</code> 的数据流传递。它可以直接使用状态，状态变化自动通知其依赖组件进行刷新，使用简直且入门容易。</p></li><li><p><code>BLoC（Business Logic Component）</code> 是 <code>Google</code> 推出的一种应用程序架构设计模式。其核心概念是，通过使用 <code>Dart</code> 的<code>Stream</code> 将数据的输入输出抽象为 <code>Sink</code> 和 <code>Stream</code>，进行业务逻辑处理。<code>BLoC</code> 相比 <code>Provider</code> 更适合大型项目，可以实现更大程度的代码解耦。</p></li><li><p><code>GetX</code> 是来自社区的 <code>Flutter</code> 库，它不仅实现了状态管理，还提供了路由管理，依赖注入等功能。<code>GetX</code> 优势在于其简洁的 <code>API</code>、高效的性能以及对空安全的天然支持。</p></li></ul></details><h3 id="❓provider-实现原理" tabindex="-1"><a class="header-anchor" href="#❓provider-实现原理" aria-hidden="true">#</a> ❓<code>Provider</code> 实现原理</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>Provider</code> 是一种非常流行的状态管理工具。实现原理主要利用了 <code>Flutter</code> 中的 <code>InheritedWidget</code> 和 <code>ChangeNotifier</code>。</p></blockquote><ul><li><p><code>InheritedWidget</code>: 一个能在子 <code>Widget</code> 树中快速提供数据的 <code>Widget</code>，通过它可以实现数据在 <code>Widget</code> 树中的向下传递。</p></li><li><p><code>ChangeNotifier</code>: 可以将它理解为一个可以通知 <code>Flutter</code> <code>UI</code> 发生更新的方法，通常是它的模型发生改变、获得新数据或变为空的时候。当数据改变的时候，可以调用 <code>ChangeNotifier.notifyListeners()</code> 这样的话，所有的监听器（<code>UI</code>）会接收通知，进行对应的业务处理，比如刷新 <code>UI</code>。</p></li></ul><p>在使用 <code>Provider</code> 的时候，会创建一个继承自 <code>ChangeNotifier</code> 的数据模型，并把它提供给那些需要这些数据的 <code>Widget</code>。在需要接收数据的 <code>Widget</code> 中，使用 <code>Provider.of</code> 或者 <code>Consumer</code> 来接收数据。并且明确了当数据发送改变的时候是否需要 <code>Widget</code> 显示刷新。</p></details><h3 id="❓说一下-bloc-模式" tabindex="-1"><a class="header-anchor" href="#❓说一下-bloc-模式" aria-hidden="true">#</a> ❓说一下 <code>BLoC</code> 模式</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>BLoC</code>（Business Logic Component）是 <code>Google</code> 推出的一种应用程序架构设计模式。其核心概念是，将&quot;事件(<code>event</code>)&quot;流转换为&quot;状态(<code>state</code>)&quot;流。</p></blockquote><p>使用流程：</p><ul><li><p>定义事件（<code>Event</code>）：这些事件表示可以从用户界面发送到 <code>BLoC</code> 的各种操作</p><blockquote><p>例如用户的点击，拖动以及其他行为。</p></blockquote></li><li><p>定义状态（<code>State</code>）：这些状态表示 <code>BLoC</code> 在接收事件后可能处于的不同状态</p><blockquote><p>例如加载，成功，错误等。</p></blockquote></li><li><p>创建 <code>BLoC</code>： 生产状态(<code>state</code>)流，并消费事件(<code>event</code>)流。在 <code>BLoC</code> 内部，使用一个或多个 <code>Stream</code> 来表示状态，使用 <code>Sink</code> 来接收事件。<code>BLoC</code> 里面的业务逻辑就是将事件流转变为状态流。</p></li><li><p><code>UI</code> 中使用 <code>BLoC</code>：通常使用 <code>StreamBuilder</code> 和各种事件触发器如按钮点击，来连接 <code>BLoC</code> 和 <code>UI</code>。</p></li></ul><p>优点：可以将业务逻辑完全从 <code>UI</code> 层中分离出来，使得代码更加模块化并且易于测试。也提高了应用的响应性，因为它基于流，可以便捷地处理异步操作和各种事件。</p></details>`,34);function o(p,l){return s(),a("div",null,[e(" more "),i])}const r=n(c,[["render",o],["__file","0x06.state.html.vue"]]);export{r as default};
