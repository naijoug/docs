import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o,c as t,a as r,b as e,f as c}from"./app-Epb51Bxn.js";const h={},d=e("blockquote",null,[e("p",null,"07 - 面向对象设计 (12)")],-1),i=c('<h2 id="_7-1-扑克牌" tabindex="-1"><a class="header-anchor" href="#_7-1-扑克牌" aria-hidden="true">#</a> 7.1 扑克牌</h2><blockquote><p>请设计用于通用扑克牌的数据结构，并说明你会如何创建该数据结构的子类，实现“二十一点”游戏。</p></blockquote><h2 id="_7-2-呼叫中心" tabindex="-1"><a class="header-anchor" href="#_7-2-呼叫中心" aria-hidden="true">#</a> 7.2 呼叫中心</h2><blockquote><p>设想你有个呼叫中心，员工分3级：接线员、主管和经理。客户来电会先分配给有空的接线员。若接线员处理不了，就必须将来电往上转给主管。若主管没空或是无法处理，则将来电往上转给经理。请设计这个问题的类和数据结构，并实现一种 <code>dispatchCall()</code> 方法，将客户来电分配给第一个有空的员工。</p></blockquote><h2 id="_7-3-音乐点唱机" tabindex="-1"><a class="header-anchor" href="#_7-3-音乐点唱机" aria-hidden="true">#</a> 7.3 音乐点唱机</h2><blockquote><p>运用面向对象原则，设计一款音乐点唱机。</p></blockquote><h2 id="_7-4-停车场" tabindex="-1"><a class="header-anchor" href="#_7-4-停车场" aria-hidden="true">#</a> 7.4 停车场</h2><blockquote><p>运用面向对象原则，设计一个停车场。</p></blockquote><h2 id="_7-5-在线图书阅读器" tabindex="-1"><a class="header-anchor" href="#_7-5-在线图书阅读器" aria-hidden="true">#</a> 7.5 在线图书阅读器</h2><blockquote><p>请设计在线图书阅读器系统的数据结构。</p></blockquote><h2 id="_7-6-拼图" tabindex="-1"><a class="header-anchor" href="#_7-6-拼图" aria-hidden="true">#</a> 7.6 拼图</h2><blockquote><p>实现一个N×N的拼图程序。设计相关数据结构并提供一种拼图算法。假设你有一种fitsWith方法，传入两块拼图，若两块拼图能拼在一起，则返回true。</p></blockquote><h2 id="_7-7-聊天服务器" tabindex="-1"><a class="header-anchor" href="#_7-7-聊天服务器" aria-hidden="true">#</a> 7.7 聊天服务器</h2><blockquote><p>请描述该如何设计一个聊天服务器。要求给出各种后台组件、类和方法的细节，并说明其中最难解决的问题会是什么。</p></blockquote><h2 id="_7-8-黑白棋" tabindex="-1"><a class="header-anchor" href="#_7-8-黑白棋" aria-hidden="true">#</a> 7.8 黑白棋</h2><blockquote><p>“奥赛罗棋”（黑白棋）的玩法如下：每一枚棋子的一面为白，一面为黑。游戏双方各执黑、白棋子对决，当一枚棋子的左右或上下同时被对方棋子夹住，这枚棋子就算是被吃掉了，随即翻面为对方棋子的颜色。轮到你落子时，必须至少吃掉对方一枚棋子。任意一方无子可落时，游戏即告结束。最后，棋盘上棋子较多的一方获胜。请运用面向对象设计方法，实现“奥赛罗棋”。</p></blockquote><h2 id="_7-9-环状数组" tabindex="-1"><a class="header-anchor" href="#_7-9-环状数组" aria-hidden="true">#</a> 7.9 环状数组</h2><blockquote><p>实现一个 <code>CircularArray</code> 类。该类需要支持类似于数组的数据结构且该数组可以被高效地轮转。如果可以的话，该类应该使用泛型类型（也被称作模板），同时可以通过标准循环语句 <code>for (Obj o : circularArray)</code> 进行迭代。</p></blockquote><h2 id="_7-10-扫雷" tabindex="-1"><a class="header-anchor" href="#_7-10-扫雷" aria-hidden="true">#</a> 7.10 扫雷</h2><blockquote><p>设计和实现一个基于文字的扫雷游戏。扫雷游戏是经典的单人电脑游戏，其中在N×N的网格上隐藏了B个矿产资源（或炸弹）。网格中的单元格后面或者是空白的，或者存在一个数字。数字反映了周围8个单元格中的炸弹数量。游戏开始之后，用户点开一个单元格。如果是一个炸弹，玩家即失败。如果是一个数字，数字就会显示出来。如果它是空白单元格，则该单元格和所有相邻的空白单元格（直到遇到数字单元格，数字单元格也会显示出来）会显示出来。当所有非炸弹单元格显示时，玩家即获胜。玩家也可以将某些地方标记为潜在的炸弹。这不会影响游戏进行，只是会防止用户意外点击那些认为有炸弹的单元格。</p></blockquote><h2 id="_7-11-文件系统" tabindex="-1"><a class="header-anchor" href="#_7-11-文件系统" aria-hidden="true">#</a> 7.11 文件系统</h2><blockquote><p>设计一种内存文件系统（in-memory file system）的数据结构和算法，并说明其具体做法。如若可行，请用代码举例说明。</p></blockquote><div class="hint-container tip"><p class="hint-container-title">提示</p><p>#141，#216</p></div><h2 id="_7-12-散列表" tabindex="-1"><a class="header-anchor" href="#_7-12-散列表" aria-hidden="true">#</a> 7.12 散列表</h2><blockquote><p>设计并实现一个散列表，使用链接（即链表）处理碰撞冲突。</p></blockquote><div class="hint-container tip"><p class="hint-container-title">提示</p><p>#287，#307</p></div>',26);function n(l,s){return o(),t("div",null,[d,r(" more "),i])}const b=a(h,[["render",n],["__file","0x07.oriented-object.html.vue"]]);export{b as default};
