const e=JSON.parse('{"key":"v-8443c172","path":"/interview/book/cracking-the-coding-interview/0x04.tree-graph.html","title":"","lang":"zh-CN","frontmatter":{"description":"4 树与图 (9) 4.1 二叉树平衡检查; 实现一个函数，检查二叉树是否平衡。在这个问题中，平衡树的定义如下：任意一个结点，其两棵子树的高度差不超过1。 解法 空间复杂度 时间复杂度 思路 --- --- --- --- 4.2 有向路径检查; 给定有向图，设计一个算法，找出两个结点之间是否存在一条路径。 解法 空间复杂度 时间复杂度 思路 --- ...","head":[["meta",{"property":"og:url","content":"https://naijoug.github.io/docs/docs/interview/book/cracking-the-coding-interview/0x04.tree-graph.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:description","content":"4 树与图 (9) 4.1 二叉树平衡检查; 实现一个函数，检查二叉树是否平衡。在这个问题中，平衡树的定义如下：任意一个结点，其两棵子树的高度差不超过1。 解法 空间复杂度 时间复杂度 思路 --- --- --- --- 4.2 有向路径检查; 给定有向图，设计一个算法，找出两个结点之间是否存在一条路径。 解法 空间复杂度 时间复杂度 思路 --- ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-13T23:40:19.000Z"}],["meta",{"property":"article:author","content":"naijoug"}],["meta",{"property":"article:modified_time","content":"2023-12-13T23:40:19.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-12-13T23:40:19.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"naijoug\\",\\"url\\":\\"https://github.com/naijoug\\"}]}"]]},"headers":[{"level":2,"title":"4 树与图 (9)","slug":"_4-树与图-9","link":"#_4-树与图-9","children":[]}],"git":{"createdTime":1702510819000,"updatedTime":1702510819000,"contributors":[{"name":"naijoug","email":"naijoug@outlook.com","commits":1}]},"readingTime":{"minutes":2.19,"words":658},"filePathRelative":"interview/book/cracking-the-coding-interview/0x04.tree-graph.md","localizedDate":"2023年12月13日","autoDesc":true}');export{e as data};
