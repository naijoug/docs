import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as n,c as e,a as c,b as s,f as o}from"./app-XiL9qv-c.js";const t="/docs/assets/objc-class-diagram-0JRmvx1z.jpg",i="/docs/assets/objc-superclass-eWcnfwH-.png",p={},d=s("blockquote",null,[s("p",null,"运行时")],-1),l=o('<h2 id="对象模型" tabindex="-1"><a class="header-anchor" href="#对象模型" aria-hidden="true">#</a> 对象模型</h2><h3 id="❓oc-的对象模型" tabindex="-1"><a class="header-anchor" href="#❓oc-的对象模型" aria-hidden="true">#</a> ❓<code>OC</code> 的对象模型</h3><details class="hint-container details"><summary>💡</summary><blockquote><p>Objective-C 类图</p></blockquote><figure><img src="'+t+`" alt="objc-class-diagram" tabindex="0" loading="lazy"><figcaption>objc-class-diagram</figcaption></figure></details><h3 id="❓isa-是什么" tabindex="-1"><a class="header-anchor" href="#❓isa-是什么" aria-hidden="true">#</a> ❓<code>isa</code> 是什么？</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>isa</code>： <code>OC</code> 对象的一个指针，它是每个 <code>OC</code> 对象的第一个成员变量，用于指向该对象的类对象。</p></blockquote><p><code>Objective-C</code> 的对象模型中，对象分为实例对象、类对象、元类对象，这三种对象都含有 <code>isa</code> 指针。</p><ul><li><p>实例对象: 实例对象的<code>isa</code>指向它的类对象；实例对象主要存储实例变量的值。</p></li><li><p>类对象: 类对象的<code>isa</code>指向元类对象；类对象主要存储实例方法、属性、以及遵守的协议等信息。</p></li><li><p>元类对象: 元类对象的<code>isa</code>指向自身；元类对象主要存储类方法等信息。</p></li></ul><p>当发送消息给一个对象时，<code>runtime</code> 通过这个对象的 <code>isa</code> 指针找到它的类对象，然后在类对象的方法列表中查找对应的方法进行调用。</p></details><h3 id="❓类结构体的组成-isa-指针指向了什么" tabindex="-1"><a class="header-anchor" href="#❓类结构体的组成-isa-指针指向了什么" aria-hidden="true">#</a> ❓类结构体的组成，<code>isa</code> 指针指向了什么？</h3><details class="hint-container details"><summary>💡</summary><p>先给出答案 <code>isa</code> 指针是指向类对象，每一个对象都包含 <code>isa</code> 指针，通过这个指针可以找到类对象。</p><p>当一个对象调用某个方法时(消息发送)，运行时先在当前方法列表中查找，如果不存在，通过 <code>isa</code> 指针查找类对象中是否存在方法，如果还不存在会通过父类指针进一步往上查找，最后还是找不到就会抛出未找到异常。</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// id 就是 objc_object</span>
<span class="token keyword">struct</span> objc_object <span class="token punctuation">{</span>
  Class _Nonnull isa<span class="token punctuation">;</span>         <span class="token comment">// 指向对象所属的类</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// Class 就是 objc_class</span>
<span class="token keyword">struct</span> objc_class <span class="token punctuation">{</span>
  Class _Nonnull isa<span class="token punctuation">;</span>         <span class="token comment">// 指向元类</span>
  Class _Nullable superclass<span class="token punctuation">;</span> <span class="token comment">// 指向父类</span>
  cache_t cache<span class="token punctuation">;</span>              <span class="token comment">// 方法缓存</span>
  class_data_bits_t bits<span class="token punctuation">;</span>     <span class="token comment">// 包含方法列表和其他信息</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="❓isa-指针里面都存了什么-32和64位分别讲一下" tabindex="-1"><a class="header-anchor" href="#❓isa-指针里面都存了什么-32和64位分别讲一下" aria-hidden="true">#</a> ❓<code>isa</code> 指针里面都存了什么，32和64位分别讲一下?</h3><details class="hint-container details"><summary>💡</summary><p><code>isa</code> 指针是 Objective-C 对象的第一个成员变量，它决定了对象的类型。<code>isa</code> 指针在 32 位和 64 位系统下有不同的存储方式：</p><p>在 32 位系统下，这个 <code>isa</code> 指针是一个普通的指针，存储着对象（或者说是类实例）的类（Class）的信息，一般占据 4 个字节。通过这个指针可以找到对象所属的类（也就是对象的元类（Metaclass）），以此来调用对象的类方法。通过对象的 <code>isa</code> 指针可以找到对象所属类的信息，这样就可以根据类的具体信息找到该对象能响应的所有方法，所以我们在向一个 Objective-C 对象发消息时，就是通过查找 <code>isa</code> 指针来完成的。</p><p>在 64 位系统下（仅针对优化过的 iOS 系统, iOS 9.0 以后），为了节约内存， <code>isa</code> 的存储结构做了改变，添加了一种叫做 <code>isa</code> 混用（ISA Masking）的技术。<code>isa</code> 指针除了存储了类的信息外，还会存储对象是否正在被 <code>dealloc</code>，以及是否有关联对象(Associated Object)等信息。如果我们像在 32 位系统下那样直接访问 <code>isa</code> 就可能取到错误的信息，所以在 64 位系统下，我们需要通过一些特定的方式来获取具体的 <code>isa</code>值，例如使用对象提供的 <code>object_getClass()</code> 方法来获取。</p><p>总的来说，不同系统下的 <code>isa</code> 指针含有的信息是不同的，32 位只存储了类的信息，而 64 位则同时存储了类的信息和对象的其他一些状态。</p></details><h3 id="❓讲一下对象-类对象-元类-跟元类结构体的组成以及他们是如何相关联的" tabindex="-1"><a class="header-anchor" href="#❓讲一下对象-类对象-元类-跟元类结构体的组成以及他们是如何相关联的" aria-hidden="true">#</a> ❓讲一下对象，类对象，元类，跟元类结构体的组成以及他们是如何相关联的？</h3><details class="hint-container details"><summary>💡</summary><p>Objective-C 中的一个对象（实例）是由 <code>isa</code> 指针和其他实例变量（Instance Variables）组成的。对象的 <code>isa</code> 指针指向对象的类（也就是类对象）。</p><p>类对象（也就是 Class），包含了类的方法列表，属性列表，协议列表以及一个 <code>isa</code> 指针和一个指向父类对象的 <code>superclass</code> 指针。类对象的 <code>isa</code> 指针指向元类 (Meta-class)。这样当你给一个实例发送消息时，会在类对象的方法列表中查找；而当你给一个类发送消息时，实际上会在元类的方法列表中查找。</p><p>元类也是一个类对象，它的实例是类对象。元类包含了类方法列表，同时也有一个 <code>isa</code> 指针和 <code>superclass</code> 指针。元类的 <code>isa</code> 指针指向根元类，根元类的 <code>superclass</code> 指针又指向类对象，形成一个封闭的循环。而根元类的 <code>isa</code> 指针最终又指向自己，形成了 Objective-C 中类和对象的关系网。</p><p>简单来说，这就是对象，类对象（Class）和元类（Metaclass）之间的关系。在 Objective-C 中，万物皆对象，这一切都是基于这种结构，使得 Objective-C 有很高的动态性。</p></details><h3 id="❓为什么要设计-metaclass" tabindex="-1"><a class="header-anchor" href="#❓为什么要设计-metaclass" aria-hidden="true">#</a> ❓为什么要设计 <code>metaclass</code>？</h3><details class="hint-container details"><summary>💡</summary><p><code>metaclass</code>（元类）的设计是为了支持类方法。</p><p>在 Objective-C 中，每个对象都有一个对应的类，这个类包含了该对象的所有实例方法。这些实例方法是存储在其对应的类对象中的。那么问题是，类方法应该存储在哪儿呢？答案就是元类（<code>metaclass</code>）。</p><p>每个类对象，除了包含实例方法以外，还有一个指向元类的 <code>isa</code> 指针。元类就像是类对象的“类”，它包含了类方法的列表，因此，当你发送一个类方法给类对象时，实际上是在元类中查找该方法。</p><p>没有 <code>metaclass</code> 的话，类方法就没有地方存储，Objective-C 就无法支持类方法的功能，这就是 Objective-C 需要 <code>metaclass</code> 的原因。</p><p>更进一步说，<code>metaclass</code> 的存在，让我们无论是操作实例还是类，在代码层面上都有统一的行为（发送消息），实际上简化了语言使用上的复杂度。在 Objective-C 中，万物皆对象，无论是实例对象还是类对象，甚至元类对象，这都得益于 <code>metaclass</code> 的存在。</p></details><h3 id="❓supperclass-了解吗" tabindex="-1"><a class="header-anchor" href="#❓supperclass-了解吗" aria-hidden="true">#</a> ❓<code>supperclass</code> 了解吗？</h3><details class="hint-container details"><summary>💡</summary><figure><img src="`+i+`" alt="objc-superclass" tabindex="0" loading="lazy"><figcaption>objc-superclass</figcaption></figure></details><h3 id="❓super-是什么" tabindex="-1"><a class="header-anchor" href="#❓super-是什么" aria-hidden="true">#</a> ❓<code>super</code> 是什么？</h3><details class="hint-container details"><summary>💡</summary><p><code>super</code> 并不是一个指针，在 <code>OC</code> 进行消息调用时，其实是有两个隐藏参数的，一个是接收者(receiver)，一个是方法选择器(selector)。</p><p>常见的 <code>self</code> 表示的是接收者。而 <code>super</code> 其实是一个编译器标示符，当发送给 <code>super</code> 一个消息时，调用者仍然是 <code>self</code> ，但是运行时会从当前类的父类开始查找方法。</p><blockquote><p>以下代码输出？</p></blockquote><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">@interface</span> Animal
<span class="token keyword">@end</span>
<span class="token keyword">@interface</span> Dog <span class="token punctuation">:</span> Animal
<span class="token keyword">@end</span>
<span class="token keyword">@implementation</span> Dog
<span class="token operator">-</span> <span class="token punctuation">(</span>instancetype<span class="token punctuation">)</span>init <span class="token punctuation">{</span>
  <span class="token keyword">self</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">super</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;%@&quot;</span><span class="token punctuation">,</span> <span class="token function">NSStringFromClass</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">self</span> class<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;%@&quot;</span><span class="token punctuation">,</span> <span class="token function">NSStringFromClass</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">super</span> class<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token keyword">self</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">@end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是说 <code>super</code> 并不会改变消息的接收者，所以当我们调用 <code>[super class]</code> 时，虽然是从父类开始查找 <code>class</code> 方法，但是方法的接收者依然是 <code>self</code> 本身，其类别自然是当前类本身。这也是为什么我们再调用 <code>[super class]</code> 时还会返回 <code>Dog</code> 类的原因。</p></details><blockquote><p>❓<code>super</code> 的底层实现</p></blockquote><details class="hint-container details"><summary>💡</summary><p><code>OC</code> 中 <code>super</code> 的实现是通过 <code>runtime</code> 的 <code>objc_msgSendSuper</code> 和 <code>objc_msgSendSuper_stret</code> 两个函数来完成的。具体来说，当编译器遇到 <code>[super method]</code> 这种形式的调用时，会转化为 <code>objc_msgSendSuper(super_cls, sel)</code> 的形式。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// super 结构体</span>
<span class="token keyword">struct</span> <span class="token class-name">objc_super</span> <span class="token punctuation">{</span>
  __unsafe_unretained id receiver<span class="token punctuation">;</span>        <span class="token comment">// 消息的接收者</span>
  __unsafe_unretained Class super_class<span class="token punctuation">;</span>  <span class="token comment">// 父类(开始查找的类)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// objc_msgSendSuper</span>
<span class="token keyword">void</span> <span class="token function">objc_msgSendSuper</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">objc_super</span> <span class="token operator">*</span>super<span class="token punctuation">,</span> SEL op<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><hr><h2 id="属性" tabindex="-1"><a class="header-anchor" href="#属性" aria-hidden="true">#</a> 属性</h2><h3 id="❓为什么对象方法没有保存的对象结构体里-而是保存在类对象的结构体里" tabindex="-1"><a class="header-anchor" href="#❓为什么对象方法没有保存的对象结构体里-而是保存在类对象的结构体里" aria-hidden="true">#</a> ❓为什么对象方法没有保存的对象结构体里，而是保存在类对象的结构体里？</h3><details class="hint-container details"><summary>💡</summary><p>这主要是因为Objective-C语言的对象模型设计。</p><p>在Objective-C中，每个类的实例对象（Instance）都有一个isa指针，这个指针指向它的类对象（Class），类对象中保存了这个类的所有对象方法（instance methods）。当我们在一个对象上调用方法时，Objective-C运行时系统会通过这个对象的isa指针找到类对象，进而找到对应的方法并执行。这样就实现了一个类的所有实例对象共享同一份方法的设计。</p><p>这种设计下，无论一个类有多少个实例对象，这个类的方法都只需要在内存中保存一份，这样可以有效地节省内存。</p><p>而对于类方法（class methods），它们则被保存在元类对象（Meta-class）中。每个类对象同样有一个isa指针指向其对应的元类对象，这样在调用类方法时就可以通过类对象找到元类对象，进而找到对应的类方法并执行。</p></details><h3 id="❓class-copyivarlist-vs-class-copypropertylist" tabindex="-1"><a class="header-anchor" href="#❓class-copyivarlist-vs-class-copypropertylist" aria-hidden="true">#</a> ❓<code>class_copyIvarList</code> vs <code>class_copyPropertyList</code></h3><details class="hint-container details"><summary>💡</summary><p><code>class_copyIvarList</code> 和 <code>class_copyPropertyList</code> 都是用于获取相关信息的函数，但它们获取到的信息并不完全相同。</p><p><code>class_copyIvarList</code> 用于返回一个指向类实例变量列表的指针。 这个列表包括了类中声明的所有实例变量，包括属性生成的实例变量。所以这意味着，即使一个实例变量是由@property声明的，你也可以通过<code>class_copyIvarList</code>获取到这个变量。</p><p>相反， <code>class_copyPropertyList</code> 只能获取到类中用@property声明的属性列表。如果类中有非@property声明的实例变量， <code>class_copyPropertyList</code> 是无法获取到这些实例变量的。</p><p>因此，按照获取到的信息的多少排序， <code>class_copyIvarList</code> &gt; <code>class_copyPropertyList</code>。</p><p>最后需要说明的是，这两个函数都会返回一个数组，并且需要手动释放这个数组（使用free函数），以防止内存泄漏。</p></details><h3 id="❓class-ro-t-vs-class-rw-t" tabindex="-1"><a class="header-anchor" href="#❓class-ro-t-vs-class-rw-t" aria-hidden="true">#</a> ❓<code>class_ro_t</code> vs <code>class_rw_t</code></h3><details class="hint-container details"><summary>💡</summary><p><code>class_ro_t</code> 和 <code>class_rw_t</code> 是 Objective-C Runtime 内部用来存储类的信息的结构体。</p><ul><li><p><code>class_ro_t</code> 主要存储了类的只读信息，包括类名，基类名，实例变量列表和类的属性列表等只读信息。而且其中的所有指针都是只读的。</p></li><li><p><code>class_rw_t</code> 主要存储了类的可写信息，包括类的方法列表，协议列表和分类列表等可变信息。其中的各个指针是可变的，可以动态添加和删除方法等信息。</p></li></ul><p>在类初始化时，编译器会生成对应的 <code>class_ro_t</code> 结构体，并通过<code>class_rw_t</code> 结构体获取。而在运行时，如果对类的方法，协议等进行添加或者删除操作，这些信息都会保存在 <code>class_rw_t</code> 中。</p><p>因此，简单来说，<code>class_ro_t</code> 存储的是编译时期的类信息，<code>class_rw_t</code> 存储的是运行时期的类信息。</p></details><h3 id="❓能否向编译后得到的类中增加实例变量" tabindex="-1"><a class="header-anchor" href="#❓能否向编译后得到的类中增加实例变量" aria-hidden="true">#</a> ❓能否向编译后得到的类中增加实例变量</h3><details class="hint-container details"><summary>💡</summary><p>不可以。在Objective-C中，一旦一个类被编译和运行，就不能再向这个类添加实例变量。</p><p>这是因为在Objective-C中，每个对象在内存中所占用的空间是固定的，这个空间取决于这个类的实例变量的总大小。如果允许在运行时添加实例变量，就会导致已经存在的对象需要更多的内存空间，这是不可能实现的。所以，Objective-C规定，只能在编译阶段添加实例变量。</p><p>不过，在Objective-C中，你可以向类添加方法（通过class_addMethod函数）和协议（通过class_addProtocol函数）。但请注意，这些修改只会影响到添加操作之后创建的对象，已经存在的对象不会受到影响。</p></details><h3 id="❓能否向运行时创建的类中添加实例变量" tabindex="-1"><a class="header-anchor" href="#❓能否向运行时创建的类中添加实例变量" aria-hidden="true">#</a> ❓能否向运行时创建的类中添加实例变量</h3><details class="hint-container details"><summary>💡</summary><p>在 Objective-C 中，可以在运行时动态的添加一个类，并且向这个类中添加实例变量。</p><p>但这个操作只能在注册类之前完成。 因为一旦类被注册到运行时环境中，类的实例变量布局就已经确定，objc runtime 系统不允许再修改，包括添加实例变量。这是因为实例变量涉及到对象的内存布局，一旦类被注册，对象的内存布局已经固定，不能再进行改变。</p><p>下面就是一个向运行时创建的类中添加实例变量的示例：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// 创建一个新类</span>
Class MyClass <span class="token operator">=</span> <span class="token function">objc_allocateClassPair</span><span class="token punctuation">(</span><span class="token punctuation">[</span>NSObject class<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;MyClass&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 添加实例变量</span>
<span class="token function">class_addIvar</span><span class="token punctuation">(</span>MyClass<span class="token punctuation">,</span> <span class="token string">&quot;_myVar&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">log2</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;@&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 注册该类</span>
<span class="token function">objc_registerClassPair</span><span class="token punctuation">(</span>MyClass<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 使用新类</span>
id obj <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>MyClass alloc<span class="token punctuation">]</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码先创建一个新的类，在注册类前添加实例变量，然后注册类，并创建一个该类的实例。但如果尝试在 <code>objc_registerClassPair</code> 后面再添加实例变量，将会失败。</p></details><h3 id="❓在运行时创建类的方法-objc-allocateclasspair-的方法名尾部为什么是-pair-成对的意思" tabindex="-1"><a class="header-anchor" href="#❓在运行时创建类的方法-objc-allocateclasspair-的方法名尾部为什么是-pair-成对的意思" aria-hidden="true">#</a> ❓在运行时创建类的方法 <code>objc_allocateClassPair</code> 的方法名尾部为什么是 <code>pair</code>（成对的意思）</h3><details class="hint-container details"><summary>💡</summary><p><code>objc_allocateClassPair</code> 这个名称中的 &quot;Pair&quot; 指的是它在运行时创建类时，一次会创建两个相关的类，而不只是一个。一个是你想要创建的类，另一个是元类（meta-class）。</p><p>在 Objective-C 中，每个类都有一个对应的元类。一个类储存了所有的实例方法（在对象实例上调用的方法），相对应的元类则保存了所有的类方法（在类本身上调用的方法）。</p><p>所以当你用 <code>objc_allocateClassPair</code> 创建一个新类的时候，Cocoa 为你同时创建了额外的一个元类。因此此方法创建的是一个 &quot;类对&quot; 或 &quot;类配对&quot;，包含了一个类和此类的元类。这也就是方法名中 &quot;Pair&quot; 一词的含义。</p></details><hr><h2 id="关联对象" tabindex="-1"><a class="header-anchor" href="#关联对象" aria-hidden="true">#</a> 关联对象</h2><h3 id="❓关联对象如何进行内存管理" tabindex="-1"><a class="header-anchor" href="#❓关联对象如何进行内存管理" aria-hidden="true">#</a> ❓关联对象如何进行内存管理</h3><details class="hint-container details"><summary>💡</summary><p>在Objective-C中，关联对象的内存管理是由运行时系统来处理的，主要通过提供的API（<code>objc_setAssociatedObject</code>和<code>objc_getAssociatedObject</code>）来进行。同时，<code>objc_setAssociatedObject</code>这个函数需要一个关联策略参数，它决定了在运行时如何管理和处理这个关联对象。</p><p>下面是一些常用的关联策略：</p><ol><li><p><code>OBJC_ASSOCIATION_ASSIGN</code>：这是一个弱引用的关联关系。关联对象在被释放时不会被保留。如果关联对象被释放了，getter方法可能会返回一个无效的值。</p></li><li><p><code>OBJC_ASSOCIATION_RETAIN_NONATOMIC</code>：类似于 <code>nonatomic</code>, <code>strong</code> 的属性。运行时系统在设置关联对象时会保留它并且在释放原始对象时释放它。</p></li><li><p><code>OBJC_ASSOCIATION_COPY_NONATOMIC</code>：类似于 <code>nonatomic</code>, <code>copy</code> 的属性。运行时系统在设置关联对象时会复制它并且在释放原始对象时释放它。</p></li><li><p><code>OBJC_ASSOCIATION_RETAIN</code>：类似于 <code>atomic</code>, <code>strong</code> 的属性。它与 <code>OBJC_ASSOCIATION_RETAIN_NONATOMIC</code> 的区别是它在设置和获取关联对象时是线程安全的。</p></li><li><p><code>OBJC_ASSOCIATION_COPY</code>：类似于 <code>atomic</code>, <code>copy</code> 的属性。与 <code>OBJC_ASSOCIATION_COPY_NONATOMIC</code> 的区别是它在设置和获取关联对象时是线程安全的。</p></li></ol><p>所以，关联对象的内存管理方式主要取决于我们选择的关联策略。当原对象被dealloc时，运行时系统会按照我们设定的策略以适当的方式来处理关联对象。例如，如果我们采用 <code>OBJC_ASSOCIATION_COPY</code> 策略，那么在原对象被dealloc时，系统会释放掉关联的对象的副本；如果采用 <code>OBJC_ASSOCIATION_ASSIGN</code> 策略，那么系统则不会释放关联对象。</p></details><h3 id="❓关联对象如何实现-weak-属性" tabindex="-1"><a class="header-anchor" href="#❓关联对象如何实现-weak-属性" aria-hidden="true">#</a> ❓关联对象如何实现 <code>weak</code> 属性</h3><details class="hint-container details"><summary>💡</summary><p>Objective-C关联对象API并未直接提供类似于<code>weak</code>属性的关联策略。但是我们可以通过一些技巧来模拟实现<code>weak</code>关联属性。</p><p>我们知道，<code>weak</code>属性的特点是当对象被释放时，引用该对象的<code>weak</code>引用会自动被设为nil。所以我们可以使用自定义的<code>setter</code>和<code>getter</code>方法，并结合<code>objc_setAssociatedObject</code>和<code>objc_getAssociatedObject</code>函数来实现。</p><p>这里是一个用<code>NSValue</code>来封装<code>weak</code>对象并与关联对象进行关联的例子：</p><div class="language-Objective-C line-numbers-mode" data-ext="Objective-C"><pre class="language-Objective-C"><code>- (void)setWeakAssociatedObject:(id)object {
    NSValue *weakBox = [NSValue valueWithNonretainedObject:object];
    objc_setAssociatedObject(self, @selector(weakAssociatedObject), weakBox, OBJC_ASSOCIATION_RETAIN_NONATOMIC);
}

- (id)weakAssociatedObject {
    NSValue *weakBox = objc_getAssociatedObject(self, @selector(weakAssociatedObject));
    return [weakBox nonretainedObjectValue];
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们使用 <code>NSValue</code> 的 <code>valueWithNonretainedObject:</code> 方法来创建一个弱引用盒子，并将这个盒子与对象进行关联。注意我们在调用 <code>objc_setAssociatedObject</code> 时使用的是 <code>OBJC_ASSOCIATION_RETAIN_NONATOMIC</code> 策略。因为<code>OBJC_ASSOCIATION_ASSIGN</code> 策略并不会在关联对象被释放时将指针设为nil，而 <code>OBJC_ASSOCIATION_RETAIN_NONATOMIC</code> 会。</p><p>在 <code>setter</code> 方法中，我们将对象封装到 <code>NSValue</code> 中，并以 <code>OBJC_ASSOCIATION_RETAIN_NONATOMIC</code> 策略将其与原对象进行关联。</p><p>在 <code>getter</code> 方法中，我们从关联对象中获取 <code>NSValue</code>，然后调用 <code>nonretainedObjectValue</code> 方法来获取弱引用对象。</p><p>这种方法可以模拟实现<code>weak</code>关联属性，但这并不是真的<code>weak</code>属性，我们必须手动保证在对象被释放时进行正确的处理。</p></details><h3 id="❓关联对象的底层实现" tabindex="-1"><a class="header-anchor" href="#❓关联对象的底层实现" aria-hidden="true">#</a> ❓关联对象的底层实现</h3><details class="hint-container details"><summary>💡</summary><p>在Objective-C的runtime中，每个对象都有一个对应的isa指针，这个isa指针指向了对象的类（Class），而类里面就包含了我们的方法，属性，实例变量等信息。每一种类（包括系统的类和自定义的类），在内存中都有唯一的一个类对象的实例。</p><p>对于关联对象来说，它实际上存储在一个单独的hash表里。这个表的key是对象的内存地址，value是另一个以“关联键”的哈希值为key的表（key是关联键的哈希值，value是关联的对象及其策略信息）。这样就都可以通过对象本身查询到其关联对象的信息。</p><p>当你调用<code>objc_setAssociatedObject</code>，运行时系统会将关联对象，关联键，和关联策略存到关联对象的哈希表中。如果你使用相同的对象和关联键来调用了两次<code>objc_setAssociatedObject</code>，那么后一次的调用会替换掉哈希表中先前的值。</p><p>当你调用<code>objc_getAssociatedObject</code>，运行时系统会根据对象和关联键从哈希表中获取关联的对象。</p><p>当你调用<code>objc_removeAssociatedObjects</code>，运行时系统会移除哈希表中所有的键值对。</p><p>当一个对象调用了dealloc方法且开始析构时，在清理类实例并最终释放内存之前，Objective-C的runtime会检查并清理该对象的所有关联对象。然后根据关联策略来处理关联的对象，比如，如果策略是<code>OBJC_ASSOCIATION_RETAIN</code>，那么在析构原对象之前就会在主线程中释放该关联对象。</p></details><h3 id="❓关联对象需要在主对象-dealloc-的时候手动释放吗" tabindex="-1"><a class="header-anchor" href="#❓关联对象需要在主对象-dealloc-的时候手动释放吗" aria-hidden="true">#</a> ❓关联对象需要在主对象 <code>dealloc</code> 的时候手动释放吗</h3><details class="hint-container details"><summary>💡</summary><p>不需要。在 Objective-C 对象的生命周期结束，即调用 <code>dealloc</code> 方法时，系统会自动释放该对象的所有关联对象。无论关联策略是 <code>retain</code> 还是 <code>copy</code>，关联对象都会被自动释放。</p><p>这是由 Objective-C 的 runtime 系统自动处理的。当一个对象被销毁时，runtime 会查找所有赋予该对象的关联对象，并根据赋予它们的关联策略来释放这些对象。</p><p>因此，我们无需担心关联对象在主对象 <code>dealloc</code> 的时候需要手动释放。但我们必须要确保关联对象不会造成循环引用，否则可能会导致内存泄漏。</p></details><h3 id="❓关联对象有什么应用-系统如何管理关联对象" tabindex="-1"><a class="header-anchor" href="#❓关联对象有什么应用-系统如何管理关联对象" aria-hidden="true">#</a> ❓关联对象有什么应用，系统如何管理关联对象</h3><details class="hint-container details"><summary>💡</summary><p>关联对象是Objective-C的一项重要特性，它可以让你在运行时为一个对象动态地添加属性和方法。这为动态缓存、关联数据、实现类别（Category）添加属性等提供了可能。</p><p>关联对象的管理基本依赖于以下三个运行时函数：</p><ul><li><code>objc_setAssociatedObject</code>：用于赋值</li><li><code>objc_getAssociatedObject</code>：用于取值</li><li><code>objc_removeAssociatedObjects</code>：用于移除所有关联对象</li></ul><p>系统采用一个哈希表来管理所有的关联对象。哈希表的每个键是一个对象的内存地址，对应的值是另一个哈希表，里面存储着所有与该对象关联的对象。</p><p>在内存管理上，系统会根据赋给 <code>objc_setAssociatedObject</code> 函数的关联策略，来决定如何管理这个关联对象。存在以下几种关联策略：</p><ul><li><code>OBJC_ASSOCIATION_ASSIGN</code>：弱引用关联对象</li><li><code>OBJC_ASSOCIATION_RETAIN_NONATOMIC</code>：强引用关联对象，并且关联对象在被销毁时会被自动释放（这个过程是非原子性的，也就是说不是线程安全的）</li><li><code>OBJC_ASSOCIATION_COPY_NONATOMIC</code> ：复制关联对象，并且关联对象在被销毁时会自动释放（非原子性）</li><li><code>OBJC_ASSOCIATION_RETAIN</code>：强引用关联对象，并且关联对象在被销毁时会被自动释放（原子性，线程安全）</li><li><code>OBJC_ASSOCIATION_COPY</code>：复制关联对象，并且关联对象在被销毁时会被自动释放（原子性）</li></ul><p>当一个对象被释放时，系统会自动清空与该对象有关的所有关联对象，根据各自的关联策略来决定是释放（<code>retain</code>策略）还是不释放（<code>assign</code>策略）关联对象。</p></details><hr><h2 id="方法" tabindex="-1"><a class="header-anchor" href="#方法" aria-hidden="true">#</a> 方法</h2><h3 id="❓oc-底层方法列表的数据结构是什么" tabindex="-1"><a class="header-anchor" href="#❓oc-底层方法列表的数据结构是什么" aria-hidden="true">#</a> ❓<code>OC</code> 底层方法列表的数据结构是什么？</h3><details class="hint-container details"><summary>💡</summary><p>底层是通过结构体来实现了，结构里面的通过数组来存储方法列表</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// 方法列表结构体</span>
<span class="token keyword">struct</span> method_list_t <span class="token punctuation">{</span>
  uint32_t entsize<span class="token punctuation">;</span>        <span class="token comment">// 结构体的大小</span>
  uint32_t method_count<span class="token punctuation">;</span>   <span class="token comment">// 方法的数量</span>
  method_t method_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 方法列表</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 方法结构体</span>
<span class="token keyword">struct</span> method_t <span class="token punctuation">{</span>
  SEL sel<span class="token punctuation">;</span>                <span class="token comment">// 方法的名称</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>types<span class="token punctuation">;</span>      <span class="token comment">// 方法的类型</span>
  IMP imp<span class="token punctuation">;</span>                <span class="token comment">// 对应的实现（函数指针）</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在Objective-C底层，方法列表的数据结构是由 <code>method_list_t</code> 结构体组成的。</p><p>每一个 <code>method_list_t</code> 包含了方法的数量和一个 <code>method_t</code> 类型的数组。 <code>method_t</code> 类型的数组包含了每个方法的SEL（方法选择器）、类型编码和对应的IMP（方法实现）。 因此，方法列表的结构其实可以看作是一个二维的集合。</p><p>这个数据结构是在Objective-C Runtime库中定义的，你不能直接在普通Objective-C代码中使用它。然而，你可以通过Objective-C的动态特性，使用类似 <code>class_copyMethodList</code> 的函数来获取一个类的所有方法，并使用 <code>method_getName</code> 和 <code>method_getImplementation</code> 类似的函数来获取方法的详细信息。</p><p>代码示例：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">unsigned</span> <span class="token keyword">int</span> outCount<span class="token punctuation">;</span>
Method <span class="token operator">*</span>methods <span class="token operator">=</span> <span class="token function">class_copyMethodList</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">self</span> class<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>outCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> outCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Method method <span class="token operator">=</span> methods<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    SEL selector <span class="token operator">=</span> <span class="token function">method_getName</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;Method name: %@&quot;</span><span class="token punctuation">,</span> <span class="token function">NSStringFromSelector</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">free</span><span class="token punctuation">(</span>methods<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码获取一个类的所有方法并打印出每个方法的名字。</p></details><h3 id="❓method-t-里包含什么" tabindex="-1"><a class="header-anchor" href="#❓method-t-里包含什么" aria-hidden="true">#</a> ❓<code>method_t</code> 里包含什么？</h3><details class="hint-container details"><summary>💡</summary><p><code>method_t</code> 是Objective-C运行时的一个结构，用来表示类中的一个方法。它里面包含三个主要的成员：</p><ul><li><p><code>SEL name</code>：这是一个指向方法名的指针，也叫做方法选择器（selector）。方法选择器是一个C字符串，代表了方法的名字。</p></li><li><p><code>const char *types</code>：这是一个指向方法类型的指针。方法类型是一个C字符串，用特定的编码代表了方法的返回值类型和参数类型。</p></li><li><p><code>IMP imp</code>：这是一个指向方法实现的指针。方法实现是一个函数指针，指向了具体实现这个方法的函数。在Objective-C中，你可以通过改变这个指针来动态地改变方法的实现。</p></li></ul><p>除此之外，有一点需要注意，<code>method_t</code> 及其成员并不会直接暴露给开发者使用，通常我们会通过Objective-C提供的API，如 <code>method_getName</code>（获取方法名）、 <code>method_getTypeEncoding</code>（获取方法类型）、 <code>method_getImplementation</code>（获取方法实现）等来操作 <code>method_t</code>。</p></details><h3 id="❓对象方法-与-类方法存放在哪" tabindex="-1"><a class="header-anchor" href="#❓对象方法-与-类方法存放在哪" aria-hidden="true">#</a> ❓对象方法 与 类方法存放在哪？</h3><details class="hint-container details"><summary>💡</summary><p>在 Objective-C 中，对象方法（实例方法）存放在类对象（class object）中，类方法（class method）存放在元类对象（metaclass object）中。</p><p>当我们给一个对象发送消息时，运行时系统会在对象的类对象的方法列表中查找这个方法。类对象包含了一个指向父类的指针和一个实例方法列表。</p><p>当我们给一个类发送消息时，运行时系统会在类的元类对象的方法列表中查找这个方法。元类对象包含了类方法列表，类方法列表存放的是所有的类方法。</p><p>总的来说，对象方法存放在类对象中，类方法存放在元类对象中。这也是为什么我们可以用类名来调用类方法，但不能用实例对象来调用类方法的原因。因为在查找方法时，运行时系统会去不同的地方查找。</p></details><h3 id="❓class、objc-getclass、object-getclass-三个方法的区别" tabindex="-1"><a class="header-anchor" href="#❓class、objc-getclass、object-getclass-三个方法的区别" aria-hidden="true">#</a> ❓<code>class</code>、<code>objc_getClass</code>、<code>object_getClass</code> 三个方法的区别？</h3><details class="hint-container details"><summary>💡</summary><p><code>class</code>、<code>objc_getClass</code>、<code>object_getClass</code> 这三个方法都用于获取一个对象的类，但是它们之间是有区别的：</p><ol><li><p><code>class</code>：<code>class</code> 是一个实例方法。当你通过一个实例对象调用这个方法时，它会返回这个对象所属的类。当你通过一个类对象调用这个方法时，会返回这个类本身。</p></li><li><p><code>objc_getClass</code>：<code>objc_getClass</code> 是一个函数，参数是一个类名字符串，返回值是这个类的类对象。如果找不到这个类，<code>objc_getClass</code> 会抛出一个异常。</p></li><li><p><code>object_getClass</code>：<code>object_getClass</code> 也是一个函数，参数是一个实例对象或者类对象。如果参数是一个实例对象，<code>object_getClass</code> 返回这个实例对象的类对象；如果参数是个类对象，<code>object_getClass</code> 返回这个类的元类对象。</p></li></ol><p>总的来说，<code>class</code>、<code>objc_getClass</code> 和 <code>object_getClass</code> 都是用于获取类对象的，但它们的使用场景和具体行为是有区别的。</p></details><hr><h2 id="method-swizzling" tabindex="-1"><a class="header-anchor" href="#method-swizzling" aria-hidden="true">#</a> Method Swizzling</h2><h3 id="❓method-swizzling-原理" tabindex="-1"><a class="header-anchor" href="#❓method-swizzling-原理" aria-hidden="true">#</a> ❓<code>Method Swizzling</code> 原理</h3><details class="hint-container details"><summary>💡</summary><p>Method Swizzling 是 Objective-C 的动态特性的一个应用，它允许在运行时更改类的一个方法的实现。这个技术常常用在 Objective-C 的分类（Category）和扩展（Extension）中，通过 Method Swizzling 可以覆盖和扩展原有类的方法。</p><p>Method Swizzling 的原理是修改类的方法列表，将指向某个方法名称（SEL）的函数指针（IMP）指向另外一个实现。这就类似于在运行时改变了方法的实现。</p><p>Method Swizzling 通常通过 Objective-C 的运行时函数 <code>method_exchangeImplementations</code> 或者 <code>class_replaceMethod</code> 实现，前者交换两个方法的实现，后者替换一个方法的实现。</p><p>以 <code>method_exchangeImplementations</code> 为例，如果想要交换 <code>NSString</code> 的 <code>lowercaseString</code> 方法和 <code>uppercaseString</code> 方法的实现，可以使用如下的代码：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>Method lowercaseMethod <span class="token operator">=</span> <span class="token function">class_getInstanceMethod</span><span class="token punctuation">(</span><span class="token punctuation">[</span>NSString class<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">@selector</span><span class="token punctuation">(</span>lowercaseString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Method uppercaseMethod <span class="token operator">=</span> <span class="token function">class_getInstanceMethod</span><span class="token punctuation">(</span><span class="token punctuation">[</span>NSString class<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">@selector</span><span class="token punctuation">(</span>uppercaseString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">method_exchangeImplementations</span><span class="token punctuation">(</span>lowercaseMethod<span class="token punctuation">,</span> uppercaseMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码首先通过 <code>class_getInstanceMethod</code> 获取了两个方法的 <code>Method</code>，然后使用 <code>method_exchangeImplementations</code> 将这两个方法的实现交换。完成上述操作后，对 NSString 对象调用 <code>lowercaseString</code> 实际上会执行 <code>uppercaseString</code> 的实现，反之亦然。</p><p>虽然 Method Swizzling 是一种强大的技术，但如果使用得不当，可能会引入难以调试的问题，因此在使用时需要特别谨慎。</p></details><h3 id="❓method-swizzling-时-不替换父类-只替换子类-怎么处理" tabindex="-1"><a class="header-anchor" href="#❓method-swizzling-时-不替换父类-只替换子类-怎么处理" aria-hidden="true">#</a> ❓<code>Method Swizzling</code> 时，不替换父类，只替换子类，怎么处理</h3><details class="hint-container details"><summary>💡</summary><p><code>Method Swizzling</code>只在子类且不影响父类的操作，可以通过创建子类的分类（Category）来实现。父类的方法不会被改变，只有子类中的方法才会被替换。</p><p>这里是一个简单的例子。假设我们有一个名为<code>MySubClass</code>的子类，这个子类继承自<code>MySuperClass</code>。我们想要替换<code>MySubClass</code>中的<code>foo</code>方法，但不影响<code>MySuperClass</code>中的<code>foo</code>方法：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">import</span> <span class="token string">&quot;MySubClass+Swizzling.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">import</span> <span class="token expression"><span class="token operator">&lt;</span>objc<span class="token operator">/</span>runtime<span class="token punctuation">.</span>h<span class="token operator">&gt;</span></span></span>

<span class="token keyword">@implementation</span> <span class="token function">MySubClass</span> <span class="token punctuation">(</span>Swizzling<span class="token punctuation">)</span>

<span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>load <span class="token punctuation">{</span>
    <span class="token keyword">static</span> dispatch_once_t onceToken<span class="token punctuation">;</span>
    <span class="token function">dispatch_once</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>onceToken<span class="token punctuation">,</span> <span class="token operator">^</span><span class="token punctuation">{</span>
        Class class <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">self</span> class<span class="token punctuation">]</span><span class="token punctuation">;</span>

        SEL originalSelector <span class="token operator">=</span> <span class="token keyword">@selector</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>
        SEL swizzledSelector <span class="token operator">=</span> <span class="token keyword">@selector</span><span class="token punctuation">(</span>swizzled_foo<span class="token punctuation">)</span><span class="token punctuation">;</span>

        Method originalMethod <span class="token operator">=</span> <span class="token function">class_getInstanceMethod</span><span class="token punctuation">(</span>class<span class="token punctuation">,</span> originalSelector<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Method swizzledMethod <span class="token operator">=</span> <span class="token function">class_getInstanceMethod</span><span class="token punctuation">(</span>class<span class="token punctuation">,</span> swizzledSelector<span class="token punctuation">)</span><span class="token punctuation">;</span>

        BOOL didAddMethod <span class="token operator">=</span> <span class="token function">class_addMethod</span><span class="token punctuation">(</span>class<span class="token punctuation">,</span>
                                            originalSelector<span class="token punctuation">,</span>
                                            <span class="token function">method_getImplementation</span><span class="token punctuation">(</span>swizzledMethod<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                            <span class="token function">method_getTypeEncoding</span><span class="token punctuation">(</span>swizzledMethod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>didAddMethod<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">class_replaceMethod</span><span class="token punctuation">(</span>class<span class="token punctuation">,</span>
                                swizzledSelector<span class="token punctuation">,</span>
                                <span class="token function">method_getImplementation</span><span class="token punctuation">(</span>originalMethod<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                <span class="token function">method_getTypeEncoding</span><span class="token punctuation">(</span>originalMethod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">method_exchangeImplementations</span><span class="token punctuation">(</span>originalMethod<span class="token punctuation">,</span> swizzledMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//这是新的方法实现</span>
<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>swizzled_foo <span class="token punctuation">{</span>
    <span class="token comment">//在这里执行你自己的逻辑...</span>
    <span class="token punctuation">[</span><span class="token keyword">self</span> swizzled_foo<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">@end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述代码中，我们首先通过<code>load</code>方法在类被加载的时候替换了原来的<code>foo</code>方法。使用<code>dispatch_once</code>确保替换操作只会执行一次。在替换方法时，我们首先尝试调用<code>class_addMethod</code>将新的实现添加到类上。如果原来的方法在父类中实现，那么这会创建一个新的方法，方法的名字是原来的方法，实现则是我们新的<code>swizzled_foo</code>方法。然后我们使用<code>class_replaceMethod</code>将旧的方法实现替换为新的方法。如果<code>class_addMethod</code>没有创建新的实现，那么我们就会通过<code>method_exchangeImplementations</code>交换两个方法的实现。</p><p>这样就实现了只在子类中替换方法，不影响父类的方法。</p></details><h3 id="❓method-swizzling-的优缺点-缺点会导致什么问题" tabindex="-1"><a class="header-anchor" href="#❓method-swizzling-的优缺点-缺点会导致什么问题" aria-hidden="true">#</a> ❓<code>Method Swizzling</code> 的优缺点，缺点会导致什么问题</h3><details class="hint-container details"><summary>💡</summary><p>Method Swizzling 是 Objective-C 的动态特性之一，它主要用于在运行时更改某个方法的实现。这种技术对于某些情况非常有用，比如 Debug、注入代码、改变现有方法的行为等。然而，任何强大的工具如果使用不当，都可能导致不可预见的结果。以下是 Method Swizzling 的优缺点：</p><p>优点：</p><ol><li>强大且灵活：Swizzling 可以改变现存的方法，无需修改源代码。这种特性非常有用于调试、改进现有的方法等。</li><li>针对库函数或者系统函数：我们可以 Swizzling 系统函数或库函数，进而解决某些bug或提高性能。</li></ol><p>缺点：</p><ol><li>难以调试和理解：由于方法的实现在运行时被改变，导致调试变得困难。此外，阅读并理解 Swizzling 的代码也需要一定的经验和技巧。</li><li>破坏封装性：Swizzling 会破坏类的封装性和隐藏实现细节的原则，不利于代码的维护和理解。</li><li>命名冲突：如果有多个分类使用了 swizzling 方法，那么很可能出现命名冲突，导致程序运行出错。</li><li>不兼容性问题：由于 Swizzling 对象变更底层的运行机制，如果被 Swizzling 的对象升级或者被其他对象替换，可能会引发难以预料的问题。</li></ol><p>为了避免以上缺点，我们应该谨慎地使用 Method Swizzling，应尽可能地减少它的使用，并且任何使用 Swizzling 的代码都应该清楚地注释其目标和目的，以便其他开发者理解。</p></details><h3 id="❓如何安全的进行方法替换" tabindex="-1"><a class="header-anchor" href="#❓如何安全的进行方法替换" aria-hidden="true">#</a> ❓如何安全的进行方法替换</h3><details class="hint-container details"><summary>💡</summary><p>以下是一些要点可以帮助在 Objective-C 程序里安全地进行方法替换，也叫做 Method Swizzling：</p><ol><li><p>在统一的地方执行 Method Swizzling：通常我们选择在 <code>+load</code> 方法中执行 Method Swizzling，因为 <code>+load</code> 方法是在类被加载时只被调用一次，从而保证了 Method Swizzling 也只会执行一次。</p></li><li><p>注意方法的调用方：Method Swizzling 了一个方法后，原来的方法调用方可能会受到影响。为了避免这个问题，我们通常会在新的方法中调用一次原来的方法。因此在 Swizzling 方法时，要小心并确保原来的方法在新的实现中被正确地执行了。</p></li><li><p>注意线程安全：尽管 <code>+load</code> 方法是线程安全的，但如果你在其他地方进行 Method Swizzling，你同时需要确保这个过程是线程安全的。你可以使用 <code>dispatch_once</code> 和锁等手段来保证线程安全。</p></li><li><p>小心命名冲突：假如多个分类都去 Swizzling 同一个方法，那么就可能会存在命名冲突。所以在给新的方法命名时，应保证其唯一性，例如可以加上项目的前缀等。</p></li><li><p>验证原方法与新方法确实存在：替换一个不存在的方法，或者用一个不存在的方法去替换，都会导致程序错误。在进行 Method Swizzling 前，应该先用 <code>class_getInstanceMethod</code> 确认这两个方法确实存在。</p></li><li><p>尽量不使用 Method Swizzling：由于 Method Swizzling 会改变代码的行为，增加了代码理解的复杂性，除非必须，否则应尽量避免使用。</p></li></ol><p>在遵循了以上几点之后，你就可以比较安全地使用 Method Swizzling 了。但这并不代表就可以随意使用，任何使用 Method Swizzling 的地方都应该有明确的理由和目标，同时通过注释让其他开发者知道你为什么要使用 Method Swizzling。</p></details><h3 id="❓方法交换和分类同时去-hook-一个方法-结果会怎么样-具体交换的是什么-交换时是如何处理传参数" tabindex="-1"><a class="header-anchor" href="#❓方法交换和分类同时去-hook-一个方法-结果会怎么样-具体交换的是什么-交换时是如何处理传参数" aria-hidden="true">#</a> ❓方法交换和分类同时去 <code>hook</code> 一个方法，结果会怎么样，具体交换的是什么，交换时是如何处理传参数</h3><details class="hint-container details"><summary>💡</summary><p>如果分类和方法交换（Method Swizzling）同时尝试 <code>hook</code> 同一个方法，最终的结果取决于这两者加载到运行时的先后顺序。</p><p>在 Objective-C 中，分类和 Method Swizzling 在运行时加载的顺序并非固定。一般来说，分类的<code>load</code>方法会在类的<code>load</code>方法之前调用，因此，如果分类和 Method Swizzling 都尝试去 hook 同一个方法，那么一般情况下，分类会首先替换掉原方法的实现，然后 Method Swizzling 再把分类替换后的实现与自己的实现进行交换。</p><p>具体来说，如果分类和 Method Swizzling 都尝试 hook 同一个方法，例如<code>doSomething</code>，我们先假设加载分类的时间早于 Method Swizzling ，这种情况下：</p><ol><li>分类首先会替换掉<code>doSomething</code>的原始实现，把它替换成分类中<code>doSomething</code>的实现。</li><li>然后，Method Swizzling 会把这个被分类替换后的实现，再与 Swizzling 中的新实现进行交换。</li></ol><p>至于参数传递，Method Swizzling 是在运行时替换方法的实现，因此参数传递是不会变的。原始方法的参数会在调用时传给新的方法实现。当你在新的实现里调用原始实现时，需要将接收到的参数再传递给原始实现。</p><p>注意，由于分类和 Swizzling 的加载顺序并不是固定的，因此，同样的代码在不同的环境下或者不同的运行时版本下可能会有不同的行为。因此，这种将分类和 Swizzling 混用的做法是不稳定且不可预测的，建议在开发中避免使用。</p></details><blockquote><p>❓如果使用 <code>NSInvocation</code> 的话，是否能处理方法有返回值的场景，具体怎么处理的</p></blockquote><details class="hint-container details"><summary>💡</summary><p><code>NSInvocation</code> 是一个强大的工具，它可以处理带有返回值的方法调用，甚至包括那些返回 struct 的复杂情况。具体处理方式如下：</p><ol><li><p>创建一个方法签名（<code>NSMethodSignature</code>）对象，通常可以通过类的 <code>methodSignatureForSelector:</code> 方法来创建。</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>NSMethodSignature <span class="token operator">*</span>signature <span class="token operator">=</span> <span class="token punctuation">[</span>clazz instanceMethodSignatureForSelector<span class="token punctuation">:</span>selector<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>使用签名对象创建一个 <code>NSInvocation</code> 对象。</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>NSInvocation <span class="token operator">*</span>invocation <span class="token operator">=</span> <span class="token punctuation">[</span>NSInvocation invocationWithMethodSignature<span class="token punctuation">:</span>signature<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>设定 <code>NSInvocation</code> 对象的 <code>target</code> 和 <code>selector</code>。</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token punctuation">[</span>invocation setTarget<span class="token punctuation">:</span><span class="token keyword">self</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>invocation setSelector<span class="token punctuation">:</span>selector<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>设置参数。注意，<code>NSInvocation</code> 的参数 0 是 <code>self</code>，参数 1 是 <code>_cmd</code>，因此实际参数序号应该从 2 开始。</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token punctuation">[</span>invocation setArgument<span class="token punctuation">:</span><span class="token operator">&amp;</span>arg atIndex<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>调用 <code>NSInvocation</code> 对象的 <code>invoke</code> 方法。</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token punctuation">[</span>invocation invoke<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>获取返回值。你需要先创建一个临时变量，然后通过 <code>getReturnValue:</code> 方法来获取。</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>returnType returnValue<span class="token punctuation">;</span>
<span class="token punctuation">[</span>invocation getReturnValue<span class="token punctuation">:</span><span class="token operator">&amp;</span>returnValue<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>需要注意的是，使用 <code>NSInvocation</code> 需要对被调用方法有充分的了解，包括它的参数类型、参数个数、返回值类型等。否则如果参数或返回值设置不正确，有可能会导致程序崩溃。所以，在使用 <code>NSInvocation</code> 时要特别小心。</p></details><hr><h2 id="其它知识点" tabindex="-1"><a class="header-anchor" href="#其它知识点" aria-hidden="true">#</a> 其它知识点</h2><h3 id="❓runtime-中的-sidetables-了解吗" tabindex="-1"><a class="header-anchor" href="#❓runtime-中的-sidetables-了解吗" aria-hidden="true">#</a> ❓<code>runtime</code> 中的 <code>SideTables</code> 了解吗</h3><details class="hint-container details"><summary>💡</summary><p>Objective-C的 runtime 库的 &quot;SideTables&quot; 结构是用来保存一些与对象有关但无法直接保存在对象内存布局中的信息。这些信息包括：</p><ul><li><p>关联对象（Associated Object）：这是 Objective-C 的一个特性，允许开发者为一个对象关联任意的其他对象或值。由于这个特性的动态并且无法预测的性质，这些关联的对象或值无法被直接保存在对象内部，因此需要 SideTables 来保存。</p></li><li><p>弱引用（Weak Reference）：当一个对象被赋值给一个 weak 变量时，这个 weak 变量的地址和对应的对象需要被记录下来，以便在这个对象被销毁时，可以遍历所有对它的弱引用并将它们设置为 nil。同理，由于弱引用的动态性，这些信息也需要 SideTables 来保存。</p></li></ul><p>&quot;SideTables&quot; 是一种散列表（Hash Table）的结构，每一个表项其实是一个 &quot;SideTable&quot; 结构，包含了一个互斥锁（Mutex）和对应的散列表。SideTables 之所以设计成这个样子，主要原因是出于线程安全和性能的考虑。它可以将关联对象和弱引用的信息保存在不同的表项里，做到锁的粒度最小化，从而提升多线程环境下的性能。</p></details><h3 id="❓runtime-中的-fastpath、slowpath-是什么" tabindex="-1"><a class="header-anchor" href="#❓runtime-中的-fastpath、slowpath-是什么" aria-hidden="true">#</a> ❓<code>runtime</code> 中的 <code>fastpath</code>、<code>slowpath</code> 是什么</h3><details class="hint-container details"><summary>💡</summary><p>在计算机科学中，<code>fastpath</code> 和 <code>slowpath</code> 是用来描述代码执行路径的术语，这两个术语主要用于注释和优化代码。</p><ul><li><p><code>fastpath</code>：这个路径用来处理最常见，最频繁的，计算成本最低的场景或任务，为了加速整体的处理时间，会使得这部分代码尽可能的进行优化。一般会将这部分代码放在函数或者一段代码的前面。</p></li><li><p><code>slowpath</code>：这个路径用来处理那些不常见，复杂度较高或者可能导致错误的场景或任务，处理这部分场景的代码放在slowpath。这部分代码一般在fastpath代码之后，很多时候需要进行一些错误处理或者复杂计算。</p></li></ul><p>在 iOS 系统源码中，你可能经常看到 <code>__builtin_expect</code> 方法，它用来指示编译器对一个条件的预判。这就是 fastpath 和 slowpath 的实现方式，通过这个函数，可以将更可能执行的代码（fastpath）放到 CPU 预取缓存中，提高程序运行效率。</p><p>例如，Apple 在 Objective-C 的内存管理中，就使用到了 fastpath 和 slowpath 的概念，像 <code>objc_retain</code>、<code>objc_release</code> 这样的函数，都先处理常见的 fastpath（例如直接返回非空指针或者归还 autoreleasepool 的对象等），稍微复杂或者出错的情况会借助 slowpath （例如调用了 <code>dealloc</code>等）来处理。</p><p>在 <code>Objective-C runtime</code> 中，你会在源码中看到 <code>FASTPATH</code> 和 <code>SLOWPATH</code> 这两个宏定义。它们其实是基于 <code>__builtin_expect</code> 函数的封装。</p><p><code>__builtin_expect</code> 是一个 GCC 和 Clang 的内建函数，它的作用是提供代码分支预测的建议给编译器。通过这个函数，可以将更可能执行的代码放到 CPU 预取缓存中，进而提高程序运行效率。</p><p>例如，定义如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">FASTPATH</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">__builtin_expect</span><span class="token punctuation">(</span><span class="token function">bool</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SLOWPATH</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">__builtin_expect</span><span class="token punctuation">(</span><span class="token function">bool</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>FASTPATH(x)</code> 表示 <code>x</code> 这个条件最可能为 <code>true</code>，<code>SLOWPATH(x)</code> 表示 <code>x</code> 这个条件最可能为 <code>false</code>。</p><p>在 <code>Objective-C runtime</code> 中，<code>FASTPATH</code> 和 <code>SLOWPATH</code> 主要用来优化代码路径。比如在处理 <code>retain</code> 和 <code>release</code> 时，runtime 会优先处理最常见、最频繁的情况，即对非空对象进行 <code>retain</code> 和 <code>release</code>，这种情况就显式地标记为 <code>FASTPATH</code>。而对空对象进行 <code>retain</code> 和 <code>release</code> 或者对象释放后调用 <code>dealloc</code> 等情况则被标记为 <code>SLOWPATH</code>。</p><p>这样的设计可以显著地提高常见路径的性能，对于性能有要求的代码可以进行参考。</p></details><h3 id="❓oc-运行时在工程中的有过实践运用吗" tabindex="-1"><a class="header-anchor" href="#❓oc-运行时在工程中的有过实践运用吗" aria-hidden="true">#</a> ❓<code>OC</code> 运行时在工程中的有过实践运用吗？</h3><details class="hint-container details"><summary>💡</summary><p>是的，Objective-C 的运行时系统在很多工程中都有应用。以下是几个具体的例子：</p><ol><li><p>关联对象（Associated Object）：我们可以使用关联对象为现有的类增加一些属性，而不需要修改类的源代码。例如，我们可以为 <code>UIButton</code> 添加一个 <code>indexPath</code> 属性，用于在 TableView 中定位这个按钮在哪个单元行。</p></li><li><p>方法交换（Method Swizzling）：通过运行时系统，我们可以在类别中添加新的方法，并将新的方法与原有的方法进行交换。例如，我们可以在类别中为 <code>UIViewController</code> 添加一个新的 <code>viewWillAppear:</code> 方法，然后将这个新方法与系统原有的方法进行交换。这样我们就可以在新的方法中添加一些跟踪代码，以便追踪到每个视图控制器的出现。</p></li><li><p>懒加载：在Objective-C中，经常使用runtime实现属性的懒加载，例如，我们可以在 &quot;getter&quot; 方法中检查对象是否已经被初始化，如果没有，那么可以初始化该对象并把它缓存起来，以便下次使用。</p></li><li><p>序列化和反序列化：我们可以通过遍历一个对象的所有属性，然后通过 <code>KVC</code>（键值编码）来得到所有属性的值，之后就可以将这些值序列化为 JSON 或者 XML。反序列化也同样，我们可以将一个 JSON 或者 XML 数据转化为一个字典，然后通过遍历字典，将字典的值通过 <code>KVC</code> 设置到对象的属性上。</p></li></ol><p>总的来说，Objective-C 的运行时系统提供了很多强大的特性，使得我们可以做一些在静态语言中做不到的事。</p></details>`,77);function u(r,m){return n(),e("div",null,[d,c(" more "),l])}const b=a(p,[["render",u],["__file","0x06.runtime.html.vue"]]);export{b as default};
