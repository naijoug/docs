const t=JSON.parse('{"key":"v-2fc94f5a","path":"/interview/core/algorithm.html","title":"algorithm - “算法”","lang":"zh-CN","frontmatter":{"title":"algorithm - “算法”","icon":"hashtag","index":true,"description":"冒泡排序和插入排序的时间复杂度是多少？=> 为什么实际开发中会更多选择插入排序？ 💡 两者的时间复杂度相同 O(n²) 插入排序是稳定的排序，对于相同的元素排序前后的相对位置不会发生变化。 大数相加 找到两个排序数组的中位数 pow(double, double) 函数的自实现 树的遍历 前、中、后序遍历; 层序遍历; 强连通量算法了解嘛？","head":[["meta",{"property":"og:url","content":"https://naijoug.github.io/docs/docs/interview/core/algorithm.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"algorithm - “算法”"}],["meta",{"property":"og:description","content":"冒泡排序和插入排序的时间复杂度是多少？=> 为什么实际开发中会更多选择插入排序？ 💡 两者的时间复杂度相同 O(n²) 插入排序是稳定的排序，对于相同的元素排序前后的相对位置不会发生变化。 大数相加 找到两个排序数组的中位数 pow(double, double) 函数的自实现 树的遍历 前、中、后序遍历; 层序遍历; 强连通量算法了解嘛？"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-23T10:57:16.000Z"}],["meta",{"property":"article:author","content":"naijoug"}],["meta",{"property":"article:modified_time","content":"2023-12-23T10:57:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"algorithm - “算法”\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-12-23T10:57:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"naijoug\\",\\"url\\":\\"https://github.com/naijoug\\"}]}"]]},"headers":[{"level":2,"title":"冒泡排序和插入排序的时间复杂度是多少？=> 为什么实际开发中会更多选择插入排序？","slug":"冒泡排序和插入排序的时间复杂度是多少-为什么实际开发中会更多选择插入排序","link":"#冒泡排序和插入排序的时间复杂度是多少-为什么实际开发中会更多选择插入排序","children":[]},{"level":2,"title":"强连通量算法了解嘛？","slug":"强连通量算法了解嘛","link":"#强连通量算法了解嘛","children":[]}],"git":{"createdTime":1703329036000,"updatedTime":1703329036000,"contributors":[{"name":"naijoug","email":"naijoug@outlook.com","commits":1}]},"readingTime":{"minutes":0.46,"words":137},"filePathRelative":"interview/core/algorithm.md","localizedDate":"2023年12月23日","autoDesc":true}');export{t as data};
