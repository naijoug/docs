import{_ as r}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as s,o as a,c as l,a as i,b as e,e as n,d as o}from"./app-51pB87w6.js";const c={},_=e("h2",{id:"_1800",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_1800","aria-hidden":"true"},"#"),n(" 1800")],-1),d=e("p",null,"// #region 1800",-1),h={href:"https://leetcode.cn/problems/maximum-ascending-subarray-sum",target:"_blank",rel:"noopener noreferrer"},m=e("details",{class:"hint-container details"},[e("summary",null,"💡")],-1),u=e("p",null,"// #endregion 1800",-1),p=e("h2",{id:"_1804",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_1804","aria-hidden":"true"},"#"),n(" 1804")],-1),f=e("p",null,"// #region 1804",-1),x={href:"https://leetcode.cn/problems/implement-trie-ii-prefix-tree",target:"_blank",rel:"noopener noreferrer"},b=e("details",{class:"hint-container details"},[e("summary",null,"💡")],-1),g=e("p",null,"// #endregion 1804",-1);function k(I,N){const t=s("ExternalLinkIcon");return a(),l("div",null,[i(" more "),_,d,e("ul",null,[e("li",null,[e("a",h,[n("🟢 1800 - 最大升序子数组和"),o(t)])])]),m,u,p,f,e("ul",null,[e("li",null,[e("a",x,[n("🟠 1804 - 实现 Trie （前缀树） II"),o(t)])])]),b,g])}const y=r(c,[["render",k],["__file","0x1800.html.vue"]]);export{y as default};
