import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as p,c,a as l,b as n,e as s,d as t,f as i}from"./app-_KbMDiSB.js";const u={},r=n("h2",{id:"_1616",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1616","aria-hidden":"true"},"#"),s(" 1616")],-1),d=n("p",null,"// #region 1616",-1),k={href:"https://leetcode.cn/problems/split-two-strings-to-make-palindrome",target:"_blank",rel:"noopener noreferrer"},m=n("blockquote",null,[n("p",null,"a、b 两个字符串长度相同，将两个字符串从相同位置分割，a 的前半部分与 b 的后半部分，或者 b 的前半部分与 a 的后半部分拼接是否可以组成回文串。")],-1),h=i(`<details class="hint-container details"><summary>💡</summary><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">checkPalindromeFormation</span><span class="token punctuation">(</span><span class="token class-name">String</span> a<span class="token punctuation">,</span> <span class="token class-name">String</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">checkPalindrome</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">checkPalindrome</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 判断 a 字符串的开头部分是否可以与 b 字符的后面部分组成回文串</span>
    <span class="token keyword">boolean</span> <span class="token function">checkPalindrome</span><span class="token punctuation">(</span><span class="token class-name">String</span> a<span class="token punctuation">,</span> <span class="token class-name">String</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 左指针指向 a 字符串的开头</span>
        <span class="token keyword">int</span> right <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 右指针指向 b 字符的结尾</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span> left <span class="token operator">&lt;</span> right <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span> a<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token operator">!=</span> b<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 不匹配，开始将左右指针位置移动到 a、 b 字符串进行回文匹配判断</span>
                <span class="token keyword">return</span> <span class="token function">checkPalindrome</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">checkPalindrome</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            left <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            right <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 判断字符串从 left ~ right 范围是否为回文串</span>
    <span class="token keyword">boolean</span> <span class="token function">checkPalindrome</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span> left <span class="token operator">&lt;</span> right <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token operator">!=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            left <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            right <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>// #endregion 1616</p><h2 id="_1631" tabindex="-1"><a class="header-anchor" href="#_1631" aria-hidden="true">#</a> 1631</h2><p>// #region 1631</p>`,4),b={href:"https://leetcode.cn/problems/path-with-minimum-effort",target:"_blank",rel:"noopener noreferrer"},_=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),v=n("p",null,"// #endregion 1631",-1),f=n("h2",{id:"_1644",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1644","aria-hidden":"true"},"#"),s(" 1644")],-1),g=n("p",null,"// #region 1644",-1),y={href:"https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree-ii",target:"_blank",rel:"noopener noreferrer"},w=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),x=n("p",null,"// #endregion 1644",-1),I=n("h2",{id:"_1650",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1650","aria-hidden":"true"},"#"),s(" 1650")],-1),P=n("p",null,"// #region 1650",-1),S={href:"https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree-iii",target:"_blank",rel:"noopener noreferrer"},V=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),N=n("p",null,"// #endregion 1650",-1),A=n("h2",{id:"_1676",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1676","aria-hidden":"true"},"#"),s(" 1676")],-1),j=n("p",null,"// #region 1676",-1),B={href:"https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree-iv",target:"_blank",rel:"noopener noreferrer"},E=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),C=n("p",null,"// #endregion 1676",-1);function L(q,F){const a=o("ExternalLinkIcon");return p(),c("div",null,[l(" more "),r,d,n("ul",null,[n("li",null,[n("a",k,[s("🟡 1616 - 分割两个字符串得到回文串"),t(a)]),m])]),h,n("ul",null,[n("li",null,[n("a",b,[s("🟠 1631 - 最小体力消耗路径"),t(a)])])]),_,v,f,g,n("ul",null,[n("li",null,[n("a",y,[s("🟠 1644 - 二叉树的最近公共祖先 II"),t(a)])])]),w,x,I,P,n("ul",null,[n("li",null,[n("a",S,[s("🟠 1650 - 二叉树的最近公共祖先 III"),t(a)])])]),V,N,A,j,n("ul",null,[n("li",null,[n("a",B,[s("🟠 1676 - 二叉树的最近公共祖先 IV"),t(a)])])]),E,C])}const D=e(u,[["render",L],["__file","0x1600.html.vue"]]);export{D as default};
