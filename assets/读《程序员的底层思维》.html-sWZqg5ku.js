import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o,c as l,a as c,f as p}from"./app-ts76ylnm.js";const i={},d=p('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>“有道无术，术尚可求也，有术无道，止于术”。</p><blockquote><p>📚 《代码精进之路：从码农到工匠》 —— 编程技艺 “术” 层面 📚 《程序员的底层思维》 —— 编程背后的底层思维 “道” 层面</p></blockquote><p>一朵具体的花虽然看得见、摸得着，但总会有凋零消亡的时候，而“花”这个字作为精神实体将永不会消亡。</p><p>抽象的花和具体的花到底哪个才是本真呢？这是一个哲学问题。</p><blockquote><p>📚 “思维本身就能解决问题，我们所要做的，就是观察它是如何做到的。” - 维特根斯坦《逻辑哲学论》</p></blockquote><p>认知四层次：“不知道自己不知道、知道自己不知道、知道自己知道、不知道自己知道”。</p><blockquote><p>🎤 “没有好的思维模型，再多的知识积累也是低水平的重复。成人学习的目的不是获取更多的信息量，而是学习更好的思维模型。” —— 李善友（混沌大学创始人）</p></blockquote><p>本书目的：打破 “不知道自己不知道” 的思维禁锢</p><h2 id="基础思维能力" tabindex="-1"><a class="header-anchor" href="#基础思维能力" aria-hidden="true">#</a> 基础思维能力</h2><blockquote><p>解决日常问题的基础思维能力。</p></blockquote><h3 id="抽象思维" tabindex="-1"><a class="header-anchor" href="#抽象思维" aria-hidden="true">#</a> 抽象思维</h3><blockquote><p>🎤 “若想捉大鱼，就得潜入深渊。深渊里的鱼更有力，也更纯净。硕大而抽象，且非常美丽。” —— 大卫·林奇</p></blockquote><p>软件技术的本质就是一门抽象的艺术。</p><p>软件工程师解决问题的抽象思维：<code>分析、归纳、综合、判断、推理</code> -&gt; <code>抽象、挖掘、关联</code> -&gt; <code>建模、实现</code></p><ul><li>抽象 = 抽离 + 具象</li></ul><blockquote><p>📚 “至于什么是时间，在没人问我时，我非常清楚；可一旦要向别人解释，我就有点糊涂了。” —— 奥古斯丁《西方哲学史》</p></blockquote><p>英文 <code>abstract</code>，来自拉丁文 <code>abstractio</code>，原意是排除、抽出。</p><p>抽象概念更接近问题的本质</p><ul><li><p>抽象是哲学思维的基础</p><blockquote><p>🎤 “道生一，一生二，二生三，三生万物” —— 老子</p></blockquote><blockquote><p>📚 洞穴之喻 —— 柏拉图《理想国》</p></blockquote></li><li><p>语言的抽象性</p><p>抽象思维（词的思维）：用词（概念）进行判断、推理并得出结论的过程。</p><p>语言和抽象是一体的</p><p>开会要求：通用语言(Ubiquitous Language)</p><p>代码审查(Code Review)：特别关注命名合理性</p><blockquote><p>🎤 “Creating good names is hard，but it should be hard，because a great name captures essential meaning in just one or two words.”（起一个好名字应该很难，因为，一个好名字需要把要义浓缩在一到两个词中。）—— Joel Spolsky (Stack Overflow 创始人)</p></blockquote></li><li><p>软件设计中的抽象</p><p>面向对象(<code>OO - Object Oriented</code>)</p><ul><li>面向对象分析(<code>OOA - Object Oriented Analysis</code>)</li><li>面向对象设计(<code>OOD - Object Oriented Design</code>)</li><li>面向对象编程(<code>OOP - Object Oriented Programming</code>)</li></ul><p>如何评判某个类的抽象设计是否良好？</p><ul><li>耦合性：强耦合使系统变得复杂。“组合优于继承”</li><li>内聚性：单个模块（类、包、组件）内各个元素的联系程度。</li><li>充分性：类或模块应该记录某个抽象设计足够多的特征，从而允许有意义的交互，否则将使组件变得无用。</li><li>完整性：类或模块的接口记录了某个抽象全部有意义的特征。</li></ul><blockquote><p>📚 基础类型偏执(Primitive Obsession) “使用了太多的基础类型，导致有些应该被抽象成实体类的概念，却以基础类的形式散落在代码各处，这是一种典型的抽象缺失。” —— Martin Fowler《重构：改善既有代码的设计》</p></blockquote><p>🌰 图书馆信息管理系统，<code>ISBN</code>(International Standard Book Number)：国际标准书号，这个字段的设计。不好的设计：使用字符串基础类型，这样创建、校验、转换等逻辑将散落在很多地方；好的设计：设计一个 <code>ISBN</code> 来抽象封装相关处理。</p><p>🌰 转账功能，抽象出转账的组合概念 <code>Money</code> (金额 + 货币)</p><p>提取重复代码只是重构工作的第一步。对重复代码进行概念抽象，寻找有意义的命名才是我们工作的重点。</p><p>好的抽象设计是内聚而完整的。</p><p>🌰 <code>JDK 1.1</code> 中的 <code>javax.swing.ButtonModel</code> 不完整接口的设计，没有提供 <code>getGroup()</code>。</p><p>一种检查抽象设计是否完整的方法，是查看接口或类是否缺少 “互补和对称”。</p><p>🌰 设计栈类，操作 <code>push</code> 和 <code>pop</code></p><p>不合理地抽象比没有抽象对系统的伤害更大。</p><p>🌰 过渡设计例子：将电商和电影订单中心合并，是实现订单中台。不同的业务模块，并不适用于中台。</p></li><li><p>抽象的层次性</p><p>抽象的三个特征：</p><ul><li>抽象是忽略细节的</li><li>抽象代表了共同性质</li><li>抽象具有层次性</li></ul><p>抽象是已概念(词语)来反映现实的过程。</p><ul><li>概念的外延：适合这个概念的一切对象的范围。</li><li>概念的内涵：这个概念所反应的对象的本质属性的总和。</li></ul><p>🌰 “平行四边形” —— 外延：正方形、菱形、矩形；内涵：有四条边，两组对边相互平行。</p><p>内涵愈广，则其外延愈狭；反之，内涵愈狭，则其外延愈广。</p><p>🌰 “菱形” vs “平行四边形”</p><p>内涵决定外延，但外延并不决定其内涵。</p><p>🌰 “等边三角形” vs “等角三角形”</p><p>对抽象层次的权衡是对我们设计能力的考验，要根据业务的需要，选择合理的抽象层次，既不能太高，也不能太低。</p><p>🌰 玩笑：“为了通用性，把所有的类都设置为 Object，把所有的参数都设置为 Map的系统，是最通用的。”</p><p>越抽象、越通用、可扩展性越强，其语义的表达能力就越弱；越具体、越不好延展，其语义表达能力却越强。</p><p>🌰 编程语言的发展史：一般典型的分层抽象演进史。(纸带编码 -&gt; 汇编语言 -&gt; C语言)</p><p>强制类型转换意味着抽象层次有问题，可以通过提升抽象层次来解决。</p><p>🌰 什么时候会用到强制类型装换？LSP(Liskov Substitution Principle 里氏替换原则：子类可以替换父类)不能被满足的时候，也就是子类的方法超出了父类定义的范围，为了能使用子类方法必须进行强制类型装换。</p><p>抽象层次一致性原则</p><p>抽象层次要保持一致，一致性可以减少混乱，并降低理解成本。</p><blockquote><p>📚 抽象层次一致性原则(Single Level of Abstration Principle, SLAP) —— Neal Ford (ThoughtWorks)《卓有成效的程序员》</p></blockquote><blockquote><p>组合方法模式(Composed Method Pattern, CMP) —— Kent Beck</p></blockquote><p>🌰 冲泡咖啡</p><p>结构化思维</p><p>在结构化思维中，有一个要点就是结构的每一层要属于同一个逻辑范畴、同一个抽象层次。</p></li><li><p>锻炼抽象思维能力</p><ul><li>多阅读</li><li>勤总结</li><li>命名训练</li><li>领域建模训练</li></ul><p>🌰 <code>Spring</code> 的核心功能 <code>Bean</code> 容器</p></li></ul><h3 id="逻辑思维" tabindex="-1"><a class="header-anchor" href="#逻辑思维" aria-hidden="true">#</a> 逻辑思维</h3><blockquote><p>🎤 “不合乎逻辑的观点只需一根绳索就可将它绞死。” —— 比勒尔</p></blockquote><blockquote><p>📚 《逻辑学导论》</p></blockquote><ul><li><p>逻辑就是关系</p><p>逻辑(<code>logic</code>)，源自古希腊语逻各斯(<code>logos</code>)，最初的意思是“词语”或“言语”，引申出意思“思维”或“推理”。</p><p>逻各斯是指一切可理解的规律，逻辑是指思维的规律和规则。</p><blockquote><p>📚 “逻辑就是关系” —— 芝本秀德《深度思考法》</p></blockquote></li><li><p>逻辑三要素</p><ul><li>概念：(<code>concept</code>) 思维的基本单位，一些关于抽象事物的思考和定义。</li><li>判断：(<code>proposition</code> - 逻辑学中叫 “命题”) 通过概念对事物是否具有某种属性进行判断回答(肯定或否定)</li><li>推理：(<code>argument</code> - 逻辑学中叫 “论证”) 由一个或多个判断推到出另一个判断的思维形式。</li></ul><blockquote><p>📚 如何通过提炼一本书的关键字词（概念）、关键句子（判断）及关键论述（推理）来分析一本书的主旨。 —— 《如何阅读一本书》</p></blockquote><blockquote><p>📚 学习一门课程应该从理解课程的最基本概念开始。 —— 《思辨与立场》</p></blockquote><p>概念要明确且清晰</p><p>🌰 领域驱动设计(<code>Domain Driven Design</code>, <code>DDD</code>)，核心就是强调概念和语义。</p><p>罗伯特卡茨模型：</p><ul><li>技术技能 (<code>Technical Skill</code>)</li><li>人际关系技能 (<code>Human Skill</code>)</li><li>概念技能 (<code>Conceptual Skill</code>) - 管理者提出自己的观点并经过加工处理，将关系抽象化、概念化的能力。</li></ul><p>逻辑推理：</p><ul><li>演绎推理 (<code>Deductive Inference</code>)：从一般到特殊的过程。“大前提(因为)，小前提(因为)，结论(所以)” <ul><li>古典逻辑 (亚里士多德逻辑)：处理不同对象的类之间关系的论证。</li><li>现代逻辑 (符号逻辑)：利用符号来表示逻辑中的各种概念。</li></ul></li><li>归纳推理 (<code>Inductive Inference</code>)：从特殊到一般。</li><li>溯因推理 (<code>Abductive Inference</code>)：根据答案，追溯原因的推理过程。“大胆假设，小心求证。”</li></ul><p>归纳和演绎并不是割裂的，而是彼此联系的。</p><blockquote><p>📚 “布尔代数” 创建的一套符号系统。 —— 布尔《逻辑的数学分析》</p></blockquote><blockquote><p>📚 “还原推理模式” —— 亚里士多德《前分析篇》</p></blockquote><blockquote><p>🌰 1845 年，科学家发现天王星的运动数据和其他行星比起来出现了 2 分钟的弧度差值。勒维耶提出一个假设：天王星的差值是由另一颗（未发现的）行星引起的。海王星很快被发现。</p></blockquote></li><li><p>逻辑链</p><ul><li>5 <code>Why</code> 思考法：对一个问题连续多次追问为什么，直到找出问题的根本原因。</li><li>5 <code>So</code> 思考法：对一个现象连续追问其产生的结果，以探求它对未来可能造成的深远影响。</li></ul></li><li><p>逻辑谬误</p><blockquote><p>谬误(<code>Fallacy</code>)，推理中的欺骗手段。</p></blockquote><blockquote><p>📚 《学会提问》</p></blockquote><ul><li><p>偷换概念</p><blockquote><p>📚 当有人说欧谛德谟说谎时，他狡辩说：“说谎就是在说不存在的东西，而不存在的东西是无法说的，所以没有人能说谎。” —— 黑格尔《哲学史讲演录》</p></blockquote><ul><li>第一个 “不存在的东西”：不符合事实。</li><li>第二个 “不存在的东西”：根本不存在的事物。</li></ul></li><li><p>错误假设</p><p>🌰 一个小学没有毕业的人早早地进入社会挣了很多钱，但是一个博士毕业的人没有挣到太多钱，所以读书无用，小学没有毕业的人可以比博士更成功。</p><ul><li>隐含的价值观假设：即金钱是唯一的衡量标准，金钱是最重要的。</li><li>以偏概全</li></ul></li><li><p>循环论证</p><p>🎬 “有意义就是好好活。好好活就是做有意义的事。” —— 许三多《士兵突击》</p></li><li><p>以偏概全</p></li><li><p>滑坡谬误：不合理地使用一串因果关系。</p><p>🌰 教育 “内卷” —— 很多家长不想让小孩输在起跑线上，认为不上好幼儿园就上不了好小学，不上好小学就上不了好中学，不上好中学就上不了好大学，上不了好大学这辈子就没有希望了。</p></li></ul></li><li><p>非理性思考</p><blockquote><p>📚 “人类都是主观性的动物，别说客观公正了，很多时候，连理性都没有，都是感觉直观。” —— 丹尼尔·卡尼曼《快思慢想》</p></blockquote></li></ul><h3 id="结构化思维" tabindex="-1"><a class="header-anchor" href="#结构化思维" aria-hidden="true">#</a> 结构化思维</h3><blockquote><p>🎤 “金字塔原理是思考、表达和解决问题的逻辑。” —— 芭芭拉·明托</p></blockquote><p>架构的核心也是结构。所谓架构，就是“要素+结构”。</p><p>结构化思维，就是从无序到有序的一种思考过程，将搜集到的信息、数据、知识等素材按照一定的逻辑进行分析和整理，呈现出有序的结构，继而化繁为简。有结构的信息更易于大脑记忆和理解。</p><ul><li><p>金字塔结构</p><blockquote><p>📚 美团四大名著 - 《金字塔原理》《高效能人士的七个习惯》《学会提问》《用图表说话》</p></blockquote><ul><li><p>逻辑关系</p><ul><li>纵向逻辑：结论先行(“论”)，以系统上(“证”)</li><li>横向逻辑：归类分组(“类”)，逻辑递进(“比”)</li></ul><p>🌰 麦肯锡 “电梯原则” —— 在极短的时间（坐电梯的时间）内把一件事情说清楚。</p></li><li><p>逻辑结构</p><ul><li>自上而下</li><li>自下而上</li><li>上下结合</li></ul><blockquote><p><code>2W1H</code> : <code>What</code>（是什么）、<code>Why</code>（为什么）、<code>How</code>（怎么做）</p></blockquote><blockquote><p><code>5W2H</code> : 目的(<code>Why</code>)、目标(<code>How much</code>)、内容(<code>Who</code>、<code>When</code>、<code>Where</code>、<code>What</code>、<code>How</code>)</p></blockquote><p>🌰 “如何喜好技术文章” 什么是好文章？=&gt; 内容有价值；结构要清晰。 为什么写文章？=&gt; 写文章时费曼学习法；写文章可以增加影响力 如何写好文章？=&gt; 选择好内容；搭建清晰结构；刻意练习；迭代优化。</p><p>🌰 长方法(<code>long method</code>)之所以是典型的代码坏味道，正是因为它把过多的信息放在了一起。</p><p>写出优雅的代码也许不在于运用多么高深的技法，而在于是否能静下心来把结构梳理清楚。</p><p>特定问题的结构框架：</p><ul><li>指定市场营销策略 <code>4P</code> 模型：产品策略(<code>Product Strategy</code>)、价格策略(<code>Price Strategy</code>)、渠道策略(<code>Place Strategy</code>)、促销策略(<code>Promotion Strategy</code>)</li><li>思考组织战略 <code>7S</code> 模型：经营策略(<code>Strategy</code>)、组织结构(<code>Structure</code>)、运营系统(<code>System</code>)、经营风格(<code>Style</code>)、职员(<code>Staff</code>)、组织技能(<code>Skill</code>)和共享价值观(<code>Shared Value</code>)</li><li>分析竞争力 <code>SWOT</code> 模型：企业优势(<code>Strengths</code>)、劣势(<code>Weakness</code>)、机会(<code>Opportunity</code>)和威胁(<code>Threats</code>)</li><li>指定目标 <code>SMART</code> 模型：确定性(<code>Specific</code>)、可度量性(<code>Measurable</code>)、可实现性(<code>Attainable</code>)、相关性(<code>Relevant</code>)和时效性(<code>Time-based</code>)</li></ul></li></ul></li></ul><h3 id="批判性思维" tabindex="-1"><a class="header-anchor" href="#批判性思维" aria-hidden="true">#</a> 批判性思维</h3><blockquote><p>🎤 “未经审视的人生不值得过。” —— 苏格拉底</p></blockquote><blockquote><p>📚 康德《纯粹理性批判》</p></blockquote><blockquote><p>🎤 “如果我们没有证据和理由支持某一结论，那么绝不会相信它为真。”—— 笛卡儿</p></blockquote><p>批判性思维并不是让你批评、否定或者抨击别人，而是教你如何提升分辨能力、判断力。</p><p>批判性思维三阶段：体验 -&gt; 解释 -&gt; 分析</p><p>经验、直觉 =&gt; 理性、逻辑 包容、认同 =&gt; 反驳、质疑</p><blockquote><p>📚 “如果有100个选择却只能选择其中一个，那就意味着我们选择任何一个，都会失去另外99个选择。而我们天生有损失厌恶的倾向，所以选择意味着满足感和幸福感的下降，甚至会带来焦虑。” —— 《选择的悖论》</p></blockquote><ul><li><p>批判中台</p><p>中台的底层逻辑：通过复用提升研发效率。</p><p><code>IaaS</code>: 对算力、网络、存储、操作系统等基础设施的复用。 <code>PaaS</code>: 是对中间件的复用。</p><p>业务中台低效的根本原因：前台业务和业务中台的“深度单体耦合”。</p><ul><li>协作成本</li><li>认知成本</li><li>稳定性成本</li></ul><blockquote><p>📚 “加人只会让项目更糟糕” —— 《人月神话》</p></blockquote><blockquote><p>🎤 “在现代生活中，简单的做法一直难以实现，因为它有违某些努力寻求复杂化以证明其工作合理性的人所秉持的精神。” —— 尼古拉斯</p></blockquote><p>“业务无关”：想办法在业务中台中找到和具体业务无关的内核(<code>kernel</code>)。</p><p>重复(<code>Duplication</code>)也是一种重用(<code>Reuse</code>)。</p><blockquote><p>📚 “当一个架构师设计一个系统的时候，他如果选择重用，那么同时也选择了耦合。因为重用不管是通过组合(Composition)还是继承(Inheritance)实现，都会引入耦合。然而，如果你不想耦合，可以采用重复代替重用。” —— Neal Ford《软件架构》</p></blockquote></li><li><p>批判架构师</p></li><li><p>人人都是架构师</p><p>架构：要素结构 + 关系 + 指导原则</p><blockquote><p>要素(<code>Components</code>)是指架构中的主要元素，结构是指要素之间的相互关系(<code>Relationships</code>)，再配合指导原则(<code>Guidelines</code>)</p></blockquote></li><li><p>批判技术管理者</p><ul><li>技术不作为</li><li>业务不思考</li></ul><p>“屎山”(<code>shit mountain</code>)系统</p><blockquote><p>🎤 “不管你们有多敬业、加多少班，在面对烂系统时，你仍然会寸步难行，因为你大部分的精力不是在开发需求，而是在应对混乱。” —— Robert C.Martin</p></blockquote><p>技术管理者不能仅仅是一个管理者(<code>Manager</code>)，也要是一个领导者(<code>Leader</code>)。</p><blockquote><p>🎤 “永远不要试图用战术上的勤奋，去掩盖你战略上的懒惰。” —— 雷军</p></blockquote></li><li><p>自我批判</p><p>坚持自我批判，才能持续成长。</p><blockquote><p>🎤 “坚持自我批判是华为的核心价值观之一” —— 任正非</p></blockquote><blockquote><p>🎤 “不要把自信建立在贬低他人的基础上，什么时候你能发自内心地欣赏你不喜欢的人，你就成长了。” —— 玄难</p></blockquote></li></ul><h3 id="维度思维" tabindex="-1"><a class="header-anchor" href="#维度思维" aria-hidden="true">#</a> 维度思维</h3><blockquote><p>🎤 “这个世界不是只有是非黑白，还有很多灰色地带。” —— 白岩松</p></blockquote><p>维度(<code>Dimension</code>)，又称为维数，在数学中是指独立参数的数目。</p><p>维度是事物“有联系”的抽象概念的数量或者变量的数量。</p><ul><li><p>多维度思考</p><ul><li>点(零维)：散点思考，不成体系。</li><li>线(一维)：轴，一根筋。</li><li>面(二维)：一分为二，思考全面。</li><li>体(三维)：体系化，方方面面。</li></ul><blockquote><p>🎤 “当你想做一个产品的时候，入手只能是一个点。但需要想清楚，它附着在哪个面上？这个面在和谁竞争，它能如何展开？这个面在哪个经济体上？这个经济体是在快速崛起，还是在沉沦？” —— 梁宁</p></blockquote></li><li><p>矩阵分析</p><blockquote><p>矩阵分析：将组成问题的变量（要素、维度）识别出来，通过矩阵的方式进行呈现、表达和对比分析。</p></blockquote><ul><li><p>重用(<code>Reuse</code>)：是指用面向对象的多态扩展来支持不同的业务场景差异。</p><blockquote><p>多态扩展：利用面向对象的多态特性，实现代码的复用和扩展。</p></blockquote></li><li><p>重复(<code>Duplication</code>)：是指用不同的代码分支来支持。</p><blockquote><p>代码分离：对不同的场景使用不同的流程代码实现。</p></blockquote></li></ul><p>“<code>if else</code> 程序员”</p><blockquote><p>📚 第16章 “分析矩阵” —— Alan Shalloway《设计模式解析》(Design Patterns Explained)</p></blockquote><p>“波士顿矩阵”</p><p><code>RFM</code> 模型(用户分群模型)</p><ul><li>最近消费时间(<code>Recency</code>,R)：表示用户最近一次消费距离现在的时间。</li><li>消费频率(<code>Frequency</code>, F)：指用户在统计周期内购买商品的次数。</li><li>消费金额(<code>Monetary</code>, M)：指用户在统计周期内消费的总金额。</li></ul><blockquote><p>📚 推理案例 —— 《逻辑学导论》 阿伦佐、库特、鲁道夫和威拉德是四个天分极高的创造性的艺术家。一个是舞蹈家，一个是画家，一个是歌唱家，一个是作家，但不必是这个次序。 (1)那天晚上歌唱家在音乐会舞台上进行他的首次演出时，阿伦佐和鲁道夫在观众席上。 (2)库特和作家两人由画家为他们画的生活肖像。 (3)作家准备写一本阿伦佐的传记，他写的威拉德的传记是畅销书。 (4)阿伦佐从未听过鲁道夫。 问：每个人的艺术领域是什么？</p></blockquote><p>推理矩阵</p><table><thead><tr><th>\\</th><th>阿伦佐</th><th>库特</th><th>鲁道夫</th><th>威拉德</th></tr></thead><tbody><tr><td>舞蹈家</td><td>✅</td><td></td><td></td><td></td></tr><tr><td>画家</td><td>❌</td><td>❌</td><td></td><td>✅</td></tr><tr><td>歌唱家</td><td>❌</td><td>✅</td><td></td><td></td></tr><tr><td>作家</td><td>❌</td><td>❌</td><td>✅</td><td>❌</td></tr></tbody></table><p>“相关系数矩阵”</p></li><li><p>设计模式中的维度思维</p><p>桥接模式的定义：将抽象与实现分离，使它们可以独立变化。桥接模式用组合关系代替继承关系，从而降低了抽象和实现这两个可变维度的耦合度。</p></li><li><p>组织管理中的维度思维</p><ul><li>人员分工矩阵</li><li>人才盘点矩阵</li><li>需求管理矩阵</li></ul><p>🌰 阿里巴巴人才盘点</p><ul><li>明星：德才兼备。(重用明星员工，充分发挥他的能力。)</li><li>野狗：有才无德。(个人能力强，但对公司目标和价值观的认同感非常低，要消灭。)</li><li>黄牛：任劳任怨。(能力差一点，但勤勤恳恳，可以放心使用。)</li><li>白兔：无才有德。(态度很好，可业绩就是上不来，而且还占据着重要岗位，所以这类员工一定要清理。)</li></ul><p>阿里巴巴用人准则是“捧明星、杀野狗、清白兔、用黄牛” —— “九宫格人才盘点法”</p></li></ul><h3 id="分类思维" tabindex="-1"><a class="header-anchor" href="#分类思维" aria-hidden="true">#</a> 分类思维</h3><blockquote><p>🎤 “设计就是分类。” —— 张小龙(“微信之父”)</p></blockquote><p>分类，就是依据一定的标准对给定的事物划分组别。</p><ul><li><p>分类是本能</p><p>分类和抽象是人类最基础的思维能力之一。</p><p>🌰 在软件开发领域，面向对象编程(Object Oriented Programming, <code>OOP</code>)之所以可以取代结构化编程语言，正是因为与子程序相比，类具有分类、汇总、隐藏信息的作用。也就是说，<code>OOP</code> 有更好的分类能力。</p></li><li><p>分类的本质</p><p>分类是指将有<strong>共性</strong>的事物放在一起，共性主要体现在对象的<strong>属性</strong>上。</p><p>共性：本质上就是对象之间的交集。</p><p>属性：事物的性质与事物之间关系的统称。</p><p>属性差异性分类：</p><ul><li>特有属性</li><li>共有属性</li></ul><p>属性重要性分类：</p><ul><li><p>本质属性</p></li><li><p>非本质属性</p></li><li><p>经典分类</p><blockquote><p>🎤 “经典分类：所有具有某一个或某一组共同属性的实体构成了一个分类，而这个属性对于定义这个分类是<strong>必要且充分的</strong>” —— 柏拉图</p></blockquote><p>最有用的属性集合：其成员没有太多相互影响的集合。(例如：尺寸、颜色、形状和物质等属性)</p></li><li><p>概念聚集分类</p><blockquote><p>概念聚集是经典分类的变种，这种分类首先是概念描述，然后根据这些描述对实体进行分类。(例如：爱情歌曲、猜你喜欢)</p></blockquote></li></ul><blockquote><p>📚 “分类方案的选择没有真假之分，可以用不同的方式、不同的观点来描述物体。” —— 《逻辑学导论》</p></blockquote></li><li><p>没有“完美”分类</p><blockquote><p>📚 “分类学有时被描述成一门科学，有时被描述成一种艺术，但实际上那是一个战场。” —— Bill Bryson《万物简史》</p></blockquote><blockquote><p>📚 “我们将对象定义为有清晰定义的边界的事物。但是，将一个对象与其他对象分开来的边界常常非常模糊。” —— Grady Booch《面向对象分析与设计》</p></blockquote><p>🌰 元素周期 —— 门捷列夫</p><blockquote><p>🎤 “如果要将系统划分为对象系统，那么有多少架构师参与这项工作，就可能有多少种划分方法。” —— Coombs</p></blockquote><ul><li>任何分类都与进行分类的观察者的视角和目的有关。</li><li>分类需要创造性，因为并不是所有的共同属性都那么显而易见。</li></ul><blockquote><p>🌰 脑筋急转弯：“为什么说激光笔像金鱼？…… 因为它们都不会吹口哨。”</p></blockquote><blockquote><p>🌰 笔记中有“哲学”和“读书笔记”两个类别，读完一本哲学书之后，有关这本书的读书笔记是放到“哲学” 还是“读书笔记”中呢？</p></blockquote></li><li><p>软件设计中的分类</p><p>分类帮助我们确定类之间的泛化(<code>Generalization</code>)、特化(<code>Specialization</code>)、聚合(<code>Aggregation</code>)等层次结构。</p><p>抽象分类是一个迭代过程，它既不是自顶向下的活动，也不是自底向上的活动。</p><ul><li><p>构建分类</p><ul><li><code>Package</code> vs <code>Application</code>，两者概念相对比较明确。</li><li><code>Module</code> vs <code>Component</code>，两者定义相对比较模糊。</li></ul><blockquote><p>🎤 “<code>Module</code> 由一组 <code>Components</code> 组成，<code>Component</code> 可以使用其他的 <code>Components</code>，多个 <code>Module</code> 组成了一个 <code>Application</code>。” —— <code>AngularJS</code> 设计文档</p></blockquote></li><li><p>领域分类</p><p>领域边界划分属于面向对象分析(<code>Object Oriented Analysis</code>, <code>OOA</code>)的顶层设计。</p><blockquote><p>🎤 领域驱动设计(<code>Domain Driven Design</code>, <code>DDD</code>) —— Eric Evans</p></blockquote></li></ul></li><li><p>组织架构中的分类</p><ul><li>业务型组织</li><li>职能型组织</li></ul><p>业务单元(<code>Business Unit</code>, <code>BU</code>)</p></li><li><p>互联网产业分类</p><blockquote><p>🎤 “整个互联网分成两类，A 类是供给和履约在线上，B 类是供给和履约在线下” —— 王慧文 (美团)</p></blockquote><blockquote><p>🎤 “再分一刀，B1 是以最小库存单元(<code>Stock Keeping Unit</code>, <code>SKU</code>)为中心的供给，B2 是以 <code>Location</code> 为中心的服务，即 <code>LBS</code>(<code>Location Based Service</code>)。” —— 王慧文 (美团)</p></blockquote></li></ul><h3 id="分治思维" tabindex="-1"><a class="header-anchor" href="#分治思维" aria-hidden="true">#</a> 分治思维</h3><blockquote><p>🎤 “要把大象装进冰箱，拢共分几步？” —— 小品《钟点工》</p></blockquote><p>🌰 传说，罗马帝国的凯撒大帝就是采用这一思想策略征服了高卢人。</p><ul><li><p>分治设计模式</p><ul><li><p>管道模式</p><ul><li>阀门(<code>Valve</code>)：用于处理数据的节点。</li><li>管道(<code>Pipeline</code>)：用于组织各个阀门，串接各个阀门完成工作。</li></ul></li><li><p>责任链模式</p><blockquote><p>很多对象由一个对象对其下家的引用连接起来形成一条链。</p></blockquote></li></ul></li><li><p>分布式系统</p><p>分布式之所以强大，是因为它可以支撑 “接近无限” 的业务扩展诉求。</p><blockquote><p>📚 <code>AKF</code> 扩展立方：一个可以支撑“接近无限扩展”的分布式系统扩展解决方案。 —— 第2章 “分而治之” 《架构真经》</p></blockquote><ul><li>x 轴拆分，通常叫作水平扩展，通过复制服务（也就是集群）或数据库已分散事务处理负载压力。</li><li>y 轴拆分，通常叫作领域拆分，不管是之前的面向服务的架构(<code>Service Oriented Architecture</code>, <code>SOA</code>)、面向资源的架构(<code>Resource Oriented Architecture</code>, <code>ROA</code>)，还是现在的微服务，本质上都在做服务拆分的工作。</li><li>z 轴拆分，通常叫作数据分片(<code>Partitioning</code>)，是把一个大数据集分割成多个小数据集的方法。</li></ul><p><code>CAP</code> : 一致性(<code>Consistency</code>)、可用性(<code>Availability</code>)、分区容错性(<code>Partition tolerance</code>)</p><blockquote><p>🎤 “向进度落后的项目中增加人手，只会使项目更加落后。” —— 布鲁克斯定律</p></blockquote><p>数据库扩展方案：</p><ul><li>一种是基于领域的垂直切分，也叫竖切。</li><li>一种是基于数据区间的水平切分，也叫横切。</li></ul></li><li><p>分治算法</p><ul><li>“分”是递归地将原问题分解成小问题；</li><li>“治”是在解决了各个小问题之后（各个击破之后）合并小问题的解，从而得到整个问题的解；</li><li>“并”是按原问题的要求，将子问题的解逐层合并，构成原问题的解。</li></ul><blockquote><p>🎤 归并排序 - 1954 年 —— 冯·诺伊曼</p></blockquote><p>解决问题“黄金三步”：</p><ul><li>第一步：定义问题，弄清楚我们要解决的问题究竟是什么。</li><li>第二步：分解问题，把一个大问题拆解成多个子问题。</li><li>第三步：合并问题，对拆解后的子问题，我们有必要再进行一次合并归类。</li></ul></li><li><p>“分治并”应用</p><ul><li>流式计算</li><li>分布式数据库</li></ul></li></ul><h3 id="简单思维" tabindex="-1"><a class="header-anchor" href="#简单思维" aria-hidden="true">#</a> 简单思维</h3><blockquote><p>🎤 “一旦做到了简洁，你将无所不能。” —— 乔布斯</p></blockquote><blockquote><p>📚 “KISS(Keep It Simple and Stupid)原则” —— 《UNIX 编程艺术》</p></blockquote><blockquote><p>🎤 “简单是一个非常高的目标，不是一个简单的目标。” —— 张小龙 (2021 年的微信产品公开课)</p></blockquote><p>把一件事情搞复杂是一件简单的事，但要把一件复杂的事变简单，这是一件复杂的事。</p><ul><li><p>简化是逆向做功</p><blockquote><p>📚 “世间万物都需要额外的能量和秩序来维持自身，无一例外。” —— 凯文·凯利《必然》</p></blockquote><blockquote><p>📚 “<code>SHE</code> 简化法则——<code>S</code> 是 <code>Shrink</code>（压缩），<code>H</code> 是 <code>Hide</code>（隐藏），<code>E</code> 是 <code>Embody</code>（赋予）” —— 《简单法则：设计、技术、商务、生活的完美融合》</p></blockquote><p>🌰 <code>Linux</code> 操作系统中的 <code>File API</code>。</p><blockquote><p>🎤 “精于心，简于形”(Sense and Simplicity) —— 飞利浦</p></blockquote><p>给用户太多的选择，有时还不如不给选择，因为用户自己也不知道自己想要什么。</p><blockquote><p>🎤 奥卡姆剃刀原理：如无必要，勿增实体(Entities should not be multiplied unnecessarily)，即“简单有效原理”。</p></blockquote><blockquote><p>📚 “切勿浪费较多东西，去做用较少的东西同样可以做好的事情。” —— 奥卡姆《箴言书注》</p></blockquote><blockquote><p>📚 “太阳是宇宙的中心，一切行星都在围绕太阳旋转。” —— 哥白尼《天体运行论》</p></blockquote><p><code>E = mc²</code> 和 <code>F = ma</code> 证明，上帝似乎不是一个喜欢复杂的人。</p></li><li><p>干掉流程引擎</p></li><li><p>极简状态机</p><p>每秒访问量(Query Per Seconds, QPS)</p><blockquote><p>📚 <code>DSL</code>可以分为三类，分别是内部 <code>DSL</code>(Internal DSL)、外部 <code>DSL</code>(External DSL)，以及语言工作台(Language Workbench) —— Martin Fowler《领域特定语言》</p></blockquote></li><li><p>复杂的产品没人用</p></li></ul><h3 id="成长型思维" tabindex="-1"><a class="header-anchor" href="#成长型思维" aria-hidden="true">#</a> 成长型思维</h3><p>决定你成长的第一步不是你是否努力，而是你是否相信努力。</p><p><code>IC</code> - 个人贡献者(<code>Individual Contributor</code>)</p><blockquote><p>📚 固定型思维(<code>Fixed Mindset</code>) vs 成长型思维(<code>Growth Mindset</code>) —— 卡罗尔·德维克《终生成长》</p></blockquote><blockquote><p>🎤 “，成功个体的标志，在于他们热爱学习、喜欢挑战、重视努力，并在面对苦难时坚韧不拔。” —— 卡罗尔</p></blockquote><ul><li><p>大脑的可塑性</p><blockquote><p>🎤 “大脑的功能并不是一成不变的，而是拥有一定可塑性，通过合理的训练和调整，只要掌握正确的方法，持续成长是有可能的。” —— 诺曼·道伊奇</p></blockquote></li><li><p>培养成长型思维</p><ul><li><p>明确努力的意义</p><blockquote><p>🎤 “种一棵树的最好时间是十年前，其次是现在”</p></blockquote><p>🌰 “龟兔赛跑” 本来想强调努力的重要性，却给努力赋予了一个坏名声 “只有缺乏天赋的人才需要努力”。</p></li><li><p>摆脱精神内耗</p><p>“归因”：找原因。</p><blockquote><p>🎤 “激发事件 A(Activating Event) 只是引发情绪和行为后果 C(Consequence) 的间接原因，而引起 C 的直接原因则是个体因对激发事件A的认知和评价而产生的信念 B(Belief)。” —— 情绪 ABC 理论</p></blockquote><p>将失败相对化，归因于偶发的因素，而不是归因于普遍化、人格化。</p></li><li><p>摆脱精神内耗</p><blockquote><p>🎤 精神内耗 ：『心理学上叫：过度思虑(Overthinking)』将 50%～60% 脑力的 “胡思乱想” 做斗争。</p></blockquote><p>大脑的两种模式</p><ul><li>默认模式网络(Default Mode Network, DMN)：把大脑后台零碎的信息进行梳理，重新激活那些可能被遗忘的信息。</li><li>专注网络(Task Positive Network, TPN)</li></ul><blockquote><p>📚 “3F原则：Focus（专注）、Feedback（反馈）、Fix it（纠正）” —— 安德斯《刻意练习》</p></blockquote><p>对于一件事情，如果你想不到特别有力的不去做的原因，那么就优先选择去做。</p></li><li><p>持续精进</p><p>精进是大乘佛法的六度之一，就是你每次必须比上一次进步一点点！</p><ul><li>原地踏步：<code>1^365 = 1</code></li><li>每天进步一点：<code>1.01^365 = 37.8</code></li><li>每天退步一点：<code>0.99^365 = 0.03</code></li></ul><blockquote><p>🎤 “人生就像滚雪球，关键是要找到足够湿的雪和足够长的坡。” —— 巴菲特</p></blockquote></li><li><p>保持好奇心，守住平常心</p><p>成长需要好奇心的牵引，要学会苦中作乐。</p><p>🌰 《阿里巴巴缩写大全》</p><p>追求内心平和有一个简单技巧 —— 正念呼吸。</p><blockquote><p>📚 “平和的强大之处在于，真正平和的人了解自己所有的主观感受都只是一瞬间的波动。虽然疼痛，但不再感到悲惨；虽然愉悦，但不再干扰到心灵的平静。于是，心灵变得一片澄明、自在。这样产生的心灵平静力量之强大，是那些穷极一生疯狂追求愉悦心情的人完全难以想象的。” —— 尤瓦尔·赫拉利《人类简史》</p></blockquote></li><li><p>慢也是快</p><blockquote><p>🧘🏻 开悟 一位学僧问禅师：“师父，以我的资质多久可以开悟？” 禅师说：“十年。” 学僧又问：“要十年吗？师父，如果我加倍苦修，又需要多久开悟呢？” 禅师说：“得要二十年。” 学僧很是疑惑，于是又问：“如果我夜以继日，不休不眠，只为禅修，又需要多久开悟呢？”禅师说：“那样你永无开悟之日。”学僧惊讶道：“为什么？” 禅师说：“你只在意禅修的结果，又如何有时间来关注自己呢？”</p></blockquote><blockquote><p>📚 “大方无隅，大器晚成，大音希声，大象无形。” —— 《道德经》</p></blockquote><p>🌰 曾国藩，七次中秀才，第二年中举，又四年中进士。</p><p>越慢，越快。少了几分挣扎、内耗与恐慌，多了一些平静和从容，最终得到平静、成功与幸福。</p></li><li><p>表扬的技巧</p></li></ul></li><li><p>成功人士的成长型思维</p><p>🌰 <code>IMB</code> 前 <code>CEO</code> 路易斯·郭士纳，1993 年接手 <code>IBM</code> 时，答记者问时回答 “我是新来的，别问我问题在哪儿或是有什么解答，我不知道。”。</p></li></ul><hr><h2 id="专业思维能力" tabindex="-1"><a class="header-anchor" href="#专业思维能力" aria-hidden="true">#</a> 专业思维能力</h2><blockquote><p>结合软件行业特点而特有的专业思维能力。</p></blockquote><h3 id="解耦思维" tabindex="-1"><a class="header-anchor" href="#解耦思维" aria-hidden="true">#</a> 解耦思维</h3><p>软件设计的一大目标就是“解耦”。</p><p>“高内聚，低耦合”，即希望通过降低模块之间的耦合性来提升模块的独立性、扩展性和重用性。</p><p>💡解耦的两种方式：“依赖倒置” 和 “中间层映射”</p><ul><li><p>依赖倒置</p><blockquote><p>依赖倒置是 <code>SOLID</code> 设计原则中的“D”，全称是 <code>Dependence Inversion Principle</code>，即依赖倒置原则。</p></blockquote><ul><li>上层模块不应该依赖底层模块，它们都应该依赖于抽象。(High level modules should not depend upon low level modules.Both should depend upon abstractions.)</li><li>抽象不应该依赖于细节，细节应该依赖于抽象。(Abstractions should not depend upon details.Details should depend upon abstractions.)</li></ul><blockquote><p>📚 中立原则(<code>Principle of Solution-Neutral Function</code>) —— 《系统架构：复杂系统的产品设计与开发》</p></blockquote><p>解决方案中立，是指我们在思考解决方案的时候，不要一开始就陷入功能细节中，要尽量抽象一点，保留更多的可能性，为创新留下空间。如果对于开酒瓶这个操作，你只能想到拔瓶塞，那么就会错失其他的可能性。</p></li></ul><h3 id="契约思维" tabindex="-1"><a class="header-anchor" href="#契约思维" aria-hidden="true">#</a> 契约思维</h3><h3 id="模型思维" tabindex="-1"><a class="header-anchor" href="#模型思维" aria-hidden="true">#</a> 模型思维</h3><h3 id="工具化思维" tabindex="-1"><a class="header-anchor" href="#工具化思维" aria-hidden="true">#</a> 工具化思维</h3><h3 id="量化思维" tabindex="-1"><a class="header-anchor" href="#量化思维" aria-hidden="true">#</a> 量化思维</h3><h3 id="数据思维" tabindex="-1"><a class="header-anchor" href="#数据思维" aria-hidden="true">#</a> 数据思维</h3><h3 id="产品思维" tabindex="-1"><a class="header-anchor" href="#产品思维" aria-hidden="true">#</a> 产品思维</h3><ul><li>产品三要素：用户 &amp; 需求 &amp; 场景</li></ul><hr><h2 id="思维能的综合应用" tabindex="-1"><a class="header-anchor" href="#思维能的综合应用" aria-hidden="true">#</a> 思维能的综合应用</h2><h3 id="商品团队之旅" tabindex="-1"><a class="header-anchor" href="#商品团队之旅" aria-hidden="true">#</a> 商品团队之旅</h3><h3 id="cola-的演进过程" tabindex="-1"><a class="header-anchor" href="#cola-的演进过程" aria-hidden="true">#</a> COLA 的演进过程</h3><blockquote><p>1.0 -&gt; 2.0 -&gt; 3.0 -&gt; 4.0</p></blockquote><hr><h2 id="格言" tabindex="-1"><a class="header-anchor" href="#格言" aria-hidden="true">#</a> 格言</h2><blockquote><p>🎤 “思维本身就能解决问题，我们所要做的，就是观察它是如何做到的。” - 维特根斯坦《逻辑哲学论》</p></blockquote>',86);function t(u,a){return o(),l("div",null,[c(" more "),d])}const b=e(i,[["render",t],["__file","读《程序员的底层思维》.html.vue"]]);export{b as default};
