import{_ as u}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as i,o as p,c as d,a as t,b as n,e,d as s,w as l,f as k}from"./app-XiL9qv-c.js";const h={},m=n("blockquote",null,[n("p",null,[n("code",null,"Balanced Binary Tree"),e(" - “平衡二叉树”")])],-1),b=n("p",null,"平衡二叉树需要保证左右子树高度差不超过 1。",-1),v=n("p",null,"常见的平衡二叉树",-1),_=n("ul",null,[n("li",null,[n("code",null,"AVL"),e(" 二叉树 (名称来源于两位作者名 G. M. Adelson-Velsky 和 E. M. Landis)")]),n("li",null,"红黑树")],-1),f=n("h2",{id:"reference",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reference","aria-hidden":"true"},"#"),e(" reference")],-1),y={href:"https://visualgo.net/zh/bst/print",target:"_blank",rel:"noopener noreferrer"},g=n("h2",{id:"depth-深度",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#depth-深度","aria-hidden":"true"},"#"),e(),n("code",null,"depth"),e(" - “深度”")],-1),w={href:"https://leetcode.cn/problems/maximum-depth-of-binary-tree",target:"_blank",rel:"noopener noreferrer"},T=n("blockquote",null,[n("p",null,"给定一个二叉树根节点，返回该二叉树的最大深度。 二叉树的最大深度 : 指从根节点到最远叶子节点的最长路径上的节点数。")],-1),x={class:"hint-container details"},N=n("summary",null,"💡",-1),D=n("p",null,"【思路】递归，每个节点递归遍历左右子节点，取左右分支中较长的加 1，就是当前节点的最大深度。",-1),I=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token doc-comment comment"},[e(`/**
 * Definition for a binary tree node.
 * public class TreeNode `),n("span",{class:"token punctuation"},"{"),e(`
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() `),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),e(`
 *     TreeNode(int val) `),n("span",{class:"token punctuation"},"{"),e(" this.val = val; "),n("span",{class:"token punctuation"},"}"),e(`
 *     TreeNode(int val, TreeNode left, TreeNode right) `),n("span",{class:"token punctuation"},"{"),e(`
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     `),n("span",{class:"token punctuation"},"}"),e(`
 * `),n("span",{class:"token punctuation"},"}"),e(`
 */`)]),e(`
`),n("span",{class:"token keyword"},"class"),e(),n("span",{class:"token class-name"},"Solution"),e(),n("span",{class:"token punctuation"},"{"),e(`
    `),n("span",{class:"token keyword"},"public"),e(),n("span",{class:"token keyword"},"int"),e(),n("span",{class:"token function"},"maxDepth"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"TreeNode"),e(" root"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
        `),n("span",{class:"token keyword"},"if"),e(),n("span",{class:"token punctuation"},"("),e("root "),n("span",{class:"token operator"},"=="),e(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token keyword"},"return"),e(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),e(`
        `),n("span",{class:"token keyword"},"return"),e(),n("span",{class:"token class-name"},"Integer"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"max"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"maxDepth"),n("span",{class:"token punctuation"},"("),e("root"),n("span",{class:"token punctuation"},"."),e("left"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),e(),n("span",{class:"token function"},"maxDepth"),n("span",{class:"token punctuation"},"("),e("root"),n("span",{class:"token punctuation"},"."),e("right"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token operator"},"+"),e(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),e(`
    `),n("span",{class:"token punctuation"},"}"),e(`
`),n("span",{class:"token punctuation"},"}"),e(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),j=n("div",{class:"language-swift line-numbers-mode","data-ext":"swift"},[n("pre",{class:"language-swift"},[n("code",null,[n("span",{class:"token comment"},`/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init() { self.val = 0; self.left = nil; self.right = nil; }
 *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }
 *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {
 *         self.val = val
 *         self.left = left
 *         self.right = right
 *     }
 * }
 */`),e(`
`),n("span",{class:"token keyword"},"class"),e(),n("span",{class:"token class-name"},"Solution"),e(),n("span",{class:"token punctuation"},"{"),e(`
    `),n("span",{class:"token keyword"},"func"),e(),n("span",{class:"token function-definition function"},"maxDepth"),n("span",{class:"token punctuation"},"("),n("span",{class:"token omit keyword"},"_"),e(" root"),n("span",{class:"token punctuation"},":"),e(),n("span",{class:"token class-name"},"TreeNode"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token operator"},"->"),e(),n("span",{class:"token class-name"},"Int"),e(),n("span",{class:"token punctuation"},"{"),e(`
        `),n("span",{class:"token keyword"},"guard"),e(),n("span",{class:"token keyword"},"let"),e(" root "),n("span",{class:"token operator"},"="),e(" root "),n("span",{class:"token keyword"},"else"),e(),n("span",{class:"token punctuation"},"{"),e(),n("span",{class:"token keyword"},"return"),e(),n("span",{class:"token number"},"0"),e(),n("span",{class:"token punctuation"},"}"),e(`
        `),n("span",{class:"token keyword"},"return"),e(),n("span",{class:"token number"},"1"),e(),n("span",{class:"token operator"},"+"),e(),n("span",{class:"token function"},"max"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"maxDepth"),n("span",{class:"token punctuation"},"("),e("root"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"left"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),e(),n("span",{class:"token function"},"maxDepth"),n("span",{class:"token punctuation"},"("),e("root"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"right"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),e(`
    `),n("span",{class:"token punctuation"},"}"),e(`
`),n("span",{class:"token punctuation"},"}"),e(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),A={href:"https://leetcode.cn/problems/minimum-depth-of-binary-tree",target:"_blank",rel:"noopener noreferrer"},S=n("blockquote",null,[n("p",null,"给定一个二叉树的根节点，找出其最小深度。 二叉树的最小深度 : 从根节点到最近叶子节点的最短路径上的节点数量。")],-1),B=n("pre",null,[n("code",null,`  🌰①
      输入：root = [3,9,20,null,null,15,7]
      输出：2
          3
        /   \\
      9      20
            /   \\
           15    7 
  🌰②
      输入：root = [2,null,3,null,4,null,5,null,6]
      输出：5
          2
           \\
            3
             \\
              4
               \\
                5
                 \\
                  6
`)],-1),V={class:"hint-container details"},C=n("summary",null,"💡",-1),E=n("p",null,"【思路】这个题与求二叉树的最大深度的不同点在于，不能简单地进行递归判断左右两边最小，会出现为空的情况。",-1),L=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token doc-comment comment"},[e(`/**
 * Definition for a binary tree node.
 * public class TreeNode `),n("span",{class:"token punctuation"},"{"),e(`
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() `),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),e(`
 *     TreeNode(int val) `),n("span",{class:"token punctuation"},"{"),e(" this.val = val; "),n("span",{class:"token punctuation"},"}"),e(`
 *     TreeNode(int val, TreeNode left, TreeNode right) `),n("span",{class:"token punctuation"},"{"),e(`
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     `),n("span",{class:"token punctuation"},"}"),e(`
 * `),n("span",{class:"token punctuation"},"}"),e(`
 */`)]),e(`
`),n("span",{class:"token keyword"},"class"),e(),n("span",{class:"token class-name"},"Solution"),e(),n("span",{class:"token punctuation"},"{"),e(`
    `),n("span",{class:"token keyword"},"public"),e(),n("span",{class:"token keyword"},"int"),e(),n("span",{class:"token function"},"minDepth"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"TreeNode"),e(" root"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
        `),n("span",{class:"token keyword"},"if"),e(),n("span",{class:"token punctuation"},"("),e("root "),n("span",{class:"token operator"},"=="),e(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token keyword"},"return"),e(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),e(`
        `),n("span",{class:"token keyword"},"if"),e(),n("span",{class:"token punctuation"},"("),e("root"),n("span",{class:"token punctuation"},"."),e("left "),n("span",{class:"token operator"},"=="),e(),n("span",{class:"token keyword"},"null"),e(),n("span",{class:"token operator"},"&&"),e(" root"),n("span",{class:"token punctuation"},"."),e("right "),n("span",{class:"token operator"},"=="),e(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token keyword"},"return"),e(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),e(`
        `),n("span",{class:"token keyword"},"int"),e(" min "),n("span",{class:"token operator"},"="),e(),n("span",{class:"token class-name"},"Integer"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"MAX_VALUE"),n("span",{class:"token punctuation"},";"),e(`
        `),n("span",{class:"token keyword"},"if"),e(),n("span",{class:"token punctuation"},"("),e("root"),n("span",{class:"token punctuation"},"."),e("left "),n("span",{class:"token operator"},"!="),e(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
            min `),n("span",{class:"token operator"},"="),e(),n("span",{class:"token class-name"},"Integer"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"min"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"minDepth"),n("span",{class:"token punctuation"},"("),e("root"),n("span",{class:"token punctuation"},"."),e("left"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),e(" min"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),e(`
        `),n("span",{class:"token punctuation"},"}"),e(`
        `),n("span",{class:"token keyword"},"if"),e(),n("span",{class:"token punctuation"},"("),e("root"),n("span",{class:"token punctuation"},"."),e("right "),n("span",{class:"token operator"},"!="),e(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
            min `),n("span",{class:"token operator"},"="),e(),n("span",{class:"token class-name"},"Integer"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"min"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"minDepth"),n("span",{class:"token punctuation"},"("),e("root"),n("span",{class:"token punctuation"},"."),e("right"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),e(" min"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),e(`
        `),n("span",{class:"token punctuation"},"}"),e(`
        `),n("span",{class:"token keyword"},"return"),e(" min "),n("span",{class:"token operator"},"+"),e(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),e(`
    `),n("span",{class:"token punctuation"},"}"),e(`
`),n("span",{class:"token punctuation"},"}"),e(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),F=n("h2",{id:"traversal-遍历",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#traversal-遍历","aria-hidden":"true"},"#"),e(),n("code",null,"traversal"),e(" - “遍历”")],-1),q={href:"https://leetcode.cn/problems/binary-tree-preorder-traversal",target:"_blank",rel:"noopener noreferrer"},z=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),M={href:"https://leetcode.cn/problems/binary-tree-inorder-traversal",target:"_blank",rel:"noopener noreferrer"},G=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),U={href:"https://leetcode.cn/problems/binary-tree-postorder-traversal",target:"_blank",rel:"noopener noreferrer"},X=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),H={href:"https://leetcode.cn/problems/binary-tree-level-order-traversal",target:"_blank",rel:"noopener noreferrer"},J=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),K={href:"https://leetcode.cn/problems/binary-tree-level-order-traversal-ii",target:"_blank",rel:"noopener noreferrer"},O=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),P={href:"https://leetcode.cn/problems/binary-tree-zigzag-level-order-traversal",target:"_blank",rel:"noopener noreferrer"},Q=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),R={href:"https://leetcode.cn/problems/binary-tree-vertical-order-traversal",target:"_blank",rel:"noopener noreferrer"},W=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Y={href:"https://leetcode.cn/problems/vertical-order-traversal-of-a-binary-tree",target:"_blank",rel:"noopener noreferrer"},Z=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),$=n("h2",{id:"construct-构造",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#construct-构造","aria-hidden":"true"},"#"),e(),n("code",null,"construct"),e(" - “构造”")],-1),nn={href:"https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal",target:"_blank",rel:"noopener noreferrer"},en=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),sn={href:"https://leetcode.cn/problems/construct-binary-tree-from-inorder-and-postorder-traversal",target:"_blank",rel:"noopener noreferrer"},an=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),tn={href:"https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-postorder-traversal",target:"_blank",rel:"noopener noreferrer"},ln=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),on=n("h2",{id:"invert-反转",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#invert-反转","aria-hidden":"true"},"#"),e(),n("code",null,"invert"),e(" - “反转”")],-1),rn={href:"https://leetcode.cn/problems/invert-binary-tree",target:"_blank",rel:"noopener noreferrer"},cn=k('<details class="hint-container details"><summary>💡</summary></details><h2 id="dfs-depth-first-search-深度优先搜索" tabindex="-1"><a class="header-anchor" href="#dfs-depth-first-search-深度优先搜索" aria-hidden="true">#</a> <code>DFS</code>(Depth First Search) - “深度优先搜索”</h2><h2 id="bfs-breadth-first-search-广度优先搜索" tabindex="-1"><a class="header-anchor" href="#bfs-breadth-first-search-广度优先搜索" aria-hidden="true">#</a> <code>BFS</code>(Breadth First Search) - “广度优先搜索”</h2><h2 id="binary-search-tree-二叉搜素树" tabindex="-1"><a class="header-anchor" href="#binary-search-tree-二叉搜素树" aria-hidden="true">#</a> <code>Binary Search Tree</code> - “二叉搜素树”</h2>',4);function un(pn,dn){const a=i("ExternalLinkIcon"),c=i("CodeTabs");return p(),d("div",null,[m,b,v,_,t(" more "),f,n("ul",null,[n("li",null,[n("a",y,[e("二叉搜索树"),s(a)])])]),g,t(" 二叉树的最大深度 "),n("ul",null,[n("li",null,[n("a",w,[e("🟢 104 - 二叉树的最大深度"),s(a)]),T])]),n("details",x,[N,D,s(c,{id:"55",data:[{id:"java"},{id:"swift"}]},{title0:l(({value:o,isActive:r})=>[e("java")]),title1:l(({value:o,isActive:r})=>[e("swift")]),tab0:l(({value:o,isActive:r})=>[I]),tab1:l(({value:o,isActive:r})=>[j]),_:1})]),t(" 二叉树的最小深度 "),n("ul",null,[n("li",null,[n("p",null,[n("a",A,[e("🟢 111 - 二叉树的最小深度"),s(a)])]),S,B])]),n("details",V,[C,E,s(c,{id:"84",data:[{id:"java"}]},{title0:l(({value:o,isActive:r})=>[e("java")]),tab0:l(({value:o,isActive:r})=>[L]),_:1})]),F,t(" 前序遍历 "),n("ul",null,[n("li",null,[n("a",q,[e("🟢 144 - 二叉树的前序遍历"),s(a)])])]),z,t(" 中序遍历 "),n("ul",null,[n("li",null,[n("a",M,[e("🟢 94 - 二叉树的中序遍历"),s(a)])])]),G,t(" 后序遍历 "),n("ul",null,[n("li",null,[n("a",U,[e("🟢 145 - 二叉树的后序遍历"),s(a)])])]),X,t(" 层序遍历 "),n("ul",null,[n("li",null,[n("a",H,[e("🟠 102 - 二叉树的层序遍历"),s(a)])])]),J,t(" 层序遍历 II "),n("ul",null,[n("li",null,[n("a",K,[e("🟠 107 - 二叉树的层序遍历 II"),s(a)])])]),O,t(" 二叉树的锯齿形层序遍历 "),n("ul",null,[n("li",null,[n("a",P,[e("🟠 103 - 二叉树的锯齿形层序遍历"),s(a)])])]),Q,t(" 二叉树的垂直遍历 "),n("ul",null,[n("li",null,[n("a",R,[e("🟠 314 - 二叉树的垂直遍历"),s(a)])])]),W,t(" 二叉树的垂序遍历 "),n("ul",null,[n("li",null,[n("a",Y,[e("🔴 987 - 二叉树的垂序遍历"),s(a)])])]),Z,$,t(" 从前序与中序遍历序列构造二叉树 "),n("ul",null,[n("li",null,[n("a",nn,[e("🟠 105 - 从前序与中序遍历序列构造二叉树"),s(a)])])]),en,t(" 从中序与后序遍历序列构造二叉树 "),n("ul",null,[n("li",null,[n("a",sn,[e("🟠 106 - 从中序与后序遍历序列构造二叉树"),s(a)])])]),an,t(" 根据前序和后序遍历构造二叉树 "),n("ul",null,[n("li",null,[n("a",tn,[e("🟠 889 - 根据前序和后序遍历构造二叉树"),s(a)])])]),ln,on,t(" 翻转二叉树 "),n("ul",null,[n("li",null,[n("a",rn,[e("🟠 226 - 翻转二叉树"),s(a)])])]),cn])}const mn=u(h,[["render",un],["__file","0x06.binary-tree.html.vue"]]);export{mn as default};
