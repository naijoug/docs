import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as e,c as n,a as s,f as o}from"./app-KOLbvikU.js";const c={},d=o(`<h2 id="oc-设计理念" tabindex="-1"><a class="header-anchor" href="#oc-设计理念" aria-hidden="true">#</a> <code>OC</code> 设计理念</h2><p><code>OC</code> 底层是使用 <code>C/C++</code> 实现。定一个继承 <code>NSObject</code> 的类，这个类底层使用 <code>C</code> 语言中的 <code>struct</code> 结构体来实现的。</p><h3 id="oc-的动态性" tabindex="-1"><a class="header-anchor" href="#oc-的动态性" aria-hidden="true">#</a> <code>OC</code> 的动态性</h3><h3 id="类结构体的组成-isa-指针指向了什么" tabindex="-1"><a class="header-anchor" href="#类结构体的组成-isa-指针指向了什么" aria-hidden="true">#</a> 类结构体的组成，<code>isa</code> 指针指向了什么？</h3><h3 id="oc-底层方法列表的数据结构是什么" tabindex="-1"><a class="header-anchor" href="#oc-底层方法列表的数据结构是什么" aria-hidden="true">#</a> <code>OC</code> 底层方法列表的数据结构是什么？</h3><h3 id="id、nil、null" tabindex="-1"><a class="header-anchor" href="#id、nil、null" aria-hidden="true">#</a> <code>id</code>、<code>nil</code>、<code>NULL</code></h3><h3 id="load-与-initialize-的区别" tabindex="-1"><a class="header-anchor" href="#load-与-initialize-的区别" aria-hidden="true">#</a> <code>+load</code> 与 <code>+initialize</code> 的区别</h3><ul><li><code>+load</code> :</li><li><code>+initialize</code> :</li></ul><h3 id="property-本质是什么" tabindex="-1"><a class="header-anchor" href="#property-本质是什么" aria-hidden="true">#</a> <code>@Property</code> 本质是什么？</h3><blockquote><p>assign, weak, copy 区别？</p></blockquote><h3 id="nsdictionary-大致实现原理" tabindex="-1"><a class="header-anchor" href="#nsdictionary-大致实现原理" aria-hidden="true">#</a> <code>NSDictionary</code> 大致实现原理</h3><h3 id="oc-中的三种字符串-tagged-pointer-了解吗" tabindex="-1"><a class="header-anchor" href="#oc-中的三种字符串-tagged-pointer-了解吗" aria-hidden="true">#</a> <code>OC</code> 中的三种字符串？ <code>Tagged Pointer</code> 了解吗？</h3><h2 id="block" tabindex="-1"><a class="header-anchor" href="#block" aria-hidden="true">#</a> <code>block</code></h2><h3 id="block-与-函数指针" tabindex="-1"><a class="header-anchor" href="#block-与-函数指针" aria-hidden="true">#</a> <code>block</code> 与 函数指针</h3><h3 id="block-底层实现" tabindex="-1"><a class="header-anchor" href="#block-底层实现" aria-hidden="true">#</a> <code>block</code> 底层实现？</h3><p><code>block</code> 底层是使用结构体实现的。</p><p>根据内存分区不同，分为三种 <code>block</code></p><ul><li><code>__NSGlobalBlock__</code> : 全局 <code>block</code>，类似全局静态变量，存放在静态区</li><li><code>__NSStackBlock__</code> : 栈区 <code>block</code>，保存在栈区</li><li><code>__NSMallocBlock__</code> : 堆区 <code>block</code>，保存在堆区</li></ul><h2 id="category" tabindex="-1"><a class="header-anchor" href="#category" aria-hidden="true">#</a> <code>Category</code></h2><ul><li>Category : 只能添加方法，不能添加实例变量(除非通过关联对象)。分类中的方法是运行时添加到方法列表中的。</li><li>Extension : 可以添加方法和计算属性，也可以添加构造方法，也可以实现以一个协议。编译时已经确定，不支持动态添加方法。</li></ul><h3 id="如果分类中添加与类相同的方法签名会发生什么" tabindex="-1"><a class="header-anchor" href="#如果分类中添加与类相同的方法签名会发生什么" aria-hidden="true">#</a> 如果分类中添加与类相同的方法签名会发生什么？</h3><p>分类中的方法是运行时添加到方法列表中，并且是添加中已有方法的前面。所以当分类与原类中的方法相同时，分类中的方法会优先调用，覆盖掉原类中的方法。</p><h3 id="分类是如何实现的-它为什么会覆盖掉原来的方法" tabindex="-1"><a class="header-anchor" href="#分类是如何实现的-它为什么会覆盖掉原来的方法" aria-hidden="true">#</a> 分类是如何实现的？它为什么会覆盖掉原来的方法？</h3><h3 id="分类中如何添加属性" tabindex="-1"><a class="header-anchor" href="#分类中如何添加属性" aria-hidden="true">#</a> 分类中如何添加属性？</h3><h2 id="msgsend" tabindex="-1"><a class="header-anchor" href="#msgsend" aria-hidden="true">#</a> <code>msgSend</code></h2><blockquote><p>以下代码输出？</p></blockquote><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">@interface</span> Animail
<span class="token keyword">@end</span>
<span class="token keyword">@interface</span> Dog <span class="token punctuation">:</span> Animal
<span class="token keyword">@end</span>
<span class="token keyword">@implementation</span> Dog
<span class="token operator">-</span> <span class="token punctuation">(</span>instancetype<span class="token punctuation">)</span>init <span class="token punctuation">{</span>
    <span class="token keyword">self</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">super</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;%@&quot;</span><span class="token punctuation">,</span> <span class="token function">NSStringFromClass</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">self</span> class<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;%@&quot;</span><span class="token punctuation">,</span> <span class="token function">NSStringFromClass</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">super</span> class<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">self</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">@end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="runtime" tabindex="-1"><a class="header-anchor" href="#runtime" aria-hidden="true">#</a> <code>runtime</code></h2><h3 id="runtime-如何通过-selector-找到对应的-imp-地址" tabindex="-1"><a class="header-anchor" href="#runtime-如何通过-selector-找到对应的-imp-地址" aria-hidden="true">#</a> <code>runtime</code> 如何通过 <code>selector</code> 找到对应的 <code>IMP</code> 地址</h3><h3 id="isa-消息转发-弱引用表" tabindex="-1"><a class="header-anchor" href="#isa-消息转发-弱引用表" aria-hidden="true">#</a> isa, 消息转发, 弱引用表</h3><h2 id="runloop" tabindex="-1"><a class="header-anchor" href="#runloop" aria-hidden="true">#</a> <code>runloop</code></h2><h3 id="runloop-有几种事件源-有几种模式" tabindex="-1"><a class="header-anchor" href="#runloop-有几种事件源-有几种模式" aria-hidden="true">#</a> <code>runLoop</code> 有几种事件源？有几种模式？</h3><h3 id="runloop-内部实现逻辑" tabindex="-1"><a class="header-anchor" href="#runloop-内部实现逻辑" aria-hidden="true">#</a> <code>runloop</code> 内部实现逻辑？</h3>`,33);function i(t,r){return e(),n("div",null,[s(" more "),d])}const u=a(c,[["render",i],["__file","objective-c.html.vue"]]);export{u as default};
