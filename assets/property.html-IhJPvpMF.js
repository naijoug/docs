import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as e,o as c,c as l,a as i,b as n,e as s,d as t,f as p}from"./app-SX6jYwBY.js";const u={},r=n("hr",null,null,-1),k=n("h2",{id:"看源码",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#看源码","aria-hidden":"true"},"#"),s(" 看源码")],-1),d=n("h3",{id:"ivar-t",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#ivar-t","aria-hidden":"true"},"#"),s(" ivar_t")],-1),m={href:"https://github.com/apple-oss-distributions/objc4/blob/objc4-876/runtime/objc-runtime-new.h#L1243",target:"_blank",rel:"noopener noreferrer"},v=p(`<div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// objc-runtime-new.h#L1243</span>
<span class="token keyword">struct</span> ivar_t <span class="token punctuation">{</span> <span class="token comment">// 实例变量结构体定义</span>
    int32_t <span class="token operator">*</span>offset<span class="token punctuation">;</span>    <span class="token comment">// 相对于对象内存起始位置偏移</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>   <span class="token comment">// 变量名</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>type<span class="token punctuation">;</span>   <span class="token comment">// 变量类型</span>
    <span class="token comment">// alignment is sometimes -1; use alignment() instead</span>
    uint32_t alignment_raw<span class="token punctuation">;</span> <span class="token comment">// 内存对齐</span>
    uint32_t size<span class="token punctuation">;</span>          <span class="token comment">// 变量内存尺寸</span>

    uint32_t <span class="token function">alignment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>  <span class="token comment">// 内存对齐</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>alignment_raw <span class="token operator">==</span> <span class="token operator">~</span><span class="token punctuation">(</span>uint32_t<span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1U</span> <span class="token operator">&lt;&lt;</span> WORD_SHIFT<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> alignment_raw<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ivar-list-t" tabindex="-1"><a class="header-anchor" href="#ivar-list-t" aria-hidden="true">#</a> ivar_list_t</h3>`,2),b={href:"https://github.com/apple-oss-distributions/objc4/blob/objc4-876/runtime/objc-runtime-new.h#L1405",target:"_blank",rel:"noopener noreferrer"},_=p(`<div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// objc-runtime-new.h#L1405</span>
<span class="token keyword">struct</span> ivar_list_t <span class="token punctuation">:</span> entsize_list_tt<span class="token operator">&lt;</span>ivar_t<span class="token punctuation">,</span> ivar_list_t<span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    bool <span class="token function">containsIvar</span><span class="token punctuation">(</span>Ivar ivar<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>ivar <span class="token operator">&gt;=</span> <span class="token punctuation">(</span>Ivar<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token operator">*</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;&amp;</span>  ivar <span class="token operator">&lt;</span> <span class="token punctuation">(</span>Ivar<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token operator">*</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="property-t" tabindex="-1"><a class="header-anchor" href="#property-t" aria-hidden="true">#</a> property_t</h3>`,2),h={href:"https://github.com/apple-oss-distributions/objc4/blob/objc4-876/runtime/objc-runtime-new.h#L1265",target:"_blank",rel:"noopener noreferrer"},y=p(`<div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// objc-runtime-new.h#L1265</span>
<span class="token keyword">struct</span> property_t <span class="token punctuation">{</span> <span class="token comment">// 属性结构体定义</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>       <span class="token comment">// 属性名</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>attributes<span class="token punctuation">;</span> <span class="token comment">// 特性</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="property-list-t" tabindex="-1"><a class="header-anchor" href="#property-list-t" aria-hidden="true">#</a> property_list_t</h3>`,2),w={href:"https://github.com/apple-oss-distributions/objc4/blob/objc4-876/runtime/objc-runtime-new.h#L1411",target:"_blank",rel:"noopener noreferrer"},f=p(`<div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// objc-runtime-new.h#L1411</span>
<span class="token keyword">struct</span> property_list_t <span class="token punctuation">:</span> entsize_list_tt<span class="token operator">&lt;</span>property_t<span class="token punctuation">,</span> property_list_t<span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="class-copyivarlist-vs-class-copypropertylist" tabindex="-1"><a class="header-anchor" href="#class-copyivarlist-vs-class-copypropertylist" aria-hidden="true">#</a> <code>class_copyIvarList()</code> vs <code>class_copyPropertyList()</code></h3>`,2),g={href:"https://github.com/apple-oss-distributions/objc4/blob/objc4-876/runtime/objc-runtime-new.mm#L5701",target:"_blank",rel:"noopener noreferrer"},j={href:"https://github.com/apple-oss-distributions/objc4/blob/objc4-876/runtime/objc-runtime-new.mm#L5739",target:"_blank",rel:"noopener noreferrer"},L=p(`<div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// objc-runtime-new.mm#L5701</span>
Ivar <span class="token operator">*</span> <span class="token function">class_copyIvarList</span><span class="token punctuation">(</span>Class cls<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>outCount<span class="token punctuation">)</span>
<span class="token punctuation">{</span> <span class="token comment">// 获取类的实例变量列表</span>
    <span class="token keyword">const</span> ivar_list_t <span class="token operator">*</span>ivars<span class="token punctuation">;</span>
    Ivar <span class="token operator">*</span>result <span class="token operator">=</span> nil<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cls<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>outCount<span class="token punctuation">)</span> <span class="token operator">*</span>outCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> nil<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 互斥锁，加锁</span>
    mutex_locker_t <span class="token function">lock</span><span class="token punctuation">(</span>runtimeLock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 校验类是否已实现</span>
    <span class="token function">ASSERT</span><span class="token punctuation">(</span>cls<span class="token operator">-&gt;</span><span class="token function">isRealized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 从 ro 中获取所有实例变量</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ivars <span class="token operator">=</span> cls<span class="token operator">-&gt;</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">ro</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>ivars<span class="token punctuation">)</span>  <span class="token operator">&amp;&amp;</span>  ivars<span class="token operator">-&gt;</span>count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        result <span class="token operator">=</span> <span class="token punctuation">(</span>Ivar <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ivars<span class="token operator">-&gt;</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Ivar<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> ivar <span class="token punctuation">:</span> <span class="token operator">*</span>ivars<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 遍历所有实例变量放入结果数组</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ivar<span class="token punctuation">.</span>offset<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>  <span class="token comment">// anonymous bitfield</span>
            result<span class="token punctuation">[</span>count<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>ivar<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        result<span class="token punctuation">[</span>count<span class="token punctuation">]</span> <span class="token operator">=</span> nil<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>outCount<span class="token punctuation">)</span> <span class="token operator">*</span>outCount <span class="token operator">=</span> count<span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// objc-runtime-new.mm#L5739 </span>
objc_property_t <span class="token operator">*</span> <span class="token function">class_copyPropertyList</span><span class="token punctuation">(</span>Class cls<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>outCount<span class="token punctuation">)</span>
<span class="token punctuation">{</span> <span class="token comment">// 获取类属性列表</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cls<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>outCount<span class="token punctuation">)</span> <span class="token operator">*</span>outCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> nil<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 互斥锁，加锁</span>
    mutex_locker_t <span class="token function">lock</span><span class="token punctuation">(</span>runtimeLock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 校验类是否已实现</span>
    <span class="token function">checkIsKnownClass</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ASSERT</span><span class="token punctuation">(</span>cls<span class="token operator">-&gt;</span><span class="token function">isRealized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 获取类数据</span>
    <span class="token keyword">auto</span> rw <span class="token operator">=</span> cls<span class="token operator">-&gt;</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    property_t <span class="token operator">*</span><span class="token operator">*</span>result <span class="token operator">=</span> nil<span class="token punctuation">;</span>
    <span class="token keyword">auto</span> <span class="token keyword">const</span> properties <span class="token operator">=</span> rw<span class="token operator">-&gt;</span><span class="token function">properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从 rw 中获取所有属性</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> count <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 存在属性，遍历所有属性放入结果数组中</span>
        result <span class="token operator">=</span> <span class="token punctuation">(</span>property_t <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>property_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> prop <span class="token punctuation">:</span> properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            result<span class="token punctuation">[</span>count<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>prop<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        result<span class="token punctuation">[</span>count<span class="token punctuation">]</span> <span class="token operator">=</span> nil<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>outCount<span class="token punctuation">)</span> <span class="token operator">*</span>outCount <span class="token operator">=</span> count<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>objc_property_t <span class="token operator">*</span><span class="token punctuation">)</span>result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function x(C,I){const a=e("ExternalLinkIcon");return c(),l("div",null,[i(" more "),r,k,d,n("blockquote",null,[n("p",null,[n("a",m,[s("👉🏻"),t(a)])])]),v,n("blockquote",null,[n("p",null,[n("a",b,[s("👉🏻"),t(a)])])]),_,n("blockquote",null,[n("p",null,[n("a",h,[s("👉🏻"),t(a)])])]),y,n("blockquote",null,[n("p",null,[n("a",w,[s("👉🏻"),t(a)])])]),f,n("blockquote",null,[n("p",null,[n("a",g,[s("👉🏻"),t(a)]),s(" vs "),n("a",j,[s("👉🏻"),t(a)])])]),L])}const q=o(u,[["render",x],["__file","property.html.vue"]]);export{q as default};
