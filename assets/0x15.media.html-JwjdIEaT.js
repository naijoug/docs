import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o as c,c as i,a as t,b as n,e as s,d as e,f as l}from"./app-CmXikh8R.js";const u={},d=n("h2",{id:"reference",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reference","aria-hidden":"true"},"#"),s(" reference")],-1),r={href:"https://github.com/RTC-Developer",target:"_blank",rel:"noopener noreferrer"},k={href:"https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MjM5MTkxOTQyMQ==&action=getalbum&album_id=2349658423078092802",target:"_blank",rel:"noopener noreferrer"},m={href:"https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MjM5MTkxOTQyMQ==&action=getalbum&album_id=2380776196751425539",target:"_blank",rel:"noopener noreferrer"},v={href:"https://zhuanlan.zhihu.com/p/503093990",target:"_blank",rel:"noopener noreferrer"},b={href:"https://juejin.cn/post/6934987607088726053#heading-12",target:"_blank",rel:"noopener noreferrer"},h={href:"https://mattgadient.com/x264-vs-x265-vs-vp8-vs-vp9-examples/",target:"_blank",rel:"noopener noreferrer"},g={href:"https://www.jianshu.com/p/4f69c22c6dce",target:"_blank",rel:"noopener noreferrer"},f={href:"https://medium.com/@jpetrichsr/file-size-issue-with-hevc-encoder-on-ios-11-f50104ace54f",target:"_blank",rel:"noopener noreferrer"},y={href:"https://github.com/yangKJ/KJPlayerDemo/wiki/%E5%BC%80%E5%8F%91%E6%92%AD%E6%94%BE%E5%99%A8%E6%A1%86%E6%9E%B6%E4%B9%8B%E8%BE%B9%E4%B8%8B%E8%BE%B9%E6%92%AD%E8%BE%B9%E5%AD%98%E6%96%B9%E6%A1%88",target:"_blank",rel:"noopener noreferrer"},w={href:"https://github.com/2ZGroupSolutionsArticles/Article_EZ002",target:"_blank",rel:"noopener noreferrer"},C={href:"http://chuquan.me/2019/12/03/ios-avplayer-support-cache/",target:"_blank",rel:"noopener noreferrer"},x={href:"https://zltunes.github.io/2019/04/23/avplayer-best-practice/",target:"_blank",rel:"noopener noreferrer"},A={href:"https://github.com/Kaibin/YYVideoPlayer",target:"_blank",rel:"noopener noreferrer"},I={href:"https://segmentfault.com/a/1190000016228456",target:"_blank",rel:"noopener noreferrer"},P={href:"https://github.com/dangercheng/ShortMediaCache",target:"_blank",rel:"noopener noreferrer"},_={href:"http://xferris.cn/avplayer_cache/",target:"_blank",rel:"noopener noreferrer"},T={href:"https://www.jianshu.com/p/1680978e1a7e",target:"_blank",rel:"noopener noreferrer"},S={href:"https://github.com/VeinGuo/VGPlayer",target:"_blank",rel:"noopener noreferrer"},M=n("a",{href:""},"💯",-1),q={href:"https://mp.weixin.qq.com/s/v1sw_Sb8oKeZ8sWyjBUXGA?#%23",target:"_blank",rel:"noopener noreferrer"},V=n("code",null,"AVPlayer",-1),O={href:"https://github.com/vitoziv/VIMediaCache",target:"_blank",rel:"noopener noreferrer"},L={href:"https://jaredsinclair.com/2016/09/03/implementing-avassetresourceload.html",target:"_blank",rel:"noopener noreferrer"},G={href:"https://github.com/neekeetab/CachingPlayerItem",target:"_blank",rel:"noopener noreferrer"},R={href:"https://msching.github.io/blog/2016/05/24/audio-in-ios-9/",target:"_blank",rel:"noopener noreferrer"},E=l(`<hr><h2 id="框架" tabindex="-1"><a class="header-anchor" href="#框架" aria-hidden="true">#</a> 框架</h2><h3 id="❓metalkit" tabindex="-1"><a class="header-anchor" href="#❓metalkit" aria-hidden="true">#</a> ❓MetalKit</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>MetalKit</code>：Apple开发的一个专门用于 <code>iOS</code> 和 <code>macOS</code> 设备上支持 <code>Metal</code> 编程接口的应用程序框架。提供的为了提升图形和计算任务性能的硬件加速 <code>API</code>。与 <code>OpenGL</code> 和 <code>OpenGL ES</code> 相比，<code>Metal</code> 提供了更接近硬件的 <code>API</code>，因此可以提供更高的性能和更低的延迟。</p></blockquote><p>主要功能：</p><ul><li><p>图形渲染：可以用于绘制 <code>2D</code> 和 <code>3D</code> 图形，实现图形渲染的任务，如游戏图形、科学计算可视化等。</p></li><li><p>加载和处理纹理：可以用于加载图像文件到 <code>Metal</code> 纹理，以及纹理信息的查询和使用。</p></li><li><p>加载 <code>3D</code> 模型：可以加载 <code>3D</code> 模型数据并将其转换为 <code>Metal</code> 可理解的数据格式。</p></li><li><p>显示管理：提供了用于在 <code>iOS</code> 和 <code>macOS</code> 上创建和管理 <code>Metal</code> 绘图层的工具。</p></li><li><p>封装常见 <code>Metal</code> 数据结构：例如矩阵和向量等，方便用于图形和计算任务。</p></li><li><p>性能调试工具：包含了用于监控和优化 <code>Metal</code> 应用性能的工具。</p></li></ul></details><h3 id="❓gpuimage" tabindex="-1"><a class="header-anchor" href="#❓gpuimage" aria-hidden="true">#</a> ❓GPUImage</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>GPUImage</code> 是开源的图像和视频处理框架，对视频处理、人像美颜、图像处理、滤镜处理等领域有广泛应用。</p></blockquote><ul><li><p>功能强大：<code>GPUImage</code> 中内置了许多滤镜，用户可以对视频和图片进行各种各样的应用，也可以自己实现自定义的滤镜。</p></li><li><p>高性能：<code>GPUImage</code> 是基于 <code>OpenGL ES</code> 构建的，能够充分利用设备的 <code>GPU</code> 处理大量计算任务，比使用 <code>CPU</code> 处理效率更高，对实时视频处理场景非常有利。</p></li><li><p>易用性：<code>GPUImage</code> 的 <code>API</code> 设计封装得相当完善，使用起来十分方便，同时文档全面，上手容易。</p></li><li><p>富有扩展性：<code>GPUImage</code> 也允许用户自定义滤镜，用户可以实现自己的设计，具有很高的灵活性。</p></li><li><p>跨平台：<code>GPUImage</code> 既有适用于 <code>iOS</code> 的版本，也有适用于 <code>Android</code> 的版本，这大大方便了在多平台开发过程中的一致性。</p></li></ul></details><h3 id="❓opengl-vs-opengl-es" tabindex="-1"><a class="header-anchor" href="#❓opengl-vs-opengl-es" aria-hidden="true">#</a> ❓OpenGL vs OpenGL ES</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>OpenGL</code> (Open Graphics Library) 和 <code>OpenGL ES</code> (OpenGL for Embedded Systems) 都是用于渲染二维和三维图形的跨平台 <code>API</code> 的，由 <code>Khronos Group</code> 制定和维护。这种能力使得 <code>OpenGL</code> 成为虚拟现实、游戏、三维绘图等领域的标准规范。</p></blockquote><p>主要区别：</p><blockquote><p><code>OpenGL ES</code> 是专门为嵌入式设备（例如手机或者嵌入式系统）设计的，相比 <code>OpenGL</code>，<code>OpenGL ES</code> 删除了一些不常用或者不适用于嵌入式系统的特性以减少系统资源的消耗，从而在保证性能的基础上达到对系统资源的有效利用。</p></blockquote><ul><li><p>功能和复杂性：<code>OpenGL</code> 更为全面和复杂，有更多的函数和选项可供使用。而 <code>OpenGL ES</code> 是一个更精简的版本，去掉了一些在嵌入式设备上不常需要或者性能消耗较大的功能，如立方体贴图、多纹理等。</p></li><li><p>系统资源占用：由于 <code>OpenGL ES</code> 设计得更为精简，因此它对系统内存和处理器的需求通常较 <code>OpenGL</code> 更低。</p></li><li><p>平台支持：<code>OpenGL</code> 广泛用于桌面系统和高性能计算设备，如 <code>Windows</code>，<code>macOS</code> 和 <code>Linux</code> 系统。而 <code>OpenGL ES</code> 则主要用于嵌入式设备和移动设备，如 <code>Android</code>、<code>iOS</code> 和某些游戏机。</p></li><li><p>版本更新：<code>OpenGL ES</code> 的版本更新通常会跟随 <code>OpenGL</code> 的更新，但在某些特性上可能会有异步。例如，<code>OpenGL ES 3.0</code> 是在 <code>OpenGL 4.2</code> 之后推出的，但并未包含 <code>OpenGL 4.2</code> 的全部新特性。</p></li></ul><p><code>OpenGL</code> 处理流程：</p><blockquote><p>注意：<code>OpenGL</code> 是一个状态机，它会保存设置的所有状态，直到将其改变为止。因此，在绘制过程中，需要处理 <code>OpenGL</code> 状态以防止从前的设置影响到后面的渲染。</p></blockquote><ul><li><p><strong>顶点处理</strong>：原始顶点坐标会通过一系列的操作变换到屏幕坐标系。这些操作包括变换（旋转、缩放、平移）、裁剪（去除不在视野内的顶点）等。可以用自定义的顶点着色器（<code>Vertex Shader</code>）程序进行处理的。</p></li><li><p><strong>图元装配</strong>：在所有的顶点被处理后 <code>OpenGL</code> 开始将这些顶点装配成图形基元（如点、线、面）。</p></li><li><p><strong>光栅化</strong>：图元在屏幕上被划分为一系列的片元（像素），这个过程就叫做光栅化。</p></li><li><p><strong>片元处理</strong>：在这个阶段，片元着色器（<code>Fragment Shader</code>）会处理每个片元，比如对片元添加颜色、纹理或执行更复杂的效果。</p></li><li><p><strong>深度测试和混合</strong>：<code>OpenGL</code> 对这些片元进行深度测试，判断哪些片元是真正可见的。上面的所有阶段都只用来生成一堆片元，以及每个片元对应的深度值。最后如果开启混合，还会根据源与目标的 <code>alpha</code> 值来计算最后的颜色值。</p></li></ul></details><h3 id="❓opengl-了解吗-有啥优化" tabindex="-1"><a class="header-anchor" href="#❓opengl-了解吗-有啥优化" aria-hidden="true">#</a> ❓OpenGL 了解吗，有啥优化</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>OpenGL</code>（全称<code>Open Graphics Library</code>，开放图形库）是一个定义了跨编程语言、跨平台的编程规范。它用于渲染二维、三维图像，尤其在游戏开发和视频播放的领域非常常用。</p></blockquote><p><code>OpenGL</code> 基于状态机的概念，而且所有涉及图形、纹理、着色等的操作都能交给 <code>GPU</code> 进行处理，因此效率非常高。</p><p>优化 <code>OpenGL</code> 使用：</p><ul><li><p>尽量减少 <code>CPU</code> 与 <code>GPU</code> 的通信。</p><blockquote><p><code>CPU</code> 和 <code>GPU</code> 的交互是影响 <code>OpenGL</code> 性能的重要因素，因为它们大部分情况下需要同步工作。避免在绘图过程中频繁改变状态，把绘图指令放在一起，尽可能地减少绘图调用。</p></blockquote></li><li><p>合理使用纹理。</p><blockquote><p>比如，尽可能地使用与 <code>GPU</code> 原生支持的纹理格式相同的纹理，这可以避免图形驱动在运行时进行格式转换。合并纹理，尽量使用具有相同或更少纹理状态的批处理来绘制。</p></blockquote></li><li><p>尽量减少 <code>OpenGL</code> 状态的改变。</p><blockquote><p><code>OpenGL</code> 是一个状态机，而状态变更常常需要大量的处理时间。尽可能地将相同状态的渲染对象分组，一次性绘制避免状态频繁切换。</p></blockquote></li><li><p>使用 <code>VBO</code>（Vertex Buffer Objects）和 <code>VAO</code>（Vertex Array Objects）。</p><blockquote><p>目的是将大量的顶点数据一次性存储在显卡中， 减少从 <code>CPU</code> 到 <code>GPU</code> 的数据传输。</p></blockquote></li><li><p>合理使用着色器程序和避免频繁切换着色器。</p><blockquote><p>编写效率高的 <code>GLSL</code>（OpenGL Shading Language）代码，比如避免在着色器中使用循环和条件判断等。</p></blockquote></li><li><p>合理利用深度缓冲、模板测试以及剔除等技术，可以剔除那些没有必要渲染的内容，来提高程序的运行效率。</p></li></ul></details><h3 id="❓avfoundation-vs-gpuimage-vs-opengl-es-vs-metalkit" tabindex="-1"><a class="header-anchor" href="#❓avfoundation-vs-gpuimage-vs-opengl-es-vs-metalkit" aria-hidden="true">#</a> ❓AVFoundation vs GPUImage vs OpenGL ES vs MetalKit</h3><details class="hint-container details"><summary>💡</summary><ul><li><p><code>AVFoundation</code>：<code>Apple</code> 开发的一个用于处理音频和视频的框架。它提供了一套丰富的 <code>API</code> 和工具，可以用于播放和创建音频和视频，也可以用于处理实时的音频视频流和管理设备的摄像头和麦克风。除此之外，它还支持视频编辑，视频捕获，视频解码等功能。</p></li><li><p><code>GPUImage</code>：一个开源的图像和视频处理库，它利用 <code>GPU</code>（图形处理器）来处理图像和视频，因此在处理大量数据时能实现非常高的效率。它提供了大量的内置滤镜和效果，也可以自定义滤镜。</p></li><li><p><code>OpenGL ES</code>：一个用于嵌入式系统的 <code>2D</code> 和 <code>3D</code> 图形API（如手机，平板电脑等）。由 <code>Khronos Group</code> 开发，并且是 <code>OpenGL</code> 的子集。它被广泛用于游戏和其他需要高效渲染 <code>3D</code> 图形的应用。</p></li><li><p><code>MetalKit</code>：<code>Apple</code> 提供的一个用于在 <code>iOS</code> 设备上更高效地直接访问 <code>GPU</code> 的框架。它被设计用于创建对渲染性能有高要求的图形应用，例如游戏。比起 <code>OpenGL ES</code> 提供了更低的 <code>API</code> 抽象层，这让开发者能够更直接地控制硬件，因此能够获得更高的性能。</p></li></ul></details><h3 id="❓ffmpeg" tabindex="-1"><a class="header-anchor" href="#❓ffmpeg" aria-hidden="true">#</a> ❓FFmpeg</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>FFmpeg</code>是一个开源的音视频处理软件，用于处理音频、视频、数据等多媒体内容。它提供了录制、转换和流化音视频的完整解决方案。</p></blockquote><p>一套可以用来解码、编码、传输多媒体数据的库：</p><ul><li><code>libavcodec</code>：用于编码/解码的库，支持众多的编码解码器。</li><li><code>libavformat</code>：用于多媒体数据封装和解封装的库，支持众多的封装和解封装格式，如 <code>MP4、FLV、MOV</code> 等。</li><li><code>libavutil</code>：包含许多工具函数的库，为其他 <code>FFmpeg</code> 的库或应用程序提供使用。</li><li><code>libavfilter</code>：视频和音频过滤器的库，可用于图像的缩放，裁剪，颜色转换等。</li><li><code>libswscale</code>：处理图像缩放和像素格式转换的库。</li><li><code>libswresample</code>：处理音频重采样、重混合和格式转换的库。</li></ul><p>一些对音视频数据处理的命令行工具：</p><ul><li><p><code>ffmpeg</code>：可以对多媒体数据进行转码，截取视频片段，提取音频，进行视频剪辑等。</p></li><li><p><code>ffplay</code>：可以播放音频和视频。</p></li><li><p><code>ffprobe</code>：可以查看多媒体文件的详细信息。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 将一个 mp4 视频转码为 avi 格式</span>
ffmpeg <span class="token parameter variable">-i</span> input.mp4 output.avi
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></details><h3 id="❓opencv" tabindex="-1"><a class="header-anchor" href="#❓opencv" aria-hidden="true">#</a> ❓OpenCV</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>OpenCV</code>(Open Source Computer Vision)：一个开源的计算机视觉库。包含了大量的计算机视觉、数字图像处理以及一些通用的科学计算的相关的函数库。支持多种语言，如 <code>C++、Python、Java</code> 等，同时也支持 <code>Windows、Linux、macOS、iOS、Android</code> 等多种操作系统。</p></blockquote><p>核心模块：</p><ul><li>图像处理：包括滤波、锐化、色彩空间转换、直方图均衡化等。</li><li>图像分割：如边缘检测和切割算法。</li><li>视频分析：比如光流法、背景/前景分割等。</li><li>对象识别：比如面部和眼睛识别。</li><li>机器学习：支持 <code>KMeans</code>、<code>SVM</code>、神经网络等算法。</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 使用 OpenCV 进行面部和眼睛识别</span>

<span class="token keyword">import</span> cv2
<span class="token comment"># 加载 Haar 级联分类器的 XML 文件</span>
face_cascade <span class="token operator">=</span> cv2<span class="token punctuation">.</span>CascadeClassifier<span class="token punctuation">(</span><span class="token string">&#39;haarcascade_frontalface_default.xml&#39;</span><span class="token punctuation">)</span>
eye_cascade <span class="token operator">=</span> cv2<span class="token punctuation">.</span>CascadeClassifier<span class="token punctuation">(</span><span class="token string">&#39;haarcascade_eye.xml&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># 读取图片</span>
img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">&#39;your_face_image.jpg&#39;</span><span class="token punctuation">)</span>
gray <span class="token operator">=</span> cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>img<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>COLOR_BGR2GRAY<span class="token punctuation">)</span>
<span class="token comment"># 检测图像中的面部和眼睛</span>
faces <span class="token operator">=</span> face_cascade<span class="token punctuation">.</span>detectMultiScale<span class="token punctuation">(</span>gray<span class="token punctuation">,</span> <span class="token number">1.3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>w<span class="token punctuation">,</span>h<span class="token punctuation">)</span> <span class="token keyword">in</span> faces<span class="token punctuation">:</span>
    img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>rectangle<span class="token punctuation">(</span>img<span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token operator">+</span>w<span class="token punctuation">,</span>y<span class="token operator">+</span>h<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>
    roi_gray <span class="token operator">=</span> gray<span class="token punctuation">[</span>y<span class="token punctuation">:</span>y<span class="token operator">+</span>h<span class="token punctuation">,</span> x<span class="token punctuation">:</span>x<span class="token operator">+</span>w<span class="token punctuation">]</span>
    roi_color <span class="token operator">=</span> img<span class="token punctuation">[</span>y<span class="token punctuation">:</span>y<span class="token operator">+</span>h<span class="token punctuation">,</span> x<span class="token punctuation">:</span>x<span class="token operator">+</span>w<span class="token punctuation">]</span>
    eyes <span class="token operator">=</span> eye_cascade<span class="token punctuation">.</span>detectMultiScale<span class="token punctuation">(</span>roi_gray<span class="token punctuation">)</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>ex<span class="token punctuation">,</span>ey<span class="token punctuation">,</span>ew<span class="token punctuation">,</span>eh<span class="token punctuation">)</span> <span class="token keyword">in</span> eyes<span class="token punctuation">:</span>
        cv2<span class="token punctuation">.</span>rectangle<span class="token punctuation">(</span>roi_color<span class="token punctuation">,</span><span class="token punctuation">(</span>ex<span class="token punctuation">,</span>ey<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>ex<span class="token operator">+</span>ew<span class="token punctuation">,</span>ey<span class="token operator">+</span>eh<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>

cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">&#39;img&#39;</span><span class="token punctuation">,</span>img<span class="token punctuation">)</span>
cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><hr><h2 id="编码" tabindex="-1"><a class="header-anchor" href="#编码" aria-hidden="true">#</a> 编码</h2><h3 id="❓硬编码-vs-软编码" tabindex="-1"><a class="header-anchor" href="#❓硬编码-vs-软编码" aria-hidden="true">#</a> ❓硬编码 vs 软编码</h3><details class="hint-container details"><summary>💡</summary><p>硬编码（硬件编码）：通过硬件来进行媒体数据的编码和解码。</p><blockquote><p>这些硬件包括用于编码解码（<code>Codec</code>）的专门芯片或者 <code>GPU</code> 等。</p></blockquote><ul><li>优点：硬编码通常比软编码快，因为硬件编码器是专门设计用于编码/解码的，它们的算法优化级别比软件更高；消耗的 <code>CPU</code> 资源较少，因为大部分工作都在特定的硬件上执行。</li><li>缺点：灵活性差，依赖于硬件的能力，针对个别视频编码/解码技术可能没有等效的硬件支持。</li></ul><p>软编码（软件编码）：在 <code>CPU</code> 上进行编码和解码的过程。</p><blockquote><p>软编码不依赖于特定的硬件，而是依赖 <code>CPU</code> 和编码/解码软件（例如<code>FFmpeg</code>，<code>x264</code>等）。</p></blockquote><ul><li>优势：灵活性高，它可以很容易地优化和升级，以适应新的编码标准和格式。而且通常软编码在视频质量和压缩效率方面表现更好。</li><li>缺点：耗费的 <code>CPU</code> 资源较多，可能导致系统反应慢或者其他任务变慢。</li></ul><p>应用：选择硬编码和软编码需要根据具体的应用场景和需求决定。</p><ul><li>如果是在电池供电的设备上进行实时视频流处理，可能更倾向于使用硬编码，因为它对电池使用的影响更小。</li><li>如果需要最高的视频质量和最小的文件大小，可能会选择软编码。</li></ul></details><h3 id="❓fbo、h264、h265" tabindex="-1"><a class="header-anchor" href="#❓fbo、h264、h265" aria-hidden="true">#</a> ❓FBO、H264、H265</h3><details class="hint-container details"><summary>💡</summary><ul><li><p><code>FBO</code>(Frame Buffer Object): 帧缓冲对象，是 <code>OpenGL</code> 的一个扩展，用来管理帧缓冲区。</p><blockquote><p>帧缓冲区保存了渲染操作的中间或最终结果。使用 <code>FBO</code> 可以把渲染结果保存到一个纹理对象中，后续可以直接用来进行渲染。<code>FBO</code> 让开发者更方便的在 <code>GPU</code> 上进行渲染，同样也可以用来处理图片和视频。</p></blockquote></li><li><p><code>H264</code>: 一种视频编解码标准，也叫 <code>AVC</code>（Advanced Video Coding，高级视频编码）。</p><blockquote><p><code>H264</code> 提供了一种高质量、有效的视频压缩方式，它比之前的编解码标准如 <code>MPEG-2</code> 和 <code>MPEG-4</code> 要好很多。<code>H264</code> 编解码器在采集和播放视频时会广泛用到，它是目前互联网上的主流视频编码格式。</p></blockquote></li><li><p><code>H265</code>: <code>H264</code> 的后继者，也叫 <code>HEVC</code>（High Efficiency Video Coding，高效视频编码）。</p><blockquote><p><code>H265</code> 提供了更高的数据压缩率，它可以在保持相同视频质量的同时，将文件大小压缩到 <code>H264</code> 的一半左右，或者用相同的文件大小提供更好的视频质量。<code>H265</code> 的复杂度也更高，所以需要更多的 <code>CPU</code> 和 <code>GPU</code> 资源来编解码。</p></blockquote></li></ul></details><h3 id="❓计算-pcm-时长" tabindex="-1"><a class="header-anchor" href="#❓计算-pcm-时长" aria-hidden="true">#</a> ❓计算 PCM 时长</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>PCM</code>（Pulse Code Modulation）是一种数字化音频的方式。</p></blockquote><p><code>PCM</code> 数据时长计算公式：<code>时间（秒）= 数据大小（字节） / (采样率 * 位深度/8 * 通道数)</code></p><ul><li>数据大小：<code>PCM</code> 文件的大小(字节）</li><li>采样率：录音设备在一秒钟内对声音信号的采样次数，通常是44.1kHz，48kHz或96kHz。</li><li>位深度：录音设备在对每次采样的声音信号进行模拟转数字的处理过程中，能够记录的声音信号的精度，通常是16位或24位。</li><li>通道数：音频的声道数，如单声道（<code>Mono</code>）为1，立体声（<code>Stereo</code>）为2。</li></ul><p>🌰 有一个 5MB 的 <code>PCM</code> 文件，采样率为 44.1kHz，采样位深度为 16 位，为立体声音频。</p><blockquote><p><code>时间 = 5 * 1024 * 1024 (字节) / (44.1 * 1024 * 16/8 * 2) ≈ 30秒</code></p></blockquote></details><h3 id="❓sei-了解吗-如何使用" tabindex="-1"><a class="header-anchor" href="#❓sei-了解吗-如何使用" aria-hidden="true">#</a> ❓SEI 了解吗，如何使用</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>SEI</code> 是 <code>H.264</code> 编码标准中的 <code>Supplemental Enhancement Information</code>，即补充增强信息。它是用户自定义数据的一种形式，可以将这些数据嵌入到 <code>H.264</code> 视频流中。<code>SEI</code> 信息可以用来传递一些非视频内容的信息，如时间戳、播放速度等。</p></blockquote><p>使用步骤：</p><ul><li><p>创建 <code>SEI</code>: 定义 <code>SEI</code> 数据，这可能是时间戳、<code>GPS</code> 位置信息等任何类型的信息。然后将这些信息转换为字节流。</p></li><li><p>嵌入 <code>SEI</code>: 将从步骤1中得到的 <code>SEI</code> 数据加入到 <code>H.264</code> 的 <code>NAL</code> 单元中。通常，<code>SEI NAL</code> 单元会插入到 <code>IDR</code> 帧之前。</p></li><li><p>解析 <code>SEI</code>: 解码端在解析 <code>H.264</code> 视频流时，当发现 <code>SEI NAL</code> 单元，会解析这个单元的数据，从而获取 <code>SEI</code> 数据。</p></li></ul><blockquote><p>在 <code>iOS</code> 平台常用的视频编解码库 <code>FFmpeg</code> ，就可以用来处理 <code>SEI</code> 信息。在编码时，利用 <code>libx264</code> 库的参数（<code>x264_param_t</code>）来设置 <code>SEI</code> 信息；在解码时，可以通过解析 <code>H.264 NAL</code> 单元来获取 <code>SEI</code> 信息。</p></blockquote><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token comment">// 先使用桥接文件将 FFmpeg 的 C 接口桥接到 Swift</span>

<span class="token comment">// 初始化 x264_param_t</span>
<span class="token keyword">var</span> param <span class="token operator">=</span> <span class="token function">x264_param_t</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">x264_param_default_preset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>param<span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;veryfast&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;zerolatency&quot;</span></span><span class="token punctuation">)</span>

<span class="token comment">// 定义你的 SEI 数据，例如我们想要传输一个字符串 &quot;Hello, World!&quot;</span>
<span class="token keyword">let</span> seiString <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Hello, World!&quot;</span></span>
<span class="token keyword">let</span> seiData <span class="token operator">=</span> seiString<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span>using<span class="token punctuation">:</span> <span class="token punctuation">.</span>utf8<span class="token punctuation">)</span><span class="token operator">!</span>

<span class="token comment">// 将你的 SEI 数据设置到 x264_param_t 中</span>
param<span class="token punctuation">.</span>i_sei_size <span class="token operator">=</span> seiData<span class="token punctuation">.</span>count
param<span class="token punctuation">.</span>p_sei <span class="token operator">=</span> <span class="token class-name">UnsafeMutablePointer</span><span class="token operator">&lt;</span><span class="token class-name">UInt8</span><span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>capacity<span class="token punctuation">:</span> seiData<span class="token punctuation">.</span>count<span class="token punctuation">)</span>
seiData<span class="token punctuation">.</span><span class="token function">copyBytes</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> param<span class="token punctuation">.</span>p_sei<span class="token punctuation">,</span> count<span class="token punctuation">:</span> seiData<span class="token punctuation">.</span>count<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><hr><h2 id="压缩" tabindex="-1"><a class="header-anchor" href="#压缩" aria-hidden="true">#</a> 压缩</h2><h3 id="❓jpeg-的压缩过程" tabindex="-1"><a class="header-anchor" href="#❓jpeg-的压缩过程" aria-hidden="true">#</a> ❓<code>JPEG</code> 的压缩过程</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>JPEG</code>（<code>Joint Photographic Experts Group</code>）是一种常用的图像压缩标准，主要应用于数字摄影和网络图像。</p></blockquote><p>压缩过程：</p><ul><li><p>颜色空间转换：将图像的颜色空间从 <code>RGB</code> 转换到 <code>YCbCr</code>。<code>Y</code> 是指亮度，<code>Cb</code> 和 <code>Cr</code> 是指色度，这样做的目的是为了减少人眼对色彩的敏感度。</p></li><li><p>分块：将图像划分为 8x8 的小块，每一个 8x8 的小块进行独立的处理。</p></li><li><p>离散余弦变换（<code>DCT</code>）：对每个 8x8 的像素块应用离散余弦变换，将其中的像素值从空间域转换到频域。在频域中，图片信息主要集中在低频部分，高频部分可以进行剔除以达到压缩的目的。</p></li><li><p>量化：通过量化表对 <code>DCT</code> 变换后的系数进行量化，这个过程是有损的，通常会丢失一些高频信息。</p></li><li><p>重新排序：将量化后的系数按照特定的顺序重排，通常是沿着对角线的方向。</p></li><li><p>熵编码：使用哈夫曼编码对重排后的系数进行编码，该过程是无损的，用于进一步减小文件大小。</p></li></ul><p>注：<code>JPEG</code> 压缩算法的最后两步使得压缩过程不可逆，也就是无法恢复到原始的图像。尽管如此，<code>JPEG</code> 算法仍被广泛使用，因为它能够在压缩图像文件大小的同时保留足够的视觉信息。</p></details><h3 id="❓主流的视频压缩协议" tabindex="-1"><a class="header-anchor" href="#❓主流的视频压缩协议" aria-hidden="true">#</a> ❓主流的视频压缩协议</h3><details class="hint-container details"><summary>💡</summary><ul><li><p><code>H.264/AVC</code>：高级视频编码（<code>Advanced Video Coding</code>），也被誉为是目前应用最广泛的压缩标准，它被广泛应用于网络视频、视频会议、数字电视、蓝光光盘等领域。</p></li><li><p><code>H.265/HEVC</code>：高效视频编码（<code>High Efficiency Video Coding</code>），是 <code>H.264</code> 的后续版本，对比 <code>H.264</code>，它在保证相同画质的情况下，可达到更高的压缩效率。</p></li><li><p><code>AV1</code>：开源、免版权费的视频编码格式，由开放媒体联盟 <code>AOMedia</code> 开发，提供比 <code>H.265</code> 高出 20% 的压缩效率。</p></li><li><p><code>VP8</code>：是<code>Google</code>发布的开源视频压缩格式，由于其高效的压缩算法，被广泛应用于 <code>Web</code> 视频。</p></li><li><p><code>VP9</code>：由 <code>Google</code> 开发的一个开源、免版权费的视频压缩标准，是 <code>VP8</code> 的改进版，主要用于网络视频流和 <code>WebRTC</code> 领域。</p></li><li><p><code>MPEG-2</code>：主要用于数字视频广播和 <code>DVD</code> 视频的标准，压缩效率较低，但在兼容性和质量方面有很好的表现。</p></li><li><p><code>MPEG-4</code>：是一种用于时间基本媒体（如音频、视频）的国际编码标准，包含多种编码方法（比如<code>DivX</code>，<code>Xvid</code>等）。</p></li></ul></details><h3 id="❓视频压缩的原理" tabindex="-1"><a class="header-anchor" href="#❓视频压缩的原理" aria-hidden="true">#</a> ❓视频压缩的原理</h3><details class="hint-container details"><summary>💡</summary><blockquote><p>视频压缩是一种技术，用于减少数据量以便在网络上流畅地传输视频或在存储设备上节省空间。</p></blockquote><p>基本原理：</p><ul><li><p>空间压缩：也被称为帧内编码，主要针对视频帧内部进行压缩。比如通过转换颜色空间，量化，变换编码等方法对帧内信息进行压缩。在此过程中，主要利用了人类视觉系统对某些信息（例如高频信息，色度信息）的不敏感性，来移除这些我们看不到或者看不清的信息。</p></li><li><p>时间压缩：也被称为帧间编码，主要针对连续帧间进行压缩。因为在一段连续的视频帧中，存在大量的冗余信息。比如在前后帧中，背景和主体的大部分区域并未发生变动。此时，可以通过预测的方法，找出当前帧与前后帧的差异，而只存储这些差异信息即可。</p></li><li><p>熵编码：在前两步压缩后，得到的数据中，一些值出现得非常频繁，而一些则很少出现。针对这种情况，我们可以赋予这些频繁出现的值较短的编码，而赋予较少出现的值较长的编码，以此降低数据的平均长度，获得更高的压缩效果。这就是熵编码的原理，常用的熵编码方法有哈夫曼编码和算术编码等。</p></li></ul></details><hr><h2 id="滤镜" tabindex="-1"><a class="header-anchor" href="#滤镜" aria-hidden="true">#</a> 滤镜</h2><h3 id="❓滤镜实现原理" tabindex="-1"><a class="header-anchor" href="#❓滤镜实现原理" aria-hidden="true">#</a> ❓滤镜实现原理</h3><details class="hint-container details"><summary>💡</summary><blockquote><p>滤镜的实现原理：是对图像上的每一个像素进行处理以达到预期的效果。处理的方式取决于滤镜的类型，例如：调整明暗、颜色、对比度等，以及更复杂的操作如模糊等。</p></blockquote><p>主要步骤：</p><ul><li>对图片的每一个像素进行迭代。</li><li>在每个像素上应用一个函数或者算法。最简单的例子可能就是调整像素的 <code>RGB</code> 值来改变图片颜色。</li><li>将处理后的像素值重新组合成图片。</li></ul><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token comment">// 使用 Core Image 在中创建滤镜的</span>
<span class="token keyword">let</span> ciImage <span class="token operator">=</span> <span class="token class-name">CIImage</span><span class="token punctuation">(</span>image<span class="token punctuation">:</span> image<span class="token punctuation">)</span>

<span class="token comment">// 创建滤镜：内置的 &quot;CIColorMonochrome&quot; 滤镜 - 将图片转变为单色图像。</span>
<span class="token keyword">let</span> filter <span class="token operator">=</span> <span class="token class-name">CIFilter</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;CIColorMonochrome&quot;</span></span><span class="token punctuation">)</span>
<span class="token comment">// 设置滤镜的输入</span>
filter<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>ciImage<span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> <span class="token constant">kCIInputImageKey</span><span class="token punctuation">)</span>
<span class="token comment">// 获取滤镜的输出</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> filter<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>forKey<span class="token punctuation">:</span> <span class="token constant">kCIOutputImageKey</span><span class="token punctuation">)</span> <span class="token keyword">as</span><span class="token operator">?</span> <span class="token class-name">CIImage</span>
<span class="token comment">// 创建从核心图像转换成 UIImage 的 CIContext </span>
<span class="token keyword">let</span> ciContext <span class="token operator">=</span> <span class="token class-name">CIContext</span><span class="token punctuation">(</span>options<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span>
<span class="token comment">// 将图片数据导出为 CGImage，然后转化为 UIImage</span>
<span class="token keyword">if</span> <span class="token keyword">let</span> output <span class="token operator">=</span> ciContext<span class="token punctuation">.</span><span class="token function">createCGImage</span><span class="token punctuation">(</span>result<span class="token operator">!</span><span class="token punctuation">,</span> from<span class="token punctuation">:</span> <span class="token punctuation">(</span>result<span class="token operator">?</span><span class="token punctuation">.</span>extent<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> resultImage <span class="token operator">=</span> <span class="token class-name">UIImage</span><span class="token punctuation">(</span>cgImage<span class="token punctuation">:</span> output<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="❓如何实现分割滤镜" tabindex="-1"><a class="header-anchor" href="#❓如何实现分割滤镜" aria-hidden="true">#</a> ❓如何实现分割滤镜</h3><details class="hint-container details"><summary>💡</summary><blockquote><p>分割滤镜的基本思路：对图片上的每个像素进行迭代，并在每个像素上根据其位置或某种规则应用不同的滤镜效果。</p></blockquote><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token comment">// 一张图片一半应用黑白效果，另一半保持原样</span>

<span class="token comment">// 原始图片</span>
<span class="token keyword">let</span> originalCIImage <span class="token operator">=</span> <span class="token class-name">CIImage</span><span class="token punctuation">(</span>image<span class="token punctuation">:</span> originalUIImage<span class="token punctuation">)</span><span class="token operator">!</span>

<span class="token comment">// 创建一个黑白滤镜</span>
<span class="token keyword">let</span> bwFilter <span class="token operator">=</span> <span class="token class-name">CIFilter</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;CIColorMonochrome&quot;</span></span><span class="token punctuation">)</span><span class="token operator">!</span>
bwFilter<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>originalCIImage<span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> <span class="token constant">kCIInputImageKey</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> bwCIImage <span class="token operator">=</span> bwFilter<span class="token punctuation">.</span>outputImage<span class="token operator">!</span>

<span class="token keyword">let</span> totalWidth <span class="token operator">=</span> originalCIImage<span class="token punctuation">.</span>extent<span class="token punctuation">.</span>width
<span class="token keyword">let</span> slicePoint <span class="token operator">=</span> totalWidth <span class="token operator">/</span> <span class="token number">2</span>

<span class="token comment">// 创建一个 CIBlendWithMask 滤镜 - 根据掩码图像（在模板图像中）组合两个图像</span>
<span class="token keyword">let</span> blendFilter <span class="token operator">=</span> <span class="token class-name">CIFilter</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;CIBlendWithMask&quot;</span></span><span class="token punctuation">)</span><span class="token operator">!</span>
blendFilter<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>bwCIImage<span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> <span class="token constant">kCIInputImageKey</span><span class="token punctuation">)</span>
blendFilter<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>originalCIImage<span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> <span class="token constant">kCIInputBackgroundImageKey</span><span class="token punctuation">)</span>

<span class="token keyword">let</span> maskImage <span class="token operator">=</span> <span class="token class-name">CIImage</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token class-name">CIColor</span><span class="token punctuation">(</span>red<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> green<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> blue<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> mask <span class="token operator">=</span> maskImage<span class="token punctuation">.</span><span class="token function">cropped</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> <span class="token class-name">CGRect</span><span class="token punctuation">(</span>
     x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
     y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
     width<span class="token punctuation">:</span> slicePoint<span class="token punctuation">,</span>
     height<span class="token punctuation">:</span> originalCIImage<span class="token punctuation">.</span>extent<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">)</span>

blendFilter<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>mask<span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> <span class="token constant">kCIInputMaskImageKey</span><span class="token punctuation">)</span>

<span class="token keyword">let</span> outputImage <span class="token operator">=</span> blendFilter<span class="token punctuation">.</span>outputImage<span class="token operator">!</span>
<span class="token keyword">let</span> finalImage <span class="token operator">=</span> <span class="token class-name">UIImage</span><span class="token punctuation">(</span>ciImage<span class="token punctuation">:</span> outputImage<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="❓美颜瘦脸等功能怎么实现的" tabindex="-1"><a class="header-anchor" href="#❓美颜瘦脸等功能怎么实现的" aria-hidden="true">#</a> ❓美颜瘦脸等功能怎么实现的</h3><details class="hint-container details"><summary>💡</summary><blockquote><p>美颜瘦脸等功能的实现是通过图像处理和计算机视觉技术来实现的。</p></blockquote><p>实现步骤：</p><ul><li><p>人脸检测：首先需要定位到图片中人脸的位置，这可以通过包括 <code>Haar</code> 特征、<code>HOG</code> 特征结合支持向量机(<code>SVM</code>)以及深度学习等技术来实现。</p></li><li><p>特征点定位：定位到人脸的基础上，还需要定位出人脸上的关键特征点，如眼睛、鼻子、嘴巴、脸颊等位置。这同样可以通过机器学习或者深度学习的算法来实现。</p></li><li><p>图像滤波美颜：对图像进行滤波处理，如均值滤波、高斯滤波、双边滤波等，可以去除皮肤上的瑕疵、皱纹，使得皮肤看起来更加光滑清晰。</p></li><li><p>色彩调整：通过调整图像的亮度、对比度、饱和度、色调等，可以使得皮肤看起来更加健康有活力。</p></li><li><p>美型瘦脸：通过图像的仿射变换或者几何变换，可以改变脸部或者身体的形状，达到美型或者瘦身的效果。</p></li><li><p>脸形调整：可以通过找到脸部的关键点定位，再进行适当的像素移动和调整，达到瘦脸的效果。</p></li><li><p>总体渲染：将以上步骤合并，对原始图像进行渲染，生成最终的美颜瘦脸的效果。</p></li></ul></details><hr><h2 id="直播" tabindex="-1"><a class="header-anchor" href="#直播" aria-hidden="true">#</a> 直播</h2><h3 id="❓直播整体流程" tabindex="-1"><a class="header-anchor" href="#❓直播整体流程" aria-hidden="true">#</a> ❓直播整体流程</h3><details class="hint-container details"><summary>💡</summary><ul><li><p><strong>信号采集</strong>：使用手机、电脑或专用设备采集音视频信息。这个过程通常需要调用设备的摄像头和麦克风等硬件设备进行实时音视频录制。</p></li><li><p><strong>编码与压缩</strong>：将采集到的音视频信号进行编码和压缩，转成可以网络传输的流媒体格式，如 <code>H264, H265, VP8, VP9</code> 等视频编码和 <code>AAC、MP3</code> 等音频编码。</p></li><li><p><strong>上传推流</strong>：将编码后的音视频数据通过网络发送到直播服务器。这个过程需要稳定、连续的网络连接来保证信号的实时性。</p></li><li><p><strong>服务器接收与转发</strong>：直播服务器接收到直播数据后，会进行一些必要的处理，如转码、录制、插播广告等，然后转发给观看的用户。</p></li><li><p><strong>观众拉流&amp;解码</strong>：观众端拉取直播流数据，然后解码播放。这个过程也需要稳定的网络环境，并且要解决视频播放的同步和时延问题。</p></li><li><p><strong>交互反馈</strong>：观众与主播进行互动，如发弹幕、送礼物、评论等，这些都需要实时反馈到直播界面上。</p></li></ul></details><h3 id="❓视频从-采集-显示-保存-整个流程" tabindex="-1"><a class="header-anchor" href="#❓视频从-采集-显示-保存-整个流程" aria-hidden="true">#</a> ❓视频从 <code>采集 -&gt; 显示 -&gt; 保存</code> 整个流程</h3><details class="hint-container details"><summary>💡</summary><ul><li><p><strong>采集</strong>：视频的采集通常由摄像头完成，摄像头将实时场景转换为数字信号。此过程涉及到图像采集设备的工作原理，以及光学和感光原理等内容。</p></li><li><p><strong>预处理</strong>：采集到的数字信号进行预处理，这包括颜色空间转换，降噪处理，明暗处理等步骤，目的是提高视频的感知质量。</p></li><li><p><strong>编码</strong>：编码阶段将预处理后的视频数据转换为特定格式，使其能够被存储或传输。编码通常需要考虑压缩的需要，用来减少视频数据的大小，包含 <code>H264，H265，VP8，VP9</code> 等编码格式。</p></li><li><p><strong>封装</strong>：编码后的视频数据需要进行封装，封装数据包括音频流、视频流以及字幕等，常见的封装格式有 <code>MP4，FLV，MKV，AVI，MOV</code> 等。</p></li><li><p><strong>传输</strong>：视频数据通过网络传输到服务器或者传输到其他设备。可以使用 <code>RTMP，HLS，HTTP-FLV</code> 等传输协议。</p></li><li><p><strong>解码</strong>：接收端收到视频数据后，先解封装，然后将音频和视频数据解码回原始格式。</p></li><li><p><strong>后处理</strong>：解码后的数据可以进行一定的后处理，如通过硬件加速提高播放性能，或者对图像进行增强处理等。</p></li><li><p><strong>显示</strong>：将解码后的视频数据显示到屏幕上。</p></li><li><p><strong>保存</strong>：如果需要，可以将视频数据保存到本地存储设备中。此时，视频数据通常以某种文件格式保存，可以是已经编码和封装的格式，也可以是原始的未编码格式。</p></li></ul></details><h3 id="❓rtmp-vs-webrtc" tabindex="-1"><a class="header-anchor" href="#❓rtmp-vs-webrtc" aria-hidden="true">#</a> ❓RTMP vs WebRTC</h3><details class="hint-container details"><summary>💡</summary><p>概念：</p><ul><li><p><code>RTMP</code>(Real Time Messaging Protocol)：即实时消息传送协议，是为了解决音视频数据在网络上高效传输而生的一个协议。RTMP是一种设计用来进行实时信息传输的网络协议，主要用来在Flash/AIR平台和支持RTMP协议的流媒体/交互服务器之间进行音视频和数据通信。RTMP流媒体服务器有Red5、Nginx、Adobe Media Server等。主要用于直播系统。</p></li><li><p><code>WebRTC</code>(Web Real-Time Communication)：一项实时通讯技术，它允许网络应用或者网站不借助中间媒介，建立浏览器之间点对点（Peer-to-Peer）高质量视频音频或者数据通道。可以用于视频会议，文件传输等。WebRTC是开源的，且兼容性良好，不少现代的网络浏览器（如Chrome，Firefox）都原生支持WebRTC。</p></li></ul><p>区别：</p><ul><li><p>网络传输：WebRTC支持P2P，RTMP不支持。WebRTC可以在同一局域网内打通P2P连接，传输效率高。而RTMP只能走服务器中转。</p></li><li><p>实时性：WebRTC优于RTMP，一般网页直播采用WebRTC协议，手机直播采用RTMP协议。</p></li><li><p>易用性：WebRTC只需要浏览器就可以使用，无需额外的插件。而Flash需要插件支持，使用相对复杂。</p></li><li><p>兼容性：WebRTC只支持部分浏览器，而RTMP基本所有浏览器都可以支持。</p></li><li><p>延时：WebRTC的延时较低，通常可以在毫秒级别，适合需要快速反馈的应用。而RTMP的延时较高，通常在几秒到十几秒不等。</p></li></ul></details><h3 id="❓rtm-rtc-rtmp" tabindex="-1"><a class="header-anchor" href="#❓rtm-rtc-rtmp" aria-hidden="true">#</a> ❓RTM &amp; RTC &amp; RTMP</h3><details class="hint-container details"><summary>💡</summary><ul><li><p>RTM (Real-Time Messaging) : 实时消息(信令)</p><blockquote><p>传输数据 : 消息文本或加密数据 实时消息场景 : 消息发送、呼叫邀请</p></blockquote></li><li><p>RTC (Real-Time Communication) : 实时通信</p><blockquote><p>传输数据 : 音视频数据 实时通信场景 : 语音通话、视频通话、音频互动直播、视频互动直播</p></blockquote></li><li><p>RTMP/RTMPS (Real-Time Transmit Protocol Security) : 实时传输协议</p></li></ul></details><h3 id="❓直播间在推拉流-获取帧-处理缓存方面做了哪些优化" tabindex="-1"><a class="header-anchor" href="#❓直播间在推拉流-获取帧-处理缓存方面做了哪些优化" aria-hidden="true">#</a> ❓直播间在推拉流，获取帧，处理缓存方面做了哪些优化</h3><details class="hint-container details"><summary>💡</summary><ul><li><p>使用高效的编解码技术: 使用更高效的编解码器，如 <code>H.265</code> 代替 <code>H.264</code>，可以在保证视频质量的同时降低网络带宽的需求。还可以调整编解码的参数，如降低帧率、降低码率等。</p></li><li><p>优化音视频同步: 通过 <code>PTS</code>(Presentation Time Stamp) 和 <code>DTS</code>(Decode Time Stamp) 机制调整音频和视频的时序，避免出现和声音和画面不同步的问题。</p></li><li><p>优化缓存策略: 根据网络状态动态调整缓冲区大小，优化网络请求。在网络状况良好时，可以减小缓冲区的大小，以降低延迟。在网络状况差的情况下，可以增大缓冲区的大小，以保证视频流的连续性。</p></li><li><p>优化渲染方式: 利用 <code>OpenGL ES</code> 或者 <code>Metal</code> 等更底层的图形 <code>API</code> 进行视频渲染，可以降低 <code>CPU</code> 的消耗，降低设备发热量，延长电池寿命。</p></li><li><p>移动端硬件加速: 利用设备硬件进行视频编解码，以降低 <code>CPU</code> 的使用率。</p></li><li><p>优化视频传输策略: 根据网络的带宽，以及用户的设备性能，动态调整视频的分辨率、帧率和码率，实现平滑的视频播放。</p></li><li><p>使用 <code>CDN</code> 网络: 通过 <code>CDN</code> 网络加速直播内容的分发，可以更好地应对大规模并发的观看请求，减小服务器压力，提升用户体验。</p></li></ul></details><hr><h2 id="图片" tabindex="-1"><a class="header-anchor" href="#图片" aria-hidden="true">#</a> 图片</h2><h3 id="❓coregraphics-和-coreimage-的区别" tabindex="-1"><a class="header-anchor" href="#❓coregraphics-和-coreimage-的区别" aria-hidden="true">#</a> ❓<code>CoreGraphics</code> 和 <code>CoreImage</code> 的区别</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>Core Graphics</code> 和 <code>Core Image</code> 都是 <code>iOS</code> 中的图形处理库。</p></blockquote><ul><li><p><code>Core Graphics</code> 也被称为 <code>Quartz 2D</code>，是一个基于 <code>C</code> 的框架。它提供的操作更接近于基本绘图操作，比如绘制路径、渐变、颜色空间、图形上下文等。当你需要进行二维绘图，或者具有对绘图有精细控制需求的时候，<code>Core Graphics</code> 非常适合使用。例如你可以用它来绘制复杂的形状，处理图像，甚至创建 <code>PDF</code>。</p></li><li><p><code>Core Image</code> 是一个强大的图像处理框架。它提供了一系列图像处理功能，比如调整色阶、饱和度、对比度、以及应用多种滤镜效果等等。同时，<code>Core Image</code> 的一个显著特点是它可以将任务交给 <code>GPU</code> 来处理，从而大大提高图像处理效率。因此，如果你需要进行图像处理，比如添加滤镜，或处理视频流，<code>Core Image</code> 会是一个更好的选择。</p></li></ul><p>总结：<code>Core Graphics</code> 和 <code>Core Image</code> 是两个功能互补的框架：<code>Core Graphics</code> 更加底层和基础，提供了强大的绘图及图像操作能力；而 <code>Core Image</code> 则专注于图像处理，提供了许多内置的滤镜和处理效果。</p></details><hr><h2 id="音视频" tabindex="-1"><a class="header-anchor" href="#音视频" aria-hidden="true">#</a> 音视频</h2><h3 id="概念知识" tabindex="-1"><a class="header-anchor" href="#概念知识" aria-hidden="true">#</a> 概念知识</h3><h4 id="❓cmtime" tabindex="-1"><a class="header-anchor" href="#❓cmtime" aria-hidden="true">#</a> ❓CMTime</h4><details class="hint-container details"><summary>💡</summary><blockquote><p><code>CMTime</code>：<code>Core Media</code> 框架中的一个 <code>C</code> 结构，用于在多媒体处理中表达时间。这个结构提供了比浮点数更准确更灵活的时间表达方式，它可以表示时间，时间范围和时间映射。</p></blockquote><p>结构：</p><ul><li><code>value</code>: 一个 64 位整数表示时间值。</li><li><code>timescale</code>: 一个 32 位整数，表示每秒中的帧数。</li><li><code>flags</code>: 表明这个时间是有效的，还是不确定的，或者是正向的，还是反向的。</li><li><code>epoch</code>: 它用于表述超过了标准的“每秒帧数”，一般应用中不会使用。</li></ul><p>公式：<code>时间 = value / timescale (单位：秒)</code></p></details><h4 id="❓samplebuffer-vs-pixelbuffer" tabindex="-1"><a class="header-anchor" href="#❓samplebuffer-vs-pixelbuffer" aria-hidden="true">#</a> ❓SampleBuffer vs PixelBuffer</h4><details class="hint-container details"><summary>💡</summary><ul><li><p><code>CMSampleBufferRef</code> : <code>Core Media</code> 框架中被用来管理音频、视频、字幕等样本的集合。</p><blockquote><p>一个 <code>SampleBuffer</code> 包含一到多个样本以及描述这些样本的元数据，例如显示时间戳、解码时间戳、持续时间、帧速率等。<code>SampleBuffer</code> 在更高的层级管理数据，包含了解压缩和播放媒体所需的所有信息。</p></blockquote></li><li><p><code>CVPixelBufferRef</code> : <code>Core Video</code> 框架中被用来管理图像数据。</p><blockquote><p>一个 <code>PixelBuffer</code> 表示一个视频帧，它包含了视频帧的原始像素数据。<code>PixelBuffer</code> 是在更低的层级处理数据，仅仅包含了像素信息，没有时间戳、持续时间等元数据。</p></blockquote></li></ul><blockquote><p>两者区别：<code>SampleBuffer</code> 是对包含音频、视频、字幕等样本的集合的封装，包含了播放媒体所需的所有信息，<code>PixelBuffer</code> 是对视频帧的原始像素数据的封装，更关注图像层面的细节。</p></blockquote></details><h3 id="音频处理" tabindex="-1"><a class="header-anchor" href="#音频处理" aria-hidden="true">#</a> 音频处理</h3><h4 id="❓ios-中音频降燥如何处理" tabindex="-1"><a class="header-anchor" href="#❓ios-中音频降燥如何处理" aria-hidden="true">#</a> ❓<code>iOS</code> 中音频降燥如何处理</h4><details class="hint-container details"><summary>💡</summary><ul><li>使用系统的 <code>AVAudioEngine</code> 类来进行处理</li></ul><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> audioEngine <span class="token operator">=</span> <span class="token class-name">AVAudioEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> mixer <span class="token operator">=</span> audioEngine<span class="token punctuation">.</span>mainMixerNode <span class="token comment">// 混频器节点</span>
mixer<span class="token punctuation">.</span>outputVolume <span class="token operator">=</span> <span class="token number">0.5</span> <span class="token comment">// 设置输出音频的半音大小</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用第三方库 <code>AudioKit</code> 进行噪音降低</li></ul><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">import</span> <span class="token class-name">AudioKit</span>
 
<span class="token keyword">let</span> noise <span class="token operator">=</span> <span class="token class-name">AKWhiteNoise</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 创建一个白噪声</span>
noise<span class="token punctuation">.</span>amplitude <span class="token operator">=</span> <span class="token number">0.2</span> <span class="token comment">// 调整噪声幅度</span>
<span class="token class-name">AudioKit</span><span class="token punctuation">.</span>output <span class="token operator">=</span> noise
<span class="token keyword">try</span><span class="token operator">?</span> <span class="token class-name">AudioKit</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
noise<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>Novocaine</code> 是一种强大但简单的音频处理库。<code>Novocaine</code> 库本身并没有直接提供降噪处理的功能，但是它提供了低延迟的音频输入和输出，可以方便地将音频数据流输入到 <code>DSP</code> 代码中进行处理后再输出。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token comment">// 声明一个 Novocaine 音频处理对象</span>
<span class="token keyword">let</span> audioManager <span class="token operator">=</span> <span class="token class-name">Novocaine</span><span class="token punctuation">.</span><span class="token function">audioManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 设置音频输入回调</span>
audioManager<span class="token punctuation">.</span>setInputBlock <span class="token punctuation">{</span> <span class="token punctuation">(</span>numberFrames<span class="token punctuation">,</span> samples<span class="token punctuation">)</span> <span class="token keyword">in</span>
    <span class="token comment">// &#39;samples&#39; 这里是一个指向输入音频数据片段的指针，</span>
    <span class="token comment">// 可以将这些数据传入降噪算法进行处理</span>
    <span class="token comment">// 例如：yourNoiseReductionAlgorithm(samples)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 开始运行</span>
audioManager<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>WebRTC</code>：由 <code>Google</code> 开发，用于音频和视频的实时通信。提供了一个强大的音频处理引擎，包括降噪、回声消除等功能。</p></li><li><p><code>EZAudio</code>：一个 <code>iOS</code> 和 <code>macOS</code> 的音频框架，提供了方便的音频分析和处理功能，可以使用它的音频输入、输出和混音功能，结合一些 <code>DSP</code> 技术，如滤波器，对音频进行降噪处理。</p></li><li><p><code>Superpowered</code>：一个高性能、低功耗的跨平台音频引擎。为开发者提供一系列音频相关的<code>API</code>，如解码、混音、滤波、<code>Echo</code>消除等。</p></li></ul></details><h3 id="视频处理" tabindex="-1"><a class="header-anchor" href="#视频处理" aria-hidden="true">#</a> 视频处理</h3><h4 id="❓ios-中的视频录制流程" tabindex="-1"><a class="header-anchor" href="#❓ios-中的视频录制流程" aria-hidden="true">#</a> ❓<code>iOS</code> 中的视频录制流程</h4><details class="hint-container details"><summary>💡</summary><blockquote><p>在 <code>iOS</code> 中 <code>AVCaptureSession</code> 是用来操作视频和音频的主要类。通过这个类，可以设置输入（比如设备的摄像机和麦克风）和输出。</p></blockquote><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">class</span> <span class="token class-name">MyCamera</span><span class="token punctuation">:</span> <span class="token class-name">NSObject</span><span class="token punctuation">,</span> <span class="token class-name">AVCaptureFileOutputRecordingDelegate</span> <span class="token punctuation">{</span>
    
    <span class="token comment">///开始录制，outputPath：视频保存地址</span>
    <span class="token keyword">func</span> <span class="token function-definition function">startRecording</span><span class="token punctuation">(</span>outputPath<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1&gt; 创建一个 AVCaptureSession</span>
        <span class="token keyword">let</span> captureSession <span class="token operator">=</span> <span class="token class-name">AVCaptureSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment">// 2&gt; 配置你要使用的视频输入设备，比如后置摄像头</span>
        <span class="token keyword">let</span> videoDevice <span class="token operator">=</span> <span class="token class-name">AVCaptureDevice</span><span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>video<span class="token punctuation">)</span>
        <span class="token keyword">let</span> videoInput <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token class-name">AVCaptureDeviceInput</span><span class="token punctuation">(</span>device<span class="token punctuation">:</span> videoDevice<span class="token operator">!</span><span class="token punctuation">)</span>
        captureSession<span class="token punctuation">.</span><span class="token function">addInput</span><span class="token punctuation">(</span>videoInput<span class="token punctuation">)</span>
        <span class="token comment">// 3&gt; 配置你要使用的音频输入设备，比如内置麦克风</span>
        <span class="token keyword">let</span> audioDevice <span class="token operator">=</span> <span class="token class-name">AVCaptureDevice</span><span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>audio<span class="token punctuation">)</span>
        <span class="token keyword">let</span> audioInput <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token class-name">AVCaptureDeviceInput</span><span class="token punctuation">(</span>device<span class="token punctuation">:</span> audioDevice<span class="token operator">!</span><span class="token punctuation">)</span>
        captureSession<span class="token punctuation">.</span><span class="token function">addInput</span><span class="token punctuation">(</span>audioInput<span class="token punctuation">)</span>
        <span class="token comment">// 4&gt; 创建一个 AVCaptureMovieFileOutput 对象</span>
        <span class="token comment">//    这个对象会处理从设备摄像头和麦克风捕获的视频和音频数据的输出</span>
        <span class="token keyword">let</span> movieOutput <span class="token operator">=</span> <span class="token class-name">AVCaptureMovieFileOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        captureSession<span class="token punctuation">.</span><span class="token function">addOutput</span><span class="token punctuation">(</span>movieOutput<span class="token punctuation">)</span>
        <span class="token comment">// 5&gt; 开始捕捉会话。</span>
        captureSession<span class="token punctuation">.</span><span class="token function">startRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment">// 6&gt; 开始录制视频时，调用 startRecording(to:outputFileURL,recordingDelegate:) 方法</span>
        <span class="token keyword">let</span> outputURL <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>fileURLWithPath<span class="token punctuation">:</span> outputPath<span class="token punctuation">)</span>
        movieOutput<span class="token punctuation">.</span><span class="token function">startRecording</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> outputURL<span class="token punctuation">,</span> recordingDelegate<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 当录制开始时被调用</span>
    <span class="token keyword">func</span> <span class="token function-definition function">fileOutput</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> output<span class="token punctuation">:</span> <span class="token class-name">AVCaptureFileOutput</span><span class="token punctuation">,</span> 
                    didStartRecordingTo fileURL<span class="token punctuation">:</span> <span class="token constant">URL</span><span class="token punctuation">,</span> 
                    from connections<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">AVCaptureConnection</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;开始录制&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 当录制结束时被调用</span>
    <span class="token keyword">func</span> <span class="token function-definition function">fileOutput</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> output<span class="token punctuation">:</span> <span class="token class-name">AVCaptureFileOutput</span><span class="token punctuation">,</span> 
                    didFinishRecordingTo outputFileURL<span class="token punctuation">:</span> <span class="token constant">URL</span><span class="token punctuation">,</span>
                    from connections<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">AVCaptureConnection</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
                    error<span class="token punctuation">:</span> <span class="token class-name">Error</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token keyword">let</span> error <span class="token operator">=</span> error <span class="token punctuation">{</span>
            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;录制结束，但发生错误：</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">error</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
            <span class="token keyword">return</span>
        <span class="token punctuation">}</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;录制结束，视频文件保存到：</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">outputFileURL</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h4 id="❓ios-设备中摄像头分为几种" tabindex="-1"><a class="header-anchor" href="#❓ios-设备中摄像头分为几种" aria-hidden="true">#</a> ❓<code>iOS</code> 设备中摄像头分为几种</h4><details class="hint-container details"><summary>💡</summary><blockquote><p>通过 <code>AVCaptureDevice.DiscoverySession</code> 来查找可用的摄像头设备</p></blockquote><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">import</span> <span class="token class-name">AVFoundation</span>
<span class="token comment">// </span>
<span class="token comment">// 查找设备的后置广角摄像头</span>
<span class="token keyword">let</span> discoverySession <span class="token operator">=</span> <span class="token class-name">AVCaptureDevice</span><span class="token punctuation">.</span><span class="token class-name">DiscoverySession</span><span class="token punctuation">(</span>deviceTypes<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>builtInWideAngleCamera<span class="token punctuation">]</span><span class="token punctuation">,</span> mediaType<span class="token punctuation">:</span> <span class="token punctuation">.</span>video<span class="token punctuation">,</span> position<span class="token punctuation">:</span> <span class="token punctuation">.</span>back<span class="token punctuation">)</span>
<span class="token keyword">for</span> device <span class="token keyword">in</span> discoverySession<span class="token punctuation">.</span>devices <span class="token punctuation">{</span>
    <span class="token keyword">if</span> device<span class="token punctuation">.</span><span class="token function">hasMediaType</span><span class="token punctuation">(</span><span class="token punctuation">.</span>video<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> device<span class="token punctuation">.</span>position <span class="token operator">==</span> <span class="token punctuation">.</span>back <span class="token punctuation">{</span>
        <span class="token comment">// 找到后置摄像头设备</span>
        <span class="token function">print</span><span class="token punctuation">(</span>device<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>iOS</code> 设备 (<code>iPhone</code>, <code>iPad</code>) 主要有三种类型的摄像头：</p><ul><li>前置摄像头(<code>Front camera</code>)：通常用于自拍和 <code>FaceTime</code> 视频通话。</li><li>后置摄像头(<code>Back camera</code>)：通常用于拍照和录制高质量的视频。</li><li>真深度摄像头(<code>TrueDepth camera</code>): 这是 <code>iPhone X</code> 及以后型号的设备才有的。它可以捕获深度和颜色信息，用于实现例如人脸追踪、<code>Animoji</code>、<code>Memoji</code> 等特性。</li></ul></details><h4 id="❓ios-中视频合成如何处理" tabindex="-1"><a class="header-anchor" href="#❓ios-中视频合成如何处理" aria-hidden="true">#</a> ❓<code>iOS</code> 中视频合成如何处理</h4><details class="hint-container details"><summary>💡</summary><blockquote><p>使用 <code>AVMutableComposition</code> 类来合成多个视频片段</p></blockquote><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">import</span> <span class="token class-name">AVFoundation</span>

<span class="token comment">// 创建一个 AVMutableComposition 对象，它表示一个新的可变编辑环境：</span>
<span class="token keyword">let</span> mixComposition <span class="token operator">=</span> <span class="token class-name">AVMutableComposition</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 获取需要合成的视频资料并创建对应的 AVAsset 对象</span>
<span class="token keyword">let</span> videoAssetA <span class="token operator">=</span> <span class="token class-name">AVAsset</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> <span class="token function">URL</span><span class="token punctuation">(</span>fileURLWithPath<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;path/to/video_a.mp4&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> videoAssetB <span class="token operator">=</span> <span class="token class-name">AVAsset</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> <span class="token function">URL</span><span class="token punctuation">(</span>fileURLWithPath<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;path/to/video_b.mp4&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 创建 AVMutableCompositionTrack 对象并添加视频文件：</span>
<span class="token keyword">if</span> <span class="token keyword">let</span> compositionVideoTrack <span class="token operator">=</span> mixComposition<span class="token punctuation">.</span><span class="token function">addMutableTrack</span><span class="token punctuation">(</span>withMediaType<span class="token punctuation">:</span> <span class="token class-name">AVMediaType</span><span class="token punctuation">.</span>video<span class="token punctuation">,</span> preferredTrackID<span class="token punctuation">:</span> <span class="token class-name">CMPersistentTrackID</span><span class="token punctuation">(</span><span class="token constant">kCMPersistentTrackID_Invalid</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">let</span> sourceTrackA <span class="token operator">=</span> videoAssetA<span class="token punctuation">.</span><span class="token function">tracks</span><span class="token punctuation">(</span>withMediaType<span class="token punctuation">:</span> <span class="token class-name">AVMediaType</span><span class="token punctuation">.</span>video<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">,</span>
    <span class="token keyword">let</span> sourceTrackB <span class="token operator">=</span> videoAssetB<span class="token punctuation">.</span><span class="token function">tracks</span><span class="token punctuation">(</span>withMediaType<span class="token punctuation">:</span> <span class="token class-name">AVMediaType</span><span class="token punctuation">.</span>video<span class="token punctuation">)</span><span class="token punctuation">.</span>first <span class="token punctuation">{</span>
        <span class="token keyword">do</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> compositionVideoTrack<span class="token punctuation">.</span><span class="token function">insertTimeRange</span><span class="token punctuation">(</span><span class="token class-name">CMTimeRangeMake</span><span class="token punctuation">(</span>start<span class="token punctuation">:</span> <span class="token class-name">CMTime</span><span class="token punctuation">.</span>zero<span class="token punctuation">,</span> duration<span class="token punctuation">:</span> videoAssetA<span class="token punctuation">.</span>duration<span class="token punctuation">)</span><span class="token punctuation">,</span> of<span class="token punctuation">:</span> sourceTrackA<span class="token punctuation">,</span> at<span class="token punctuation">:</span> <span class="token class-name">CMTime</span><span class="token punctuation">.</span>zero<span class="token punctuation">)</span>
            <span class="token keyword">try</span> compositionVideoTrack<span class="token punctuation">.</span><span class="token function">insertTimeRange</span><span class="token punctuation">(</span><span class="token class-name">CMTimeRangeMake</span><span class="token punctuation">(</span>start<span class="token punctuation">:</span> <span class="token class-name">CMTime</span><span class="token punctuation">.</span>zero<span class="token punctuation">,</span> duration<span class="token punctuation">:</span> videoAssetB<span class="token punctuation">.</span>duration<span class="token punctuation">)</span><span class="token punctuation">,</span> of<span class="token punctuation">:</span> sourceTrackB<span class="token punctuation">,</span> at<span class="token punctuation">:</span> videoAssetA<span class="token punctuation">.</span>duration<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span>
            <span class="token function">print</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 创建 AVAssetExportSession 对象，设置输出格式和路径，然后开始导出</span>
<span class="token keyword">let</span> outputFilePath <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;path/to/output.mp4&quot;</span></span>
<span class="token keyword">let</span> outputFileURL <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>fileURLWithPath<span class="token punctuation">:</span> outputFilePath<span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token keyword">let</span> exporter <span class="token operator">=</span> <span class="token class-name">AVAssetExportSession</span><span class="token punctuation">(</span>asset<span class="token punctuation">:</span> mixComposition<span class="token punctuation">,</span> presetName<span class="token punctuation">:</span> <span class="token class-name">AVAssetExportPresetHighestQuality</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    exporter<span class="token punctuation">.</span>outputURL <span class="token operator">=</span> outputFileURL
    exporter<span class="token punctuation">.</span>outputFileType <span class="token operator">=</span> <span class="token class-name">AVFileType</span><span class="token punctuation">.</span>mp4
    exporter<span class="token punctuation">.</span>shouldOptimizeForNetworkUse <span class="token operator">=</span> <span class="token boolean">true</span>
    exporter<span class="token punctuation">.</span>exportAsynchronously <span class="token punctuation">{</span>
        <span class="token keyword">switch</span> exporter<span class="token punctuation">.</span>status <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token punctuation">.</span>completed<span class="token punctuation">:</span>
            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Export complete&quot;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">case</span> <span class="token punctuation">.</span>failed<span class="token punctuation">:</span>
            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Failed: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">exporter<span class="token punctuation">.</span>error<span class="token operator">?</span><span class="token punctuation">.</span>localizedDescription <span class="token operator">??</span> <span class="token string-literal"><span class="token string">&quot;unknown error&quot;</span></span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">case</span> <span class="token punctuation">.</span>cancelled<span class="token punctuation">:</span>
            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Cancelled&quot;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">default</span><span class="token punctuation">:</span>
            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Unknown&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>      
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h4 id="❓ios-中视频如何添加水印" tabindex="-1"><a class="header-anchor" href="#❓ios-中视频如何添加水印" aria-hidden="true">#</a> ❓<code>iOS</code> 中视频如何添加水印</h4><details class="hint-container details"><summary>💡</summary><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token comment">// 1&gt; AVMutableComposition：管理所有的音频、视频和时间线资源</span>
<span class="token keyword">let</span> mixComposition <span class="token operator">=</span> <span class="token class-name">AVMutableComposition</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">guard</span> <span class="token keyword">let</span> videoTrack <span class="token operator">=</span> mixComposition<span class="token punctuation">.</span><span class="token function">addMutableTrack</span><span class="token punctuation">(</span>withMediaType<span class="token punctuation">:</span> <span class="token punctuation">.</span>video<span class="token punctuation">,</span> preferredTrackID<span class="token punctuation">:</span> <span class="token class-name">Int32</span><span class="token punctuation">(</span><span class="token constant">kCMPersistentTrackID_Invalid</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span>
    
<span class="token comment">// 2&gt; 从原始视频资源获取轨道，并添加到 composition 中</span>
<span class="token keyword">guard</span> <span class="token keyword">let</span> assetTrack <span class="token operator">=</span> asset<span class="token punctuation">.</span><span class="token function">tracks</span><span class="token punctuation">(</span>withMediaType<span class="token punctuation">:</span> <span class="token punctuation">.</span>video<span class="token punctuation">)</span><span class="token punctuation">.</span>first <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span>
<span class="token keyword">do</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> videoTrack<span class="token punctuation">.</span><span class="token function">insertTimeRange</span><span class="token punctuation">(</span><span class="token class-name">CMTimeRangeMake</span><span class="token punctuation">(</span>start<span class="token punctuation">:</span> <span class="token class-name">CMTime</span><span class="token punctuation">.</span>zero<span class="token punctuation">,</span> duration<span class="token punctuation">:</span> asset<span class="token punctuation">.</span>duration<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                   of<span class="token punctuation">:</span> assetTrack<span class="token punctuation">,</span>
                                   at<span class="token punctuation">:</span> <span class="token class-name">CMTime</span><span class="token punctuation">.</span>zero<span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Failed to load video track&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">return</span>
<span class="token punctuation">}</span>

<span class="token comment">// 3&gt; 创建一个 CALayer 用于显示水印并添加到 composition 的 layer 中</span>
<span class="token keyword">let</span> size <span class="token operator">=</span> videoTrack<span class="token punctuation">.</span>naturalSize
<span class="token keyword">let</span> watermarkLayer <span class="token operator">=</span> <span class="token class-name">CATextLayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
watermarkLayer<span class="token punctuation">.</span>string <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Watermark&quot;</span></span>
watermarkLayer<span class="token punctuation">.</span>foregroundColor <span class="token operator">=</span> <span class="token class-name">UIColor</span><span class="token punctuation">.</span>red<span class="token punctuation">.</span>cgColor
watermarkLayer<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> <span class="token number">40</span>
watermarkLayer<span class="token punctuation">.</span>frame <span class="token operator">=</span> <span class="token class-name">CGRect</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> size<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> size<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> size<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> size<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>
watermarkLayer<span class="token punctuation">.</span>opacity <span class="token operator">=</span> <span class="token number">0.5</span>

<span class="token keyword">let</span> parentLayer <span class="token operator">=</span> <span class="token class-name">CALayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> videoLayer <span class="token operator">=</span> <span class="token class-name">CALayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
parentLayer<span class="token punctuation">.</span>frame <span class="token operator">=</span> <span class="token class-name">CGRect</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> size<span class="token punctuation">.</span>width<span class="token punctuation">,</span> height<span class="token punctuation">:</span> size<span class="token punctuation">.</span>height<span class="token punctuation">)</span>
videoLayer<span class="token punctuation">.</span>frame <span class="token operator">=</span> <span class="token class-name">CGRect</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> size<span class="token punctuation">.</span>width<span class="token punctuation">,</span> height<span class="token punctuation">:</span> size<span class="token punctuation">.</span>height<span class="token punctuation">)</span>
parentLayer<span class="token punctuation">.</span><span class="token function">addSublayer</span><span class="token punctuation">(</span>videoLayer<span class="token punctuation">)</span>
parentLayer<span class="token punctuation">.</span><span class="token function">addSublayer</span><span class="token punctuation">(</span>watermarkLayer<span class="token punctuation">)</span>

<span class="token keyword">let</span> videoComposition <span class="token operator">=</span> <span class="token class-name">AVMutableVideoComposition</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
videoComposition<span class="token punctuation">.</span>animationTool <span class="token operator">=</span> <span class="token class-name">AVVideoCompositionCoreAnimationTool</span><span class="token punctuation">(</span>postProcessingAsVideoLayer<span class="token punctuation">:</span> videoLayer<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> parentLayer<span class="token punctuation">)</span>
videoComposition<span class="token punctuation">.</span>renderSize <span class="token operator">=</span> size
videoComposition<span class="token punctuation">.</span>frameDuration <span class="token operator">=</span> <span class="token class-name">CMTime</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> timescale<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span>

<span class="token comment">// 4&gt; 创建 AVAssetExportSession 来导出带有水印的视频</span>
<span class="token keyword">guard</span> <span class="token keyword">let</span> exporter <span class="token operator">=</span> <span class="token class-name">AVAssetExportSession</span><span class="token punctuation">(</span>asset<span class="token punctuation">:</span> mixComposition<span class="token punctuation">,</span> presetName<span class="token punctuation">:</span> <span class="token class-name">AVAssetExportPresetHighestQuality</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span>
exporter<span class="token punctuation">.</span>videoComposition <span class="token operator">=</span> videoComposition
exporter<span class="token punctuation">.</span>outputFileType <span class="token operator">=</span> <span class="token punctuation">.</span>mp4
<span class="token keyword">let</span> outputURL <span class="token operator">=</span> <span class="token comment">// 导出路径</span>
exporter<span class="token punctuation">.</span>outputURL <span class="token operator">=</span> outputURL
exporter<span class="token punctuation">.</span>shouldOptimizeForNetworkUse <span class="token operator">=</span> <span class="token boolean">true</span>

exporter<span class="token punctuation">.</span><span class="token function">exportAsynchronously</span><span class="token punctuation">(</span>completionHandler<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> exporter<span class="token punctuation">.</span>status <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token punctuation">.</span>completed<span class="token punctuation">:</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Exported successfully&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">case</span> <span class="token punctuation">.</span>failed<span class="token punctuation">,</span> <span class="token punctuation">.</span>cancelled<span class="token punctuation">:</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Failed: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">exporter<span class="token punctuation">.</span>error</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">default</span><span class="token punctuation">:</span>
        <span class="token keyword">break</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h4 id="❓ios-中的倍速播放与导出" tabindex="-1"><a class="header-anchor" href="#❓ios-中的倍速播放与导出" aria-hidden="true">#</a> ❓<code>iOS</code> 中的倍速播放与导出</h4><details class="hint-container details"><summary>💡</summary><ul><li><p>两倍速播放视频</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">import</span> <span class="token class-name">AVFoundation</span>

<span class="token comment">// AVPlayer 的 rate 属性可以用来控制视频的播放速度</span>
<span class="token keyword">let</span> player <span class="token operator">=</span> <span class="token class-name">AVPlayer</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> url<span class="token punctuation">)</span>
player<span class="token punctuation">.</span>rate <span class="token operator">=</span> <span class="token number">2.0</span> <span class="token comment">// 2倍速度</span>
player<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>两倍速导出视频</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">import</span> <span class="token class-name">AVFoundation</span>

<span class="token keyword">func</span> <span class="token function-definition function">exportDoubleSpeedVideo</span><span class="token punctuation">(</span>inputUrl<span class="token punctuation">:</span> <span class="token constant">URL</span><span class="token punctuation">,</span> outputUrl<span class="token punctuation">:</span> <span class="token constant">URL</span><span class="token punctuation">,</span> completion<span class="token punctuation">:</span> <span class="token attribute atrule">@escaping</span> <span class="token punctuation">(</span><span class="token class-name">Bool</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> asset <span class="token operator">=</span> <span class="token class-name">AVURLAsset</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> inputUrl<span class="token punctuation">)</span>
    <span class="token keyword">let</span> composition <span class="token operator">=</span> <span class="token class-name">AVMutableComposition</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  
    <span class="token comment">// 处理视频轨</span>
    <span class="token keyword">if</span> <span class="token keyword">let</span> videoTrack <span class="token operator">=</span> asset<span class="token punctuation">.</span><span class="token function">tracks</span><span class="token punctuation">(</span>withMediaType<span class="token punctuation">:</span> <span class="token punctuation">.</span>video<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">,</span>
        <span class="token keyword">let</span> compositionVideoTrack <span class="token operator">=</span> composition<span class="token punctuation">.</span><span class="token function">addMutableTrack</span><span class="token punctuation">(</span>withMediaType<span class="token punctuation">:</span> <span class="token punctuation">.</span>video<span class="token punctuation">,</span>
                                                           preferredTrackID<span class="token punctuation">:</span> <span class="token constant">kCMPersistentTrackID_Invalid</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span><span class="token operator">?</span> compositionVideoTrack<span class="token punctuation">.</span><span class="token function">insertTimeRange</span><span class="token punctuation">(</span>videoTrack<span class="token punctuation">.</span>timeRange<span class="token punctuation">,</span> of<span class="token punctuation">:</span> videoTrack<span class="token punctuation">,</span> at<span class="token punctuation">:</span> <span class="token punctuation">.</span>zero<span class="token punctuation">)</span>
        <span class="token comment">// 将 compositionTrack 的 preferredRate 设为 2.0，视频以两倍速播放</span>
        compositionVideoTrack<span class="token punctuation">.</span>preferredRate <span class="token operator">=</span> <span class="token number">2.0</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 处理音频轨</span>
    <span class="token keyword">if</span> <span class="token keyword">let</span> audioTrack <span class="token operator">=</span> asset<span class="token punctuation">.</span><span class="token function">tracks</span><span class="token punctuation">(</span>withMediaType<span class="token punctuation">:</span> <span class="token punctuation">.</span>audio<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">,</span>
        <span class="token keyword">let</span> compositionAudioTrack <span class="token operator">=</span> composition<span class="token punctuation">.</span><span class="token function">addMutableTrack</span><span class="token punctuation">(</span>withMediaType<span class="token punctuation">:</span> <span class="token punctuation">.</span>audio<span class="token punctuation">,</span>
                                                           preferredTrackID<span class="token punctuation">:</span> <span class="token constant">kCMPersistentTrackID_Invalid</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span><span class="token operator">?</span> compositionAudioTrack<span class="token punctuation">.</span><span class="token function">insertTimeRange</span><span class="token punctuation">(</span>audioTrack<span class="token punctuation">.</span>timeRange<span class="token punctuation">,</span> of<span class="token punctuation">:</span> audioTrack<span class="token punctuation">,</span> at<span class="token punctuation">:</span> <span class="token punctuation">.</span>zero<span class="token punctuation">)</span>
        <span class="token comment">// 音频以两倍速播放</span>
        compositionAudioTrack<span class="token punctuation">.</span>preferredRate <span class="token operator">=</span> <span class="token number">2.0</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 导出两倍速视频</span>
    <span class="token keyword">let</span> exportSession <span class="token operator">=</span> <span class="token class-name">AVAssetExportSession</span><span class="token punctuation">(</span>asset<span class="token punctuation">:</span> composition<span class="token punctuation">,</span> presetName<span class="token punctuation">:</span> <span class="token class-name">AVAssetExportPresetHighestQuality</span><span class="token punctuation">)</span>
    exportSession<span class="token operator">?</span><span class="token punctuation">.</span>outputURL <span class="token operator">=</span> outputUrl
    exportSession<span class="token operator">?</span><span class="token punctuation">.</span>outputFileType <span class="token operator">=</span> <span class="token punctuation">.</span>mp4
    exportSession<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">exportAsynchronously</span><span class="token punctuation">(</span>completionHandler<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token keyword">switch</span> exportSession<span class="token operator">?</span><span class="token punctuation">.</span>status <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token punctuation">.</span>completed<span class="token punctuation">:</span>
            <span class="token function">completion</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span>
        <span class="token keyword">case</span> <span class="token punctuation">.</span>cancelled<span class="token punctuation">,</span> <span class="token punctuation">.</span>failed<span class="token punctuation">:</span>
            <span class="token function">completion</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> exportSession<span class="token operator">?</span><span class="token punctuation">.</span>error<span class="token punctuation">)</span>
        <span class="token keyword">default</span><span class="token punctuation">:</span>
            <span class="token function">completion</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></details><h3 id="播放器" tabindex="-1"><a class="header-anchor" href="#播放器" aria-hidden="true">#</a> 播放器</h3><h4 id="❓avplayer-和-ijkplayer-有什么区别" tabindex="-1"><a class="header-anchor" href="#❓avplayer-和-ijkplayer-有什么区别" aria-hidden="true">#</a> ❓<code>AVPlayer</code> 和 <code>ijkplayer</code> 有什么区别</h4><details class="hint-container details"><summary>💡</summary><ul><li><p>来源不同：</p><ul><li><code>AVPlayer</code> 是 <code>Apple</code> 官方的视频播放器，内置在 <code>iOS</code> 系统中，拥有比较高级的编解码能力，并且与 <code>iOS</code> 系统的其他功能（如 <code>AirPlay</code>）集成良好。</li><li><code>ijkplayer</code> 则是 <code>bilibili</code> 开源的一款基于 <code>ffplay</code> 的轻量级的 <code>Android/iOS</code> 视频播放器。</li></ul></li><li><p>功能差异：</p><ul><li><code>AVPlayer</code> 支持较少的视频格式，但在用户体验上，如画面流畅度、省电等方面，优于大多数其它开源的播放器。</li><li><code>ijkplayer</code> 基于 <code>FFmpeg</code> 库，能解码更多的视频格式，支持 <code>rtmp、hls</code> 等多种流媒体协议，但需要更多的 <code>CPU</code> 资源。</li></ul></li><li><p>代码可控性：</p><ul><li><code>AVPlayer</code> 无法修改其源代码，只能依赖于 <code>Apple</code> 提供的 <code>API</code>。</li><li><code>ijkplayer</code> 是开源项目，因此可以自行修改 <code>ijkplayer</code> 的源代码以满足项目需求。</li></ul></li></ul></details><h4 id="❓用-ijkplayer-如何实现一个缓存视频列表每条视频前-1s-的内容" tabindex="-1"><a class="header-anchor" href="#❓用-ijkplayer-如何实现一个缓存视频列表每条视频前-1s-的内容" aria-hidden="true">#</a> ❓用 <code>IJKPlayer</code> 如何实现一个缓存视频列表每条视频前 1s 的内容</h4><details class="hint-container details"><summary>💡</summary><ul><li>列表中每个视频加载后，预加载视频的前1秒内容。这可以通过设置 <code>IJKPlayer</code> 的 <code>bufferingTime</code> 属性来实现。</li><li>将前1秒的内容存储在本地。</li><li>列表在播放视频时，先读取本地的缓存，如果有则直接播放，如果没有则从原路径加载。</li><li>加载完1秒后，立即暂停播放，等待用户操作。</li></ul></details><h4 id="❓缓存机制" tabindex="-1"><a class="header-anchor" href="#❓缓存机制" aria-hidden="true">#</a> ❓缓存机制</h4><details class="hint-container details"><summary>💡</summary></details><h4 id="❓边播边下" tabindex="-1"><a class="header-anchor" href="#❓边播边下" aria-hidden="true">#</a> ❓边播边下</h4><details class="hint-container details"><summary>💡</summary></details><h4 id="❓设计一个通用视频播放器" tabindex="-1"><a class="header-anchor" href="#❓设计一个通用视频播放器" aria-hidden="true">#</a> ❓设计一个通用视频播放器</h4><details class="hint-container details"><summary>💡</summary></details>`,90);function U(F,D){const a=p("ExternalLinkIcon");return c(),i("div",null,[t(" more "),d,n("ul",null,[n("li",null,[n("a",r,[s("RTC-Developer"),e(a)])]),n("li",null,[n("a",k,[s("音视频知识图谱"),e(a)])]),n("li",null,[n("a",m,[s("音视频面试题集锦"),e(a)])]),n("li",null,[n("a",v,[s("2022-04-22 音视频开发常见面试题"),e(a)])]),n("li",null,[n("a",b,[s("2021-03-02 在线教室 iOS 端声音问题综合解决方案"),e(a)])])]),t(" 编码格式 "),n("ul",null,[n("li",null,[n("a",h,[s("H264 vs H265"),e(a)])]),n("li",null,[n("a",g,[s("2019-07-05 iOS视频压缩笔记"),e(a)])]),n("li",null,[n("a",f,[s("2017-09-26 File Size Issue with HEVC Encoder on iOS 11"),e(a)])])]),t(" 边下边播 "),n("ul",null,[n("li",null,[n("a",y,[s("2021.04.21 开发播放器框架之边下边播边存方案"),e(a)])]),n("li",null,[n("a",w,[s("2020.02.05 Understanding AVAssetResourceLoaderDelegate"),e(a)])]),n("li",null,[n("a",C,[s("2019.12.03 iOS AVPlayer 视频缓存的设计与实现"),e(a)])]),n("li",null,[n("a",x,[s("2019.04.23 AVPlayer 边下边播与最佳实践"),e(a)])]),n("li",null,[n("a",A,[s("iOS 实现在线视频边下边播"),e(a)])]),n("li",null,[n("a",I,[s("2018.08.31 iOS短视频播放缓存之道"),e(a)]),n("blockquote",null,[n("p",null,[n("a",P,[s("ShortMediaCache"),e(a)])])])]),n("li",null,[n("a",_,[s("2018.02.28 AVPlayer 初体验之边下边播与视频缓存"),e(a)])]),n("li",null,[n("a",T,[s("2017.06.13 Swift 封装一个视频播放器 VGPlayer"),e(a)]),n("blockquote",null,[n("p",null,[n("a",S,[s("VGPlayer"),e(a)])])])]),n("li",null,[M,n("a",q,[s("2017.03.31 可能是目前最好的 "),V,s(" 音视频缓存方案"),e(a)]),n("blockquote",null,[n("p",null,[n("a",O,[s("VIMediaCache"),e(a)])])])]),n("li",null,[n("a",L,[s("2016.09.03 Implementing AVAssetResourceLoaderDelegate: a How-To Guide"),e(a)])]),n("li",null,[n("a",G,[s("2016.07.12 CachingPlayerItem"),e(a)])]),n("li",null,[n("a",R,[s("2016.05.24 iOS音频播放 (九)：边播边缓存"),e(a)])])]),E])}const z=o(u,[["render",U],["__file","0x15.media.html.vue"]]);export{z as default};
