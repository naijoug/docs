import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,a as e,f as t}from"./app-shl8DweF.js";const p={},c=t(`<hr><h2 id="概念知识" tabindex="-1"><a class="header-anchor" href="#概念知识" aria-hidden="true">#</a> 概念知识</h2><h3 id="❓dart-中-library-与-package-区别" tabindex="-1"><a class="header-anchor" href="#❓dart-中-library-与-package-区别" aria-hidden="true">#</a> ❓<code>Dart</code> 中 <code>library</code> 与 <code>package</code> 区别</h3><details class="hint-container details"><summary>💡</summary><ul><li><p><code>library</code>: 一个关键字，它表示一个库（<code>Library</code>），每个文件就是一个库。</p><blockquote><p>库主要是为了把相关的代码组织在一起，方便使用和管理。可以在库中定义函数、变量、类、接口等，并用 <code>import</code> 关键字在其他库中导入这个库。 一个 <code>Dart</code> 库可以由多个部分组成，这些部分用 <code>part</code> 和 <code>part of</code> 进行标识。</p></blockquote></li><li><p><code>package</code>: 一个包管理系统，它可以帮助我们更好地组织和分享 <code>Dart</code> 代码。一个包就是一些以特定方式组织起来的 <code>Dart</code> 代码——通常包含多个库、样例文件、文档等。</p><blockquote><p><code>package</code> 的主要目的是分享代码，它可以将相关的多个库组织到一起，并通过 <code>Dart</code> 的包管理工具（如 <code>pub</code>）进行版本管理和发布。</p></blockquote></li></ul></details><hr><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h2><h3 id="❓-const-vs-final" tabindex="-1"><a class="header-anchor" href="#❓-const-vs-final" aria-hidden="true">#</a> ❓ <code>const</code> vs <code>final</code></h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>final</code> 和 <code>const</code> 都用于表示一个值是常量，也就是说这个值一旦被设置就不能被更改。</p></blockquote><p>主要区别：</p><ul><li><p>赋值时机：</p><ul><li><code>const</code> 的赋值必须在编译期完成，因此 <code>const</code> 的值必须是一个编译期常量。</li><li><code>final</code> 的赋值在第一次使用时计算，它的初始值可以通过计算而来，但只能赋值一次。</li></ul><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 编译时，确定为 double 类型常量</span>
<span class="token keyword">const</span> pi <span class="token operator">=</span> <span class="token number">3.14159</span><span class="token punctuation">;</span> 
<span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token class-name">DateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ❌ 编译错误，不能将一个动态值赋值给 const 常量</span>
<span class="token comment">// 运行时，获取运行时刻时间</span>
<span class="token keyword">final</span> date <span class="token operator">=</span> <span class="token class-name">DateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>内存内常量的处理</p><ul><li><code>const</code> 会创建编译时常量。对于同一个值，不管它在哪里被使用，总是重用同一实例。所以使用 <code>identical()</code> 比较 <code>const</code> 对象总是返回 <code>true</code> 。</li><li><code>final</code> 变量每次都会创建一个新的实例。</li></ul><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">identical</span><span class="token punctuation">(</span>name1<span class="token punctuation">,</span> name2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true，指向同一内存地址</span>
<span class="token keyword">final</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">final</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">identical</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false，分配不同的内存地址</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>可变性：</p><ul><li><code>const</code> 对象以及其字段必须全部是不可变的。</li><li><code>final</code> 对象的字段可以是可变的。</li></ul><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// ❌</span>
<span class="token keyword">final</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// ✅</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>初始化方式：</p><ul><li><code>const</code> 变量的值必须在声明的时候就确定下来。</li><li><code>final</code> 变量可以在构造器中进行初始化，但 <code>const</code> 变量不能。</li></ul><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">final</span> int age<span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></details><h3 id="❓var-vs-object-vs-dynamic" tabindex="-1"><a class="header-anchor" href="#❓var-vs-object-vs-dynamic" aria-hidden="true">#</a> ❓<code>var</code> vs <code>Object</code> vs <code>dynamic</code></h3><details class="hint-container details"><summary>💡</summary><ul><li><p><code>var</code> : 使用 <code>var</code> 关键字，会根据第一次赋予的值来推断该变量的类型。一旦类型被推断后，就不能改变该变量的类型。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Bob&#39;</span></span><span class="token punctuation">;</span>
name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Alice&#39;</span></span><span class="token punctuation">;</span> <span class="token comment">// ✅</span>
name <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment">// ❌</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>Object</code>: 在 <code>Dart</code> 中所有类型都是 <code>Object</code> 的子类型。所以可以将任何类型的值赋给一个 <code>Object</code> 类型的变量。但对于 <code>Object</code> 类型的变量，只能调用 <code>Object</code> 中定义的方法，即使实际的值可能有更多的方法。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Object</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Bob&#39;</span></span><span class="token punctuation">;</span>
name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Alice&#39;</span></span><span class="token punctuation">;</span>  <span class="token comment">// ✅</span>
name <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment">// ✅</span>
name<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// ❌</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>dynamic</code>: 使用 <code>dynamic</code> 声明的变量可以赋予任何类型的值，并可以调用任何方法 (无论这个方法是否存在，如果不存在运行时会抛出异常）。<code>Dart</code> 在编译时不会检查 <code>dynamic</code> 类型变量的类型安全，所有的检查都留到了运行时。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">dynamic</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Bob&#39;</span></span><span class="token punctuation">;</span>
name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Alice&#39;</span></span><span class="token punctuation">;</span>  <span class="token comment">// ✅</span>
name <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>   <span class="token comment">// ✅</span>
name<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// ✅</span>
name<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Runtime ❌</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></details><hr><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h2><h3 id="❓dart-中-表示什么意思" tabindex="-1"><a class="header-anchor" href="#❓dart-中-表示什么意思" aria-hidden="true">#</a> ❓<code>Dart</code> 中 <code>..</code> 表示什么意思</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>..</code> : 级联运算符 (<code>Cascade notation</code>)。</p></blockquote><p>级联运算符允许在同一个对象上执行一系列操作。这可以使代码更加简洁，只需要引用对象一次，然后执行多个操作。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> myObject <span class="token operator">=</span> <span class="token class-name">SomeClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myObject<span class="token punctuation">.</span><span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myObject<span class="token punctuation">.</span><span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myObject<span class="token punctuation">.</span><span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 使用级联操作符</span>
<span class="token keyword">var</span> myObject <span class="token operator">=</span> <span class="token class-name">SomeClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
<span class="token comment">// 注意：级联操作的结果是表达式的目标，也就是说依然是 myObject，而不是最后一条语句的返回值。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="❓dart-的作用域" tabindex="-1"><a class="header-anchor" href="#❓dart-的作用域" aria-hidden="true">#</a> ❓<code>Dart</code> 的作用域</h3><details class="hint-container details"><summary>💡</summary><blockquote><p>作用域：是一种规定变量，函数和对象的可访问范围的机制。</p></blockquote><ul><li><p>局部作用域：在函数或方法中声明的变量只能在其内部使用。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 局部变量</span>
  <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Hello World&#39;</span></span><span class="token punctuation">;</span> <span class="token comment">// x is only accessible within main() function</span>
  <span class="token function">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>全局作用域：在函数或方法外部声明的变量可以在程序的任意位置使用。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 全局变量</span>
<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Hello World&#39;</span></span><span class="token punctuation">;</span>  <span class="token comment">// x is accessible anywhere in the code</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// can access x within main() function</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>词法作用域：这意味着变量的作用范围是静态的，由代码的布局决定。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Hello World&#39;</span></span><span class="token punctuation">;</span>  <span class="token comment">// x is accessible anywhere in the code</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Hello Dart&#39;</span></span><span class="token punctuation">;</span>  <span class="token comment">// This x variable is not the same as the global x</span>
  <span class="token function">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// This will print &#39;Hello Dart&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>块作用域：大括号 <code>{}</code> 内部声明的变量具有块级作用域，也就是它们仅在这个块中可见。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Hello&#39;</span></span><span class="token punctuation">;</span>  <span class="token comment">// x is only accessible within this if block</span>
    <span class="token function">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// This will print &#39;Hello&#39;</span>
  <span class="token punctuation">}</span>
  <span class="token function">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Error: x is not accessible outside the if block</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></details><hr><h2 id="类" tabindex="-1"><a class="header-anchor" href="#类" aria-hidden="true">#</a> 类</h2><h3 id="❓dart-中的-callable-了解吗" tabindex="-1"><a class="header-anchor" href="#❓dart-中的-callable-了解吗" aria-hidden="true">#</a> ❓<code>Dart</code> 中的 <code>callable</code> 了解吗</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>callable</code> 类通过实现 <code>call</code> 方法来使类实例可以像函数那样被调用。</p></blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Increment</span> <span class="token punctuation">{</span>
  <span class="token keyword">final</span> int incrementBy<span class="token punctuation">;</span>

  <span class="token class-name">Increment</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>incrementBy<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 定义 call 方法</span>
  int <span class="token function">call</span><span class="token punctuation">(</span>int value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> value <span class="token operator">+</span> incrementBy<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> incrementByTwo <span class="token operator">=</span> <span class="token class-name">Increment</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token function">incrementByTwo</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="❓dart-中使用抽象类-extends-和-implements-的区别" tabindex="-1"><a class="header-anchor" href="#❓dart-中使用抽象类-extends-和-implements-的区别" aria-hidden="true">#</a> ❓<code>Dart</code> 中使用抽象类 <code>extends</code> 和 <code>implements</code> 的区别</h3><details class="hint-container details"><summary>💡</summary><ul><li><p><code>extends</code>：当一个类 <code>extends</code> 一个抽象类时，它从抽象类中继承了所有的方法(包括已实现的和未实现的方法)，并且必须实现所有未实现的方法。同时，由于 <code>Dart</code> 的单继承特性，一个类只能 <code>extends</code> 一个类，无论抽象类或者非抽象类。</p></li><li><p><code>implements</code>：当一个类 <code>implements</code> 一个抽象类时，它必须实现抽象类中的所有方法，因为 <code>implements</code> 就好比是一个契约，承诺的类将提供某些功能。可以同时 <code>implements</code> 多个类或抽象类，但不存在任何方法或属性的继承。</p></li></ul><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
  <span class="token keyword">void</span> <span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Eating...&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 继承形式使用抽象类</span>
<span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Woof!!!&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 接口形式使用抽象类</span>
<span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">implements</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Meow!!!&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;The cat is eating...&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Dog</span> dog <span class="token operator">=</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  dog<span class="token punctuation">.</span><span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Woof!!!</span>
  dog<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Eating...</span>

  <span class="token class-name">Cat</span> cat <span class="token operator">=</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  cat<span class="token punctuation">.</span><span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Meow!!!</span>
  cat<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// The cat is eating...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="❓说一下-mixin" tabindex="-1"><a class="header-anchor" href="#❓说一下-mixin" aria-hidden="true">#</a> ❓说一下 <code>mixin</code></h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>mixin</code>: “混入”，一种在多个类之间重用代码的方式。它提供了一种实现方法重用的方式，并且不需要创建和使用复杂的类层次。</p></blockquote><ul><li>一个类可以混入多个 <code>mixin</code>，<code>mixin</code> 也可以继承其它 <code>mixin</code>。</li><li><code>mixin</code> 不能定义构造函数，也不能从类扩展而来时。这是因为 <code>mixin</code> 本质上是一种对接口的补充，它描述的是行为，而不是状态。</li></ul><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">mixin</span> <span class="token class-name">Flyable</span> <span class="token punctuation">{</span>
  <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;I can fly!&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用 with 混入 Flyable</span>
<span class="token keyword">class</span> <span class="token class-name">Bird</span> <span class="token keyword">with</span> <span class="token class-name">Flyable</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Bird</span> b <span class="token operator">=</span> <span class="token class-name">Bird</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  b<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 打印 &#39;I can fly!&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="❓mixin-extends-implement-之间的关系" tabindex="-1"><a class="header-anchor" href="#❓mixin-extends-implement-之间的关系" aria-hidden="true">#</a> ❓<code>mixin</code> <code>extends</code> <code>implement</code> 之间的关系</h3><details class="hint-container details"><summary>💡</summary><ul><li><p><code>mixin</code>：一种将类的代码在多个类层次结构中复用的方法。使用 <code>mixin</code> 关键字定义类，然后使用 <code>with</code> 关键字将其混入另一个类。注意，<code>mixin</code> 类不能被实例化，也不能有构造函数。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">mixin</span> <span class="token class-name">Musical</span> <span class="token punctuation">{</span>
  <span class="token keyword">void</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Singing...&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Musician</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token keyword">with</span> <span class="token class-name">Musical</span> <span class="token punctuation">{</span>
  <span class="token comment">// We can now use the sing() method in Musician.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>extends</code>：类可以通过 <code>extends</code> 关键字继承一个父类。不支持多继承，一个子类只能继承一个父类。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span>
  <span class="token keyword">void</span> <span class="token function">drive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Driving...&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token keyword">extends</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span>
  <span class="token keyword">void</span> <span class="token function">honk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Honking...&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">drive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Driving car...&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>implements</code>：用于实现一个接口。接口是方法和属性的集合，它被用作通用模板，一旦被类实现，这个类就必须实现接口中的所有方法和属性。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
  <span class="token keyword">void</span> <span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">makeNoise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">implements</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;The dog is walking.&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">makeNoise</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;The dog is barking.&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Dog</span> dog <span class="token operator">=</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  dog<span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  dog<span class="token punctuation">.</span><span class="token function">makeNoise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></details><h3 id="❓dart-为啥没有反射" tabindex="-1"><a class="header-anchor" href="#❓dart-为啥没有反射" aria-hidden="true">#</a> ❓<code>Dart</code> 为啥没有反射</h3><details class="hint-container details"><summary>💡</summary><blockquote><p>因为反射会影响 <code>Dart</code> 的 <code>tree shaking</code>(摇树优化)。这是一种无用代码裁剪技术，有利于优化发布版本的 <code>App</code> 体积。如果反射机制存在，会存在隐式代码，<code>tree shaking</code> 时无法准确定位运行时哪些代码不会被调用，冗余代码就没法被裁剪。</p></blockquote><p>注意：<code>Dart</code> 其实是支持反射的，反射在 <code>dart:mirrors</code> 库中实现，提供了一系列用于执行反射操作的类和方法。</p></details><h3 id="❓dart-中如何使用反射" tabindex="-1"><a class="header-anchor" href="#❓dart-中如何使用反射" aria-hidden="true">#</a> ❓<code>Dart</code> 中如何使用反射</h3><details class="hint-container details"><summary>💡</summary><blockquote><p>反射：一种动态语言特性，可以在运行时检查和修改程序。在 <code>dart:mirrors</code> 包中实现，该包提供了一系列用于执行反射操作的类和方法。</p></blockquote><ul><li><code>ClassMirror</code> : 类</li><li><code>InstanceMirror</code> : 实例</li><li><code>ClosureMirror</code> : 闭包</li><li><code>DeclarationMirror</code> : 类属性</li><li><code>IsolateMirror</code> : Isolate</li><li><code>MethodMirror</code> : 方法</li></ul><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:mirrors&#39;</span></span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>
  <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;New object created. Message: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">message</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">myMethod</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;myMethod called. Message: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">message</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 获取 MyClass 的类镜像</span>
  <span class="token class-name">ClassMirror</span> classMirror <span class="token operator">=</span> <span class="token function">reflectClass</span><span class="token punctuation">(</span><span class="token class-name">MyClass</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 用 MyClass 的构造函数创建新实例</span>
  <span class="token keyword">var</span> myClassInstanceMirror <span class="token operator">=</span> classMirror<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">Symbol</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;Hello Constructor&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token comment">// 获取 MyClass 的实例</span>
  <span class="token class-name">MyClass</span> myClassInstance <span class="token operator">=</span> myClassInstanceMirror<span class="token punctuation">.</span>reflectee<span class="token punctuation">;</span>

  <span class="token comment">// 获取 MyClass.myMethod 的方法镜像</span>
  <span class="token keyword">var</span> myMethodMirror <span class="token operator">=</span> <span class="token function">reflect</span><span class="token punctuation">(</span>myClassInstance<span class="token punctuation">)</span><span class="token punctuation">.</span>type<span class="token punctuation">.</span>instanceMembers<span class="token punctuation">[</span><span class="token class-name">Symbol</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;myMethod&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token comment">// 通过反射调用 myMethod</span>
  myMethodMirror<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>myClassInstanceMirror<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;Hello Method&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：<code>dart:mirrors</code> 库（以及所有的反射在 <code>Dart</code> 中）在 <code>web</code> 场景中并不被所有的编译目标(例如 <code>dart2js</code> 或 <code>flutter web</code>)支持，并且可能对程序的体积和性能有所影响。因此，在将代码部署到生产环境之前，应仔细考虑是否需要使用反射。</p></details><h3 id="❓dart-中单例如何实现" tabindex="-1"><a class="header-anchor" href="#❓dart-中单例如何实现" aria-hidden="true">#</a> ❓<code>Dart</code> 中单例如何实现</h3><details class="hint-container details"><summary>💡</summary><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>
  <span class="token comment">// 创建 Singleton 类的一个对象</span>
  <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Singleton</span> _singleton <span class="token operator">=</span> <span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token function">_internal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 单例内部构造函数</span>
  <span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token function">_internal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  
  <span class="token comment">// 声明一个工厂构造函数并返回前面创建的对象</span>
  <span class="token keyword">factory</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> _singleton<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> s2 <span class="token operator">=</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">identical</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><hr><h2 id="异步编程" tabindex="-1"><a class="header-anchor" href="#异步编程" aria-hidden="true">#</a> 异步编程</h2><h3 id="❓说一下-future" tabindex="-1"><a class="header-anchor" href="#❓说一下-future" aria-hidden="true">#</a> ❓说一下 <code>Future</code></h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>Future</code>：一个代表未完成的计算的类。可以把它想象成一个会在将来某个时间返回一个值（或错误）的操作。</p></blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 创建一个 Future</span>
  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span> <span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">delayed</span><span class="token punctuation">(</span>
    <span class="token class-name">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string-literal"><span class="token string">&#39;Hello, Future!&#39;</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token comment">// 注册回调</span>
  future<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>print<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 当 Future 完成时，会打印 &#39;Hello, Future!&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="❓说一下-stream" tabindex="-1"><a class="header-anchor" href="#❓说一下-stream" aria-hidden="true">#</a> ❓说一下 <code>Stream</code></h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>Stream</code>：用于序列化异步事件。与只完成一次的 <code>Future</code> 不同，<code>Stream</code> 能够发出多个值。</p></blockquote><ul><li>可以把 <code>Stream</code> 理解成一个异步的数组，就像一个流水线，可以在流水线的一端投入数据，在另一端处理数据，数据在流水线上移动时并不会阻塁主线程的执行。</li><li>向 <code>Stream</code> 添加数据的最常用方式是使用 <code>StreamController</code>，可以使用 <code>StreamController</code> 管理数据的添加和 <code>Stream</code> 的监听。</li></ul><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 创建一个 Stream </span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">final</span> stream <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">fromIterable</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 监听 Stream</span>
  stream<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>print<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 打印 1, 2, 3, 4, 5</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="❓await-for-如何使用" tabindex="-1"><a class="header-anchor" href="#❓await-for-如何使用" aria-hidden="true">#</a> ❓<code>await for</code> 如何使用</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>await for</code> 循环用于异步迭代 <code>Stream</code> 的元素。使用 <code>await for</code> 会暂停函数的执行，直到整个 <code>Stream</code> 被处理完毕。</p></blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">printStream</span><span class="token punctuation">(</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span></span> stream<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> number <span class="token keyword">in</span> stream<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> stream <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">fromIterable</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printStream</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,40);function o(l,i){return s(),a("div",null,[e(" more "),c])}const r=n(p,[["render",o],["__file","0x01.dart.html.vue"]]);export{r as default};
