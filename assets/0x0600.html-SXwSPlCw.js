import{_ as u}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as i,o as p,c as r,a as d,b as n,e as s,d as a,w as t,f as k}from"./app-p6GIJzBd.js";const m={},h=n("h2",{id:"_0600",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0600","aria-hidden":"true"},"#"),s(" 0600")],-1),_=n("p",null,"// #region 0600",-1),b={href:"https://leetcode.cn/problems/non-negative-integers-without-consecutive-ones",target:"_blank",rel:"noopener noreferrer"},v=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),f=n("p",null,"// #endregion 0600",-1),g=n("h2",{id:"_0633",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0633","aria-hidden":"true"},"#"),s(" 0633")],-1),y=n("p",null,"// #region 0633",-1),w={href:"https://leetcode.cn/problems/sum-of-square-numbers",target:"_blank",rel:"noopener noreferrer"},x=n("blockquote",null,[n("p",null,[s("给定一个非负整数 c ，判断是否存在两个整数 a 和 b，使得 "),n("code",null,"a² + b² = c"),s(" ？")])],-1),j={class:"hint-container details"},A=n("summary",null,"💡",-1),q=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,`
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),N=n("p",null,"// #endregion 0633",-1),T=n("h2",{id:"_0637-✅",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0637-✅","aria-hidden":"true"},"#"),s(" 0637 ✅")],-1),S=n("p",null,"// #region 0637",-1),L={href:"https://leetcode.cn/problems/average-of-levels-in-binary-tree",target:"_blank",rel:"noopener noreferrer"},C=n("pre",null,[n("code",null,`  🌰
      输入：root = [3,9,20,null,null,15,7]
      输出：[3, 14.5, 11]
          3
         / \\
        9  20
           / \\
          15  7 
`)],-1),E={class:"hint-container details"},I=n("summary",null,"💡",-1),O=n("p",null,"【思路】按照层序遍历思路，计算每一层的平均值进行返回",-1),V=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token doc-comment comment"},[s(`/**
 * Definition for a binary tree node.
 * public class TreeNode `),n("span",{class:"token punctuation"},"{"),s(`
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() `),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),s(`
 *     TreeNode(int val) `),n("span",{class:"token punctuation"},"{"),s(" this.val = val; "),n("span",{class:"token punctuation"},"}"),s(`
 *     TreeNode(int val, TreeNode left, TreeNode right) `),n("span",{class:"token punctuation"},"{"),s(`
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     `),n("span",{class:"token punctuation"},"}"),s(`
 * `),n("span",{class:"token punctuation"},"}"),s(`
 */`)]),s(`
`),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Solution"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"List"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"Double"),n("span",{class:"token punctuation"},">")]),s(),n("span",{class:"token function"},"averageOfLevels"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"TreeNode"),s(" root"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token class-name"},"List"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"Double"),n("span",{class:"token punctuation"},">")]),s(" result "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"LinkedList"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("root "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),s(" result"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token class-name"},"List"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"TreeNode"),n("span",{class:"token punctuation"},">")]),s(" queue "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"LinkedList"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        queue`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"while"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("queue"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"isEmpty"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"int"),s(" count "),n("span",{class:"token operator"},"="),s(" queue"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"size"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token keyword"},"int"),s(" levelCount "),n("span",{class:"token operator"},"="),s(" count"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token keyword"},"double"),s(" levelSum "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("count "),n("span",{class:"token operator"},">"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                `),n("span",{class:"token class-name"},"TreeNode"),s(" node "),n("span",{class:"token operator"},"="),s(" queue"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"removeFirst"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                levelSum `),n("span",{class:"token operator"},"+="),s(" node"),n("span",{class:"token punctuation"},"."),s("val"),n("span",{class:"token punctuation"},";"),s(`
                `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token punctuation"},"."),s("left "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(" queue"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token punctuation"},"."),s("left"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token punctuation"},"."),s("right "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(" queue"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token punctuation"},"."),s("right"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                count `),n("span",{class:"token operator"},"-="),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
            result`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),s("levelSum"),n("span",{class:"token operator"},"/"),s("levelCount"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"return"),s(" result"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),P=n("p",null,"// #endregion 0637",-1),B=n("h2",{id:"_0645-✅",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0645-✅","aria-hidden":"true"},"#"),s(" 0645 ✅")],-1),D=n("p",null,"// #region 0645",-1),z={href:"https://leetcode.cn/problems/set-mismatch",target:"_blank",rel:"noopener noreferrer"},F=n("blockquote",null,[n("p",null,"集合 s 包含从 1 到 n 的整数。不幸的是，因为数据错误，导致集合里面某一个数字复制了成了集合里面的另外一个数字的值，导致集合 丢失了一个数字 并且 有一个数字重复 。 给定一个数组 nums 代表了集合 S 发生错误后的结果。 请你找出重复出现的整数，再找到丢失的整数，将它们以数组的形式返回。")],-1),M=n("pre",null,[n("code",null,`  🌰
      输入：nums = [1,2,2,4]
      输出：[2,3]
`)],-1),G={class:"hint-container details"},H=k("<summary>💡</summary><p>【思路1】哈希表，使用哈表进行计数，计数为 2 的为重复的数，计数为 0 的为缺失的数。</p><blockquote><p>时间复杂度: <code>O(n)</code> 空间复杂度: <code>O(n)</code></p></blockquote><p>【思路2】数组模拟哈希，由于数组数据与下标对应关系，根据数据找到对应下标位置，将对应位置标记为负数；标记过程中已经为负数表明是重复的数，最后统计不为负数的下标就是缺失的数。注意：由于遍历数组中取数据时需要使用绝对值，因为该位置数据可能已经被标记。</p><blockquote><p>时间复杂度: <code>O(n)</code> 空间复杂度: <code>O(1)</code></p></blockquote>",5),J=n("div",{class:"language-swift line-numbers-mode","data-ext":"swift"},[n("pre",{class:"language-swift"},[n("code",null,[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Solution"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"func"),s(),n("span",{class:"token function-definition function"},"findErrorNums"),n("span",{class:"token punctuation"},"("),n("span",{class:"token omit keyword"},"_"),s(" nums"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token class-name"},"Int"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"->"),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token class-name"},"Int"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"var"),s(" map "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"Array"),n("span",{class:"token punctuation"},"("),s("repeating"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(" count"),n("span",{class:"token punctuation"},":"),s(" nums"),n("span",{class:"token punctuation"},"."),s("count "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token keyword"},"for"),s(" num "),n("span",{class:"token keyword"},"in"),s(" nums "),n("span",{class:"token punctuation"},"{"),s(`
            map`),n("span",{class:"token punctuation"},"["),s("num"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"+="),s(),n("span",{class:"token number"},"1"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"var"),s(" result "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),s(`
        `),n("span",{class:"token keyword"},"for"),s(" i "),n("span",{class:"token keyword"},"in"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token operator"},"..<"),s("map"),n("span",{class:"token punctuation"},"."),s("count "),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"switch"),s(" map"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"case"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},":"),s(`
                result`),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(` i
            `),n("span",{class:"token keyword"},"case"),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},":"),s(`
                result`),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(` i
            `),n("span",{class:"token keyword"},"default"),n("span",{class:"token punctuation"},":"),s(`
                `),n("span",{class:"token keyword"},"continue"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"return"),s(` result
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),K=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Solution"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"int"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token function"},"findErrorNums"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(" nums"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"int"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(" result "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token keyword"},"int"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" nums"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"int"),s(" num "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"Math"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"abs"),n("span",{class:"token punctuation"},"("),s("nums"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 使用绝对值，获取原始值"),s(`
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("nums"),n("span",{class:"token punctuation"},"["),s("num "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"<"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token comment"},"// 已经小于零，表示该数就是重复数字"),s(`
                result`),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(" num"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
                `),n("span",{class:"token comment"},"// 未小于零，标记为负数"),s(`
                nums`),n("span",{class:"token punctuation"},"["),s("num "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token operator"},"-"),s("nums"),n("span",{class:"token punctuation"},"["),s("num "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token comment"},"// 值还整数的索引位置就是缺失的数"),s(`
        `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" nums"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("nums"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},">"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                result`),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(" i "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
                `),n("span",{class:"token keyword"},"break"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"return"),s(" result"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Q=n("p",null,"// #endregion 0645",-1),R=n("h2",{id:"_0648",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0648","aria-hidden":"true"},"#"),s(" 0648")],-1),U=n("p",null,"// #region 0648",-1),W={href:"https://leetcode.cn/problems/replace-words",target:"_blank",rel:"noopener noreferrer"},X=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Y=n("p",null,"// #endregion 0648",-1),Z=n("h2",{id:"_0651",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0651","aria-hidden":"true"},"#"),s(" 0651")],-1),$=n("p",null,"// #region 0651",-1),nn={href:"https://leetcode.cn/problems/4-keys-keyboard",target:"_blank",rel:"noopener noreferrer"},sn=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),an=n("p",null,"// #endregion 0651",-1),en=n("h2",{id:"_0652",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0652","aria-hidden":"true"},"#"),s(" 0652")],-1),tn=n("p",null,"// #region 0652",-1),on={href:"https://leetcode.cn/problems/find-duplicate-subtrees",target:"_blank",rel:"noopener noreferrer"},ln=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),cn=n("p",null,"// #endregion 0652",-1),un=n("h2",{id:"_0654",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0654","aria-hidden":"true"},"#"),s(" 0654")],-1),pn=n("p",null,"// #region 0654",-1),rn={href:"https://leetcode.cn/problems/maximum-binary-tree",target:"_blank",rel:"noopener noreferrer"},dn=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),kn=n("p",null,"// #endregion 0654",-1),mn=n("h2",{id:"_0659",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0659","aria-hidden":"true"},"#"),s(" 0659")],-1),hn=n("p",null,"// #region 0659",-1),_n={href:"https://leetcode.cn/problems/split-array-into-consecutive-subsequences",target:"_blank",rel:"noopener noreferrer"},bn=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),vn=n("p",null,"// #endregion 0659",-1),fn=n("h2",{id:"_0672",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0672","aria-hidden":"true"},"#"),s(" 0672")],-1),gn=n("p",null,"// #region 0672",-1),yn={href:"https://leetcode.cn/problems/bulb-switcher-ii",target:"_blank",rel:"noopener noreferrer"},wn=n("blockquote",null,[n("p",null,[s("有 n 个灯泡，四个开关。开关1，控制所有灯泡反转(开变为关，关变为开)；开关2，控制所有偶数灯泡反转；开关3，控制所有奇数灯泡反转；开关4，控制 "),n("code",null,"3*i + 1"),s(" 的灯泡反转。给定按压次数，请问一种能按出几种可能开关状态？")])],-1),xn=n("pre",null,[n("code",null,`  🌰
      输入：n = 3, presses = 1
      输出：4
      解释：状态可以是：
      - 按压开关 1 ，[关, 关, 关]
      - 按压开关 2 ，[关, 开, 关]
      - 按压开关 3 ，[开, 关, 开]
      - 按压开关 4 ，[关, 开, 开]
`)],-1),jn={class:"hint-container details"},An=n("summary",null,"💡",-1),qn=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,`
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),Nn=n("p",null,"// #endregion 0672",-1),Tn=n("h2",{id:"_0677",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0677","aria-hidden":"true"},"#"),s(" 0677")],-1),Sn=n("p",null,"// #region 0677",-1),Ln={href:"https://leetcode.cn/problems/map-sum-pairs",target:"_blank",rel:"noopener noreferrer"},Cn=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),En=n("p",null,"// #endregion 0677",-1),In=n("h2",{id:"_0680-✅",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0680-✅","aria-hidden":"true"},"#"),s(" 0680 ✅")],-1),On=n("p",null,"// #region 0680",-1),Vn={href:"https://leetcode.cn/problems/valid-palindrome-ii",target:"_blank",rel:"noopener noreferrer"},Pn=n("blockquote",null,[n("p",null,"给定一个字符串，判断改字符(在最多可以删除一个字符的情况下)是否可以成为回文串。")],-1),Bn=n("pre",null,[n("code",null,`  🌰
      输入：s = "abca"
      输出：true (可以删除字符 'b' 或 'c')
  🌰
      输入：s = "abc"
      输出：false
`)],-1),Dn={class:"hint-container details"},zn=n("summary",null,"💡",-1),Fn=n("p",null,"【思路】左右双指针进行回文串判断，当遇到字符串不匹配的时候，就分别跳过左边一个字符对剩下字符进行回文串匹配，跳过右边一个字符对剩下字符进行回文串匹配，只要其中一种情况匹配成本，就满足条件。",-1),Mn=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Solution"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"boolean"),s(),n("span",{class:"token function"},"validPalindrome"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),s(" s"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"int"),s(" left "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"int"),s(" right "),n("span",{class:"token operator"},"="),s(" s"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"length"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s(" left "),n("span",{class:"token operator"},"<"),s(" right "),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s(" s"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"charAt"),n("span",{class:"token punctuation"},"("),s("left"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"!="),s(" s"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"charAt"),n("span",{class:"token punctuation"},"("),s("right"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                `),n("span",{class:"token comment"},"// 当遇到不匹配时，分别跳过左边字符和右边字符对剩下范围的字符串继续判断是否为回文串"),s(`
                `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token function"},"isPalindrome"),n("span",{class:"token punctuation"},"("),s("s"),n("span",{class:"token punctuation"},","),s(" left"),n("span",{class:"token punctuation"},","),s(" right "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"||"),s(),n("span",{class:"token function"},"isPalindrome"),n("span",{class:"token punctuation"},"("),s("s"),n("span",{class:"token punctuation"},","),s(" left "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(" right"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
            left `),n("span",{class:"token operator"},"+="),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
            right `),n("span",{class:"token operator"},"-="),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token comment"},"// 判断一个字符串在指定左右索引范围字符是否为回文串"),s(`
    `),n("span",{class:"token keyword"},"boolean"),s(),n("span",{class:"token function"},"isPalindrome"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),s(" s"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"int"),s(" left"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"int"),s(" right"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s(" left "),n("span",{class:"token operator"},"<"),s(" right "),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s(" s"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"charAt"),n("span",{class:"token punctuation"},"("),s("left"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"!="),s(" s"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"charAt"),n("span",{class:"token punctuation"},"("),s("right"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
            left `),n("span",{class:"token operator"},"+="),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
            right `),n("span",{class:"token operator"},"-="),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Gn=n("p",null,"// #endregion 0680",-1),Hn=n("h2",{id:"_0694",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0694","aria-hidden":"true"},"#"),s(" 0694")],-1),Jn=n("p",null,"// #region 0694",-1),Kn={href:"https://leetcode.cn/problems/number-of-distinct-islands",target:"_blank",rel:"noopener noreferrer"},Qn=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Rn=n("p",null,"// #endregion 0694",-1),Un=n("h2",{id:"_0695",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0695","aria-hidden":"true"},"#"),s(" 0695")],-1),Wn=n("p",null,"// #region 0695",-1),Xn={href:"https://leetcode.cn/problems/max-area-of-island",target:"_blank",rel:"noopener noreferrer"},Yn=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Zn=n("p",null,"// #endregion 0695",-1),$n=n("h2",{id:"_0698",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0698","aria-hidden":"true"},"#"),s(" 0698")],-1),ns=n("p",null,"// #region 0698",-1),ss={href:"https://leetcode.cn/problems/partition-to-k-equal-sum-subsets",target:"_blank",rel:"noopener noreferrer"},as={class:"hint-container details"},es=n("summary",null,"💡",-1),ts=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,`
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),os=n("p",null,"// #endregion 0698",-1);function ls(cs,is){const e=i("ExternalLinkIcon"),c=i("CodeTabs");return p(),r("div",null,[d(" more "),h,_,n("ul",null,[n("li",null,[n("a",b,[s("🔴 600 - 不含连续1的非负整数"),a(e)])])]),v,f,g,y,n("ul",null,[n("li",null,[n("a",w,[s("🟠 633 - 平方数之和"),a(e)]),x])]),n("details",j,[A,a(c,{id:"38",data:[{id:"java"}]},{title0:t(({value:o,isActive:l})=>[s("java")]),tab0:t(({value:o,isActive:l})=>[q]),_:1})]),N,T,S,n("ul",null,[n("li",null,[n("p",null,[n("a",L,[s("🟢 637 - 二叉树的层平均值"),a(e)])]),C])]),n("details",E,[I,O,a(c,{id:"65",data:[{id:"java"}]},{title0:t(({value:o,isActive:l})=>[s("java")]),tab0:t(({value:o,isActive:l})=>[V]),_:1})]),P,B,D,n("ul",null,[n("li",null,[n("p",null,[n("a",z,[s("🟢 645 - 错误的集合"),a(e)])]),F,M])]),n("details",G,[H,a(c,{id:"110",data:[{id:"swift 解法1"},{id:"java 解法2 💯"}]},{title0:t(({value:o,isActive:l})=>[s("swift 解法1")]),title1:t(({value:o,isActive:l})=>[s("java 解法2 💯")]),tab0:t(({value:o,isActive:l})=>[J]),tab1:t(({value:o,isActive:l})=>[K]),_:1})]),Q,R,U,n("ul",null,[n("li",null,[n("a",W,[s("🟠 648 - 单词替换"),a(e)])])]),X,Y,Z,$,n("ul",null,[n("li",null,[n("a",nn,[s("🟠 651 - 4键键盘"),a(e)])])]),sn,an,en,tn,n("ul",null,[n("li",null,[n("a",on,[s("🟠 652 - 寻找重复的子树"),a(e)])])]),ln,cn,un,pn,n("ul",null,[n("li",null,[n("a",rn,[s("🟠 654 - 最大二叉树"),a(e)])])]),dn,kn,mn,hn,n("ul",null,[n("li",null,[n("a",_n,[s("🟠 659 - 分割数组为连续子序列"),a(e)])])]),bn,vn,fn,gn,n("ul",null,[n("li",null,[n("p",null,[n("a",yn,[s("🟠 672 - 灯泡开关 Ⅱ"),a(e)])]),wn,xn])]),n("details",jn,[An,a(c,{id:"232",data:[{id:"java"}]},{title0:t(({value:o,isActive:l})=>[s("java")]),tab0:t(({value:o,isActive:l})=>[qn]),_:1})]),Nn,Tn,Sn,n("ul",null,[n("li",null,[n("a",Ln,[s("🟠 677 - 键值映射"),a(e)])])]),Cn,En,In,On,n("ul",null,[n("li",null,[n("p",null,[n("a",Vn,[s("🟢 680 - 验证回文串 II"),a(e)])]),Pn,Bn])]),n("details",Dn,[zn,Fn,a(c,{id:"282",data:[{id:"java"}]},{title0:t(({value:o,isActive:l})=>[s("java")]),tab0:t(({value:o,isActive:l})=>[Mn]),_:1})]),Gn,Hn,Jn,n("ul",null,[n("li",null,[n("a",Kn,[s("🟠 694 - 不同岛屿的数量"),a(e)])])]),Qn,Rn,Un,Wn,n("ul",null,[n("li",null,[n("a",Xn,[s("🟠 695 - 岛屿的最大面积"),a(e)])])]),Yn,Zn,$n,ns,n("ul",null,[n("li",null,[n("a",ss,[s("🟠 698 - 划分为k个相等的子集"),a(e)])])]),n("details",as,[es,a(c,{id:"341",data:[{id:"java"}]},{title0:t(({value:o,isActive:l})=>[s("java")]),tab0:t(({value:o,isActive:l})=>[ts]),_:1})]),os])}const rs=u(m,[["render",ls],["__file","0x0600.html.vue"]]);export{rs as default};
