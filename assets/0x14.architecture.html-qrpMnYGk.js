import{_ as u}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as l,o as r,c as k,a as o,b as n,e as s,d as a,w as c,f as p}from"./app-NPdVLJBN.js";const m="/docs/assets/iOS-MVC-ptrridNB.png",v={},h=n("blockquote",null,[n("p",null,"Architecture: 架构设计")],-1),b=n("h2",{id:"reference",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reference","aria-hidden":"true"},"#"),s(" reference")],-1),f=n("h3",{id:"架构方案",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#架构方案","aria-hidden":"true"},"#"),s(" 架构方案")],-1),g={href:"https://github.com/skyming/Trip-to-iOS-Design-Patterns",target:"_blank",rel:"noopener noreferrer"},w={href:"https://mp.weixin.qq.com/s/t_IBkCClPBZFBPmtZT0WsQ",target:"_blank",rel:"noopener noreferrer"},y={href:"https://juejin.cn/post/6844903494013435918",target:"_blank",rel:"noopener noreferrer"},V={href:"https://juejin.cn/post/6844903473897537549",target:"_blank",rel:"noopener noreferrer"},M={href:"https://www.jianshu.com/p/823297d8c386",target:"_blank",rel:"noopener noreferrer"},C={href:"https://docs.microsoft.com/en-us/archive/msdn-magazine/2013/may/mvvm-commands-relaycommands-and-eventtocommand",target:"_blank",rel:"noopener noreferrer"},_=n("a",{href:"%E2%9C%85"},null,-1),q={href:"https://nemocdz.github.io/post/ios-coordinator-%E5%AE%9E%E6%88%98/",target:"_blank",rel:"noopener noreferrer"},S=n("a",{href:""},null,-1),x={href:"https://www.hackingwithswift.com/articles/71/how-to-use-the-coordinator-pattern-in-ios-apps",target:"_blank",rel:"noopener noreferrer"},A=n("a",{href:""},null,-1),O={href:"https://www.hackingwithswift.com/articles/175/advanced-coordinator-pattern-tutorial-ios",target:"_blank",rel:"noopener noreferrer"},P={href:"https://github.com/sergdort/CleanArchitectureRxSwift",target:"_blank",rel:"noopener noreferrer"},I=n("blockquote",null,[n("p",null,"Example of Clean Architecture of iOS app using RxSwift")],-1),U={href:"https://juejin.cn/post/6844904200564916237",target:"_blank",rel:"noopener noreferrer"},j={href:"https://juejin.cn/post/6844903453622288397",target:"_blank",rel:"noopener noreferrer"},T=n("h3",{id:"组件化",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#组件化","aria-hidden":"true"},"#"),s(" 组件化")],-1),E={href:"http://limboy.me/tech/2016/03/10/mgj-components.html",target:"_blank",rel:"noopener noreferrer"},R={href:"https://casatwy.com/iOS-Modulization.html",target:"_blank",rel:"noopener noreferrer"},D={href:"http://limboy.me/tech/2016/03/14/mgj-components-continued.html",target:"_blank",rel:"noopener noreferrer"},N={href:"https://casatwy.com/CTMediator_in_Swift.html",target:"_blank",rel:"noopener noreferrer"},L={href:"https://github.com/ShannonChenCHN/ASwiftTour/tree/master/Presentation/ObjC-Swift%20%E6%B7%B7%E7%BC%96%E5%9C%A8%E6%A8%A1%E5%9D%97%E5%8C%96:%E7%BB%84%E4%BB%B6%E5%8C%96%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%AE%9E%E8%B7%B5",target:"_blank",rel:"noopener noreferrer"},B={href:"https://kingcos.me/posts/2019/libraries_in_ios/",target:"_blank",rel:"noopener noreferrer"},J={href:"https://juejin.cn/post/6844903873023311886",target:"_blank",rel:"noopener noreferrer"},z={href:"https://www.weichao.ren/ios/2019/08/01/cocoapods-binary/",target:"_blank",rel:"noopener noreferrer"},X={href:"https://zuikyo.github.io/2019/07/15/iOS_inrerface_orientation_modularization/",target:"_blank",rel:"noopener noreferrer"},K={href:"https://juejin.cn/post/6844903522291417101",target:"_blank",rel:"noopener noreferrer"},F=n("a",{href:""},"💯",-1),G={href:"https://halfrost.com/ios_router",target:"_blank",rel:"noopener noreferrer"},H={href:"https://tech.meituan.com/2021/02/25/swift-objective-c.html",target:"_blank",rel:"noopener noreferrer"},W={href:"https://developer.jdcloud.com/article/1965",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://mp.weixin.qq.com/s?__biz=MzUxMzk2ODI1NQ==&mid=2247483830&idx=1&sn=a158b07ca3fe6a4ef8ff89d4f5b682aa&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://mp.weixin.qq.com/s/J5YhTk5gyTt7Ie5803PeQg",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://juejin.im/post/5a620cf5f265da3e36415764",target:"_blank",rel:"noopener noreferrer"},$={href:"https://www.valiantcat.cn/index.php/2017/04/24/45.html",target:"_blank",rel:"noopener noreferrer"},nn={href:"https://mp.weixin.qq.com/s?__biz=MzUxMzcxMzE5Ng==&mid=2247488349&idx=1&sn=8e3234789a5de4db24f7a30c126d3894&source=41#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},sn={href:"http://lincode.github.io/Modularity",target:"_blank",rel:"noopener noreferrer"},an={href:"http://gonghonglou.com/2020/05/14/pod-resource/",target:"_blank",rel:"noopener noreferrer"},en={href:"https://dreampiggy.com/2018/11/26/CocoaPods%E7%9A%84%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%92%8CAsset%20Catalog%E4%BC%98%E5%8C%96/",target:"_blank",rel:"noopener noreferrer"},on=p(`<hr><h2 id="设计模式" tabindex="-1"><a class="header-anchor" href="#设计模式" aria-hidden="true">#</a> 设计模式</h2><h3 id="❓ios-中常用设计模式实践有哪些" tabindex="-1"><a class="header-anchor" href="#❓ios-中常用设计模式实践有哪些" aria-hidden="true">#</a> ❓<code>iOS</code> 中常用设计模式实践有哪些</h3><details class="hint-container details"><summary>💡</summary><ul><li><p><code>Delegate</code>: 委托模式</p><blockquote><p>一个简单的行为抽象模式，允许一个对象将某些决策权和行为放在其它对象上。这个模式被广泛应用于 <code>UIKit</code> 中。</p></blockquote></li><li><p><code>Singleton</code>: 单例模式</p><blockquote><p>保证一个类只有一个实例在任何时候都是可访问的，这在 <code>iOS</code> 开发中适用于那些提供全局访问点或重用某个资源的场景，比如 <code>UIApplication</code>，<code>UserDefaults</code> 等。</p></blockquote></li><li><p><code>Observer</code>: 观察者模式</p><blockquote><p>一个对象的状态发生变化时通知所有依赖于它的对象。在 <code>iOS</code> 开发中，这个模式经常以 <code>NotificationCenter</code> 或 <code>KVO</code> (Key-Value Observing) 的形式出现。</p></blockquote></li><li><p><code>Builder</code>: 创建者模式</p><blockquote><p>用于以步骤方式创建复杂对象。它将一个复杂对象的创建步骤封装到一个单一的对象中，这样只需要提供必要的信息，而无需了解内部实现细节。</p></blockquote></li><li><p><code>Prototype</code>: 原型模式</p><blockquote><p>通过复制或克隆已存在的实例来创建新的对象。在 <code>iOS</code> 开发中，这常常用于复制 <code>UIView</code> 子类的实例，比如 <code>UILabel</code>、<code>UIButton</code> 等。</p></blockquote></li><li><p><code>Factory Method</code>: 工厂方法模式</p><blockquote><p>定义了一种创建对象的接口，将对象的实例化推迟到子类。在 <code>iOS</code> 框架中，可以在需要产生一系列相关的对象时，经常会使用这种模式，比如 <code>UIAlertController</code> 的创建。</p></blockquote></li></ul></details><h3 id="❓ios-为什么没有类似于-java-的-builder-的构造模式" tabindex="-1"><a class="header-anchor" href="#❓ios-为什么没有类似于-java-的-builder-的构造模式" aria-hidden="true">#</a> ❓<code>iOS</code> 为什么没有类似于 <code>Java</code> 的 <code>Builder</code> 的构造模式</h3><details class="hint-container details"><summary>💡</summary><p><code>Swift</code> 的某些特性，如 可选类型 和 默认参数，也使得一些 <code>Builder</code> 模式的需要变得不太明显，因为可以创建部分实例变量未赋值的对象，也可以在 <code>init</code> 函数中为一些参数设置默认值。</p><p>简单工厂、抽象工厂或协议都可以在某种程度上实现类似 <code>Builder</code> 模式的效果。</p><p><code>Swift</code> 也可以创建一个 <code>Builder</code> 类来创建和配置对象。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span>
    <span class="token keyword">let</span> age<span class="token punctuation">:</span> <span class="token class-name">Int</span>
    <span class="token comment">//...</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">PersonBuilder</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span>
    <span class="token keyword">var</span> age<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token comment">//...</span>
    
    <span class="token keyword">func</span> <span class="token function-definition function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> name<span class="token punctuation">,</span> age<span class="token punctuation">:</span> age<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="单例模式" tabindex="-1"><a class="header-anchor" href="#单例模式" aria-hidden="true">#</a> 单例模式</h3><h4 id="❓ios-中的的单例实现" tabindex="-1"><a class="header-anchor" href="#❓ios-中的的单例实现" aria-hidden="true">#</a> ❓<code>iOS</code> 中的的单例实现</h4>`,8),cn={class:"hint-container details"},tn=n("summary",null,"💡",-1),ln=n("div",{class:"language-swift line-numbers-mode","data-ext":"swift"},[n("pre",{class:"language-swift"},[n("code",null,[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Singleton"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"let"),s(" shared "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"Singleton"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token keyword"},"init"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token comment"},"// 私有化构造方法，防止其他地方产生实例"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),pn=n("div",{class:"language-objc line-numbers-mode","data-ext":"objc"},[n("pre",{class:"language-objc"},[n("code",null,[n("span",{class:"token operator"},"+"),s(),n("span",{class:"token punctuation"},"("),s("instancetype"),n("span",{class:"token punctuation"},")"),s("sharedInstance "),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"static"),s(" dispatch_once_t onceToken"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"static"),s(" YourClass "),n("span",{class:"token operator"},"*"),s("sharedInstance "),n("span",{class:"token operator"},"="),s(" nil"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"// dispatch_once 确保其内的代码块在整个应用生命周期中只被执行一次"),s(`
    `),n("span",{class:"token function"},"dispatch_once"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),s("onceToken"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"^"),n("span",{class:"token punctuation"},"{"),s(`
        sharedInstance `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"["),s("YourClass alloc"),n("span",{class:"token punctuation"},"]"),s(" init"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    
    `),n("span",{class:"token keyword"},"return"),s(" sharedInstance"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),dn=p(`<h4 id="❓oc-不用-dipatch-once-怎么来写单例" tabindex="-1"><a class="header-anchor" href="#❓oc-不用-dipatch-once-怎么来写单例" aria-hidden="true">#</a> ❓<code>OC</code> 不用 <code>dipatch_once</code> 怎么来写单例</h4><details class="hint-container details"><summary>💡</summary><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>
<span class="token operator">+</span> <span class="token punctuation">(</span>instancetype<span class="token punctuation">)</span>sharedInstance <span class="token punctuation">{</span>
    <span class="token keyword">static</span> YourClass <span class="token operator">*</span>singleton<span class="token punctuation">;</span>
    <span class="token comment">// 使用 @synchronized 替代 dispatch_once</span>
    <span class="token comment">// 在多线程环境中，即使多个线程同时调用，也能保证实例只被创建一次</span>
    <span class="token operator">@</span><span class="token function">synchronized</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>singleton<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            singleton <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>YourClass alloc<span class="token punctuation">]</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h4 id="❓说说单例模式优缺点" tabindex="-1"><a class="header-anchor" href="#❓说说单例模式优缺点" aria-hidden="true">#</a> ❓说说单例模式优缺点</h4><details class="hint-container details"><summary>💡</summary><p>单例模式是一种设计模式，它确保一个类只有一个实例，并提供一个全局的访问点。</p><ul><li><p>优点：</p><ul><li>全局访问点：单例模式提供了一个全局访问点，可以方便地在代码的任何位置访问这个实例。</li><li>资源节省：由于只创建一个实例，所以可以节省比较多的系统资源。</li><li>保证数据同步：全局只有一个访问点且全局只能访问这个实例时，可以确保数据的一致性。</li></ul></li><li><p>缺点：</p><ul><li>不利于系统扩展：由于单例模式对资源的控制过严格，可能在某些情况下阻碍系统的扩展和优化。</li><li>违背单一职责原则：单例模式的类既要负责业务需求，又要负责保证是单一的实例，这违反了单一职责原则。</li><li>测试困难：由于单例模式的实例是全局的，可能会在其他测试时引入不可控的状态，导致测试困难。</li></ul></li></ul></details><h4 id="❓苹果设计的类对象-myclass-class-是不是单例模式" tabindex="-1"><a class="header-anchor" href="#❓苹果设计的类对象-myclass-class-是不是单例模式" aria-hidden="true">#</a> ❓苹果设计的类对象 <code>[MyClass class]</code> 是不是单例模式</h4><details class="hint-container details"><summary>💡</summary><p><code>[MyClass class]</code> 返回的是 <code>MyClass</code> 的类对象，这个类对象在程序运行期间是唯一的，所以可以被看作是单例模式。</p><p>在一个运行中的 <code>Objective-C</code> 程序中，每一个类只有一个类对象。而这个类对象包含了类的元数据，比如实例变量的布局、定义的方法，还有它的父类等等信息。</p><p>注意：这并不是单例模式的典型应用。单例模式的主要用途是确保某个类只有一个实例，用于那些全应用需要统一访问的场景。这些类的例子通常包括配置管理类、网络请求类等。</p><p><code>[MyClass class]</code> 是 <code>Objective-C </code>的内置机制，是为了支持 <code>Objective-C</code> 动态特性特别设计的。所以虽然它是唯一的，但它不是单例模式的应用实例。</p></details><h2 id="项目架构" tabindex="-1"><a class="header-anchor" href="#项目架构" aria-hidden="true">#</a> 项目架构</h2><h3 id="❓从-0-开始做一个项目-你是如何架构思考的" tabindex="-1"><a class="header-anchor" href="#❓从-0-开始做一个项目-你是如何架构思考的" aria-hidden="true">#</a> ❓从 0 开始做一个项目，你是如何架构思考的</h3><details class="hint-container details"><summary>💡</summary><ul><li><p>理解需求</p><blockquote><p>先要完全理解项目的需求，包括用户的需求和技术需求。确认项目的目标，在多少时间内需要完成哪些功能，以及预期的长期目标。</p></blockquote></li><li><p>定义架构</p><blockquote><p>在明确需求的基础上，开始选择或定义项目的架构。可以考虑 <code>MVC、MVVM、MVP、VIPER、RIBs</code> 等。每种架构模式有其优缺点，需要根据项目需求和团队熟悉度进行选择。</p></blockquote></li><li><p>选择技术栈</p><blockquote><p>确定项目的技术栈，如使用 <code>Objective-C</code> 还是 <code>Swift</code> 进行开发、使用 <code>RxSwift</code> 还是 <code>Combine</code> 进行响应式编程、使用哪种第三方库等。</p></blockquote></li><li><p>设计数据流</p><blockquote><p>设计应用的数据流是非常重要的一步，尤其是多人开发的项目。理想的情况下，数据流应该是单向的，可预测的。</p></blockquote></li><li><p>定义目录结构</p><blockquote><p>确定代码的文件和目录结构，使之清晰易读，便于协作。<code>UIViewController、UIView、Model、ViewModel</code> 应该具有明确的目录划分。</p></blockquote></li><li><p>设定编码规范</p><blockquote><p>为团队设定一致的编码规范和最佳实践，如命名规则、缩进样式、注释规则等，以减少代码审查的难度和改进代码质量。</p></blockquote></li><li><p>预留扩展点</p><blockquote><p>预留一些扩展点，使得之后可以容易添加新功能或者改变现有的实现。</p></blockquote></li><li><p>测试计划</p><blockquote><p>为每个模块编写单元测试和集成测试，确保软件的正确性和可靠性。</p></blockquote></li><li><p>自动化和持续集成</p><blockquote><p>搭建自动化测试、持续集成和持续部署流程，使得开发流程更为便捷高效。</p></blockquote></li></ul></details><h3 id="❓在项目进行开发时-如何进行技术选型和技术确定-以及每一步的分工" tabindex="-1"><a class="header-anchor" href="#❓在项目进行开发时-如何进行技术选型和技术确定-以及每一步的分工" aria-hidden="true">#</a> ❓在项目进行开发时，如何进行技术选型和技术确定，以及每一步的分工</h3><details class="hint-container details"><summary>💡</summary><ul><li><p><strong>1. 需求分析：</strong> 初步收集项目需求，明确产品需求和项目目标，结合现有的技术条件（比如开发者团队的技术栈、历史代码库等），制定初步的开发方案。</p></li><li><p><strong>2. 技术选型：</strong> 根据项目需求和开发目标，选择合适的技术体系。这包括开发语言（比如<code>Objective-C</code>、<code>Swift</code> 或者是 <code>React Native</code> 等）、开发环境（比如 <code>Xcode</code> 版本）、第三方库（比如网络库、图片加载库、数据库库等），以及项目管理工具（比如 <code>git</code>、<code>svn</code> 等）。</p></li><li><p><strong>3. 项目架构设计：</strong> 设计项目的架构，比如 <code>MVC</code>、<code>MVVM</code> 或者是 <code>Viper</code> 等，确定项目的模块划分。</p></li><li><p><strong>4. 团队分工：</strong> 根据团队成员的技能和经验，以及项目的需求，确定每个成员的分工，比如哪些人负责哪些模块的开发，哪些人负责代码的审查，哪些人负责测试等。</p></li><li><p><strong>5. 编写技术文档：</strong> 编写技术文档，详细列出项目的技术选型、架构设计和团队分工等信息。</p></li><li><p><strong>6. 代码开发：</strong> 按照既定的方案开始进行代码开发。在开发过程中如果遇到未能预见的技术难题，可能需要重新进行技术选型。</p></li><li><p><strong>7. 项目评审：</strong> 在项目开发过程中定期进行项目评审，以确认项目是否仍然在预定的方向上进行，如果需要修改技术选型或者架构设计，可以在项目评审时进行。</p></li></ul><p>注：以上步骤并不是一次性的，可能会在项目进行过程中反复进行，以适应不断变化的项目需求和技术条件。</p></details><h3 id="资源管理" tabindex="-1"><a class="header-anchor" href="#资源管理" aria-hidden="true">#</a> 资源管理</h3><h4 id="❓ios-是如何进行资源管理的" tabindex="-1"><a class="header-anchor" href="#❓ios-是如何进行资源管理的" aria-hidden="true">#</a> ❓<code>iOS</code> 是如何进行资源管理的</h4><details class="hint-container details"><summary>💡</summary><p>在 <code>iOS</code> 上资源管理的关键是高效地使用和保存内存，以及优化应用的性能。</p><ul><li><p><strong>Assets Catalogs：</strong> 是 <code>iOS</code> 的资源管理工具，允许开发者以结构化的方式存储和访问图像，图标和颜色。它使得对于不同设备和屏幕尺寸的资源管理变得十分简单。</p></li><li><p><strong>数据持久化：</strong> 一些重要的用户数据，如用户设置，登录信息等，需要进行持久化处理。</p><blockquote><p>这些数据可以存储在 <code>UserDefaults</code>，<code>CoreData</code>，数据库，或者磁盘文件中。</p></blockquote></li><li><p><strong>图像和音频数据：</strong> 图像和音频文件通常会占用大量的内存和磁盘空间。对于这些资源，建议进行适当的压缩和优化。</p><blockquote><p>例如，对于大图像，可以使用缩略图以减少内存的使用。</p></blockquote></li><li><p><strong>网络请求和缓存：</strong> 对于获取的网络数据，通常会做一些缓存操作，用于提升应用的响应速度，以及节省用户的流量。</p></li><li><p><strong>磁盘空间管理：</strong> <code>iOS</code> 设备的磁盘空间有限，开发者需要谨慎地管理应用使用的空间。</p><blockquote><p>比如，对于不需要备份的文件，可以把它们存储在.tmp或者.Caches文件夹，这样当空间不足时，系统会自动清理这两个文件夹的内容。</p></blockquote></li><li><p><strong>App Thinning：</strong> 这是一种特殊的资源优化方式，使得用户下载的应用包只包含用到的资源，从而减小了应用的体积。</p></li></ul></details><h3 id="mvc" tabindex="-1"><a class="header-anchor" href="#mvc" aria-hidden="true">#</a> MVC</h3><h4 id="❓mvc、mvp、mvvm、coordinator" tabindex="-1"><a class="header-anchor" href="#❓mvc、mvp、mvvm、coordinator" aria-hidden="true">#</a> ❓<code>MVC</code>、<code>MVP</code>、<code>MVVM</code>、<code>Coordinator</code></h4><details class="hint-container details"><summary>💡</summary><ul><li><p><code>MVC (Model-View-Controller)</code>： 一种将业务逻辑、数据以及界面显示分离的设计模式。</p><ul><li><code>Model</code> (模型) 负责处理数据和业务逻辑。</li><li><code>View</code> (视图) 负责显示数据，即用户界面。</li><li><code>Controller</code> (控制器) 是 Model 和 View 的桥梁，负责更新 View 以及处理用户事件。</li></ul></li><li><p><code>MVP (Model-View-Presenter)</code>： 对 <code>MVC</code> 的一种改进。</p><blockquote><p>在 <code>MVP</code> 中，<code>Presenter</code> 取代了 <code>Controller</code> 的部分职责，<code>View</code> 与 <code>Model</code> 不再直接通信，所有的通信都通过 <code>Presenter</code> 来进行。这样更好的分离了 <code>View</code> 和 <code>Model</code>。</p></blockquote></li><li><p><code>MVVM (Model-View-ViewModel)</code>：一种改良型的 <code>MVP</code> 设计模式。</p><blockquote><p>它引入了 <code>ViewModel</code>，<code>ViewModel</code> 主要负责 <code>View</code> 中的状态以及处理一部分业务逻辑，并且 <code>ViewModel</code> 不包含对 <code>View</code> 的引用，所以在 <code>MVVM</code> 中，<code>View</code>，<code>ViewModel</code> 和 <code>Model</code> 是完全解耦的。</p></blockquote></li><li><p><code>Coordinator</code>：一种行为和导航流程管理的模式。</p><blockquote><p>主要目的是将这些从 <code>MVC</code>、<code>MVP</code> 或 <code>MVVM</code> 中抽离出来，使其职责更加清晰。<code>Coordinator</code> 可以管理应用的导航流程，控制其它 <code>MVC</code>、<code>MVP</code> 或 <code>MVVM</code> 模块，协调这些模块间的工作。</p></blockquote></li></ul></details><h4 id="❓mvc-介绍一下-会有什么问题" tabindex="-1"><a class="header-anchor" href="#❓mvc-介绍一下-会有什么问题" aria-hidden="true">#</a> ❓<code>MVC</code> 介绍一下，会有什么问题</h4><details class="hint-container details"><summary>💡</summary><p><code>MVC</code></p><ul><li>模型（<code>Model</code>）：用于存储和管理应用程序的数据。它在数据库中读取或写入数据，并在需要时更新其状态。模型并不直接与控制器或视图交互。</li><li>视图（<code>View</code>）：用于构建用户界面和展示数据。视图不知道模型的存在，视图并不直接与模型通信。视图只是根据控制器提供的数据生成输出。</li><li>控制器（<code>Controller</code>）：中介者，负责处理模型和视图之间的所有通信。控制器接收来自视图的用户输入，并根据输入指示模型进行更改，然后根据模型的状态更新视图。</li></ul><p>存在的问题：</p><ul><li><p><code>Massive View Controller</code>：<code>ViewController</code> 通常成为大而复杂的类，负责了许多职责，比如网络请求、数据处理、<code>UI</code> 更新等。这常常违反了单一职责原则（<code>Single Responsibility Principle</code>），使得 <code>ViewController</code> 难以维护和测试。</p></li><li><p>视图和模型可能过于依赖控制器：尽管模型和视图之间的通信必须通过控制器进行，但有时候控制器会负担太多的责任，比如在某些场景下，模型和视图之间若能进行直接通信，可能会更加直接和高效。</p></li><li><p>为保持视图和模型的隔离，可能需要追加额外的代码：为了保持视图和模型彼此独立，有时候需要编写额外的代码来更新和同步数据，这可能成为一个负担。</p></li><li><p>测试困难：由于控制器中包含了大量的业务逻辑，因此单元测试可能变得比较困难。</p></li></ul></details><h4 id="❓mvc-相互通讯规则都有哪些" tabindex="-1"><a class="header-anchor" href="#❓mvc-相互通讯规则都有哪些" aria-hidden="true">#</a> ❓<code>MVC</code> 相互通讯规则都有哪些</h4><details class="hint-container details"><summary>💡</summary><figure><img src="`+m+`" alt="iOS-MVC" tabindex="0" loading="lazy"><figcaption>iOS-MVC</figcaption></figure><p>通信方式：</p><ul><li>控制器(<code>Controller</code>)与模型(<code>Model</code>)：控制器可以直接与模型进行通信。 <blockquote><p>例如 <code>XML</code> 或 <code>JSON</code> 解析，数据库 <code>CRUD</code> 操作等，将获取的数据转化为模型，或者将模型持久化为数据。</p></blockquote></li><li>控制器(<code>Controller</code>)与视图(<code>View</code>)：控制器也可以与视图进行直接通信。 <blockquote><p>例如，控制器可以设置视图的显示，处理用户输入，以及更新视图上的数据。</p></blockquote></li><li>视图(<code>View</code>)和模型(<code>Model</code>)：在传统的 <code>MVC</code> 框架中，一般不建议视图和模型直接通信，所有的通信都应该通过控制器来进行。 <blockquote><p>苹果提供的一些 <code>UIKit</code> 组件（比如 <code>UITableView</code> 和 <code>UICollectionView</code>）会由于性能和效率的需要，需要允许视图和模型进行直接交互。这种交互也是在控制器的管理下进行的。</p></blockquote></li></ul><p>为了处理视图和模型的交互，通常会借助于一些设计模式：</p><ul><li><code>Delegate</code>（委托）：例如 <code>UITableView</code> 和 <code>UICollectionView</code> 的 <code>delegate</code> 和 <code>dataSource</code>。</li><li><code>Notification</code>（通知）：使用 <code>NSNotificationCenter</code> 进行对象之间的通信，它允许一个对象广播事件，而其它对象可以选择接收这个事件。</li><li><code>KVO</code>（Key Value Observing）：一个对象可以观察另一个对象的某个属性，当这个属性的值发生改变时，观察者对象会得到通知。</li><li><code>Block</code>（闭包）：一个对象可以把一段代码（即闭包）传递给另一个对象执行。</li></ul></details><h4 id="❓model-会持有-view-吗" tabindex="-1"><a class="header-anchor" href="#❓model-会持有-view-吗" aria-hidden="true">#</a> ❓<code>Model</code> 会持有 <code>View</code> 吗</h4><details class="hint-container details"><summary>💡</summary><p><code>Model</code>（模型）不应该持有 <code>View</code>（视图）。这种分离使得 <code>Model</code> 和 <code>View</code> 可以各自独立地改变和复用，而不需要关心其它组件的实现，使得代码更加清晰，易于理解和维护。</p></details><h4 id="❓如何改进-mvc-的缺点" tabindex="-1"><a class="header-anchor" href="#❓如何改进-mvc-的缺点" aria-hidden="true">#</a> ❓如何改进 <code>MVC</code> 的缺点</h4><details class="hint-container details"><summary>💡</summary><blockquote><p><code>MVC</code>(<code>Model-View-Controller</code>)模式是软件工程中的一种设计模式，常被用于构建用户接口。然而， <code>MVC</code> 模式也存在一些问题，特别是在大型应用程序中，<code>Controller</code> 可能会变得过于复杂，因此难以维护和扩展。</p></blockquote><ul><li><p>使用模块化开发：你可以将应用程序划分为多个模块，每个模块都有自己的 <code>MVC</code>。这样，每个控制器的复杂性都可以被限制在一个相对小的范围内，从而提高可维护性。</p></li><li><p>引入服务层：在模型与控制器之间添加一个服务层(<code>Service Layer</code>)。通过在服务层封装业务逻辑，控制器就只需处理用户输入与视图之间的交互，而不需直接处理业务逻辑。这样可以减少控制器的职责，降低其复杂度。</p></li><li><p>采用其他设计模式：例如 <code>MVP</code>(<code>Model-View-Presenter</code>) 或 <code>MVVM</code>(<code>Model-View-ViewModel</code>)。这两种模式都是 <code>MVC</code> 模式的演化，通过将界面逻辑从控制器中抽离，可以进一步简化控制器的职责。</p></li><li><p>使用事件驱动：引入事件驱动可以帮助降低控制器中的业务逻辑复杂度。通过监听模型的变化并触发相应的视图更新，控制器将更关注于协调模型和视图之间的交互，而不是处理具体的业务逻辑。</p></li><li><p>持续重构：对项目进行定期的重构，对代码进行抽象化，合理划分职责，使得代码结构更加清晰，有助于改进MVC的缺点。</p></li></ul></details><blockquote><p>❓如果需要引入 <code>MVVM</code> 改进，那为什么不在 <code>MVC</code> 中让 <code>Model</code> 引用 <code>View</code>，或者 <code>View</code> 引用 <code>Model</code> 从而进行优化</p></blockquote><details class="hint-container details"><summary>💡</summary><ul><li><p>会破坏 <code>MVC</code> 模式的设计原则，即模型-视图-控制器的职责分离。在 <code>MVC</code> 中，<code>Model</code> 负责管理数据、业务逻辑和状态，<code>View</code> 负责显示 <code>Model</code> 的状态，而 <code>Controller</code> 则起到 <code>Model</code> 和 <code>View</code> 之间的协调和交互的作用。</p><blockquote><p>如果让 <code>Model</code> 直接引用 <code>View</code> 或者 <code>View</code> 直接引用 <code>Model</code>，那么就破坏了这种职责分离的设计。<code>Model</code> 和 <code>View</code> 都不应该知道对方的存在，否则会导致它们之间产生耦合，降低代码的可读性和可维护性。</p></blockquote></li><li><p>会增加 <code>Model</code> 或 <code>View</code> 的复杂性。如果 <code>Model</code> 引用了 <code>View</code>，那么就需要在 <code>Model</code> 中处理一些视图更新的逻辑，同样，如果 <code>View</code> 引用了 <code>Model</code>，那么也需要在 <code>View</code> 中处理一些数据获取和处理的逻辑。这样无疑会增加 <code>Model</code> 和 <code>View</code> 的复杂性，并举高它们的职责，使得代码更难维护。</p></li><li><p>违反了“单一责任原则”。<code>Model</code> 应当只关心数据和业务逻辑，而 <code>View</code> 只应关心如何展示数据。如果让 <code>Model</code> 引用 <code>View</code> 或者 <code>View</code> 引用 <code>Model</code>，就意味着它们需要关心超出本职工作范围外的事情，违反了“单一责任原则”。</p></li></ul></details><h3 id="mvvm" tabindex="-1"><a class="header-anchor" href="#mvvm" aria-hidden="true">#</a> MVVM</h3><h4 id="❓mvvm-和-mvc-的各自使用场景" tabindex="-1"><a class="header-anchor" href="#❓mvvm-和-mvc-的各自使用场景" aria-hidden="true">#</a> ❓<code>MVVM</code> 和 <code>MVC</code> 的各自使用场景</h4><details class="hint-container details"><summary>💡</summary><blockquote><p><code>MVC</code>（Model-View-Controller）和<code>MVVM</code>（Model-View-ViewModel）是两种常用的架构模式。在选择架构模式时，主要取决于项目的复杂性、开发时间、团队熟悉程度等因素。</p></blockquote><ul><li><p><code>MVC</code> 使用场景：</p><ul><li>快速开发小型项目：<code>MVC</code> 强调快速开发，节省时间和成本，对于小型项目，采用 <code>MVC</code> 模式能够很快的完成开发和上线。</li><li>多人协作开发：由于 <code>MVC</code> 的模型、视图、控制器三者之间的职责清晰明确，适合多人同时开发，提高团队的协作效率。</li><li>个人或小团队开发：<code>MVC</code> 模式相对简单，易于理解和实践，适合个人或者技术基础薄弱的团队使用。</li><li><code>iOS</code> 常规开发：苹果自家的 <code>Cocoa</code> 和 <code>Cocoa Touch</code> 框架也是基于 <code>MVC</code> 模式设计的，对于 <code>iOS</code> 开发而言，与系统框架紧密结合，减少开发难度。</li></ul></li><li><p><code>MVVM</code> 使用场景：</p><ul><li>开发复杂、交互频繁的项目：<code>MVVM</code> 模式更关注业务逻辑的处理，减少控制器的业务厚度。对于复杂、交互频繁的项目来说，<code>MVVM</code> 模式更加合适，比如电商、社交等类型的项目。</li><li>追求高内聚低耦合设计：<code>MVVM</code> 模式提高代码的可复用性和可维护性，使各个模块之间耦合度降低，有利于代码的优化和重构。</li><li>测试驱动开发：<code>MVVM</code> 模式更适合进行单元测试，可以很方便地对 <code>ViewModel</code> 进行测试，确保程序的稳定性。</li></ul></li></ul></details><h4 id="❓mvvm-如何实现绑定" tabindex="-1"><a class="header-anchor" href="#❓mvvm-如何实现绑定" aria-hidden="true">#</a> ❓<code>MVVM</code> 如何实现绑定</h4><details class="hint-container details"><summary>💡</summary><ul><li><p><code>KVO</code>(Key-Value Observing)：可以使用 <code>KVO</code> 来观察 <code>ViewModel</code> 中属性的变化，当属性变化时，更新对应的 <code>UI</code>。</p></li><li><p><code>Delegate</code>：通过定义协议和代理，<code>ViewModel</code> 可以把状态变化通知给 <code>View</code>。</p></li><li><p>通知和事件：当 <code>ViewModel</code> 的状态改变时，它可以发送一个通知或者触发一个事件，<code>View</code> 可以监听这些通知或事件，然后作出响应。</p></li><li><p><code>Reactive Programming</code>：比如使用 <code>ReactiveCocoa</code>(在 <code>Objective-C</code> 中)或者 <code>RxSwift</code> (在 <code>Swift</code> 中)，这些库提供了一种响应式编程的方式，可以方便的创建数据流并响应值的变化。</p></li><li><p><code>Data Binding</code> 框架：在一些平台上，如 <code>Windows</code> 或 <code>Android</code>，框架层提供了数据绑定的支持。只需要在布局文件中声明绑定关系，框架会自动在 <code>ViewModel</code> 和 <code>View</code> 之间同步数据。</p></li></ul></details><h4 id="❓rac-信号的理解" tabindex="-1"><a class="header-anchor" href="#❓rac-信号的理解" aria-hidden="true">#</a> ❓<code>RAC</code> 信号的理解</h4><details class="hint-container details"><summary>💡</summary><blockquote><p><code>RAC</code> （<code>ReactiveCocoa</code>） 是一个用于 <code>iOS/OSX</code> 平台上的函数响应式编程（<code>FRP</code>）框架，基于 <code>Cocoa</code> 和 <code>Objective-C</code> 设计。</p></blockquote><p>在 <code>RAC</code> 中，最核心的部分是信号（<code>Signal</code>）。信号可以看作值随时间变化的抽象，你可以在信号中发送值，也可以处理值。</p><p><code>RAC</code> 的信号通常包含三种事件类型：</p><ul><li><p><code>Next</code>：信号中有新的数据可用。比如订阅了一个网路请求的信号，当请求返回数据后，会触发一个 <code>Next</code> 事件。处理这个事件，即可以获取并使用这个新的数据。</p></li><li><p><code>Error</code>：信号在处理过程中发生错误。比如网络请求失败，那么就会触发一个 <code>Error</code> 事件。可以在处理这个事件时，做一些错误处理操作，比如弹出一个错误提示。</p></li><li><p><code>Completed</code>：信号完成了所有的事件发送。比如网络请求成功，并且已处理完返回的所有数据，那么就会触发一个 <code>Completed</code> 事件。这个事件通常用来做一些清理和收尾的工作。</p></li></ul></details><h3 id="单向数据流" tabindex="-1"><a class="header-anchor" href="#单向数据流" aria-hidden="true">#</a> 单向数据流</h3><h4 id="❓redux-vs-reswift-vs-rxfeedback" tabindex="-1"><a class="header-anchor" href="#❓redux-vs-reswift-vs-rxfeedback" aria-hidden="true">#</a> ❓<code>Redux</code> vs <code>ReSwift</code> vs <code>RxFeedback</code></h4><details class="hint-container details"><summary>💡</summary><blockquote><p>单向数据流：数据在应用中流动的方式，其中数据只能按照预定的路径流动，不会出现数据流混乱的情况。经常会被用于解决状态管理的问题，它能够让数据流的走向变得更清晰，有利于调试和维护。</p></blockquote><ul><li><p><code>Redux</code> : <code>JavaScript</code> 环境下的一个状态管理库，所有的状态更新都遵循单向数据流，流程为：<code>Action</code> -&gt; <code>Reducer</code> -&gt; <code>Store</code> -&gt; <code>View</code> -&gt; <code>Action</code>。</p></li><li><p><code>ReSwift</code> : <code>Redux</code> 在 <code>Swift</code> 环境中的移植版本，其处理流程同样是单向的：<code>Action</code> -&gt; <code>Reducer</code> -&gt; <code>Store</code> -&gt; <code>View</code> -&gt; <code>Action</code>。</p></li><li><p><code>RxFeedback</code> : 基于 <code>RxSwift</code> 的一个无状态框架，它使用系统循环（<code>System Loop</code>）的概念来描述单向数据流，处理流程为：<code>System</code> -&gt; <code>Mutation</code> -&gt; <code>State</code> -&gt; <code>View</code> -&gt; <code>Event</code> -&gt; <code>System</code>。</p></li></ul></details><hr><h2 id="组件化-1" tabindex="-1"><a class="header-anchor" href="#组件化-1" aria-hidden="true">#</a> 组件化</h2><h3 id="❓组件化设计思路" tabindex="-1"><a class="header-anchor" href="#❓组件化设计思路" aria-hidden="true">#</a> ❓组件化设计思路</h3><details class="hint-container details"><summary>💡</summary><blockquote><p>组件化：有时也称为“模块化”。将一个大的业务功能，按照不同的功能模块进行拆分。</p></blockquote><p>拆分原则：类似 <code>SOLID</code> 原则。</p><ul><li>单一职责原则 : 拆分的功能模块应该尽量做到功能单一。</li><li>接口隔离原则 : 功能模块尽量做到对外暴露接口的最小化。</li></ul><p>分层原则：借用经典四象限法则来划分(以 <strong>业务相关</strong>、<strong>UI 相关</strong> 作为两个轴线，来进行组件化分层)</p><ul><li>业务功能层 : 业务有关 &amp; <code>UI</code> 有关。用户看到的主要功能页面。</li><li>业务逻辑层 : 业务有关 &amp; <code>UI</code> 无关。在用户使用业务功能时，背后的处理逻辑。</li><li><code>UI</code> 层 : 业务无关 &amp; <code>UI</code> 有关。通用的 <code>UI</code> 页面，不关联具体的业务逻辑。</li><li>基础层 : 业务无关 &amp; <code>UI</code> 无关。通用的基础功能。</li></ul><p>单向依赖原则：组件之间的依赖关系，应该做到上层依赖下层，下层不要依赖上层。</p></details><h3 id="❓组件之间如何解耦" tabindex="-1"><a class="header-anchor" href="#❓组件之间如何解耦" aria-hidden="true">#</a> ❓组件之间如何解耦</h3><details class="hint-container details"><summary>💡</summary><p>良好的代码设计应该尽可能地减少各部分间的耦合性，以便在修改或增加新功能时增强代码的灵活性。解耦的目的是使系统各部分模块化，使之能够更加独立地开发、修改、替换、测试和复用。</p><p>解耦方案：</p><ul><li><p>采用面向接口编程，而不是面向实现编程。模块之间只通过接口进行交互，只依赖接口，而不依赖具体的实现类，这样就可以降低耦合性。</p></li><li><p>使用依赖注入。不在模块内部创建所依赖的对象，而是通过外部方式注入。这样就避免了模块和依赖对象之间的紧密耦合关系。</p></li><li><p>如果组件需要交互，可以使用消息总线或者事件驱动的方式进行解耦。例如，利用 <code>Observer</code> 模式或者 <code>Event Bus</code>，让订阅者和发布者解耦。</p></li><li><p>利用中间层或者 <code>Facade</code> (外观)模式提供统一的接口。极端情况下，如果解耦困难，也可以设置一个“胶水”模块专门负责协调。</p></li><li><p>减少全局变量的使用，全局变量会让各个模块产生耦合。</p></li><li><p>利用设计模式和原则，如单一职责原则，开闭原则，里氏替换原则等，以减少不必要的耦合。</p></li><li><p><code>MVC</code>、<code>MVVM</code> 等设计模式，分离视图和数据，减少它们之间的直接关系。</p></li><li><p>模块职责尽可能单一，只做好自己的事情，不涉及到其它模块的业务。</p></li><li><p>代码审查，定期进行代码审查，避免不合理的设计和实现。</p></li></ul></details><h3 id="❓下层组件需要调用上层组件怎样处理" tabindex="-1"><a class="header-anchor" href="#❓下层组件需要调用上层组件怎样处理" aria-hidden="true">#</a> ❓下层组件需要调用上层组件怎样处理</h3><details class="hint-container details"><summary>💡</summary><p>方案一：依赖注入方式。下层组件定义好钩子函数，注册时，将上层组件注入下层组件定义好的钩子函数。</p><p>方案二：间接访问。通过底层的路由组件，将上层组件注册到路由表中，这样下层组件就可以通过路由间接访问到上层组件。</p></details><h3 id="❓假如-a-业务模块和-b-业务模块都要引用同一张图片-怎么处理的" tabindex="-1"><a class="header-anchor" href="#❓假如-a-业务模块和-b-业务模块都要引用同一张图片-怎么处理的" aria-hidden="true">#</a> ❓假如 A 业务模块和 B 业务模块都要引用同一张图片，怎么处理的</h3><details class="hint-container details"><summary>💡</summary><ul><li><p><strong>共享资源库</strong>：可以创建一个专门的资源库（比如叫 <code>CommonResource</code>），把这种多个模块都需要引用的图片等资源都放在这个库中。这样任何一个模块需要用到这张图片，都可以引用这个库，这样就避免了资源重复的问题。</p></li><li><p><strong>公共基础模块</strong>：在业务模块之下，可以设计一个包含公共资源（包括图片资源、基础类库、工具类等）的基础模块。A、B模块等业务模块可根据需要引用这个基础模块中的资源或者代码。</p></li><li><p><strong>动态加载</strong>：把图片资源存放在网络服务器上，通过 <code>URL</code> 来动态加载图片。这样 A 业务模块和 B 业务模块只需要保存同样的 <code>URL</code>，图片并不需要保存在本地。这种做法的优点是节省了存储空间，缺点是可能会增加网络请求，对网络质量有一定的要求。</p></li><li><p><strong>Asset Catalogs</strong>：对于 <code>Xcode</code> 项目中的资源，可以使用 <code>Asset Catalogs</code> 来管理。在 <code>Asset Catalogs</code> 中，可以创建 <code>Image.xcassets</code> 来存储不同的图片版本（比如<code>@1x, @2x, @3x</code>），然后通过图片的名字来访问，这样就可以避免资源冲突的问题。</p></li></ul></details><h3 id="❓url-router-和-target-action-这两个方案的优缺点" tabindex="-1"><a class="header-anchor" href="#❓url-router-和-target-action-这两个方案的优缺点" aria-hidden="true">#</a> ❓<code>url-router</code> 和 <code>target-action</code> 这两个方案的优缺点</h3><details class="hint-container details"><summary>💡</summary><p><code>url-router</code>和<code>target-action</code>是两种常用的模块化通信方案。都可以用于解耦合，降低模块之间的依赖。</p><blockquote><p><code>url-router</code>:</p></blockquote><ul><li><p>优点:</p><ul><li>使用简单直观，类似于 <code>Web</code> 中的 <code>url</code> 跳转，易于理解。</li><li>可以进行跨模块，甚至跨应用之间的通信交互，有更好的通用性。</li><li>可以通过 <code>url</code> 来带参数，非常灵活。</li><li>能方便地接入或兼容 <code>H5</code> 页面的链接跳转。</li></ul></li><li><p>缺点:</p><ul><li>路由丢失,跳转失败等问题需有好的异常处理机制。</li><li>参数只能以字符串的形式传递，可能在一些复杂的场景不够用，需要进行类型转换。</li><li>需要维护一份路由表，不易管理。</li></ul></li></ul><blockquote><p><code>target-action</code>:</p></blockquote><ul><li><p>优点:</p><ul><li>简洁明了，符合 <code>iOS</code> 开发风格。</li><li>可以传递任何类型的参数，更有利于开发复杂场景。</li><li>无需配置路由表，维护较为轻松。</li></ul></li><li><p>缺点:</p><ul><li>只支持本应用内的模块通信，无法跨应用。</li><li>不够直观，错误信息难以定位，比如 <code>target</code> 或 <code>action</code> 不存在时，可能需要调试才能找到错误所在。</li></ul></li></ul></details><h3 id="ctmediator" tabindex="-1"><a class="header-anchor" href="#ctmediator" aria-hidden="true">#</a> CTMediator</h3><h4 id="❓ctmediator-vs-mgjrouter" tabindex="-1"><a class="header-anchor" href="#❓ctmediator-vs-mgjrouter" aria-hidden="true">#</a> ❓<code>CTMediator</code> vs <code>MGJRouter</code></h4><details class="hint-container details"><summary>💡</summary><blockquote><p><code>CTMediator</code></p></blockquote><ul><li><p>优点：</p><ul><li>采用 <code>Target-Action</code> 模式进行解耦，使各个组件之间无需直接引用，只需要知道 <code>Target</code> 和 <code>Action</code> 即可。</li><li>采用 <code>runtime</code> 动态调用，开发者可以根据需要自由添加新的 <code>Target</code> 和 <code>Action</code>。</li><li>提供了一种非常灵活的方式进行组件之间的数据传递和调用。</li></ul></li><li><p>缺点：</p><ul><li>所有的 <code>Target</code> 和 <code>Action</code> 都需要通过字符串来调用，字符串的管理和维护工作量较大，且编译器无法给出错误提示。</li><li>不存在一个统一的 <code>URL</code> 规则，不利于通过 <code>URL</code> 进行页面跳转。需要额外实现一套映射规则。</li></ul></li></ul><blockquote><p><code>MGJRouter</code></p></blockquote><ul><li><p>优点：</p><ul><li>采用 <code>URL-Handler</code> 的方式进行组件解耦，可以通过注册 <code>URL</code> 的方式来实现页面的跳转和数据传递。</li><li>支持了 <code>URL Scheme</code>，方便 <code>App</code> 之间调用或者完成一些特定功能。</li><li>接口设计更加合理，调用起来也十分方便，路由器跳转页面也比较方便。</li></ul></li><li><p>缺点：</p><ul><li>对于复杂页面的传值比较麻烦，只能通过 <code>URL</code> 参数进行简单的传值，不能直接传递复杂对象。</li><li>动态性较差，只能在编译时确定 <code>URL</code> 路由关系。</li></ul></li></ul></details><h4 id="❓为什么-ctmediator-方案优于其它路由的方案" tabindex="-1"><a class="header-anchor" href="#❓为什么-ctmediator-方案优于其它路由的方案" aria-hidden="true">#</a> ❓为什么 <code>CTMediator</code> 方案优于其它路由的方案</h4><details class="hint-container details"><summary>💡</summary><ul><li><p>易于解耦：采用了 <code>Target-Action</code> 模式，为组件之间提供了通信接口，各组件之间不需要互相引用，只需要知道对方的 <code>Target</code> 和 <code>Action</code>，这种模式有利于提高代码的维护性和可读性。</p></li><li><p>灵活性：通过 <code>runtime</code> 实现动态调用，能方便地添加新的功能和服务。</p></li><li><p>组件化支持：设计原则是 “依赖请求而非依赖接口”，通过中间人角色提供通信通道，尽可能减少模块间的耦合性，使得各个模块都可以独立开发和更新。</p></li><li><p>本地和远程一致性：对于本地组件和远程服务，采用了统一的接口进行调用，使得开发者不需要关心调用的具体实现，提高了开发效率。</p></li><li><p>参数传递方便：允许开发者灵活地传递各种类型的参数而无需进行类型转化。</p></li></ul></details><h4 id="❓基于-ctmediator-的组件化方案-有哪些核心组成" tabindex="-1"><a class="header-anchor" href="#❓基于-ctmediator-的组件化方案-有哪些核心组成" aria-hidden="true">#</a> ❓基于 <code>CTMediator</code> 的组件化方案，有哪些核心组成</h4><details class="hint-container details"><summary>💡</summary><ul><li><p><code>CTMediator</code>：作为中介者在各个模块或组件之间进行通信。主要的方式是根据提供的 <code>Target</code> 字符串获得目标对象，然后根据 <code>Action</code> 字符串获得目标对象的方法，最后调用该方法来完成各个模块或组件之间的交互。</p></li><li><p><code>Target</code>：继承自 <code>NSObject</code> 的类，用于处理需要执行的具体业务逻辑。一般来说，每个模块或组件都会有一个对应的 <code>Target</code> 类。</p></li><li><p><code>Action</code>：<code>Target</code> 类中的方法，负责执行具体的操作。每个操作都会对应一个 <code>Action</code>。</p></li><li><p><code>Category</code>：<code>CTMediator</code> 的分类，用于提供一个更便于调用的接口。一般来说，每一个模块或组件都会有一个对应的 <code>Category</code>，这个 <code>Category</code> 会提供一些方法，通过这些方法可以更方便地调用该模块或组件所对应的 <code>Target-Action</code>。</p></li><li><p><code>URLRouter</code>：提供了一个 <code>URL</code> 到 <code>Target-Action</code> 的映射，使得通过 <code>URL</code> 能够方便地调用 <code>Target-Action</code>。主要用于处理外部调用、跳转等情况。</p></li><li><p><code>Params</code>: 传递给 <code>Target</code> 的一组参数，比如用户数据或者其他项目级别的一些配置信息等。</p></li></ul></details><h3 id="cocoapods" tabindex="-1"><a class="header-anchor" href="#cocoapods" aria-hidden="true">#</a> Cocoapods</h3><h4 id="❓pod-对应的产物是什么" tabindex="-1"><a class="header-anchor" href="#❓pod-对应的产物是什么" aria-hidden="true">#</a> ❓<code>pod</code> 对应的产物是什么</h4><details class="hint-container details"><summary>💡</summary><blockquote><p><code>CocoaPods</code> 是一个用于管理 <code>iOS</code> 和 <code>macOS</code> 应用中的依赖库的工具。</p></blockquote><p>主要产物：</p><ul><li><p>项目的 <code>Podfile.lock </code>文件：这个文件记录了项目的所有 <code>Pod</code> 依赖以及它们的版本信息。它确保了不同开发者在同一个项目中使用同样版本的依赖库，保持了库版本的一致性。</p></li><li><p><code>Pods</code> 文件夹：所有的 <code>Pod</code> 依赖库的源代码都会被保存在这个文件夹中。包括在 <code>Podfile</code> 中直接声明的依赖以及它们的子依赖。</p></li><li><p><code>.xcworkspace</code> 文件：<code>Pod</code> 会生成一个 <code>.xcworkspace</code> 文件，可以通过打开这个文件来使用 <code>Xcode</code> 访问项目以及所有的 <code>Pod</code> 依赖。</p></li><li><p><code>libXXX.a</code> 或者 <code>XXX.framework</code> 文件：这是 <code>Pod</code> 依赖库编译后的产物，它包含了库中所有的编译代码。这个文件会被链接到应用中，可以在应用中调用库中的函数或者类。</p></li></ul></details><h4 id="❓pod-update和-pod-install-的区别" tabindex="-1"><a class="header-anchor" href="#❓pod-update和-pod-install-的区别" aria-hidden="true">#</a> ❓<code>pod update</code>和 <code>pod install</code> 的区别</h4><details class="hint-container details"><summary>💡</summary><blockquote><p><code>pod install</code> 和 <code>pod update</code> 都是 <code>CocoaPods</code> 的命令，它们的区别主要体现在处理 <code>Podfile.lock</code> 文件的方式上。</p></blockquote><ul><li><p><code>pod install</code>: 这个命令主要用于首次安装 <code>Podfile</code> 定义的依赖库，或者是在 <code>Podfile.lock</code> 文件存在的情况下，根据 <code>Podfile.lock</code> 文件中的定版本安装依赖库。</p><blockquote><p>如果对 <code>Podfile</code> 文件做了修改，例如增加了一个新库，然后执行 <code>pod install</code> 命令，那么 <code>CocoaPods</code> 只会安装那个新增的库，已经存在并且版本号没有改变的库不会重新安装。</p></blockquote></li><li><p><code>pod update</code>: 这个命令用来更新 <code>Podfile</code> 中定义的库。</p><blockquote><p>假设 <code>Podfile</code> 中有一些库没有指定版本，那么 <code>pod update</code> 就会获取这些库的最新版本。如果指定了版本号或者版本范围，则 <code>CocoaPods</code> 会在该范围内获取最新的版本。执行完 <code>pod update</code> 后，<code>CocoaPods</code> 会更新 <code>Podfile.lock</code>文件为每个安装的库指定新版本。</p></blockquote></li></ul></details><h4 id="❓pod-install-的内部怎么实现的" tabindex="-1"><a class="header-anchor" href="#❓pod-install-的内部怎么实现的" aria-hidden="true">#</a> ❓<code>pod install</code> 的内部怎么实现的</h4><details class="hint-container details"><summary>💡</summary><ul><li><p><strong>解析Podfile</strong>: 解析 <code>Podfile</code> 文件，获取里面定义的各种依赖库及版本信息。</p></li><li><p><strong>分析锁文件</strong>: 检查是否存在 <code>Podfile.lock</code> 文件，如果有的话，它会解析这个文件获取已经安装过的库和对应版本。接着会比较 <code>Podfile</code> 和 <code>Podfile.lock</code> 对应的库，看有无增加或者减少库的情况。</p></li><li><p><strong>获取依赖库</strong>: 获取 <code>Podfile</code> 中新增的库，它会从本地或者远程 <code>Spec Repo</code> 中查找对应的 <code>podspec</code> 文件，根据 <code>podspec</code> 文件中的配置信息，下载实际的库文件。如果之前已经安装过，那么就会直接跳过。</p></li><li><p><strong>解析依赖库</strong>: 解析每个库的依赖关系，并处理库和库之间的依赖关系，确保所有依赖库都已经下载完毕。</p></li><li><p><strong>生成Targets</strong>: 获取到的每个库生成一个 <code>Pod target</code>，同时会生成对应的 <code>.xcconfig</code> 文件，以及名为 <code>Pods</code> 的 <code>Xcode</code> 工程文件。</p></li><li><p><strong>生成Pods工程</strong>: 每个 <code>Pod target</code> 都会被链接到 <code>Pods</code> 项目中，同时在 <code>Pods</code> 项目中还会生成一个名为 <code>Pods</code> 的 <code>target</code>，这个 <code>target</code> 会链接上所有的 <code>Pod target</code>。</p></li><li><p><strong>生成Podfile.lock文件和Manifest.lock文件</strong>: 所有库都安装好并完成了配置后，<code>CocoaPods</code> 会生成新的 <code>Podfile.lock</code> 和 <code>Manifest.lock</code> 文件，它会在里面记录当前所有库的版本信息。</p></li><li><p><strong>集成到用户项目</strong>: 最后会把生成的 <code>Pods</code> 项目集成到用户的项目中，做好必要的配置，让用户的项目可以使用这些库。</p></li></ul></details><hr><h2 id="模块设计" tabindex="-1"><a class="header-anchor" href="#模块设计" aria-hidden="true">#</a> 模块设计</h2><h3 id="缓存方案" tabindex="-1"><a class="header-anchor" href="#缓存方案" aria-hidden="true">#</a> 缓存方案</h3><h4 id="❓内存缓存策略有哪些-nscache-使用什么缓存策略" tabindex="-1"><a class="header-anchor" href="#❓内存缓存策略有哪些-nscache-使用什么缓存策略" aria-hidden="true">#</a> ❓内存缓存策略有哪些，<code>NSCache</code> 使用什么缓存策略</h4><details class="hint-container details"><summary>💡</summary><p>缓存策略</p><ul><li><p><code>LRU</code> (Least Recently Used) 最近最少使用：缓存满时，淘汰最久没被使用的数据。</p></li><li><p><code>FIFO</code> (First In First Out) 先进先出：缓存满时，淘汰最早进入缓存的数据。</p></li><li><p><code>LFU</code> (Least Frequently Used) 最不经常使用：缓存满时，淘汰使用频率最少的数据。</p></li><li><p><code>RR</code> (Random Replacement) 随机替换：缓存满时，随机淘汰一个数据。</p></li></ul><p><code>NSCache</code> 缓存策略采用的是 <code>LRU</code>。<code>NSCache</code>是一个容量限制的集合，用来存储键值对，并且当内存紧张的时候自动回收。</p><p><code>NSCache</code> 特点：</p><ul><li>线程安全的，在多线程环境下，不必加锁就可以使用它。</li><li>自动根据系统内存情况来缩减缓存，当系统内存紧张时，系统会自动移除部分缓存数据，以释放内存。</li><li>设置 <code>totalCostLimit</code> 参数来标识缓存的成本，比如可以代表体积，消耗的内存，IO，通常的使用场景是图片的缓存。</li><li>存储的数据都是强引用，但是不会造成循环引用。即当缓存某个对象后，程序会保留此对象，并且不会将此对象释放。</li></ul></details><h4 id="❓设计实现一个数据缓存模块" tabindex="-1"><a class="header-anchor" href="#❓设计实现一个数据缓存模块" aria-hidden="true">#</a> ❓设计实现一个数据缓存模块</h4><details class="hint-container details"><summary>💡</summary><p>设计思路：</p><ul><li><p>定义一个缓存键-值对的数据结构：可以使用集合，且必须可以根据键轻松查找到值。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">var</span> cache<span class="token punctuation">:</span> <span class="token class-name">NSCache</span><span class="token operator">&lt;</span><span class="token class-name">NSString</span><span class="token punctuation">,</span> <span class="token class-name">AnyObject</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token class-name">NSCache</span><span class="token operator">&lt;</span><span class="token class-name">NSString</span><span class="token punctuation">,</span> <span class="token class-name">AnyObject</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>定义一个方法来添加数据到缓存：这个方法应接受一个键和一个值，并把值关联到键。然后，把这个键-值对添加到缓存。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> <span class="token class-name">NSString</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token class-name">AnyObject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cache<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> key<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>定义一个方法从缓存获取数据：这个方法应接受一个键，并返回与该键关联的值。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> <span class="token class-name">NSString</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">AnyObject</span><span class="token operator">?</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> cache<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>forKey<span class="token punctuation">:</span> key<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>定义一个方法来清除缓存：这个方法应清除缓存中的所有数据。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cache<span class="token punctuation">.</span><span class="token function">removeAllObjects</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>为缓存定义一个大小限制：这将防止缓存无限制地增大，并确保在达到限制时清除一些旧的缓存数据。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">var</span> cache<span class="token punctuation">:</span> <span class="token class-name">NSCache</span><span class="token operator">&lt;</span><span class="token class-name">NSString</span><span class="token punctuation">,</span> <span class="token class-name">AnyObject</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> cache <span class="token operator">=</span> <span class="token class-name">NSCache</span><span class="token operator">&lt;</span><span class="token class-name">NSString</span><span class="token punctuation">,</span> <span class="token class-name">AnyObject</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    cache<span class="token punctuation">.</span>countLimit <span class="token operator">=</span> <span class="token number">200</span> <span class="token comment">// 限制200个对象</span>
    <span class="token keyword">return</span> cache
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>失效策略：根据使用情况，制定缓存失效策略，比如最长缓存时间、LRU(Least Recently Used)最近最少使用淘汰策略等</p></li></ul><p>对于更复杂的使用场景，比如网络缓存、图片缓存等，设计会更为复杂，需要根据实际情况定制。</p><blockquote><p>一个简易的数据缓存模块：</p></blockquote><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">class</span> <span class="token class-name">DataCacheManager</span> <span class="token punctuation">{</span>
    <span class="token comment">// 初始化一个 NSCache 对象</span>
    <span class="token keyword">private</span> <span class="token keyword">let</span> cache <span class="token operator">=</span> <span class="token class-name">NSCache</span><span class="token operator">&lt;</span><span class="token class-name">NSString</span><span class="token punctuation">,</span> <span class="token class-name">AnyObject</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    <span class="token comment">// 单例模式，全局访问点</span>
    <span class="token keyword">static</span> <span class="token keyword">let</span> shared <span class="token operator">=</span> <span class="token class-name">DataCacheManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    <span class="token comment">// 添加数据到缓存中</span>
    <span class="token keyword">func</span> <span class="token function-definition function">setData</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> data<span class="token punctuation">:</span> <span class="token class-name">AnyObject</span><span class="token punctuation">,</span> <span class="token keyword">for</span> key<span class="token punctuation">:</span> <span class="token class-name">NSString</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cache<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> key<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 获取缓存数据</span>
    <span class="token keyword">func</span> <span class="token function-definition function">getData</span><span class="token punctuation">(</span><span class="token keyword">for</span> key<span class="token punctuation">:</span> <span class="token class-name">NSString</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">AnyObject</span><span class="token operator">?</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> cache<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>forKey<span class="token punctuation">:</span> key<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 清除所有缓存数据</span>
    <span class="token keyword">func</span> <span class="token function-definition function">removeAllData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cache<span class="token punctuation">.</span><span class="token function">removeAllObjects</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 清除某一缓存数据</span>
    <span class="token keyword">func</span> <span class="token function-definition function">removeData</span><span class="token punctuation">(</span><span class="token keyword">for</span> key<span class="token punctuation">:</span> <span class="token class-name">NSString</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cache<span class="token punctuation">.</span><span class="token function">removeObject</span><span class="token punctuation">(</span>forKey<span class="token punctuation">:</span> key<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 可以根据需要添加更多的接口，比如缓存过期时间、缓存大小限制等。</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="埋点方案" tabindex="-1"><a class="header-anchor" href="#埋点方案" aria-hidden="true">#</a> 埋点方案</h3><h4 id="❓手动埋点、自动化埋点、可视化埋点" tabindex="-1"><a class="header-anchor" href="#❓手动埋点、自动化埋点、可视化埋点" aria-hidden="true">#</a> ❓手动埋点、自动化埋点、可视化埋点</h4><details class="hint-container details"><summary>💡</summary><p>埋点是数据分析中的一个重要概念，主要用于收集用户在产品中的行为数据。</p><ul><li><p>手动埋点：就是开发者在需要统计的地方手动插入统计代码。这种方式能够精确控制要统计的数据，同时也可以获取到丰富的数据信息。但这种方式的缺点是工作量较大，一旦业务有变更，可能需要修改大量代码。</p></li><li><p>自动埋点：自动埋点一般是通过 <code>hook</code> 相关的系统方法来实现的。例如手机应用中，可以通过 <code>hook</code> 用户点击事件，自动的记录用户的行为。这种方式的优点是工作量小，一次设置好就可以全局生效。但缺点是无法获取到具体的业务数据，只能统计到用户的行为。</p></li><li><p>可视化埋点：可视化埋点是一种新的埋点方式，可以通过可视化的操作界面，进行埋点的设置和配置，无需编写代码。这种方式有利于非开发人员进行数据统计，提高了工作效率。易于操作且无需修改代码。但是可能存在稳定性问题和对复杂源操作无法识别的情况。</p></li></ul></details><h4 id="❓无痕埋点如何实现-你认为理想的无痕埋点应该具备哪些特点" tabindex="-1"><a class="header-anchor" href="#❓无痕埋点如何实现-你认为理想的无痕埋点应该具备哪些特点" aria-hidden="true">#</a> ❓无痕埋点如何实现，你认为理想的无痕埋点应该具备哪些特点</h4><details class="hint-container details"><summary>💡</summary><p>无痕埋点：又称为自动埋点，它通过动态的方式，进行用户行为和交互事件的数据收集。</p><blockquote><p>基本思路：通过 <code>hook</code> 事件或消息机制，比如 <code>iOS</code> 中的 <code>method swizzling</code>、<code>Android</code> 中的 <code>AOP</code>，动态地捕获到用户行为事件，然后记录下来。</p></blockquote><p>无痕埋点的实现：</p><ul><li><p>合理利用系统提供的 <code>runtime</code> 机制。例如在 <code>iOS</code> 中，可以使用 <code>Objective-C</code> 的动态性质，使用 <code>Method Swizzling</code> 改变方法的实现，或利用 <code>KVO</code> 进行监听；在 <code>Android</code> 中，利用字节码技术，如 <code>AspectJ</code> 进行 <code>AOP</code> 编程。</p></li><li><p>利用反射技术或者动态代理进行数据收集。可以直接改变或者拦截函数调用，从而进行埋点。</p></li><li><p>利用系统底层的消息机制进行事件收集。例如在 <code>iOS</code> 中，利用 <code>Responder Chain</code> 进行事件传递；在 <code>Android</code> 中，利用 <code>EventBus</code> 或者系统自定义的广播进行事件传递。</p></li></ul><p>理想的无痕埋点应该具备的特点：</p><ul><li>精确捕获：能准确捕获到用户所有行为和交互事件，不遗漏，不重复。</li><li>高性能，低消耗：尽量减少对性能的影响，不会因为埋点逻辑而增加<code>CPU</code>、内存消耗，或者导致崩溃。</li><li>易扩展：可以根据不同的需求，方便地增加或者减少埋点事件。</li><li>健壮性：即使在恶劣的网络环境下，也能保证数据的准确性和完整性。</li><li>应用透明：对应用层完全透明，不改变任何业务逻辑。</li><li>数据安全：保证收集的数据在传输和存储过程中的安全。</li></ul><p>无痕埋点的最大好处：降低了对业务代码的侵入性，使程序员可以专注于业务逻辑的实现，而不用在每一个需要追踪的点上插入埋点代码，既提高了开发效率，又减少了出错概率，非常适合大规模并且业务频繁变化的项目。</p></details><h4 id="❓设计实现一个埋点统计模块" tabindex="-1"><a class="header-anchor" href="#❓设计实现一个埋点统计模块" aria-hidden="true">#</a> ❓设计实现一个埋点统计模块</h4><details class="hint-container details"><summary>💡</summary><p>设计步骤：</p><ul><li><p>定义事件：根据你的应用逻辑，定义出你想要跟踪和统计的事件。</p><blockquote><p>比如“用户登陆”，“添加购物车”，“支付成功”等。</p></blockquote></li><li><p>设计数据结构：每一个事件都应该有一定的数据结构支持它。数据结构应清晰直观，可维护。</p><blockquote><p>如事件名称，触发时间，附带参数等。</p></blockquote></li><li><p>捕捉事件：在应用的适当位置埋点。</p><blockquote><p>如在按钮点击事件中、视图加载、接口回调等地方调用埋点方法，记录事件。</p></blockquote></li><li><p>缓存与上传策略：将捕捉到的事件先进行本地缓存，然后在合适的时间上传到服务器。</p><blockquote><p>比如可以选择在每次有新的事件时马上上传，或每隔一段时间上传一次，或者在应用切换到后台时进行上传。</p></blockquote></li></ul><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">class</span> <span class="token class-name">AnalyticsData</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> eventName<span class="token punctuation">:</span> <span class="token class-name">String</span>
    <span class="token keyword">var</span> timestamp<span class="token punctuation">:</span> <span class="token class-name">TimeInterval</span>
    <span class="token keyword">var</span> parameters<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">:</span> <span class="token keyword">Any</span><span class="token punctuation">]</span>
    <span class="token keyword">init</span><span class="token punctuation">(</span>event<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> parameters<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">:</span> <span class="token keyword">Any</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span>eventName <span class="token operator">=</span> event
        <span class="token keyword">self</span><span class="token punctuation">.</span>timestamp <span class="token operator">=</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>timeIntervalSince1970
        <span class="token keyword">self</span><span class="token punctuation">.</span>parameters <span class="token operator">=</span> parameters
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">AnalyticsEngine</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">var</span> events <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">AnalyticsData</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">func</span> <span class="token function-definition function">logEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> parameters<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">:</span> <span class="token keyword">Any</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token class-name">AnalyticsData</span><span class="token punctuation">(</span>event<span class="token punctuation">:</span> event<span class="token punctuation">,</span> parameters<span class="token punctuation">:</span> parameters<span class="token punctuation">)</span>
        events<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
        <span class="token function">sendEventsIfNeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">func</span> <span class="token function-definition function">sendEventsIfNeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 这里可以按照策略确定是否发送事件</span>
        <span class="token comment">// 比如每累计十个事件进行一次发送</span>
        <span class="token keyword">if</span> events<span class="token punctuation">.</span>count <span class="token operator">&gt;=</span> <span class="token number">10</span> <span class="token punctuation">{</span>
            <span class="token function">sendEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">func</span> <span class="token function-definition function">sendEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 将事件发送到服务器</span>
        <span class="token comment">// 在发送完成后清除已发送的事件</span>
        events<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 在需要的地方进行埋点</span>
<span class="token keyword">let</span> analytics <span class="token operator">=</span> <span class="token class-name">AnalyticsEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
analytics<span class="token punctuation">.</span><span class="token function">logEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;UserLogin&quot;</span></span><span class="token punctuation">,</span> parameters<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;userId&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;12345&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="❓设计实现一个时长统计模块" tabindex="-1"><a class="header-anchor" href="#❓设计实现一个时长统计模块" aria-hidden="true">#</a> ❓设计实现一个时长统计模块</h3><details class="hint-container details"><summary>💡</summary><p>设计思路：</p><ul><li><p>定义需求：首先需要明确时间统计模块需要统计的具体内容。可能是<code>App</code>使用时长、某个功能或者页面的停留时长，或者某个过程的运行时长。</p></li><li><p>数据收集：设计合适的方法去收集这些时间数据。如开始/结束时间的记录，可能需要相应的触发条件(比如 <code>App</code> 启动/关闭，进入/离开页面，开始/结束某个过程等)。</p></li><li><p>数据存储：定义合适的数据结构来存储这些数据，可能结合日期进行存储，为后续的数据分析做准备。可以使用数据库或者文件形式存储。</p></li><li><p>数据处理及分析：对收集到的时长数据进行处理及分析。这可能涉及到算法的设计，在内存限制及计算性能允许的情况下，高效地进行数据计算，并在需要的时候提供统计数据。</p></li><li><p>数据呈现：设计合适的方式来呈现这些时间统计的结果。可能是简单的列表形式，或者和历史数据对比的图表形式。</p></li></ul><blockquote><p>一个简易的 <code>App</code> 使用时长统计模块：</p></blockquote><ul><li><p>定义数据结构：定义一个结构体或类来存储统计的数据，例如开始使用的时间、结束使用的时间，这些应该作为数据的一部分。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token comment">// 定义一个结构体或类来存储统计的数据</span>
<span class="token keyword">struct</span> <span class="token class-name">UsageInfo</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> startTime<span class="token punctuation">:</span> <span class="token class-name">Date</span> <span class="token comment">// 开始使用的时间</span>
    <span class="token keyword">var</span> endTime<span class="token punctuation">:</span> <span class="token class-name">Date</span><span class="token operator">?</span>  <span class="token comment">// 结束使用的时间</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>记录开始时间：当 <code>App</code> 启动时，我们需要在适当的位置(可能是应用的生命周期方法 <code>applicationDidBecomeActive</code>)构造一个 <code>UsageInfo</code>，记录下当前的开始时间。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">var</span> currentUsage<span class="token punctuation">:</span> <span class="token class-name">UsageInfo</span> <span class="token operator">=</span> <span class="token class-name">UsageInfo</span><span class="token punctuation">(</span>startTime<span class="token punctuation">:</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> endTime<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>记录结束时间：当 <code>App</code> 结束运行时（可能是应用生命周期方法 <code>applicationWillResignActive</code>），需要记下结束时间。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code>currentUsage<span class="token punctuation">.</span>endTime <span class="token operator">=</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>计算使用时间：有了开始时间和结束时间，可以简单地通过减法计算出总计使用时间。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">if</span> <span class="token keyword">let</span> end <span class="token operator">=</span> currentUsage<span class="token punctuation">.</span>endTime <span class="token punctuation">{</span>
    <span class="token keyword">let</span> duration <span class="token operator">=</span> end<span class="token punctuation">.</span><span class="token function">timeIntervalSince</span><span class="token punctuation">(</span>currentUsage<span class="token punctuation">.</span>startTime<span class="token punctuation">)</span>
    <span class="token comment">//保存或使用 duration</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>存储数据：可能需要某种方式来存储这些统计数据，例如使用 <code>UserDefaults</code>、文件或是数据库等，以供后续分析或显示。</p></li><li><p>数据展示：需要提供一个方法或接口从存储数据的地方取出数据，并以合适的方式进行展示，可能是列表，图表或其他形式。</p></li></ul><p>实际工程中时可能需要考虑更多的因素，例如时区问题、<code>App</code> 崩溃导致无法记录结束时间时如何处理、数据的安全性等等。</p></details><h3 id="❓设计实现一个日志记录模块" tabindex="-1"><a class="header-anchor" href="#❓设计实现一个日志记录模块" aria-hidden="true">#</a> ❓设计实现一个日志记录模块</h3><details class="hint-container details"><summary>💡</summary><p>设计思路：</p><ul><li><p>定义日志级别：定义不同的日志级别，比如 <code>Error、Warning、Info、Debug、Verbose</code> 等，以便能够根据需要记录和查看不同级别的日志。</p></li><li><p>设计日志接口：设计一个统一的日志记录接口，让所有的日志都通过这个接口进行记录。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">log</span><span class="token punctuation">(</span>level<span class="token punctuation">:</span> <span class="token class-name">LogLevel</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> file<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> function<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> line<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>日志格式：定义每条日志信息的格式。一条完整的日志信息应包含但不限于：时间戳、日志级别、文件名、函数名、行数以及实际的日志信息。</p></li><li><p>日志存储：日志可以输出到控制台，也可以存储到本地文件或者上传到服务器。如果存储到本地文件，需要做好日志文件的管理，比如日志文件的生成和删除策略。</p></li><li><p>日志过滤：提供日志过滤的功能，可以根据日志级别过滤出想要查看的日志。</p></li><li><p>多环境支持：考虑到项目多个环境下(比如开发环境、测试环境、生产环境)的日志记录需求不一样，需要设计成可配置的形式。</p></li></ul><blockquote><p>一个简易的日志记录模块：</p></blockquote><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token comment">// 日志级别</span>
<span class="token keyword">enum</span> <span class="token class-name">LogLevel</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token class-name">Error</span>
    <span class="token keyword">case</span> <span class="token class-name">Warning</span>
    <span class="token keyword">case</span> <span class="token class-name">Info</span>
    <span class="token keyword">case</span> <span class="token class-name">Debug</span>
    <span class="token keyword">case</span> <span class="token class-name">Verbose</span>
<span class="token punctuation">}</span>
<span class="token comment">// 日志类</span>
<span class="token keyword">class</span> <span class="token class-name">Logger</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">log</span><span class="token punctuation">(</span>level<span class="token punctuation">:</span> <span class="token class-name">LogLevel</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> file<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token literal constant">#file</span><span class="token punctuation">,</span> function<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token literal constant">#function</span><span class="token punctuation">,</span> line<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token literal constant">#line</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;[</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">level</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">] </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token punctuation">(</span>file <span class="token keyword">as</span> <span class="token class-name">NSString</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lastPathComponent</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">[</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">line</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">], </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">function</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">message</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 记录日志</span>
<span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>level<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token class-name">Info</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;This is an info log.&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="❓设计实现一个网络请求模块" tabindex="-1"><a class="header-anchor" href="#❓设计实现一个网络请求模块" aria-hidden="true">#</a> ❓设计实现一个网络请求模块</h3><details class="hint-container details"><summary>💡</summary><p>设计思路：</p><ul><li><p>功能设计: 分析目前的应用需求、技术栈、预期目标等进行全面的分析，定义网络库的功能（如，数据请求、上传、下载、缓存、安全策略、错误处理等）。</p></li><li><p>接口设计: 设计易于使用并清晰明了的 <code>API</code>。</p><blockquote><p>例如设计一个主类，用于处理 <code>HTTP</code> 请求，此类应包含 <code>GET，POST，PUT，DELETE</code> 等 <code>HTTP</code> 方法。并且应该要定义清晰的请求和响应类。</p></blockquote></li><li><p>线程处理：对于网络请求，一般使用异步队列，以避免阻塞主线程。</p><blockquote><p>可以使用 <code>DispatchQueue</code> 来进行相关处理。</p></blockquote></li><li><p>数据序列化：请求数据的序列化和反序列化。</p><blockquote><p>可以使用 <code>Codable</code> 来实现数据模型的序列化和反序列化。</p></blockquote></li><li><p>错误处理：网络请求中会有各种错误可能发生，需要设计合理的错误处理机制，使得错误能被准确捕获并传递给调用者。</p></li><li><p>安全策略：对于需要保密的数据进行加密处理。</p><blockquote><p>如用户凭证，应该使用相应的散列或加密算法进行安全处理。</p></blockquote></li><li><p>缓存策略：对于一些频繁请求但不常变动的数据，可以采用合理的缓存策略。可以显著提升应用性能以及减少用户的流量消耗。</p></li><li><p>测试用例：编写完善的单元测试和集成测试，保证网络库的稳定性和可靠性。</p></li></ul><blockquote><p>一个简易网络模块的实现：</p></blockquote><ul><li><p>定义网络请求的基本组件：这包括请求方法(<code>GET，POST，PUT，DELETE</code> 等)、请求 <code>URL</code>、请求头、请求参数、超时时间等。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">struct</span> <span class="token class-name">Request</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> method<span class="token punctuation">:</span> <span class="token class-name">HttpMethod</span>
    <span class="token keyword">let</span> url<span class="token punctuation">:</span> <span class="token class-name">String</span>
    <span class="token keyword">let</span> headers<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">]</span><span class="token operator">?</span>
    <span class="token keyword">let</span> params<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">:</span> <span class="token keyword">Any</span><span class="token punctuation">]</span><span class="token operator">?</span>
    <span class="token keyword">let</span> timeout<span class="token punctuation">:</span> <span class="token class-name">Double</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>抽象网络请求操作：可以定义一个网络请求操作类或一个函数，用于发送网络请求，解析响应和处理错误。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">class</span> <span class="token class-name">NetworkManager</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">send</span><span class="token punctuation">(</span>request<span class="token punctuation">:</span> <span class="token class-name">Request</span><span class="token punctuation">,</span> completion<span class="token punctuation">:</span> <span class="token attribute atrule">@escaping</span> <span class="token punctuation">(</span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Data</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 发送网络请求，处理响应和错误</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>提供公共接口：类或者函数通过公共接口提供服务，接口应该提供足够的灵活性来应对不同类型的网络请求。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">extension</span> <span class="token class-name">NetworkManager</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> params<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">:</span> <span class="token keyword">Any</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token punctuation">,</span> completion<span class="token punctuation">:</span> <span class="token attribute atrule">@escaping</span> <span class="token punctuation">(</span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Data</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> request <span class="token operator">=</span> <span class="token class-name">Request</span><span class="token punctuation">(</span>method<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">,</span> url<span class="token punctuation">:</span> url<span class="token punctuation">,</span> headers<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">,</span> params<span class="token punctuation">:</span> params<span class="token punctuation">,</span> timeout<span class="token punctuation">:</span> <span class="token number">30.0</span><span class="token punctuation">)</span>
        <span class="token function">send</span><span class="token punctuation">(</span>request<span class="token punctuation">:</span> request<span class="token punctuation">,</span> completion<span class="token punctuation">:</span> completion<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>错误处理：网络请求过程中可能会遇到各种错误，需要预见并处理这些错误，比如无网络连接、服务器无响应等。</p></li><li><p>响应解析：网络请求的成功响应通常包括一些元数据和实际的响应内容，需要解析这些内容并以合适的方式提供给其他部分的代码。</p></li></ul><p>在实现的过程中，可能还需要处理各种复杂情况，比如并发请求、请求的优先级、缓存策略、身份验证等等，根据实际需求进行设计。</p></details><h3 id="❓设计实现一个数据存储模块" tabindex="-1"><a class="header-anchor" href="#❓设计实现一个数据存储模块" aria-hidden="true">#</a> ❓设计实现一个数据存储模块</h3><details class="hint-container details"><summary>💡</summary><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token comment">// 使用 UserDefault 实现一个简易的数据存储模块</span>
<span class="token keyword">class</span> <span class="token class-name">DataStorage</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">let</span> shared <span class="token operator">=</span> <span class="token class-name">DataStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">private</span> <span class="token keyword">let</span> defaults <span class="token operator">=</span> <span class="token class-name">UserDefaults</span><span class="token punctuation">.</span>standard

    <span class="token comment">// Save data</span>
    <span class="token keyword">func</span> <span class="token function-definition function">saveData</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token keyword">Any</span><span class="token punctuation">,</span> key<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        defaults<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> key<span class="token punctuation">)</span>
        defaults<span class="token punctuation">.</span><span class="token function">synchronize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Get data</span>
    <span class="token keyword">func</span> <span class="token function-definition function">getData</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">Any</span><span class="token operator">?</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token keyword">let</span> data <span class="token operator">=</span> defaults<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>forKey<span class="token punctuation">:</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> data
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token nil constant">nil</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Remove data</span>
    <span class="token keyword">func</span> <span class="token function-definition function">removeData</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        defaults<span class="token punctuation">.</span><span class="token function">removeObject</span><span class="token punctuation">(</span>forKey<span class="token punctuation">:</span> key<span class="token punctuation">)</span>
        defaults<span class="token punctuation">.</span><span class="token function">synchronize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

<span class="token comment">// 使用</span>
<span class="token class-name">DataStorage</span><span class="token punctuation">.</span>shared<span class="token punctuation">.</span><span class="token function">saveData</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Hello, World&quot;</span></span><span class="token punctuation">,</span> key<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;greeting&quot;</span></span><span class="token punctuation">)</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">DataStorage</span><span class="token punctuation">.</span>shared<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;greeting&quot;</span></span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token string-literal"><span class="token string">&quot;No Data&quot;</span></span><span class="token punctuation">)</span>
<span class="token class-name">DataStorage</span><span class="token punctuation">.</span>shared<span class="token punctuation">.</span><span class="token function">removeData</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;greeting&quot;</span></span><span class="token punctuation">)</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">DataStorage</span><span class="token punctuation">.</span>shared<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;greeting&quot;</span></span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token string-literal"><span class="token string">&quot;No Data&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><hr><h2 id="单元测试" tabindex="-1"><a class="header-anchor" href="#单元测试" aria-hidden="true">#</a> 单元测试</h2><h3 id="❓如何编写单元测试" tabindex="-1"><a class="header-anchor" href="#❓如何编写单元测试" aria-hidden="true">#</a> ❓如何编写单元测试</h3><blockquote><p>例如完成了网络模块，如何测试该网络模块，测试用例应该如何覆盖</p></blockquote><details class="hint-container details"><summary>💡</summary><p>编写单元测试是一种保证代码质量和程序稳定性的有效方法。测试用例应该覆盖到所有的可能性，包括正常的情况和可能出现的各种边缘情况。</p><p>网络模块单元测试：</p><ul><li><p>创建一个测试目标，命名为 <code>NetworkModuleTests</code> <code>Xcode</code> 会自动生成一个测试类。</p></li><li><p>在测试类中，导入需要测试的模块，比如 <code>import Networking</code>。</p></li><li><p>对于网络模块的测试，常见的有测试一次网络请求的所有环节，包括创建<code>URL</code>，创建请求，发送请求，解析响应等。每个环节都应该有对应的测试用例。</p></li><li><p>由于网络请求可能涉及到延迟和异步操作，所以需要使用 <code>XCTestExpectation</code> 类型的对象来处理。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token comment">// 对一个网络请求的函数进行测试</span>
<span class="token keyword">func</span> <span class="token function-definition function">testFetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> expectation <span class="token operator">=</span> <span class="token class-name">XCTestExpectation</span><span class="token punctuation">(</span>description<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Fetch data&quot;</span></span><span class="token punctuation">)</span>
    
    <span class="token class-name">NetworkModule</span><span class="token punctuation">.</span>shared<span class="token punctuation">.</span><span class="token function">fetchData</span><span class="token punctuation">(</span>completion<span class="token punctuation">:</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> error <span class="token keyword">in</span>
        <span class="token comment">// 如果返回了错误或者没有返回数据，测试会失败</span>
        <span class="token class-name">XCTAssertNil</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
        <span class="token class-name">XCTAssertNotNil</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
        expectation<span class="token punctuation">.</span><span class="token function">fulfill</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    
    <span class="token function">wait</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>expectation<span class="token punctuation">]</span><span class="token punctuation">,</span> timeout<span class="token punctuation">:</span> <span class="token number">5.0</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>至于测试用例的覆盖，应该尽量考虑到所有可能的情况。</p><blockquote><p>例如，对于网络请求，你应该测试各种网络错误的情况，例如服务器无响应，返回了错误的状态码等。也可以测试输入了错误的 <code>URL</code> 或参数的情况。</p></blockquote></li></ul><p>注意：单元测试只是测试手段之一，还有集成测试、系统测试、回归测试等其他测试方法需要配合使用，确保代码质量和系统稳定性。</p></details><h3 id="❓团队每个人都负责一个模块-那最后进行汇总组装的时候-如何进行测试" tabindex="-1"><a class="header-anchor" href="#❓团队每个人都负责一个模块-那最后进行汇总组装的时候-如何进行测试" aria-hidden="true">#</a> ❓团队每个人都负责一个模块，那最后进行汇总组装的时候，如何进行测试</h3><details class="hint-container details"><summary>💡</summary><ul><li><p>集成测试：这是组装各个模块后首先进行的测试阶段，主要是检测各个模块之间的交互是否正常，使用预定义的一组测试用例，验证各模块之间的调用、交互、数据传递等功能是否正常。</p></li><li><p>系统测试：这种测试主要是对整个系统的功能、性能等进行完整检测，需要考虑全面的业务场景和边缘案例。测试人员通常需要将应用程序看做一个黑盒子，来验证各种用户行为结果是否符合预期。</p></li><li><p>回归测试：当对软件进行了修改（比如修复了漏洞或者增加了功能），之后会运行回归测试，确保修改没有影响到软件中的其他部分。回归测试会使用一个固定的测试用例集。</p></li><li><p>用户接受测试（UAT）：这种测试通常在软件即将交付给用户之前进行，可以让用户或者客户直接体验完整的产品，收集反馈看是否满足他们的实际需求。回馈后会根据用户需求进行修改和优化。</p></li><li><p>自动化测试：针对重复性的测试用例，可以考虑使用自动化测试工具进行测试，提高测试效率。可使用的自动化测试工具包括单元测试框架（如 <code>XCTest</code>），<code>UI</code> 测试框架（如 <code>XCUITest</code>、<code>Selenium</code>），以及持续集成（<code>CI</code>）工具（如<code>Jenkins</code>）等。</p></li></ul></details><h3 id="❓为什么要用-mvvm-怎么对-mvvm-中的-view-做单元测试" tabindex="-1"><a class="header-anchor" href="#❓为什么要用-mvvm-怎么对-mvvm-中的-view-做单元测试" aria-hidden="true">#</a> ❓为什么要用 <code>MVVM</code>，怎么对 <code>MVVM</code> 中的 <code>View</code> 做单元测试</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>Model-View-ViewModel(MVVM)</code> 是一种软件架构设计模式，主要用于分离 <code>UI</code> 界面和业务逻辑，使得各部分可以独立开发，不互相影响。</p></blockquote><ul><li>降低耦合性。<code>ViewModel</code> 不直接依赖 <code>View</code>，使得代码结构更加清晰，模块之间的依赖关系降低，有利于维护和扩展。</li><li>提高重用性。因为 <code>MVVM</code> 中的 <code>ViewModel</code> 是独立于 <code>View</code> 的，所以可以重用 <code>ViewModel</code> 以适配不同的界面需求。</li><li>便于测试。因为 <code>View</code> 和 <code>Model</code> 都通过 <code>ViewModel</code> 来进行交互，<code>ViewModel</code> 可以抽象出 <code>UI</code> 层面的输入输出与数据模型层面的沟通逻辑，从而使得可以很方便地对 <code>ViewModel</code> 进行单元测试。</li></ul><p>单元测试：</p><ul><li><p>在 <code>MVVM</code> 中对 <code>View</code> 进行单元测试的话，一般的做法是模拟出用户的输入（比如点击按钮、滑动列表等操作），并检查对应的 <code>UI</code> 输出（比如弹出提示框、列表内容变化等）。由于 <code>View</code> 一般都是一些 <code>UI</code> 界面，所以对于 <code>View</code> 的测试，更多的可能会使用到功能测试和 <code>UI</code> 自动化测试工具。</p></li><li><p>对 <code>ViewModel</code> 的改变来进行 <code>UI</code> 的单元测试，比如更改 <code>ViewModel</code> 的某个属性，看是否能在 <code>View</code> 上得到预期的反馈表示。这样你就可以断言 <code>UI</code> 的表现和 <code>ViewModel</code> 的状态是一致的。</p></li></ul></details><hr><h2 id="持续集成" tabindex="-1"><a class="header-anchor" href="#持续集成" aria-hidden="true">#</a> 持续集成</h2><h3 id="❓使用过什么持续集成方式" tabindex="-1"><a class="header-anchor" href="#❓使用过什么持续集成方式" aria-hidden="true">#</a> ❓使用过什么持续集成方式</h3><details class="hint-container details"><summary>💡</summary><blockquote><p>持续集成 <code>CI</code>(Continuous Integration) 是一种软件开发实践，每次集成都会通过编译、创建构建和自动化测试来验证代码的正确性。</p></blockquote><ul><li><p><code>Jenkins</code>: 一个开源的、基于 <code>Java</code> 的持续集成工具。它非常灵活，有许多插件可用，可以用于构建项目，执行测试，并生成测试报告。</p></li><li><p><code>Travis CI</code>: 一个在线的、分布式的持续集成服务，用于构建和测试在 <code>GitHub</code> 和 <code>Bitbucket</code> 上托管的项目。</p></li><li><p><code>CircleCI</code>: 一个为软件团队提供持续集成和交付的服务。它支持包括 <code>Android、iOS</code> 在内的多种平台进行构建和测试。</p></li><li><p><code>GitHub Action</code>: <code>GitHub</code> 提供的 <code>CI/CD</code> 工具。</p></li><li><p><code>GitLab CI/CD</code>: <code>GitLab</code> 自带 <code>CI/CD</code> 功能，可以在仓库中添加 <code>.gitlab-ci.yml</code> 文件，定义出一组用于 <code>CI/CD</code> 的配置和任务。</p></li><li><p><code>Fastlane</code>: 一款为 <code>iOS</code> 和 <code>Android</code> 应用设计的持续集成工具，主要用于自动化构建、测试和部署。</p></li><li><p><code>Xcode Cloud</code>: <code>Apple</code> 提供的一款持续集成方案，可以进行构建、分析、测试和归档。</p></li></ul></details><h3 id="❓jenkins-怎么备份恢复" tabindex="-1"><a class="header-anchor" href="#❓jenkins-怎么备份恢复" aria-hidden="true">#</a> ❓<code>Jenkins</code> 怎么备份恢复</h3><details class="hint-container details"><summary>💡</summary><p>备份和恢复主要需要考虑的是 <code>Jenkins</code> 的主目录，主目录存储了构建的工作目录，用户账号配置，插件设置，系统配置等信息。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 备份</span>
<span class="token comment">#   - 进入 Jenkins 的主目录</span>
<span class="token builtin class-name">cd</span> /var/lib/jenkins
<span class="token comment">#   - 将 Jenkins 主目录下的所有文件和文件夹打包为一个文件，将此文件存储在安全的地方进行备份</span>
<span class="token function">sudo</span> <span class="token function">tar</span> cvzf jenkins-backup.tar.gz *

<span class="token comment"># 恢复</span>
<span class="token comment">#   - 将备份文件复制到 Jenkins 的主目录</span>
<span class="token function">sudo</span> <span class="token function">cp</span> /path/to/your/backup/jenkins-backup.tar.gz /var/lib/jenkins
<span class="token comment">#   - 解压备份文件并恢复受损的 Jenkin</span>
<span class="token builtin class-name">cd</span> /var/lib/jenkins
<span class="token function">sudo</span> <span class="token function">tar</span> xvzf jenkins-backup.tar.gz
<span class="token comment">#   - 保所有文件的权限设置正确，重启 Jenkins</span>
<span class="token function">sudo</span> <span class="token function">chown</span> <span class="token parameter variable">-R</span> jenkins:jenkins /var/lib/jenkins
<span class="token function">sudo</span> <span class="token function">service</span> jenkins restart
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="❓jenkins-使用过哪些插件" tabindex="-1"><a class="header-anchor" href="#❓jenkins-使用过哪些插件" aria-hidden="true">#</a> ❓<code>Jenkins</code> 使用过哪些插件</h3><details class="hint-container details"><summary>💡</summary><ul><li><p><code>Git Plugin</code>: 允许 <code>Jenkins</code> 通过 <code>Git</code> 作为源代码管理工具进行项目构建。</p></li><li><p><code>GitHub Plugin</code>: 为 <code>Jenkins</code> 提供了一种与 <code>Github</code> 交互的方式，比如可以触发 <code>Jenkins</code> 做 <code>CI/CD</code>。</p></li><li><p><code>Pipeline</code>: 最主要的插件之一。带来了 <code>Jenkins Pipeline</code>（也叫做 <code>Jenkinsfile</code>）这种方式，允许以代码形式定义和管理 <code>Jenkins</code> 中的构建流程。</p></li><li><p><code>Maven Integration plugin</code>: 让 <code>Jenkins</code> 支持 <code>Maven</code> 构建任务。</p></li><li><p><code>Blue Ocean</code>: <code>Jenkins</code> 的一种新的用户界面，它让 <code>Pipeline</code> 的创建和监视更加直观和用户友好。</p></li><li><p><code>Email Extension Plugin</code>: 这个插件可以帮助 <code>Jenkins</code> 在构建结果出现后发送邮件通知。</p></li><li><p><code>Junit Plugin</code>: 可以让 <code>Jenkins</code> 支持 <code>JUnit</code> 测试报告。</p></li><li><p><code>Build Monitor Plugin</code>: 提供了一种视觉显示来展示构建的状态。</p></li></ul></details>`,102);function un(rn,kn){const e=l("ExternalLinkIcon"),d=l("CodeTabs");return r(),k("div",null,[h,o(" more "),b,f,n("ul",null,[n("li",null,[n("a",g,[s("2018.05.29 Trip-to-iOS-Design-Patterns"),a(e)])]),n("li",null,[n("a",w,[s("2018.02.04 iOS 架构之 View 层的架构方案"),a(e)])])]),o(" MVVM "),n("ul",null,[n("li",null,[n("a",y,[s("2017.09.04 - [译] MVVM, Coordinators 和 RxSwift 的抽丝剥茧"),a(e)])]),n("li",null,[n("a",V,[s("2017.04.13 - [译] MVVM-C 与 Swift"),a(e)])]),n("li",null,[n("a",M,[s("2016.08.07 - iOS 开发中的 ViewModel"),a(e)])]),n("li",null,[n("a",C,[s("2013.05.00 - MVVM - Commands, RelayCommands and EventToCommand"),a(e)])])]),o(" Coordinator "),n("ul",null,[n("li",null,[_,n("a",q,[s("2021-07-13 iOS Coordinator 实战"),a(e)])]),n("li",null,[S,n("a",x,[s("2019-03-29 How to use the coordinator pattern in iOS apps"),a(e)])]),n("li",null,[A,n("a",O,[s("2019-02-07 Advanced coordinators in iOS"),a(e)])])]),o(" Clean "),n("ul",null,[n("li",null,[n("a",P,[s("CleanArchitectureRxSwift"),a(e)]),I])]),o(" 设计模式 "),n("ul",null,[n("li",null,[n("a",U,[s("2020-06-17 iOS 设计模式"),a(e)])]),n("li",null,[n("a",j,[s("2016-11-16 设计模式系列"),a(e)])])]),T,o(" 缘起 "),n("ul",null,[n("li",null,[n("a",E,[s("2016-03-10 蘑菇街 App 的组件化之路"),a(e)])]),n("li",null,[n("a",R,[s("2016-03-13 iOS 应用架构谈 组件化方案"),a(e)])]),n("li",null,[n("a",D,[s("2016-03-14 蘑菇街 App 的组件化之路·续"),a(e)])]),n("li",null,[n("a",N,[s("2018-08-23 CTMediator 的 Swift 应用"),a(e)])])]),o(" 百花齐放 "),n("ul",null,[n("li",null,[n("a",L,[s("2020-08-30 如何在模块化/组件化项目中实现 ObjC-Swift 混编？"),a(e)])]),n("li",null,[n("a",B,[s("2019-10-29 iOS 中的库与框架"),a(e)])]),n("li",null,[n("a",J,[s("2019-06-22 组件化架构漫谈"),a(e)])]),n("li",null,[n("a",z,[s("2019-08-01 iOS 组件二进制"),a(e)])]),n("li",null,[n("a",X,[s("2019-07-15 打造完备的 iOS 组件化方案：如何面向接口进行模块解耦"),a(e)])]),n("li",null,[n("a",K,[s("2017-11-24 iOS 混编 模块化/组件化 经验指北"),a(e)])]),n("li",null,[F,n("a",G,[s("2017-02-25 iOS 组件化 —— 路由设计思路分析"),a(e)])])]),o(" 实践方案 "),n("ul",null,[n("li",null,[n("a",H,[s("2021-02-25 (美团) 从预编译的角度理解 Swift 与 Objective-C 及混编机制"),a(e)])]),n("li",null,[n("a",W,[s("2021-02-08 京东 App Swift 混编及组件化落地"),a(e)])]),n("li",null,[n("a",Y,[s("2019-07-08 百度 App 组件化之路"),a(e)])]),n("li",null,[n("a",Q,[s("2018-10-01 驴妈妈客户端频道页模块化设计思路"),a(e)])]),n("li",null,[n("a",Z,[s("2018-01-20 蜂鸟商家版 iOS 组件化 / 模块化实践总结"),a(e)])]),n("li",null,[n("a",$,[s("2017-04-24 (链家网)"),a(e)])]),n("li",null,[n("a",nn,[s("2016-11-29 手机天猫解耦之路"),a(e)])]),n("li",null,[n("a",sn,[s("2016-10-16 豆瓣 App 的模块化实践"),a(e)])])]),o(" 资源管理 "),n("ul",null,[n("li",null,[n("a",an,[s("2020-05-14 组件化资源文件管理方案"),a(e)])]),n("li",null,[n("a",en,[s("2019-10-22 CocoaPods 的资源管理和 Asset Catalog 优化"),a(e)])])]),on,n("details",cn,[tn,a(d,{id:"304",data:[{id:"swift"},{id:"objc"}]},{title0:c(({value:t,isActive:i})=>[s("swift")]),title1:c(({value:t,isActive:i})=>[s("objc")]),tab0:c(({value:t,isActive:i})=>[ln]),tab1:c(({value:t,isActive:i})=>[pn]),_:1})]),dn])}const hn=u(v,[["render",un],["__file","0x14.architecture.html.vue"]]);export{hn as default};
