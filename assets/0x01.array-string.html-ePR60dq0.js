import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as t,c as o,a as r,b as e,f as c}from"./app-SX6jYwBY.js";const h={},d=e("blockquote",null,[e("p",null,"01 - 数组 & 字符串 (9)")],-1),n=c(`<h2 id="_1-1-判定字符是否唯一" tabindex="-1"><a class="header-anchor" href="#_1-1-判定字符是否唯一" aria-hidden="true">#</a> 1.1 判定字符是否唯一</h2><blockquote><p>实现一个算法，确定一个字符串的所有字符是否全都不同。假使不允许使用额外的数据结构，又该如何处理？</p></blockquote><h2 id="_1-2-判定是否互为字符重排" tabindex="-1"><a class="header-anchor" href="#_1-2-判定是否互为字符重排" aria-hidden="true">#</a> 1.2 判定是否互为字符重排</h2><blockquote><p>给定两个字符串，请编写程序，确定其中一个字符串的字符重新排列后，能否变成另一个字符串。</p></blockquote><h2 id="_1-3-url化" tabindex="-1"><a class="header-anchor" href="#_1-3-url化" aria-hidden="true">#</a> 1.3 URL化</h2><blockquote><p>编写一种方法，将字符串中的空格全部替换为%20。假定该字符串尾部有足够的空间存放新增字符，并且知道字符串的“真实”长度。（注：用Java实现的话，请使用字符数组实现，以便直接在数组上操作。）</p></blockquote><pre><code>示例：
    输入: &quot;Mr John Smith&quot;
    输出: &quot;Mr%20John%20Smith&quot;
</code></pre><h2 id="_1-4-回文排列" tabindex="-1"><a class="header-anchor" href="#_1-4-回文排列" aria-hidden="true">#</a> 1.4 回文排列</h2><blockquote><p>给定一个字符串，编写一个函数判定其是否为某个回文串的排列之一。回文串是指正反两个方向都一样的单词或短语。排列是指字母的重新排列。回文串不一定是字典当中的单词。</p></blockquote><pre><code>示例：
    输入：Tact Coa
    输出：True（排列有&quot;taco cat&quot;，&quot;atco cta&quot;，等等）
</code></pre><h2 id="_1-5-一次编辑" tabindex="-1"><a class="header-anchor" href="#_1-5-一次编辑" aria-hidden="true">#</a> 1.5 一次编辑</h2><blockquote><p>字符串有三种编辑操作：插入一个字符、删除一个字符或者替换一个字符。给定两个字符串，编写一个函数判定它们是否只需要一次（或者零次）编辑。</p></blockquote><pre><code>示例：
    pale,  ple  -&gt;  true
    pales, pale -&gt;  true
    pale,  bale -&gt;  true
    pale,  bake -&gt;  false
</code></pre><h2 id="_1-6-字符串压缩" tabindex="-1"><a class="header-anchor" href="#_1-6-字符串压缩" aria-hidden="true">#</a> 1.6 字符串压缩</h2><blockquote><p>利用字符重复出现的次数，编写一种方法，实现基本的字符串压缩功能。比如，字符串aabcccccaaa会变为a2b1c5a3。若“压缩”后的字符串没有变短，则返回原先的字符串。你可以假设字符串中只包含大小写英文字母（a至z）。</p></blockquote><h2 id="_1-7-旋转矩阵" tabindex="-1"><a class="header-anchor" href="#_1-7-旋转矩阵" aria-hidden="true">#</a> 1.7 旋转矩阵</h2><blockquote><p>给定一幅由N×N矩阵表示的图像，其中每个像素的大小为4字节，编写一种方法，将图像旋转90度。不占用额外内存空间能否做到？</p></blockquote><h2 id="_1-8-零矩阵" tabindex="-1"><a class="header-anchor" href="#_1-8-零矩阵" aria-hidden="true">#</a> 1.8 零矩阵</h2><blockquote><p>编写一种算法，若M×N矩阵中某个元素为0，则将其所在的行与列清零。</p></blockquote><h2 id="_1-9-字符串轮转" tabindex="-1"><a class="header-anchor" href="#_1-9-字符串轮转" aria-hidden="true">#</a> 1.9 字符串轮转</h2><blockquote><p>假定有一种isSubstring方法，可检查一个单词是否为其他字符串的子串。给定两个字符串s1和s2，请编写代码检查s2是否为s1旋转而成，要求只能调用一次isSubstring（比如，waterbottle是erbottlewat旋转后的字符串）。</p></blockquote>`,21);function i(l,u){return t(),o("div",null,[d,r(" more "),n])}const p=a(h,[["render",i],["__file","0x01.array-string.html.vue"]]);export{p as default};
