import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,a as e,f as o}from"./app-NVknrtE1.js";const c={},t=o(`<p><code>OC</code> 底层是使用 <code>C/C++</code> 实现。定一个继承 <code>NSObject</code> 的类，这个类底层使用 <code>C</code> 语言中的 <code>struct</code> 结构体来实现的。</p><blockquote><p><code>OC</code> 的动态性</p></blockquote><blockquote><p>\`\`id<code>、</code>nil<code>、</code>NULL\`</p></blockquote><blockquote><p><code>+load</code> 与 <code>+initialize</code> 的区别</p></blockquote><p><code>+load</code> : <code>+initialize</code> :</p><h2 id="block" tabindex="-1"><a class="header-anchor" href="#block" aria-hidden="true">#</a> <code>block</code></h2><h3 id="block-底层实现" tabindex="-1"><a class="header-anchor" href="#block-底层实现" aria-hidden="true">#</a> <code>block</code> 底层实现？</h3><p><code>block</code> 底层是使用结构体实现的。</p><p>根据内存分区不同，分为三种 <code>block</code></p><ul><li><code>__NSGlobalBlock__</code> : 全局 <code>block</code>，类似全局静态变量，存放在静态区</li><li><code>__NSStackBlock__</code> : 栈区 <code>block</code>，保存在栈区</li><li><code>__NSMallocBlock__</code> : 堆区 <code>block</code>，保存在堆区</li></ul><blockquote><p><code>block</code> 的本质</p></blockquote><h2 id="category" tabindex="-1"><a class="header-anchor" href="#category" aria-hidden="true">#</a> <code>Category</code></h2><ul><li><p>Category : 只能添加方法，不能添加实例变量(除非通过关联对象)。分类中的方法是运行时添加到方法列表中的。</p></li><li><p>Extension : 可以添加方法和计算属性，也可以添加构造方法，也可以实现以一个协议。编译时已经确定，不支持动态添加方法。</p><p>如果分类中添加与类相同的方法签名会发生什么？</p><p>分类中的方法是运行时添加到方法列表中，并且是添加中已有方法的前面。所以当分类与原类中的方法相同时，分类中的方法会优先调用，覆盖掉原类中的方法。</p></li></ul><h2 id="msgsend" tabindex="-1"><a class="header-anchor" href="#msgsend" aria-hidden="true">#</a> <code>msgSend</code></h2><blockquote><p>以下代码输出？</p></blockquote><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">@interface</span> Animail
<span class="token keyword">@end</span>
<span class="token keyword">@interface</span> Dog <span class="token punctuation">:</span> Animal
<span class="token keyword">@end</span>
<span class="token keyword">@implementation</span> Dog
<span class="token operator">-</span> <span class="token punctuation">(</span>instancetype<span class="token punctuation">)</span>init <span class="token punctuation">{</span>
    <span class="token keyword">self</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">super</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;%@&quot;</span><span class="token punctuation">,</span> <span class="token function">NSStringFromClass</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">self</span> class<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;%@&quot;</span><span class="token punctuation">,</span> <span class="token function">NSStringFromClass</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">super</span> class<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">self</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">@end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16);function p(l,i){return s(),a("div",null,[e(" more "),t])}const k=n(c,[["render",p],["__file","objective-c.html.vue"]]);export{k as default};
