import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as i,c as t,a as l,f as a}from"./app-8wVbLcw5.js";const r={},n=a('<h2 id="solid" tabindex="-1"><a class="header-anchor" href="#solid" aria-hidden="true">#</a> <code>SOLID</code></h2><ul><li>SRP(Single Responsibility Principle) : 单一职责原则</li><li>OCP(Open-Closed Principle) : 开放封闭原则</li><li>LSP(Liskov Substitution Principle) : 里氏替换原则</li><li>ISP(Interface Segregation Principle) : 接口隔离原则</li><li>DIP(Dependency Inversion Principle) : 依赖倒置原则</li></ul><h2 id="creational-patterns-创建型-5" tabindex="-1"><a class="header-anchor" href="#creational-patterns-创建型-5" aria-hidden="true">#</a> <code>Creational Patterns</code> - “创建型” (5)</h2><blockquote><p>对象是如何创建的</p></blockquote><ul><li>Abstract Factory Pattern : 抽象工厂模式</li><li>Builder Pattern : 建造者模式</li><li>Factory Pattern : 工厂模式</li><li>Prototype Pattern : 原型模式</li><li>Singleton Pattern : 单例模式</li></ul><h2 id="structural-patterns-结构型-7" tabindex="-1"><a class="header-anchor" href="#structural-patterns-结构型-7" aria-hidden="true">#</a> <code>Structural Patterns</code> - “结构型” (7)</h2><blockquote><p>对象是按照怎样的结构组合的</p></blockquote><ul><li>Adapter Pattern : 适配器模式</li><li>Bridge Pattern : 桥接模式</li><li>Composite Pattern : 组合模式</li><li>Decorator Pattern : 装饰器模式</li><li>Facade Pattern : 外观模式</li><li>Flyweight Pattern : 亨元模式</li><li>Proxy Pattern : 代理模式</li></ul><h2 id="behavioral-patterns-行为型-11" tabindex="-1"><a class="header-anchor" href="#behavioral-patterns-行为型-11" aria-hidden="true">#</a> <code>Behavioral Patterns</code> - “行为型” (11)</h2><blockquote><p>对象之间的访问行为如何完成的</p></blockquote><ul><li>Chain of Responsibility : 责任链模式</li><li>Command : 命令模式</li><li>Interpreter : 解释器模式</li><li>Iterator : 迭代器模式</li><li>Mediator : 中介者模式</li><li>Memento : 备忘录模式</li><li>Observer : 观察者模式</li><li>State : 状态模式</li><li>Strategy : 策略模式</li><li>Template Method : 模板方法模式</li><li>Visitor : 访问者模式</li></ul>',11);function o(c,d){return i(),t("div",null,[l(" more "),n])}const p=e(r,[["render",o],["__file","design-pattern.html.vue"]]);export{p as default};
