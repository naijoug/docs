import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as t}from"./app-g9d4Q3j1.js";const p={},e=t(`<h2 id="类型定义" tabindex="-1"><a class="header-anchor" href="#类型定义" aria-hidden="true">#</a> 类型定义</h2><h3 id="常量-变量" tabindex="-1"><a class="header-anchor" href="#常量-变量" aria-hidden="true">#</a> 常量 &amp; 变量</h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// const: 常量</span>
<span class="token keyword">const</span> PI <span class="token operator">=</span> <span class="token number">3.14159</span><span class="token punctuation">;</span> <span class="token comment">// 声明编译时常量</span>
<span class="token keyword">final</span> date <span class="token operator">=</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>now<span class="token punctuation">;</span> <span class="token comment">// 声明运行时常量</span>

<span class="token comment">// 变量</span>
<span class="token comment">//  - 通过 var 声明变量</span>
<span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 编译器自动推断为 int</span>
<span class="token comment">//  - 通过类型明确指定类型</span>
<span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;hello dart.&#39;</span></span><span class="token punctuation">;</span> <span class="token comment">// 声明字符串变量</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="全局变量-vs-静态变量" tabindex="-1"><a class="header-anchor" href="#全局变量-vs-静态变量" aria-hidden="true">#</a> 全局变量 vs 静态变量</h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 全局变量，计数器</span>
int globalCounter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token comment">// 静态变量，计数器</span>
<span class="token keyword">class</span> <span class="token class-name">Counter</span> <span class="token punctuation">{</span>
  <span class="token comment">// static 在类里面修饰静态属性</span>
  <span class="token keyword">static</span> int count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token comment">// static 在类里面修饰静态方法</span>
  <span class="token keyword">static</span> <span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  globalCounter <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token class-name">Counter</span><span class="token punctuation">.</span>count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>   
  <span class="token class-name">Counter</span><span class="token punctuation">.</span><span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="const-vs-final" tabindex="-1"><a class="header-anchor" href="#const-vs-final" aria-hidden="true">#</a> <code>const</code> vs <code>final</code></h3><ul><li><code>const</code>: 编译时常量，赋值一次，指向的对象不可变，对象内部的字段也不可变。</li><li><code>final</code>: 运行时常量，只能被赋值一次，<code>final</code> 指向的对象不可以变，但是对象内部的字段可变。</li></ul><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// const</span>
<span class="token keyword">const</span> pi <span class="token operator">=</span> <span class="token number">3.14159</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token class-name">DateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 编译时 ❌ </span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// ❌ </span>

<span class="token comment">// final</span>
<span class="token keyword">final</span> date <span class="token operator">=</span> <span class="token class-name">DateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">final</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// ✅</span>
arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// ❌</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="var-vs-object-vs-dynamic" tabindex="-1"><a class="header-anchor" href="#var-vs-object-vs-dynamic" aria-hidden="true">#</a> <code>var</code> vs <code>Object</code> vs <code>dynamic</code></h3><ul><li><code>var</code>: 声明对象会自动推断类型，之后类型不能改变。</li><li><code>Object</code>: 是所有 <code>Dart</code> 类型的基类，可以将任务类型值赋值给 <code>Object</code>。</li><li><code>dynamic</code>: 可以进行任意类型值赋值，编译时不检查类型，运行时进行类型检查。</li></ul><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// var</span>
<span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;dart&#39;</span></span><span class="token punctuation">;</span> <span class="token comment">// name 类型推断为 String</span>
name <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// ❌</span>

<span class="token comment">// Object</span>
<span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> 
obj <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;dart&#39;</span></span><span class="token punctuation">;</span> <span class="token comment">// ✅</span>
obj<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// ❌，只能调用 Object 类中的方法</span>

<span class="token comment">// dynamic</span>
<span class="token keyword">dynamic</span> age <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> 
age <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;dart&#39;</span></span><span class="token punctuation">;</span> 
age<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// // 编译时 ✅，运行时 ❌</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="late" tabindex="-1"><a class="header-anchor" href="#late" aria-hidden="true">#</a> <code>late</code></h3><blockquote><p><code>late</code> 关键字允许推迟初始化一个非空变量。变量可以在声明时不被初始化，在后续某个时刻再进行初始化。</p></blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 全局延迟变量</span>
late <span class="token class-name">String</span> description<span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>
  <span class="token comment">// 类属性延迟变量</span>
  late <span class="token class-name">String</span> description<span class="token punctuation">;</span>

  <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token comment">// 类初始化时，进行初始化</span>
    description <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Hello, World&#39;</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  description <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Hello, World&#39;</span></span><span class="token punctuation">;</span>
  <span class="token function">print</span><span class="token punctuation">(</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token keyword">var</span> myClass <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">print</span><span class="token punctuation">(</span>myClass<span class="token punctuation">.</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="typedef" tabindex="-1"><a class="header-anchor" href="#typedef" aria-hidden="true">#</a> <code>typedef</code></h3><blockquote><p><code>typedef</code>: 类型定义，可以为函数类型指定可读的别名。</p></blockquote><ul><li>提升代码的可读性：可以为复杂的函数类型提供更简洁、更清晰的名字。</li><li>提供代码复用：允许在多个地方重复使用相同的函数类型，而无需每次都重新定义它。</li></ul><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">typedef</span> <span class="token class-name">IntHandler</span> <span class="token operator">=</span> <span class="token keyword">void</span> <span class="token class-name">Function</span><span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">printNumber</span><span class="token punctuation">(</span><span class="token class-name">IntHandler</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">handler</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">printNumber</span><span class="token punctuation">(</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Number is </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">num</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// &quot;Number is 10&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h2><h3 id="数据类型一览" tabindex="-1"><a class="header-anchor" href="#数据类型一览" aria-hidden="true">#</a> 数据类型一览</h3><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>bool</code></td><td>布尔值</td></tr><tr><td><code>int</code></td><td>整形</td></tr><tr><td><code>double</code></td><td>浮点数</td></tr><tr><td></td><td></td></tr><tr><td><code>String</code></td><td>字符串</td></tr><tr><td><code>StringBuffer</code></td><td>缓冲字符串</td></tr><tr><td></td><td></td></tr><tr><td><code>List</code></td><td>列表</td></tr><tr><td><code>Set</code></td><td>集合</td></tr><tr><td><code>Map</code></td><td>哈希表</td></tr><tr><td></td><td></td></tr><tr><td><code>Duration</code></td><td>时长</td></tr><tr><td><code>DateTime</code></td><td>日期时间</td></tr></tbody></table><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// bool: 布尔值</span>
bool isOk <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token comment">// int: 整形</span>
int num <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
<span class="token comment">// double: 浮点数</span>
double ratio <span class="token operator">=</span> <span class="token number">0.618</span><span class="token punctuation">;</span>

<span class="token comment">// String: 字符串</span>
<span class="token class-name">String</span> country <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;China&#39;</span></span><span class="token punctuation">;</span>
<span class="token comment">// StringBuffer</span>
<span class="token keyword">var</span> sb <span class="token operator">=</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sb<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Hello&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sb<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;,&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sb<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;world.&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello,world.</span>

<span class="token comment">// List: 列表</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span></span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// Set: 集合</span>
<span class="token comment">// Map: 哈希表</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> int<span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string-literal"><span class="token string">&#39;one&#39;</span></span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token string-literal"><span class="token string">&#39;two&#39;</span></span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token string-literal"><span class="token string">&#39;three&#39;</span></span><span class="token punctuation">:</span> <span class="token number">3</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// Duration: 时长</span>

<span class="token comment">// DateTime: 日期时间</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 字符串创建</span>
<span class="token comment">//  - 单引号字符串</span>
<span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;peter&#39;</span></span><span class="token punctuation">;</span>
<span class="token comment">//  - 双引号字符串</span>
<span class="token class-name">String</span> country <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;China&quot;</span></span><span class="token punctuation">;</span>
<span class="token comment">//  - 多行字符串</span>
<span class="token class-name">String</span> multi <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;&#39;&#39;
- one
- two
- three
&#39;&#39;&#39;</span></span>
<span class="token comment">//  - 模版字符串</span>
<span class="token class-name">String</span> intro <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;My name is </span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">name</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">;</span>
<span class="token comment">//  如果 {} 内仅包含一个变量标识符，可以省略 {}。</span>
<span class="token class-name">String</span> intro <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;My name is </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">name</span></span><span class="token string">&#39;</span></span><span class="token punctuation">;</span>

<span class="token comment">// 字符串操作</span>
<span class="token comment">//  - 增</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Hello&#39;</span></span> <span class="token operator">+</span> <span class="token string-literal"><span class="token string">&#39;, world.&#39;</span></span>
str <span class="token operator">+=</span> <span class="token string-literal"><span class="token string">&#39; Hello dart.&#39;</span></span>
<span class="token comment">//  - 删</span>
str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 去除字符串前后空格字符</span>
<span class="token comment">//  - 改</span>
str<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Hello&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;Hi&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 替换字符串</span>
str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 转化为小写字母</span>
str<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 转化为大写字母</span>
<span class="token comment">//  - 查</span>
str<span class="token punctuation">.</span>isEmpty<span class="token punctuation">;</span> <span class="token comment">// 字符串是否为空</span>
str<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;dart&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 判断字符串是否包含某字符串</span>
str<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Hello&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 判断字符串是否包含某前缀字符串</span>
str<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;.&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 判断字符串是否包含某后缀字符串</span>
int idx <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;,&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取子串在字符串中的起始索引值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="集合类型" tabindex="-1"><a class="header-anchor" href="#集合类型" aria-hidden="true">#</a> 集合类型</h3><blockquote><p><code>List</code>: 列表</p></blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 列表创建</span>
<span class="token comment">//  - 定长数组</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span></span> nums <span class="token operator">=</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span></span><span class="token punctuation">.</span><span class="token function">filled</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建长度为 3 的数组，初始化值为 0</span>
<span class="token comment">//  - 动态数组</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span></span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 创建空数组</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span></span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 列表操作</span>
<span class="token comment">//  - 增</span>
nums<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 添加元素</span>
nums<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 添加多个元素</span>
nums <span class="token operator">=</span> nums <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 列表加法</span>
<span class="token comment">//  - 删</span>
nums<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 移除元素 3</span>
nums<span class="token punctuation">.</span><span class="token function">removeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 移除索引值为 0 的元素</span>
<span class="token comment">//  - 改</span>
nums<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在索引插入一个元素</span>
nums<span class="token punctuation">.</span><span class="token function">insertAll</span><span class="token punctuation">(</span><span class="token number">0</span>， <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在指定索引插入多个元素</span>
nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 排序(升序)</span>
nums<span class="token punctuation">.</span>reversed<span class="token punctuation">;</span>  <span class="token comment">// 反转</span>
nums<span class="token punctuation">.</span><span class="token function">shuffle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 打乱，使用洗牌算法打乱列表</span>
<span class="token comment">//  - 查</span>
nums<span class="token punctuation">.</span>isEmpty<span class="token punctuation">;</span>   <span class="token comment">// 列表是否为空</span>
nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment">// 列表的长度</span>
nums<span class="token punctuation">.</span>first<span class="token punctuation">;</span>     <span class="token comment">// 列表的第一个元素</span>
nums<span class="token punctuation">.</span>last<span class="token punctuation">;</span>      <span class="token comment">// 列表最后一个元素</span>
nums<span class="token punctuation">.</span><span class="token function">sublist</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取指定索引范围子列表 [left, right)，左闭右开</span>
int idx <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 查询指定元素索引</span>
int idx <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">indexWhere</span><span class="token punctuation">(</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> num <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 查询指定条件元素索引 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>Set</code>: 集合</p></blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 集合创建</span>
<span class="token keyword">var</span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 空集合</span>
<span class="token keyword">var</span> <span class="token keyword">set</span><span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 集合操作</span>
<span class="token comment">//  - 增</span>
<span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 添加单个元素</span>
<span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 添加多个元素</span>
<span class="token comment">//  - 删</span>
<span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 删除指定元素</span>
<span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// 删除多个元素</span>
<span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">removeWhere</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> item <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删除指定条件元素</span>
<span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 清空集合</span>
<span class="token comment">//  - 改</span>
<span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 插入重复元素，仅保留一个</span>
<span class="token comment">//  - 查</span>
<span class="token keyword">set</span><span class="token punctuation">.</span>isEmpty<span class="token punctuation">;</span>    <span class="token comment">// 集合是否为空</span>
<span class="token keyword">set</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>     <span class="token comment">// 获取集合长度</span>
<span class="token keyword">set</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span>      <span class="token comment">// 获取集合第一个元素</span>
<span class="token keyword">set</span><span class="token punctuation">.</span>last<span class="token punctuation">;</span>       <span class="token comment">// 获取集合最后一个元素</span>
<span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 查询集合是否包含某个值</span>
<span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">containsAll</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 查询集合是否包含多个值</span>

<span class="token comment">// 集合运算</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//  - 交集</span>
a<span class="token punctuation">.</span><span class="token function">intersection</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 取交集，[2, 3]</span>
<span class="token comment">//  - 并集</span>
a<span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 取并集，[1, 2, 3, 4]</span>
<span class="token comment">//  - 差值</span>
a<span class="token punctuation">.</span><span class="token function">difference</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 取差值，[1]</span>

<span class="token comment">// 集合转化</span>
<span class="token comment">//  - Set -&gt; List</span>
<span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>Map</code>: 哈希表</p></blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 哈希表创建</span>
<span class="token comment">//  - 字面量创建</span>
<span class="token keyword">var</span> map <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string-literal"><span class="token string">&#39;one&#39;</span></span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;two&#39;</span></span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//  - 指定类型创建</span>
<span class="token keyword">var</span> map <span class="token operator">=</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> int<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> map <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 空哈希表</span>

<span class="token comment">// 哈希表操作</span>
<span class="token comment">//  - 增</span>
map<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;one&#39;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
map<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;two&#39;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string-literal"><span class="token string">&#39;three&#39;</span></span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;four&#39;</span></span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//  - 删</span>
map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;one&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 删除指定键数据</span>
map<span class="token punctuation">.</span><span class="token function">removeWhere</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> key <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&#39;one&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删除指定条件键值</span>
map<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 清空哈希表</span>
<span class="token comment">//  - 改</span>
map<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;one&#39;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span> 
map<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;one&#39;</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> value <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 更新指定键值</span>
map<span class="token punctuation">.</span><span class="token function">updateAll</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> value <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 更新所有键值</span>
<span class="token comment">//  - 查</span>
map<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;one&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment">// 获取指定键值</span>
map<span class="token punctuation">.</span>isEmpty<span class="token punctuation">;</span>    <span class="token comment">// 哈希表是否为空</span>
map<span class="token punctuation">.</span>length<span class="token punctuation">;</span>     <span class="token comment">// 哈希表长度</span>
map<span class="token punctuation">.</span>keys<span class="token punctuation">;</span>       <span class="token comment">// 获取键列表</span>
map<span class="token punctuation">.</span>values<span class="token punctuation">;</span>     <span class="token comment">// 获取值列表</span>
map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;three&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 查询哈希表是否包含某个键</span>
map<span class="token punctuation">.</span><span class="token function">containsValue</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 查询哈希表是否包含某个值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="可空类型" tabindex="-1"><a class="header-anchor" href="#可空类型" aria-hidden="true">#</a> 可空类型</h3><blockquote><p><code>null safety</code>: 空安全</p></blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 非空类型，不能被设置为 null</span>
<span class="token class-name">String</span> a<span class="token punctuation">;</span> 
a <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 编译 ❌</span>

<span class="token comment">// 可空类型，可以被设置为 null</span>
<span class="token class-name">String</span><span class="token operator">?</span> a<span class="token punctuation">;</span> 
a <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token comment">// ✅</span>

<span class="token comment">// 可空类型强制解包</span>
a <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;dart&#39;</span></span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> a<span class="token operator">!</span><span class="token punctuation">;</span> <span class="token comment">// 此时 b 字符串 未非空类型。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换" aria-hidden="true">#</a> 类型转换</h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// String -&gt; int</span>
int num <span class="token operator">=</span> int<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;30&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// int -&gt; String</span>
num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// String -&gt; double</span>
int pi <span class="token operator">=</span> double<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;3.14&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// double -&gt; String</span>
pi<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// double -&gt; int</span>
int i <span class="token operator">=</span> pi<span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// int -&gt; double</span>
double d <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">toDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="操作符" tabindex="-1"><a class="header-anchor" href="#操作符" aria-hidden="true">#</a> 操作符</h2><h3 id="算术运算符" tabindex="-1"><a class="header-anchor" href="#算术运算符" aria-hidden="true">#</a> 算术运算符 <code>+ - * / ~/ %</code></h3><ul><li><code>/</code> : 除法，计算结果为 double</li><li><code>~/</code> : 取整，得到两数相除的整数结果</li><li><code>%</code>: 取余</li></ul><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>int a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
int b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// c 为 double，值为 7.5</span>
<span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">~/</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// d 为 int， 值为 7</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="比较运算符" tabindex="-1"><a class="header-anchor" href="#比较运算符" aria-hidden="true">#</a> 比较运算符 <code>= &gt; &lt;</code></h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>int a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
int b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
bool result <span class="token operator">=</span> a <span class="token operator">==</span> b<span class="token punctuation">;</span>
bool result <span class="token operator">=</span> a <span class="token operator">!=</span> b<span class="token punctuation">;</span>
bool result <span class="token operator">=</span> a <span class="token operator">&gt;</span> b<span class="token punctuation">;</span>
bool result <span class="token operator">=</span> a <span class="token operator">&lt;</span> b<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符" aria-hidden="true">#</a> 逻辑运算符 <code>&amp;&amp; || !</code></h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="位运算符" tabindex="-1"><a class="header-anchor" href="#位运算符" aria-hidden="true">#</a> 位运算符 <code>&amp; | ~ ^ &lt;&lt; &gt;&gt;</code></h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="条件表达式" tabindex="-1"><a class="header-anchor" href="#条件表达式" aria-hidden="true">#</a> 条件表达式 <code>?: ??</code></h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// ?: - 条件表达式</span>
<span class="token keyword">var</span> isOk <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> isOk <span class="token operator">?</span> <span class="token string-literal"><span class="token string">&#39;success&#39;</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;failure&#39;</span></span><span class="token punctuation">;</span>

<span class="token comment">// ?? - 可选择取值表达式，不为空返回该值，为空返回后面值</span>
<span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token operator">?</span>
name <span class="token operator">=</span> name <span class="token operator">?</span><span class="token operator">?</span> <span class="token string-literal"><span class="token string">&#39;peter&#39;</span></span><span class="token punctuation">;</span>
name <span class="token operator">?</span><span class="token operator">?</span><span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;peter&#39;</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="级联操作符" tabindex="-1"><a class="header-anchor" href="#级联操作符" aria-hidden="true">#</a> 级联操作符 <code>..</code></h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><h2 id="流程控制" tabindex="-1"><a class="header-anchor" href="#流程控制" aria-hidden="true">#</a> 流程控制</h2><h3 id="分支-if-else-switch-case" tabindex="-1"><a class="header-anchor" href="#分支-if-else-switch-case" aria-hidden="true">#</a> 分支 <code>if-else switch-case</code></h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// if-else</span>
bool isDone <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>isDone<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;done!&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;todo!&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// switch-case</span>
<span class="token comment">//  - 基础类型中使用</span>
<span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;one&#39;</span></span><span class="token punctuation">;</span>
<span class="token keyword">switch</span> key <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&#39;one&#39;</span></span><span class="token punctuation">;</span> 
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;1&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&#39;two&#39;</span></span><span class="token punctuation">:</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;2&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token punctuation">:</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;404&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>   
<span class="token comment">//  - 枚举中使用</span>
<span class="token keyword">enum</span> <span class="token class-name">Arrow</span> <span class="token punctuation">{</span> top<span class="token punctuation">,</span> bottom<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right <span class="token punctuation">}</span>
<span class="token keyword">var</span> arrow <span class="token operator">=</span> <span class="token class-name">Arrow</span><span class="token punctuation">.</span>top<span class="token punctuation">;</span>
<span class="token keyword">switch</span> arrow <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token class-name">Arrow</span><span class="token punctuation">.</span>top<span class="token punctuation">:</span> 
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;arrow top&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token class-name">Arrow</span><span class="token punctuation">.</span>bottom<span class="token punctuation">:</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;arrow bottom&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token class-name">Arrow</span><span class="token punctuation">.</span>left<span class="token punctuation">:</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;arrow left&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token class-name">Arrow</span><span class="token punctuation">.</span>right<span class="token punctuation">:</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;arrow right&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>   
        <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="循环-for-while" tabindex="-1"><a class="header-anchor" href="#循环-for-while" aria-hidden="true">#</a> 循环 <code>for while</code></h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 打印 0 ~ 99</span>
<span class="token comment">//  - for 循环</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
<span class="token comment">//  - while 循环</span>
<span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//  - do-while 循环</span>
<span class="token keyword">var</span> isDone <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token keyword">do</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;do it&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span>isDone<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h2><h3 id="函数类型" tabindex="-1"><a class="header-anchor" href="#函数类型" aria-hidden="true">#</a> 函数类型</h3><blockquote><p>所有函数都是 <code>Function</code> 对象，函数可以被分配给变量或者作为参数传递给其它函数。也可以将函数赋值给 <code>Function</code> 类型的变量。</p></blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// Function 定义函数</span>
int <span class="token class-name">Function</span><span class="token punctuation">(</span>int<span class="token punctuation">,</span> int<span class="token punctuation">)</span> add <span class="token operator">=</span> <span class="token punctuation">(</span>int a<span class="token punctuation">,</span> int b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Function 定义可选参数函数</span>
<span class="token class-name">String</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span> say <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name">String</span> msg<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Hello </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">name</span></span><span class="token string">&#39;</span></span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    result <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">result</span></span><span class="token string">. </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">msg</span></span><span class="token string">&#39;</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">say</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Peter&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="普通函数" tabindex="-1"><a class="header-anchor" href="#普通函数" aria-hidden="true">#</a> 普通函数</h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 无参数、无返回值函数</span>
<span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;do something.&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 有参数，有返回值函数</span>
int <span class="token function">add</span><span class="token punctuation">(</span>int a<span class="token punctuation">,</span> int b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
<span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 + 1 = 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="可选参数函数" tabindex="-1"><a class="header-anchor" href="#可选参数函数" aria-hidden="true">#</a> 可选参数函数</h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 可选(默认)参数: 使用 [] 进行包裹</span>
<span class="token keyword">void</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token operator">?</span> msg<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">name</span></span><span class="token string">!&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">msg</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">name</span></span><span class="token string">!&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 可选参数，设置默认值</span>
<span class="token keyword">void</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Hello&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">msg</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">name</span></span><span class="token string">!&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">greet</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Peter&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello, Peter!</span>
<span class="token function">greet</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Peter&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;Hi&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hi, Peter!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="命名参数函数" tabindex="-1"><a class="header-anchor" href="#命名参数函数" aria-hidden="true">#</a> 命名参数函数</h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 命名参数: 使用 {} 进行包裹</span>
<span class="token keyword">void</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> int age<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Welcome </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">name</span></span><span class="token string">! You are </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">age</span></span><span class="token string"> years old.&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">greet</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;Peter&#39;</span></span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="箭头函数" tabindex="-1"><a class="header-anchor" href="#箭头函数" aria-hidden="true">#</a> 箭头函数</h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// \`=&gt;\` 函数就是 \`{ return expression; }\` 的语法糖</span>
<span class="token keyword">void</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Hello, </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">name</span></span><span class="token string">!&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">greet</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Peter&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="嵌套函数" tabindex="-1"><a class="header-anchor" href="#嵌套函数" aria-hidden="true">#</a> 嵌套函数</h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 外部函数</span>
<span class="token keyword">void</span> <span class="token function">outter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 内部嵌套函数</span>
    <span class="token keyword">void</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;This is inner func.&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;This is outer func.&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="闭包" tabindex="-1"><a class="header-anchor" href="#闭包" aria-hidden="true">#</a> 闭包</h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="匿名函数" tabindex="-1"><a class="header-anchor" href="#匿名函数" aria-hidden="true">#</a> 匿名函数</h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="高阶函数" tabindex="-1"><a class="header-anchor" href="#高阶函数" aria-hidden="true">#</a> 高阶函数</h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 函数作为返回值</span>
<span class="token class-name">Function</span> <span class="token function">makeMultiplier</span><span class="token punctuation">(</span>int multiplier<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>int item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> item <span class="token operator">*</span> multiplier<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> multi2 <span class="token operator">=</span> <span class="token function">makeMultiplier</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> multi3 <span class="token operator">=</span> <span class="token function">makeMultiplier</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">multi2</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>
<span class="token function">multi3</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span>

<span class="token comment">// 函数作为参数</span>
<span class="token keyword">void</span> <span class="token function">modifyList</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span> <span class="token class-name">Function</span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">action</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">modifyList</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> number <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2, 4, 6]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,79),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","0x01.guide.html.vue"]]);export{k as default};
