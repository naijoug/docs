import{_ as d}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as c,o as u,c as p,a as h,b as n,e as s,d as e,w as a,f as r}from"./app-m-SMUe_1.js";const _={},k=r('<h2 id="_0000" tabindex="-1"><a class="header-anchor" href="#_0000" aria-hidden="true">#</a> 0000</h2><p>// #region 0000</p><ul><li><a href="">🟢🟠🔴 - </a></li></ul><details class="hint-container details"><summary>💡</summary></details><p>// #endregion 0000</p><h2 id="_0001" tabindex="-1"><a class="header-anchor" href="#_0001" aria-hidden="true">#</a> 0001</h2><p>// #region 0001</p>',7),m={href:"https://leetcode.cn/problems/two-sum",target:"_blank",rel:"noopener noreferrer"},b=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),v=n("p",null,"// #endregion 0001",-1),g=n("h2",{id:"_0002",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0002","aria-hidden":"true"},"#"),s(" 0002")],-1),f=n("p",null,"// #region 0002",-1),y={href:"https://leetcode.cn/problems/add-two-numbers",target:"_blank",rel:"noopener noreferrer"},x=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),w=n("p",null,"// #endregion 0002",-1),N=n("h2",{id:"_0003",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0003","aria-hidden":"true"},"#"),s(" 0003")],-1),L=n("p",null,"// #region 0003",-1),I={href:"https://leetcode.cn/problems/longest-substring-without-repeating-characters",target:"_blank",rel:"noopener noreferrer"},j=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),q=n("p",null,"// #endregion 0003",-1),A=n("h2",{id:"_0004",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0004","aria-hidden":"true"},"#"),s(" 0004")],-1),Q=n("p",null,"// #region 0004",-1),S={href:"https://leetcode.cn/problems/median-of-two-sorted-arrays",target:"_blank",rel:"noopener noreferrer"},D=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),T=n("p",null,"// #endregion 0004",-1),H=n("h2",{id:"_0005",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0005","aria-hidden":"true"},"#"),s(" 0005")],-1),C=n("p",null,"// #region 0005",-1),E={href:"https://leetcode.cn/problems/longest-palindromic-substring/",target:"_blank",rel:"noopener noreferrer"},V=n("blockquote",null,[n("p",null,"给定一个字符串，返回该字符串中最长的回文串。")],-1),K=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),z=n("p",null,"// #endregion 0005",-1),B=n("h2",{id:"_0006",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0006","aria-hidden":"true"},"#"),s(" 0006")],-1),F=n("p",null,"// #region 0006",-1),P={href:"https://leetcode.cn/problems/zigzag-conversion",target:"_blank",rel:"noopener noreferrer"},R=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),G=n("p",null,"// #endregion 0006",-1),J=n("h2",{id:"_0007",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0007","aria-hidden":"true"},"#"),s(" 0007")],-1),M=n("p",null,"// #region 0007",-1),O={href:"https://leetcode.cn/problems/reverse-integer",target:"_blank",rel:"noopener noreferrer"},U=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),W=n("p",null,"// #endregion 0007",-1),X=n("h2",{id:"_0008",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0008","aria-hidden":"true"},"#"),s(" 0008")],-1),Y=n("p",null,"// #region 0008",-1),Z={href:"https://leetcode.cn/problems/string-to-integer-atoi",target:"_blank",rel:"noopener noreferrer"},$=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),nn=n("p",null,"// #endregion 0008",-1),sn=n("h2",{id:"_0009",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0009","aria-hidden":"true"},"#"),s(" 0009")],-1),en=n("p",null,"// #region 0009",-1),tn={href:"https://leetcode.cn/problems/palindrome-number",target:"_blank",rel:"noopener noreferrer"},an=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),on=n("p",null,"// #endregion 0009",-1),ln=n("h2",{id:"_0010",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0010","aria-hidden":"true"},"#"),s(" 0010")],-1),cn=n("p",null,"// #region 0010",-1),rn={href:"https://leetcode.cn/problems/regular-expression-matching",target:"_blank",rel:"noopener noreferrer"},dn=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),un=n("p",null,"// #endregion 0010",-1),pn=n("h2",{id:"_0011",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0011","aria-hidden":"true"},"#"),s(" 0011")],-1),hn=n("p",null,"// #region 0011",-1),_n={href:"https://leetcode.cn/problems/container-with-most-water",target:"_blank",rel:"noopener noreferrer"},kn=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),mn=n("p",null,"// #endregion 0011",-1),bn=n("h2",{id:"_0012",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0012","aria-hidden":"true"},"#"),s(" 0012")],-1),vn=n("p",null,"// #region 0012",-1),gn={href:"https://leetcode.cn/problems/integer-to-roman",target:"_blank",rel:"noopener noreferrer"},fn=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),yn=n("p",null,"// #endregion 0012",-1),xn=n("h2",{id:"_0013",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0013","aria-hidden":"true"},"#"),s(" 0013")],-1),wn=n("p",null,"// #region 0013",-1),Nn={href:"https://leetcode.cn/problems/roman-to-integer",target:"_blank",rel:"noopener noreferrer"},Ln=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),In=n("p",null,"// #endregion 0013",-1),jn=n("h2",{id:"_0014",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0014","aria-hidden":"true"},"#"),s(" 0014")],-1),qn=n("p",null,"// #region 0014",-1),An={href:"https://leetcode.cn/problems/longest-common-prefix",target:"_blank",rel:"noopener noreferrer"},Qn=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Sn=n("p",null,"// #endregion 0014",-1),Dn=n("h2",{id:"_0015",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0015","aria-hidden":"true"},"#"),s(" 0015")],-1),Tn=n("p",null,"// #region 0015",-1),Hn={href:"https://leetcode.cn/problems/3sum",target:"_blank",rel:"noopener noreferrer"},Cn=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),En=n("p",null,"// #endregion 0015",-1),Vn=n("h2",{id:"_0016",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0016","aria-hidden":"true"},"#"),s(" 0016")],-1),Kn=n("p",null,"// #region 0016",-1),zn={href:"https://leetcode.cn/problems/3sum-closest",target:"_blank",rel:"noopener noreferrer"},Bn=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Fn=n("p",null,"// #endregion 0016",-1),Pn=n("h2",{id:"_0017",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0017","aria-hidden":"true"},"#"),s(" 0017")],-1),Rn=n("p",null,"// #region 0017",-1),Gn={href:"https://leetcode.cn/problems/letter-combinations-of-a-phone-number",target:"_blank",rel:"noopener noreferrer"},Jn=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Mn=n("p",null,"// #endregion 0017",-1),On=n("h2",{id:"_0018",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0018","aria-hidden":"true"},"#"),s(" 0018")],-1),Un=n("p",null,"// #region 0018",-1),Wn={href:"https://leetcode.cn/problems/4sum",target:"_blank",rel:"noopener noreferrer"},Xn=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Yn=n("p",null,"// #endregion 0018",-1),Zn=n("h2",{id:"_0019",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0019","aria-hidden":"true"},"#"),s(" 0019")],-1),$n=n("p",null,"// #region 0019",-1),ns={href:"https://leetcode.cn/problems/remove-nth-node-from-end-of-list/",target:"_blank",rel:"noopener noreferrer"},ss=n("blockquote",null,[n("p",null,"删除单链表的倒数第 N 个节点，并返回头结点。")],-1),es={class:"hint-container details"},ts=n("summary",null,"详情",-1),as=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token doc-comment comment"},[s(`/**
 * Definition for singly-linked list.
 * public class ListNode `),n("span",{class:"token punctuation"},"{"),s(`
 *     int val;
 *     ListNode next;
 *     ListNode() `),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),s(`
 *     ListNode(int val) `),n("span",{class:"token punctuation"},"{"),s(" this.val = val; "),n("span",{class:"token punctuation"},"}"),s(`
 *     ListNode(int val, ListNode next) `),n("span",{class:"token punctuation"},"{"),s(" this.val = val; this.next = next; "),n("span",{class:"token punctuation"},"}"),s(`
 * `),n("span",{class:"token punctuation"},"}"),s(`
 */`)]),s(`
`),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Solution"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"ListNode"),s(),n("span",{class:"token function"},"removeNthFromEnd"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"ListNode"),s(" head"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"int"),s(" n"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// 创建虚头节点，解决删除后链表为空的特殊情况，减少判断逻辑"),s(`
        `),n("span",{class:"token class-name"},"ListNode"),s(" dummy "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        dummy`),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(" head"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token class-name"},"ListNode"),s(" p "),n("span",{class:"token operator"},"="),s(" dummy"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token class-name"},"ListNode"),s(" target "),n("span",{class:"token operator"},"="),s(" dummy"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token comment"},"// p 指针先走 n 步"),s(`
        `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" n"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            p `),n("span",{class:"token operator"},"="),s(" p"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token comment"},"// p 指针和目标指针开始同时走"),s(`
        `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("p"),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            p `),n("span",{class:"token operator"},"="),s(" p"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
            target `),n("span",{class:"token operator"},"="),s(" target"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token comment"},"// 删除目标节点后面节点"),s(`
        target`),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(" target"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"return"),s(" dummy"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),os=n("div",{class:"language-swift line-numbers-mode","data-ext":"swift"},[n("pre",{class:"language-swift"},[n("code",null,[n("span",{class:"token comment"},`/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init() { self.val = 0; self.next = nil; }
 *     public init(_ val: Int) { self.val = val; self.next = nil; }
 *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }
 * }
 */`),s(`
`),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Solution"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"func"),s(),n("span",{class:"token function-definition function"},"removeNthFromEnd"),n("span",{class:"token punctuation"},"("),n("span",{class:"token omit keyword"},"_"),s(" head"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token omit keyword"},"_"),s(" n"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"Int"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"->"),s(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"let"),s(" dummy "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(" head"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token keyword"},"var"),s(" p1"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token operator"},"="),s(` head
        `),n("span",{class:"token keyword"},"var"),s(" p2"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token operator"},"="),s(` dummy
        `),n("span",{class:"token keyword"},"var"),s(" count "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),s(`
        `),n("span",{class:"token keyword"},"while"),s(" p1"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token nil constant"},"nil"),s(),n("span",{class:"token punctuation"},"{"),s(`
            p1 `),n("span",{class:"token operator"},"="),s(" p1"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),s(`next
            count `),n("span",{class:"token operator"},"+="),s(),n("span",{class:"token number"},"1"),s(`
            `),n("span",{class:"token keyword"},"guard"),s(" count "),n("span",{class:"token operator"},">="),s(" n "),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token keyword"},"continue"),s(),n("span",{class:"token punctuation"},"}"),s(`
            p2 `),n("span",{class:"token operator"},"="),s(" p2"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),s(`next
        `),n("span",{class:"token punctuation"},"}"),s(`
        p2`),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(" p2"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),s(`next
        `),n("span",{class:"token keyword"},"return"),s(" dummy"),n("span",{class:"token punctuation"},"."),s(`next
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),ls=n("p",null,"// #endregion 0019",-1),is=n("h2",{id:"_0020",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0020","aria-hidden":"true"},"#"),s(" 0020")],-1),cs=n("p",null,"// #region 0020",-1),rs={href:"https://leetcode.cn/problems/valid-parentheses",target:"_blank",rel:"noopener noreferrer"},ds=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),us=n("p",null,"// #endregion 0020",-1),ps=n("h2",{id:"_0021",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0021","aria-hidden":"true"},"#"),s(" 0021")],-1),hs=n("p",null,"// #region 0021",-1),_s={href:"https://leetcode.cn/problems/merge-two-sorted-lists",target:"_blank",rel:"noopener noreferrer"},ks=n("blockquote",null,[n("p",null,"合并两个有序的链表。")],-1),ms={class:"hint-container details"},bs=n("summary",null,"💡",-1),vs=n("p",null,"【思路】创建一个结果链表头，并用一个指针指向这个结果链表用于指向添加位置。然后分别使用两个指针指向两个链表，每次比较比较链表中的值，将较小的链表中的节点添加到结果链表中。直到其中一个链表中已为空，最后将剩下不为空的链表全部添加到结果链表中。",-1),gs=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token doc-comment comment"},[s(`/**
 * Definition for singly-linked list.
 * public class ListNode `),n("span",{class:"token punctuation"},"{"),s(`
 *     int val;
 *     ListNode next;
 *     ListNode() `),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),s(`
 *     ListNode(int val) `),n("span",{class:"token punctuation"},"{"),s(" this.val = val; "),n("span",{class:"token punctuation"},"}"),s(`
 *     ListNode(int val, ListNode next) `),n("span",{class:"token punctuation"},"{"),s(" this.val = val; this.next = next; "),n("span",{class:"token punctuation"},"}"),s(`
 * `),n("span",{class:"token punctuation"},"}"),s(`
 */`)]),s(`
`),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Solution"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"ListNode"),s(),n("span",{class:"token function"},"mergeTwoLists"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"ListNode"),s(" list1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"ListNode"),s(" list2"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// 头结点：指向结果链表头部"),s(`
        `),n("span",{class:"token class-name"},"ListNode"),s(" head "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token class-name"},"ListNode"),s(" p "),n("span",{class:"token operator"},"="),s(" head"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token class-name"},"ListNode"),s(" p1 "),n("span",{class:"token operator"},"="),s(" list1"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token class-name"},"ListNode"),s(" p2 "),n("span",{class:"token operator"},"="),s(" list2"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s(" p1 "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"null"),s(),n("span",{class:"token operator"},"&&"),s(" p2 "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"null"),s(),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token comment"},"// 比较两个链表中值小的添加到结果链表中"),s(`
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s(" p1"),n("span",{class:"token punctuation"},"."),s("val "),n("span",{class:"token operator"},"<="),s(" p2"),n("span",{class:"token punctuation"},"."),s("val "),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                p`),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(" p1"),n("span",{class:"token punctuation"},";"),s(`
                p1 `),n("span",{class:"token operator"},"="),s(" p1"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
                p`),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(" p2"),n("span",{class:"token punctuation"},";"),s(`
                p2 `),n("span",{class:"token operator"},"="),s(" p2"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
            p `),n("span",{class:"token operator"},"="),s(" p"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token comment"},"// 将不为空的链表添加到结果链表尾部"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s(" p1 "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"null"),s(),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            p`),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(" p1"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s(" p2 "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"null"),s(),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            p`),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(" p2"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"return"),s(" head"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),fs=n("div",{class:"language-swift line-numbers-mode","data-ext":"swift"},[n("pre",{class:"language-swift"},[n("code",null,[n("span",{class:"token comment"},`/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.next = nil
 *     }
 * }
 */`),s(`
`),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Solution"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"func"),s(),n("span",{class:"token function-definition function"},"mergeTwoLists"),n("span",{class:"token punctuation"},"("),n("span",{class:"token omit keyword"},"_"),s(" l1"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token omit keyword"},"_"),s(" l2"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"->"),s(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"guard"),s(),n("span",{class:"token keyword"},"let"),s(" l1 "),n("span",{class:"token operator"},"="),s(" l1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"let"),s(" l2 "),n("span",{class:"token operator"},"="),s(" l2 "),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"return"),s(" l1 "),n("span",{class:"token operator"},"??"),s(` l2
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"let"),s(" head "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token keyword"},"var"),s(" p"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token operator"},"="),s(` head
        `),n("span",{class:"token keyword"},"var"),s(" op1"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token operator"},"="),s(` l1
        `),n("span",{class:"token keyword"},"var"),s(" op2"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token operator"},"="),s(` l2
        `),n("span",{class:"token comment"},"// 遍历两个链表，并将较小值节点添加到结果链表"),s(`
        `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token keyword"},"let"),s(" p1 "),n("span",{class:"token operator"},"="),s(" op1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"let"),s(" p2 "),n("span",{class:"token operator"},"="),s(" op2 "),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"if"),s(" p1"),n("span",{class:"token punctuation"},"."),s("val "),n("span",{class:"token operator"},"<="),s(" p2"),n("span",{class:"token punctuation"},"."),s("val "),n("span",{class:"token punctuation"},"{"),s(`
                p`),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(` p1
                op1 `),n("span",{class:"token operator"},"="),s(" op1"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),s(`next
            `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
                p`),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(` p2
                op2 `),n("span",{class:"token operator"},"="),s(" op2"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),s(`next
            `),n("span",{class:"token punctuation"},"}"),s(`
            p `),n("span",{class:"token operator"},"="),s(" p"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),s(`next
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token comment"},"// 将不为空的链表添加到结果链表后面"),s(`
        p`),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(" op1 "),n("span",{class:"token operator"},"??"),s(` op2
        `),n("span",{class:"token keyword"},"return"),s(" head"),n("span",{class:"token punctuation"},"."),s(`next
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),ys=n("p",null,"// #endregion 0021",-1),xs=n("h2",{id:"_0022-✅",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0022-✅","aria-hidden":"true"},"#"),s(" 0022 ✅")],-1),ws=n("p",null,"// #region 0022",-1),Ns={href:"https://leetcode.cn/problems/generate-parentheses",target:"_blank",rel:"noopener noreferrer"},Ls=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Is=n("p",null,"// #endregion 0022",-1),js=n("h2",{id:"_0023-✅",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0023-✅","aria-hidden":"true"},"#"),s(" 0023 ✅")],-1),qs=n("p",null,"// #region 0023",-1),As={href:"https://leetcode.cn/problems/merge-k-sorted-lists",target:"_blank",rel:"noopener noreferrer"},Qs=n("blockquote",null,[n("p",null,"给定一个升序链表数组，合并得到一个升序链表，并返回头结点。")],-1),Ss={class:"hint-container details"},Ds=n("summary",null,"💡",-1),Ts=n("p",null,"【思路1】合并两个升序链表比较容易解决。合并多个链表，可以先两个两个合并，最后就合并成一个了。",-1),Hs=n("p",null,"【思路2】分治思想，类似归并排序，两两合并，最后合并成为结果链表。",-1),Cs=n("p",null,"【思路3】优先级队列，每次将 K 个链表的头结点放入优先级队列中，那么可以每次从优先级队列中取出最小值节点放入结果链表，然后再将该节点的下一个节点放入优先级队列，直到合并完成。",-1),Es=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token doc-comment comment"},[s(`/**
 * Definition for singly-linked list.
 * public class ListNode `),n("span",{class:"token punctuation"},"{"),s(`
 *     int val;
 *     ListNode next;
 *     ListNode() `),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),s(`
 *     ListNode(int val) `),n("span",{class:"token punctuation"},"{"),s(" this.val = val; "),n("span",{class:"token punctuation"},"}"),s(`
 *     ListNode(int val, ListNode next) `),n("span",{class:"token punctuation"},"{"),s(" this.val = val; this.next = next; "),n("span",{class:"token punctuation"},"}"),s(`
 * `),n("span",{class:"token punctuation"},"}"),s(`
 */`)]),s(`
`),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Solution"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"ListNode"),s(),n("span",{class:"token function"},"mergeKLists"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(" lists"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s(" lists"),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s(" lists"),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token keyword"},"return"),s(" lists"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token comment"},"// 遍历链表数组，每次取出一个链表，进行两条链表合并"),s(`
        `),n("span",{class:"token class-name"},"ListNode"),s(" l1 "),n("span",{class:"token operator"},"="),s(" lists"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),s(),n("span",{class:"token keyword"},"int"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" lists"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),s(),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token class-name"},"ListNode"),s(" l2 "),n("span",{class:"token operator"},"="),s(" lists"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
            l1 `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"mergeTwoLists"),n("span",{class:"token punctuation"},"("),s("l1"),n("span",{class:"token punctuation"},","),s(" l2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"return"),s(" l1"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token comment"},"// 合并两个升序链表"),s(`
    `),n("span",{class:"token class-name"},"ListNode"),s(),n("span",{class:"token function"},"mergeTwoLists"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"ListNode"),s(" l1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"ListNode"),s(" l2"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token class-name"},"ListNode"),s(" head "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token class-name"},"ListNode"),s(" p "),n("span",{class:"token operator"},"="),s(" head"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token class-name"},"ListNode"),s(" p1 "),n("span",{class:"token operator"},"="),s(" l1"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token class-name"},"ListNode"),s(" p2 "),n("span",{class:"token operator"},"="),s(" l2"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s(" p1 "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"null"),s(),n("span",{class:"token operator"},"&&"),s(" p2 "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"null"),s(),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s(" p1"),n("span",{class:"token punctuation"},"."),s("val "),n("span",{class:"token operator"},"<="),s(" p2"),n("span",{class:"token punctuation"},"."),s("val "),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                p`),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(" p1"),n("span",{class:"token punctuation"},";"),s(`
                p1 `),n("span",{class:"token operator"},"="),s(" p1"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
                p`),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(" p2"),n("span",{class:"token punctuation"},";"),s(`
                p2 `),n("span",{class:"token operator"},"="),s(" p2"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
            p `),n("span",{class:"token operator"},"="),s(" p"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s(" p1 "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"null"),s(),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            p`),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(" p1"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s(" p2 "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"null"),s(),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            p`),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(" p2"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"return"),s(" head"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Vs=n("p",null,"// #endregion 0023",-1),Ks=n("h2",{id:"_0024",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0024","aria-hidden":"true"},"#"),s(" 0024")],-1),zs=n("p",null,"// #region 0024",-1),Bs={href:"https://leetcode.cn/problems/swap-nodes-in-pairs",target:"_blank",rel:"noopener noreferrer"},Fs=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Ps=n("p",null,"// #endregion 0024",-1),Rs=n("h2",{id:"_0025",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0025","aria-hidden":"true"},"#"),s(" 0025")],-1),Gs=n("p",null,"// #region 0025",-1),Js={href:"https://leetcode.cn/problems/reverse-nodes-in-k-group",target:"_blank",rel:"noopener noreferrer"},Ms=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Os=n("p",null,"// #endregion 0025",-1),Us=n("h2",{id:"_0026",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0026","aria-hidden":"true"},"#"),s(" 0026")],-1),Ws=n("p",null,"// #region 0026",-1),Xs={href:"https://leetcode.cn/problems/remove-duplicates-from-sorted-array",target:"_blank",rel:"noopener noreferrer"},Ys=n("blockquote",null,[n("p",null,"给定一个有序数组，删除数组中的重复项，并返回数组新长度。")],-1),Zs=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),$s=n("p",null,"// #endregion 0026",-1),ne=n("h2",{id:"_0027",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0027","aria-hidden":"true"},"#"),s(" 0027")],-1),se=n("p",null,"// #region 0027",-1),ee={href:"https://leetcode.cn/problems/remove-element",target:"_blank",rel:"noopener noreferrer"},te=n("blockquote",null,[n("p",null,"给定一个数组和目标值，需要将数组中的与目标值相等的元素移除，返回数组新长度。")],-1),ae=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),oe=n("p",null,"// #endregion 0027",-1),le=n("h2",{id:"_0028",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0028","aria-hidden":"true"},"#"),s(" 0028")],-1),ie=n("p",null,"// #region 0028",-1),ce={href:"https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string",target:"_blank",rel:"noopener noreferrer"},re=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),de=n("p",null,"// #endregion 0028",-1),ue=n("h2",{id:"_0029",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0029","aria-hidden":"true"},"#"),s(" 0029")],-1),pe=n("p",null,"// #region 0029",-1),he={href:"https://leetcode.cn/problems/divide-two-integers",target:"_blank",rel:"noopener noreferrer"},_e=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),ke=n("p",null,"// #endregion 0029",-1),me=n("h2",{id:"_0030",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0030","aria-hidden":"true"},"#"),s(" 0030")],-1),be=n("p",null,"// #region 0030",-1),ve={href:"https://leetcode.cn/problems/substring-with-concatenation-of-all-words",target:"_blank",rel:"noopener noreferrer"},ge=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),fe=n("p",null,"// #endregion 0030",-1),ye=n("h2",{id:"_0031",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0031","aria-hidden":"true"},"#"),s(" 0031")],-1),xe=n("p",null,"// #region 0031",-1),we={href:"https://leetcode.cn/problems/next-permutation",target:"_blank",rel:"noopener noreferrer"},Ne=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Le=n("p",null,"// #endregion 0031",-1),Ie=n("h2",{id:"_0032",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0032","aria-hidden":"true"},"#"),s(" 0032")],-1),je=n("p",null,"// #region 0032",-1),qe={href:"https://leetcode.cn/problems/longest-valid-parentheses",target:"_blank",rel:"noopener noreferrer"},Ae=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Qe=n("p",null,"// #endregion 0032",-1),Se=n("h2",{id:"_0033",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0033","aria-hidden":"true"},"#"),s(" 0033")],-1),De=n("p",null,"// #region 0033",-1),Te={href:"https://leetcode.cn/problems/search-in-rotated-sorted-array",target:"_blank",rel:"noopener noreferrer"},He=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Ce=n("p",null,"// #endregion 0033",-1),Ee=n("h2",{id:"_0034",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0034","aria-hidden":"true"},"#"),s(" 0034")],-1),Ve=n("p",null,"// #region 0034",-1),Ke={href:"https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array",target:"_blank",rel:"noopener noreferrer"},ze=n("blockquote",null,[n("p",null,"给定一个非递减数组和一个目标值，查找该目标值在数组中的开始位置和结束位置，如果存在则返回 [start, end]，如果不存在返回 [-1, -1]。")],-1),Be=r(`<details class="hint-container details"><summary>💡</summary><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">searchRange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>// #endregion 0034</p><h2 id="_0035" tabindex="-1"><a class="header-anchor" href="#_0035" aria-hidden="true">#</a> 0035</h2><p>// #region 0035</p>`,4),Fe={href:"https://leetcode.cn/problems/search-insert-position",target:"_blank",rel:"noopener noreferrer"},Pe=n("blockquote",null,[n("p",null,"给定一个升序数组和一个目标值，如果目标值在数组中存在返回目标值索引，如果不存在返回插入位置索引。")],-1),Re=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Ge=n("p",null,"// #endregion 0035",-1),Je=n("h2",{id:"_0036",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0036","aria-hidden":"true"},"#"),s(" 0036")],-1),Me=n("p",null,"// #region 0036",-1),Oe={href:"https://leetcode.cn/problems/valid-sudoku",target:"_blank",rel:"noopener noreferrer"},Ue=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),We=n("p",null,"// #endregion 0036",-1),Xe=n("h2",{id:"_0037",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0037","aria-hidden":"true"},"#"),s(" 0037")],-1),Ye=n("p",null,"// #region 0037",-1),Ze={href:"https://leetcode.cn/problems/sudoku-solver",target:"_blank",rel:"noopener noreferrer"},$e=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),nt=n("p",null,"// #endregion 0037",-1),st=n("h2",{id:"_0038",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0038","aria-hidden":"true"},"#"),s(" 0038")],-1),et=n("p",null,"// #region 0038",-1),tt={href:"https://leetcode.cn/problems/count-and-say",target:"_blank",rel:"noopener noreferrer"},at=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),ot=n("p",null,"// #endregion 0038",-1),lt=n("h2",{id:"_0039",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0039","aria-hidden":"true"},"#"),s(" 0039")],-1),it=n("p",null,"// #region 0039",-1),ct={href:"https://leetcode.cn/problems/combination-sum",target:"_blank",rel:"noopener noreferrer"},rt=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),dt=n("p",null,"// #endregion 0039",-1),ut=n("h2",{id:"_0040",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0040","aria-hidden":"true"},"#"),s(" 0040")],-1),pt=n("p",null,"// #region 0040",-1),ht={href:"https://leetcode.cn/problems/combination-sum-ii",target:"_blank",rel:"noopener noreferrer"},_t=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),kt=n("p",null,"// #endregion 0040",-1),mt=n("h2",{id:"_0041",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0041","aria-hidden":"true"},"#"),s(" 0041")],-1),bt=n("p",null,"// #region 0041",-1),vt={href:"https://leetcode.cn/problems/first-missing-positive",target:"_blank",rel:"noopener noreferrer"},gt=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),ft=n("p",null,"// #endregion 0041",-1),yt=n("h2",{id:"_0042",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0042","aria-hidden":"true"},"#"),s(" 0042")],-1),xt=n("p",null,"// #region 0042",-1),wt={href:"https://leetcode.cn/problems/trapping-rain-water",target:"_blank",rel:"noopener noreferrer"},Nt=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Lt=n("p",null,"// #endregion 0042",-1),It=n("h2",{id:"_0043",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0043","aria-hidden":"true"},"#"),s(" 0043")],-1),jt=n("p",null,"// #region 0043",-1),qt={href:"https://leetcode.cn/problems/multiply-strings",target:"_blank",rel:"noopener noreferrer"},At=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Qt=n("p",null,"// #endregion 0043",-1),St=n("h2",{id:"_0044",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0044","aria-hidden":"true"},"#"),s(" 0044")],-1),Dt=n("p",null,"// #region 0044",-1),Tt={href:"https://leetcode.cn/problems/wildcard-matching",target:"_blank",rel:"noopener noreferrer"},Ht=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Ct=n("p",null,"// #endregion 0044",-1),Et=n("h2",{id:"_0045",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0045","aria-hidden":"true"},"#"),s(" 0045")],-1),Vt=n("p",null,"// #region 0045",-1),Kt={href:"https://leetcode.cn/problems/jump-game-ii",target:"_blank",rel:"noopener noreferrer"},zt=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Bt=n("p",null,"// #endregion 0045",-1),Ft=n("h2",{id:"_0046",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0046","aria-hidden":"true"},"#"),s(" 0046")],-1),Pt=n("p",null,"// #region 0046",-1),Rt={href:"https://leetcode.cn/problems/permutations",target:"_blank",rel:"noopener noreferrer"},Gt=n("blockquote",null,[n("p",null,"给定一个没有重复数字的数组，返回其所有可能的全排列。")],-1),Jt=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Mt=n("p",null,"// #endregion 0046",-1),Ot=n("h2",{id:"_0047",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0047","aria-hidden":"true"},"#"),s(" 0047")],-1),Ut=n("p",null,"// #region 0047",-1),Wt={href:"https://leetcode.cn/problems/permutations-ii",target:"_blank",rel:"noopener noreferrer"},Xt=n("blockquote",null,[n("p",null,"给定一个包含重复数字的数组，返回所有不重复的全排列。")],-1),Yt=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Zt=n("p",null,"// #endregion 0047",-1),$t=n("h2",{id:"_0048",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0048","aria-hidden":"true"},"#"),s(" 0048")],-1),na=n("p",null,"// #region 0048",-1),sa={href:"https://leetcode.cn/problems/rotate-image",target:"_blank",rel:"noopener noreferrer"},ea=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),ta=n("p",null,"// #endregion 0048",-1),aa=n("h2",{id:"_0049",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0049","aria-hidden":"true"},"#"),s(" 0049")],-1),oa=n("p",null,"// #region 0049",-1),la={href:"https://leetcode.cn/problems/group-anagrams",target:"_blank",rel:"noopener noreferrer"},ia=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),ca=n("p",null,"// #endregion 0049",-1),ra=n("h2",{id:"_0050",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0050","aria-hidden":"true"},"#"),s(" 0050")],-1),da=n("p",null,"// #region 0050",-1),ua={href:"https://leetcode.cn/problems/powx-n",target:"_blank",rel:"noopener noreferrer"},pa=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),ha=n("p",null,"// #endregion 0050",-1),_a=n("h2",{id:"_0051",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0051","aria-hidden":"true"},"#"),s(" 0051")],-1),ka=n("p",null,"// #region 0051",-1),ma={href:"https://leetcode.cn/problems/n-queens",target:"_blank",rel:"noopener noreferrer"},ba=n("blockquote",null,[n("p",null,"将 n 个皇后棋子，放置在 nxn 的棋盘中。'Q'代表皇后，'.'代表空位，返回所有的不同的解决方案。")],-1),va=n("pre",null,[n("code",null,`  示例：
      输入：n = 4
      输出：[[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]
      输入：n = 1
      输出：[["Q"]]
`)],-1),ga=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),fa=n("p",null,"// #endregion 0051",-1),ya=n("h2",{id:"_0052",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0052","aria-hidden":"true"},"#"),s(" 0052")],-1),xa=n("p",null,"// #region 0052",-1),wa={href:"https://leetcode.cn/problems/n-queens-ii",target:"_blank",rel:"noopener noreferrer"},Na=n("blockquote",null,[n("p",null,"返回 N 皇后问题的解决方案数量")],-1),La=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Ia=n("p",null,"// #endregion 0052",-1),ja=n("h2",{id:"_0053",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0053","aria-hidden":"true"},"#"),s(" 0053")],-1),qa=n("p",null,"// #region 0053",-1),Aa={href:"https://leetcode.cn/problems/maximum-subarray",target:"_blank",rel:"noopener noreferrer"},Qa=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Sa=n("p",null,"// #endregion 0053",-1),Da=n("h2",{id:"_0054",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0054","aria-hidden":"true"},"#"),s(" 0054")],-1),Ta=n("p",null,"// #region 0054",-1),Ha={href:"https://leetcode.cn/problems/spiral-matrix",target:"_blank",rel:"noopener noreferrer"},Ca=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Ea=n("p",null,"// #endregion 0054",-1),Va=n("h2",{id:"_0055",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0055","aria-hidden":"true"},"#"),s(" 0055")],-1),Ka=n("p",null,"// #region 0055",-1),za={href:"https://leetcode.cn/problems/jump-game",target:"_blank",rel:"noopener noreferrer"},Ba=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Fa=n("p",null,"// #endregion 0055",-1),Pa=n("h2",{id:"_0056",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0056","aria-hidden":"true"},"#"),s(" 0056")],-1),Ra=n("p",null,"// #region 0056",-1),Ga={href:"https://leetcode.cn/problems/merge-intervals",target:"_blank",rel:"noopener noreferrer"},Ja=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Ma=n("p",null,"// #endregion 0056",-1),Oa=n("h2",{id:"_0057",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0057","aria-hidden":"true"},"#"),s(" 0057")],-1),Ua=n("p",null,"// #region 0057",-1),Wa={href:"https://leetcode.cn/problems/insert-interval",target:"_blank",rel:"noopener noreferrer"},Xa=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Ya=n("p",null,"// #endregion 0057",-1),Za=n("h2",{id:"_0058",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0058","aria-hidden":"true"},"#"),s(" 0058")],-1),$a=n("p",null,"// #region 0058",-1),no={href:"https://leetcode.cn/problems/length-of-last-word",target:"_blank",rel:"noopener noreferrer"},so=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),eo=n("p",null,"// #endregion 0058",-1),to=n("h2",{id:"_0059",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0059","aria-hidden":"true"},"#"),s(" 0059")],-1),ao=n("p",null,"// #region 0059",-1),oo={href:"https://leetcode.cn/problems/spiral-matrix-ii",target:"_blank",rel:"noopener noreferrer"},lo=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),io=n("p",null,"// #endregion 0059",-1),co=n("h2",{id:"_0060",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0060","aria-hidden":"true"},"#"),s(" 0060")],-1),ro=n("p",null,"// #region 0060",-1),uo={href:"https://leetcode.cn/problems/permutation-sequence",target:"_blank",rel:"noopener noreferrer"},po=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),ho=n("p",null,"// #endregion 0060",-1),_o=n("h2",{id:"_0061",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0061","aria-hidden":"true"},"#"),s(" 0061")],-1),ko=n("p",null,"// #region 0061",-1),mo={href:"https://leetcode.cn/problems/rotate-list",target:"_blank",rel:"noopener noreferrer"},bo=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),vo=n("p",null,"// #endregion 0061",-1),go=n("h2",{id:"_0062",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0062","aria-hidden":"true"},"#"),s(" 0062")],-1),fo=n("p",null,"// #region 0062",-1),yo={href:"https://leetcode.cn/problems/unique-paths",target:"_blank",rel:"noopener noreferrer"},xo=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),wo=n("p",null,"// #endregion 0062",-1),No=n("h2",{id:"_0063",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0063","aria-hidden":"true"},"#"),s(" 0063")],-1),Lo=n("p",null,"// #region 0063",-1),Io={href:"https://leetcode.cn/problems/unique-paths-ii",target:"_blank",rel:"noopener noreferrer"},jo=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),qo=n("p",null,"// #endregion 0063",-1),Ao=n("h2",{id:"_0064",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0064","aria-hidden":"true"},"#"),s(" 0064")],-1),Qo=n("p",null,"// #region 0064",-1),So={href:"https://leetcode.cn/problems/minimum-path-sum",target:"_blank",rel:"noopener noreferrer"},Do=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),To=n("p",null,"// #endregion 0064",-1),Ho=n("h2",{id:"_0065",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0065","aria-hidden":"true"},"#"),s(" 0065")],-1),Co=n("p",null,"// #region 0065",-1),Eo={href:"https://leetcode.cn/problems/valid-number",target:"_blank",rel:"noopener noreferrer"},Vo=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Ko=n("p",null,"// #endregion 0065",-1),zo=n("h2",{id:"_0066",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0066","aria-hidden":"true"},"#"),s(" 0066")],-1),Bo=n("p",null,"// #region 0066",-1),Fo={href:"https://leetcode.cn/problems/plus-one",target:"_blank",rel:"noopener noreferrer"},Po=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Ro=n("p",null,"// #endregion 0066",-1),Go=n("h2",{id:"_0067",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0067","aria-hidden":"true"},"#"),s(" 0067")],-1),Jo=n("p",null,"// #region 0067",-1),Mo={href:"https://leetcode.cn/problems/add-binary",target:"_blank",rel:"noopener noreferrer"},Oo=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Uo=n("p",null,"// #endregion 0067",-1),Wo=n("h2",{id:"_0068",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0068","aria-hidden":"true"},"#"),s(" 0068")],-1),Xo=n("p",null,"// #region 0068",-1),Yo={href:"https://leetcode.cn/problems/text-justification",target:"_blank",rel:"noopener noreferrer"},Zo=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),$o=n("p",null,"// #endregion 0068",-1),nl=n("h2",{id:"_0069",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0069","aria-hidden":"true"},"#"),s(" 0069")],-1),sl=n("p",null,"// #region 0069",-1),el={href:"https://leetcode.cn/problems/sqrtx",target:"_blank",rel:"noopener noreferrer"},tl=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),al=n("p",null,"// #endregion 0069",-1),ol=n("h2",{id:"_0070",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0070","aria-hidden":"true"},"#"),s(" 0070")],-1),ll=n("p",null,"// #region 0070",-1),il={href:"https://leetcode.cn/problems/climbing-stairs",target:"_blank",rel:"noopener noreferrer"},cl=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),rl=n("p",null,"// #endregion 0070",-1),dl=n("h2",{id:"_0071",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0071","aria-hidden":"true"},"#"),s(" 0071")],-1),ul=n("p",null,"// #region 0071",-1),pl={href:"https://leetcode.cn/problems/simplify-path",target:"_blank",rel:"noopener noreferrer"},hl=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),_l=n("p",null,"// #endregion 0071",-1),kl=n("h2",{id:"_0072",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0072","aria-hidden":"true"},"#"),s(" 0072")],-1),ml=n("p",null,"// #region 0072",-1),bl={href:"https://leetcode.cn/problems/edit-distance",target:"_blank",rel:"noopener noreferrer"},vl=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),gl=n("p",null,"// #endregion 0072",-1),fl=n("h2",{id:"_0073",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0073","aria-hidden":"true"},"#"),s(" 0073")],-1),yl=n("p",null,"// #region 0073",-1),xl={href:"https://leetcode.cn/problems/set-matrix-zeroes",target:"_blank",rel:"noopener noreferrer"},wl=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Nl=n("p",null,"// #endregion 0073",-1),Ll=n("h2",{id:"_0074",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0074","aria-hidden":"true"},"#"),s(" 0074")],-1),Il=n("p",null,"// #region 0074",-1),jl={href:"https://leetcode.cn/problems/search-a-2d-matrix",target:"_blank",rel:"noopener noreferrer"},ql=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Al=n("p",null,"// #endregion 0074",-1),Ql=n("h2",{id:"_0075",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0075","aria-hidden":"true"},"#"),s(" 0075")],-1),Sl=n("p",null,"// #region 0075",-1),Dl={href:"https://leetcode.cn/problems/sort-colors",target:"_blank",rel:"noopener noreferrer"},Tl=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Hl=n("p",null,"// #endregion 0075",-1),Cl=n("h2",{id:"_0076",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0076","aria-hidden":"true"},"#"),s(" 0076")],-1),El=n("p",null,"// #region 0076",-1),Vl={href:"https://leetcode.cn/problems/minimum-window-substring",target:"_blank",rel:"noopener noreferrer"},Kl=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),zl=n("p",null,"// #endregion 0076",-1),Bl=n("h2",{id:"_0077",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0077","aria-hidden":"true"},"#"),s(" 0077")],-1),Fl=n("p",null,"// #region 0077",-1),Pl={href:"https://leetcode.cn/problems/combinations",target:"_blank",rel:"noopener noreferrer"},Rl=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Gl=n("p",null,"// #endregion 0077",-1),Jl=n("h2",{id:"_0078",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0078","aria-hidden":"true"},"#"),s(" 0078")],-1),Ml=n("p",null,"// #region 0078",-1),Ol={href:"https://leetcode.cn/problems/subsets",target:"_blank",rel:"noopener noreferrer"},Ul=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Wl=n("p",null,"// #endregion 0078",-1),Xl=n("h2",{id:"_0079",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0079","aria-hidden":"true"},"#"),s(" 0079")],-1),Yl=n("p",null,"// #region 0079",-1),Zl={href:"https://leetcode.cn/problems/word-search",target:"_blank",rel:"noopener noreferrer"},$l=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),ni=n("p",null,"// #endregion 0079",-1),si=n("h2",{id:"_0080",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0080","aria-hidden":"true"},"#"),s(" 0080")],-1),ei=n("p",null,"// #region 0080",-1),ti={href:"https://leetcode.cn/problems/remove-duplicates-from-sorted-array-ii",target:"_blank",rel:"noopener noreferrer"},ai=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),oi=n("p",null,"// #endregion 0080",-1),li=n("h2",{id:"_0081",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0081","aria-hidden":"true"},"#"),s(" 0081")],-1),ii=n("p",null,"// #region 0081",-1),ci={href:"https://leetcode.cn/problems/search-in-rotated-sorted-array-ii",target:"_blank",rel:"noopener noreferrer"},ri=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),di=n("p",null,"// #endregion 0081",-1),ui=n("h2",{id:"_0082",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0082","aria-hidden":"true"},"#"),s(" 0082")],-1),pi=n("p",null,"// #region 0082",-1),hi={href:"https://leetcode.cn/problems/remove-duplicates-from-sorted-list-ii",target:"_blank",rel:"noopener noreferrer"},_i=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),ki=n("p",null,"// #endregion 0082",-1),mi=n("h2",{id:"_0083",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0083","aria-hidden":"true"},"#"),s(" 0083")],-1),bi=n("p",null,"// #region 0083",-1),vi={href:"https://leetcode.cn/problems/remove-duplicates-from-sorted-list",target:"_blank",rel:"noopener noreferrer"},gi=n("blockquote",null,[n("p",null,"给定一个已排序的链表，删除链表中的重复元素。")],-1),fi=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),yi=n("p",null,"// #endregion 0083",-1),xi=n("h2",{id:"_0084",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0084","aria-hidden":"true"},"#"),s(" 0084")],-1),wi=n("p",null,"// #region 0084",-1),Ni={href:"https://leetcode.cn/problems/largest-rectangle-in-histogram",target:"_blank",rel:"noopener noreferrer"},Li=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Ii=n("p",null,"// #endregion 0084",-1),ji=n("h2",{id:"_0085",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0085","aria-hidden":"true"},"#"),s(" 0085")],-1),qi=n("p",null,"// #region 0085",-1),Ai={href:"https://leetcode.cn/problems/maximal-rectangle",target:"_blank",rel:"noopener noreferrer"},Qi=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Si=n("p",null,"// #endregion 0085",-1),Di=n("h2",{id:"_0086-✅",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0086-✅","aria-hidden":"true"},"#"),s(" 0086 ✅")],-1),Ti=n("p",null,"// #region 0086",-1),Hi={href:"https://leetcode.cn/problems/partition-list",target:"_blank",rel:"noopener noreferrer"},Ci=n("blockquote",null,[n("p",null,"根据给定值将链表元素分割为小于和大于等于该值的两部分。并保持节点元素相对位置。")],-1),Ei={class:"hint-container details"},Vi=n("summary",null,"💡",-1),Ki=n("p",null,"【思路】将原链表按照值大小分隔成两条链表，最后合并成结果链表。",-1),zi=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token doc-comment comment"},[s(`/**
 * Definition for singly-linked list.
 * public class ListNode `),n("span",{class:"token punctuation"},"{"),s(`
 *     int val;
 *     ListNode next;
 *     ListNode() `),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),s(`
 *     ListNode(int val) `),n("span",{class:"token punctuation"},"{"),s(" this.val = val; "),n("span",{class:"token punctuation"},"}"),s(`
 *     ListNode(int val, ListNode next) `),n("span",{class:"token punctuation"},"{"),s(" this.val = val; this.next = next; "),n("span",{class:"token punctuation"},"}"),s(`
 * `),n("span",{class:"token punctuation"},"}"),s(`
 */`)]),s(`
`),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Solution"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"ListNode"),s(),n("span",{class:"token function"},"partition"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"ListNode"),s(" head"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"int"),s(" x"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token class-name"},"ListNode"),s(" l1 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 小于 x 链表"),s(`
        `),n("span",{class:"token class-name"},"ListNode"),s(" l2 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 大于 x 链表"),s(`
        `),n("span",{class:"token class-name"},"ListNode"),s(" p1 "),n("span",{class:"token operator"},"="),s(" l1"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token class-name"},"ListNode"),s(" p2 "),n("span",{class:"token operator"},"="),s(" l2"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token comment"},"// 遍历链表，按照大小将原链表分成两条链表，分解时需要注意分解节点与原链表的断开问题。"),s(`
        `),n("span",{class:"token class-name"},"ListNode"),s(" p "),n("span",{class:"token operator"},"="),s(" head"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s(" p "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"null"),s(),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s(" p"),n("span",{class:"token punctuation"},"."),s("val "),n("span",{class:"token operator"},"<"),s(" x "),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                p1`),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(" p"),n("span",{class:"token punctuation"},";"),s("    "),n("span",{class:"token comment"},"// 将节点添加到小于 x 链表"),s(`
                p `),n("span",{class:"token operator"},"="),s(" p"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s("     "),n("span",{class:"token comment"},"// 链表指针前进"),s(`
                p1 `),n("span",{class:"token operator"},"="),s(" p1"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s("   "),n("span",{class:"token comment"},"// 小于 x 链表指针前进"),s(`
                p1`),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 并将小于 x 链表与原链表断开"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
                p2`),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(" p"),n("span",{class:"token punctuation"},";"),s(`    
                p `),n("span",{class:"token operator"},"="),s(" p"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
                p2 `),n("span",{class:"token operator"},"="),s(" p2"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
                p2`),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token comment"},"// 合并成一条"),s(`
        p1`),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(" l2"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"return"),s(" l1"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},";"),s(` 
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Bi=n("div",{class:"language-swift line-numbers-mode","data-ext":"swift"},[n("pre",{class:"language-swift"},[n("code",null,[n("span",{class:"token comment"},`/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.next = nil
 *     }
 * }
 */`),s(`
`),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Solution"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"func"),s(),n("span",{class:"token function-definition function"},"partition"),n("span",{class:"token punctuation"},"("),n("span",{class:"token omit keyword"},"_"),s(" head"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token omit keyword"},"_"),s(" x"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"Int"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"->"),s(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"let"),s(" minHead "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token keyword"},"var"),s(" min"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token operator"},"="),s(` minHead
        `),n("span",{class:"token keyword"},"let"),s(" maxHead "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token keyword"},"var"),s(" max"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token operator"},"="),s(` maxHead
        `),n("span",{class:"token keyword"},"var"),s(" node "),n("span",{class:"token operator"},"="),s(` head
        `),n("span",{class:"token comment"},"// 根据值大小创建了两条新链表，最后合并。这样不需要处理链表断开的问题。"),s(`
        `),n("span",{class:"token keyword"},"while"),s(" node "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token nil constant"},"nil"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"guard"),s(),n("span",{class:"token keyword"},"let"),s(" n "),n("span",{class:"token operator"},"="),s(" node  "),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token keyword"},"break"),s(),n("span",{class:"token punctuation"},"}"),s(`
            `),n("span",{class:"token keyword"},"if"),s(" n"),n("span",{class:"token punctuation"},"."),s("val "),n("span",{class:"token operator"},"<"),s(" x "),n("span",{class:"token punctuation"},"{"),s(`
                min`),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token punctuation"},"("),s("n"),n("span",{class:"token punctuation"},"."),s("val"),n("span",{class:"token punctuation"},")"),s(`
                min `),n("span",{class:"token operator"},"="),s(" min"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),s(`next
            `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
                max`),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"ListNode"),n("span",{class:"token punctuation"},"("),s("n"),n("span",{class:"token punctuation"},"."),s("val"),n("span",{class:"token punctuation"},")"),s(`
                max `),n("span",{class:"token operator"},"="),s(" max"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),s(`next
            `),n("span",{class:"token punctuation"},"}"),s(`
            node `),n("span",{class:"token operator"},"="),s(" n"),n("span",{class:"token punctuation"},"."),s(`next
        `),n("span",{class:"token punctuation"},"}"),s(`
        min`),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},"."),s("next "),n("span",{class:"token operator"},"="),s(" maxHead"),n("span",{class:"token punctuation"},"."),s(`next
        `),n("span",{class:"token keyword"},"return"),s(" minHead"),n("span",{class:"token punctuation"},"."),s(`next
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Fi=n("p",null,"// #endregion 0086",-1),Pi=n("h2",{id:"_0087",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0087","aria-hidden":"true"},"#"),s(" 0087")],-1),Ri=n("p",null,"// #region 0087",-1),Gi={href:"https://leetcode.cn/problems/scramble-string",target:"_blank",rel:"noopener noreferrer"},Ji=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Mi=n("p",null,"// #endregion 0087",-1),Oi=n("h2",{id:"_0088",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0088","aria-hidden":"true"},"#"),s(" 0088")],-1),Ui=n("p",null,"// #region 0088",-1),Wi={href:"https://leetcode.cn/problems/merge-sorted-array",target:"_blank",rel:"noopener noreferrer"},Xi=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Yi=n("p",null,"// #endregion 0088",-1),Zi=n("h2",{id:"_0089",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0089","aria-hidden":"true"},"#"),s(" 0089")],-1),$i=n("p",null,"// #region 0089",-1),nc={href:"https://leetcode.cn/problems/gray-code",target:"_blank",rel:"noopener noreferrer"},sc=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),ec=n("p",null,"// #endregion 0089",-1),tc=n("h2",{id:"_0090",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0090","aria-hidden":"true"},"#"),s(" 0090")],-1),ac=n("p",null,"// #region 0090",-1),oc={href:"https://leetcode.cn/problems/subsets-ii",target:"_blank",rel:"noopener noreferrer"},lc=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),ic=n("p",null,"// #endregion 0090",-1),cc=n("h2",{id:"_0091",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0091","aria-hidden":"true"},"#"),s(" 0091")],-1),rc=n("p",null,"// #region 0091",-1),dc={href:"https://leetcode.cn/problems/decode-ways",target:"_blank",rel:"noopener noreferrer"},uc=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),pc=n("p",null,"// #endregion 0091",-1),hc=n("h2",{id:"_0092",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0092","aria-hidden":"true"},"#"),s(" 0092")],-1),_c=n("p",null,"// #region 0092",-1),kc={href:"https://leetcode.cn/problems/reverse-linked-list-ii/",target:"_blank",rel:"noopener noreferrer"},mc=n("blockquote",null,[n("p",null,"通过单链表的头结点 head 和两个整数 left 和 right (left <= right)，反转链表从 left 到 right 位置的链表节点，返回反转后的链表。")],-1),bc=n("details",{class:"hint-container details"},[n("summary",null,"💡"),n("blockquote",null,[n("p",null,"如果使用迭代，上面两个题应该怎么处理？")])],-1),vc=n("p",null,"// #endregion 0092",-1),gc=n("h2",{id:"_0093",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0093","aria-hidden":"true"},"#"),s(" 0093")],-1),fc=n("p",null,"// #region 0093",-1),yc={href:"https://leetcode.cn/problems/restore-ip-addresses",target:"_blank",rel:"noopener noreferrer"},xc=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),wc=n("p",null,"// #endregion 0093",-1),Nc=n("h2",{id:"_0094",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0094","aria-hidden":"true"},"#"),s(" 0094")],-1),Lc=n("p",null,"// #region 0094",-1),Ic={href:"https://leetcode.cn/problems/binary-tree-inorder-traversal",target:"_blank",rel:"noopener noreferrer"},jc=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),qc=n("p",null,"// #endregion 0094",-1),Ac=n("h2",{id:"_0095",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0095","aria-hidden":"true"},"#"),s(" 0095")],-1),Qc=n("p",null,"// #region 0095",-1),Sc={href:"https://leetcode.cn/problems/unique-binary-search-trees-ii",target:"_blank",rel:"noopener noreferrer"},Dc=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Tc=n("p",null,"// #endregion 0095",-1),Hc=n("h2",{id:"_0096",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0096","aria-hidden":"true"},"#"),s(" 0096")],-1),Cc=n("p",null,"// #region 0096",-1),Ec={href:"https://leetcode.cn/problems/unique-binary-search-trees",target:"_blank",rel:"noopener noreferrer"},Vc=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Kc=n("p",null,"// #endregion 0096",-1),zc=n("h2",{id:"_0097",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0097","aria-hidden":"true"},"#"),s(" 0097")],-1),Bc=n("p",null,"// #region 0097",-1),Fc={href:"https://leetcode.cn/problems/interleaving-string",target:"_blank",rel:"noopener noreferrer"},Pc=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Rc=n("p",null,"// #endregion 0097",-1),Gc=n("h2",{id:"_0098",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0098","aria-hidden":"true"},"#"),s(" 0098")],-1),Jc=n("p",null,"// #region 0098",-1),Mc={href:"https://leetcode.cn/problems/validate-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},Oc=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),Uc=n("p",null,"// #endregion 0098",-1),Wc=n("h2",{id:"_0099",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0099","aria-hidden":"true"},"#"),s(" 0099")],-1),Xc=n("p",null,"// #region 0099",-1),Yc={href:"https://leetcode.cn/problems/recover-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},Zc=n("details",{class:"hint-container details"},[n("summary",null,"💡")],-1),$c=n("p",null,"// #endregion 0099",-1);function nr(sr,er){const t=c("ExternalLinkIcon"),i=c("CodeTabs");return u(),p("div",null,[h(" more "),k,n("ul",null,[n("li",null,[n("a",m,[s("🟢 1 - 两数之和"),e(t)])])]),b,v,g,f,n("ul",null,[n("li",null,[n("a",y,[s("🟠 2 - 两数相加"),e(t)])])]),x,w,N,L,n("ul",null,[n("li",null,[n("a",I,[s("🟠 3 - 无重复字符的最长子串"),e(t)])])]),j,q,A,Q,n("ul",null,[n("li",null,[n("a",S,[s("🔴 4 - 寻找两个正序数组的中位数"),e(t)])])]),D,T,H,C,n("ul",null,[n("li",null,[n("a",E,[s("🟠 5 - 最长回文子串"),e(t)]),V])]),K,z,B,F,n("ul",null,[n("li",null,[n("a",P,[s("🟠 6 - N 字形变换"),e(t)])])]),R,G,J,M,n("ul",null,[n("li",null,[n("a",O,[s("🟠 7 - 整数反转"),e(t)])])]),U,W,X,Y,n("ul",null,[n("li",null,[n("a",Z,[s("🟠 8 - 字符串转换整数 (atoi)"),e(t)])])]),$,nn,sn,en,n("ul",null,[n("li",null,[n("a",tn,[s("🟢 9 - 回文数"),e(t)])])]),an,on,ln,cn,n("ul",null,[n("li",null,[n("a",rn,[s("🔴 10 - 正则表达式匹配"),e(t)])])]),dn,un,pn,hn,n("ul",null,[n("li",null,[n("a",_n,[s("🟠 11 - 盛最多水的容器"),e(t)])])]),kn,mn,bn,vn,n("ul",null,[n("li",null,[n("a",gn,[s("🟠 12 - 整数转罗马数字"),e(t)])])]),fn,yn,xn,wn,n("ul",null,[n("li",null,[n("a",Nn,[s("🟢 13 - 罗马数字转整数"),e(t)])])]),Ln,In,jn,qn,n("ul",null,[n("li",null,[n("a",An,[s("🟢 14 - 最长公共前缀"),e(t)])])]),Qn,Sn,Dn,Tn,n("ul",null,[n("li",null,[n("a",Hn,[s("🟠 15 - 三数之和"),e(t)])])]),Cn,En,Vn,Kn,n("ul",null,[n("li",null,[n("a",zn,[s("🟠 16 - 最接近的三数之和"),e(t)])])]),Bn,Fn,Pn,Rn,n("ul",null,[n("li",null,[n("a",Gn,[s("🟠 17 - 电话号码的字母组合"),e(t)])])]),Jn,Mn,On,Un,n("ul",null,[n("li",null,[n("a",Wn,[s("🟠 18 - 四数之和"),e(t)])])]),Xn,Yn,Zn,$n,n("ul",null,[n("li",null,[n("a",ns,[s("🟢 19 - 删除链表的倒数第 N 个结点"),e(t)]),ss])]),n("details",es,[ts,e(i,{id:"367",data:[{id:"java"},{id:"swift"}]},{title0:a(({value:o,isActive:l})=>[s("java")]),title1:a(({value:o,isActive:l})=>[s("swift")]),tab0:a(({value:o,isActive:l})=>[as]),tab1:a(({value:o,isActive:l})=>[os]),_:1})]),ls,is,cs,n("ul",null,[n("li",null,[n("a",rs,[s("🟢 20 - 有效的括号"),e(t)])])]),ds,us,ps,hs,n("ul",null,[n("li",null,[n("a",_s,[s("🟢 21 - 合并两个有序链表"),e(t)]),ks])]),n("details",ms,[bs,vs,e(i,{id:"419",data:[{id:"java"},{id:"swift"}]},{title0:a(({value:o,isActive:l})=>[s("java")]),title1:a(({value:o,isActive:l})=>[s("swift")]),tab0:a(({value:o,isActive:l})=>[gs]),tab1:a(({value:o,isActive:l})=>[fs]),_:1})]),ys,xs,ws,n("ul",null,[n("li",null,[n("a",Ns,[s("🟠 22 - 括号生成"),e(t)])])]),Ls,Is,js,qs,n("ul",null,[n("li",null,[n("a",As,[s("🔴 23 - 合并 K 个升序链表"),e(t)]),Qs])]),n("details",Ss,[Ds,Ts,Hs,Cs,e(i,{id:"477",data:[{id:"解法1"}]},{title0:a(({value:o,isActive:l})=>[s("解法1")]),tab0:a(({value:o,isActive:l})=>[Es]),_:1})]),Vs,Ks,zs,n("ul",null,[n("li",null,[n("a",Bs,[s("🟠 24 - 两两交换链表中的节点"),e(t)])])]),Fs,Ps,Rs,Gs,n("ul",null,[n("li",null,[n("a",Js,[s("🔴 - K 个一组翻转链表"),e(t)])])]),Ms,Os,Us,Ws,n("ul",null,[n("li",null,[n("a",Xs,[s("🟢 26 - 删除有序数组中的重复项"),e(t)]),Ys])]),Zs,$s,ne,se,n("ul",null,[n("li",null,[n("a",ee,[s("🟢 27 - 移除元素"),e(t)]),te])]),ae,oe,le,ie,n("ul",null,[n("li",null,[n("a",ce,[s("🟢 28 - 找出字符串中第一个匹配项的下标"),e(t)])])]),re,de,ue,pe,n("ul",null,[n("li",null,[n("a",he,[s("🟠 29 - 两数相除"),e(t)])])]),_e,ke,me,be,n("ul",null,[n("li",null,[n("a",ve,[s("🔴 30 - 串联所有单词的子串"),e(t)])])]),ge,fe,ye,xe,n("ul",null,[n("li",null,[n("a",we,[s("🟠 31 - 下一个排列"),e(t)])])]),Ne,Le,Ie,je,n("ul",null,[n("li",null,[n("a",qe,[s("🔴 32 - 最长有效括号"),e(t)])])]),Ae,Qe,Se,De,n("ul",null,[n("li",null,[n("a",Te,[s("🟠 33 - 搜索旋转排序数组"),e(t)])])]),He,Ce,Ee,Ve,n("ul",null,[n("li",null,[n("a",Ke,[s("🟢 34 - 在排序数组中查找元素的第一个和最后一个位置"),e(t)]),ze])]),Be,n("ul",null,[n("li",null,[n("a",Fe,[s("🟢 35 - 搜索插入位置"),e(t)]),Pe])]),Re,Ge,Je,Me,n("ul",null,[n("li",null,[n("a",Oe,[s("🟠 36 - 有效的数独"),e(t)])])]),Ue,We,Xe,Ye,n("ul",null,[n("li",null,[n("a",Ze,[s("🔴 37 - 解数独"),e(t)])])]),$e,nt,st,et,n("ul",null,[n("li",null,[n("a",tt,[s("🟠 38 - 外观数列"),e(t)])])]),at,ot,lt,it,n("ul",null,[n("li",null,[n("a",ct,[s("🟠 39 - 组合总和"),e(t)])])]),rt,dt,ut,pt,n("ul",null,[n("li",null,[n("a",ht,[s("🟠 40 - 组合总和 II"),e(t)])])]),_t,kt,mt,bt,n("ul",null,[n("li",null,[n("a",vt,[s("🔴 41 - 缺失的第一个正数"),e(t)])])]),gt,ft,yt,xt,n("ul",null,[n("li",null,[n("a",wt,[s("🔴 42 - 接雨水"),e(t)])])]),Nt,Lt,It,jt,n("ul",null,[n("li",null,[n("a",qt,[s("🟠 43 - 字符串相乘"),e(t)])])]),At,Qt,St,Dt,n("ul",null,[n("li",null,[n("a",Tt,[s("🔴 44 - 通配符匹配"),e(t)])])]),Ht,Ct,Et,Vt,n("ul",null,[n("li",null,[n("a",Kt,[s("🟠 45 - 跳跃游戏 II"),e(t)])])]),zt,Bt,Ft,Pt,n("ul",null,[n("li",null,[n("a",Rt,[s("🟠 46 - 全排列"),e(t)]),Gt])]),Jt,Mt,Ot,Ut,n("ul",null,[n("li",null,[n("a",Wt,[s("🟠 47 - 全排列 II"),e(t)]),Xt])]),Yt,Zt,$t,na,n("ul",null,[n("li",null,[n("a",sa,[s("🟠 48 - 旋转图像"),e(t)])])]),ea,ta,aa,oa,n("ul",null,[n("li",null,[n("a",la,[s("🟠 49 - 字母异位词分组"),e(t)])])]),ia,ca,ra,da,n("ul",null,[n("li",null,[n("a",ua,[s("🟠 50 - Pow(x, n)"),e(t)])])]),pa,ha,_a,ka,n("ul",null,[n("li",null,[n("p",null,[n("a",ma,[s("🔴 51 - N 皇后"),e(t)])]),ba,va])]),ga,fa,ya,xa,n("ul",null,[n("li",null,[n("a",wa,[s("🔴 52 - N 皇后 II"),e(t)]),Na])]),La,Ia,ja,qa,n("ul",null,[n("li",null,[n("a",Aa,[s("🟠 53 - 最大子数组和"),e(t)])])]),Qa,Sa,Da,Ta,n("ul",null,[n("li",null,[n("a",Ha,[s("🟠 54 - 螺旋矩阵"),e(t)])])]),Ca,Ea,Va,Ka,n("ul",null,[n("li",null,[n("a",za,[s("🟠 55 - 跳跃游戏"),e(t)])])]),Ba,Fa,Pa,Ra,n("ul",null,[n("li",null,[n("a",Ga,[s("🟠 56 - 合并区间"),e(t)])])]),Ja,Ma,Oa,Ua,n("ul",null,[n("li",null,[n("a",Wa,[s("🟠 57 - 插入区间"),e(t)])])]),Xa,Ya,Za,$a,n("ul",null,[n("li",null,[n("a",no,[s("🟢 58 - 最后一个单词的长度"),e(t)])])]),so,eo,to,ao,n("ul",null,[n("li",null,[n("a",oo,[s("🟠 59 - 螺旋矩阵 II"),e(t)])])]),lo,io,co,ro,n("ul",null,[n("li",null,[n("a",uo,[s("🔴 60 - 排列序列"),e(t)])])]),po,ho,_o,ko,n("ul",null,[n("li",null,[n("a",mo,[s("🟠 61 - 旋转链表"),e(t)])])]),bo,vo,go,fo,n("ul",null,[n("li",null,[n("a",yo,[s("🟠 62 - 不同路径"),e(t)])])]),xo,wo,No,Lo,n("ul",null,[n("li",null,[n("a",Io,[s("🟠 63 - 不同路径 II"),e(t)])])]),jo,qo,Ao,Qo,n("ul",null,[n("li",null,[n("a",So,[s("🟠 64 - 最小路径和"),e(t)])])]),Do,To,Ho,Co,n("ul",null,[n("li",null,[n("a",Eo,[s("🔴 65 - 有效数字"),e(t)])])]),Vo,Ko,zo,Bo,n("ul",null,[n("li",null,[n("a",Fo,[s("🟢 66 - 加一"),e(t)])])]),Po,Ro,Go,Jo,n("ul",null,[n("li",null,[n("a",Mo,[s("🟢 67 - 二进制求和"),e(t)])])]),Oo,Uo,Wo,Xo,n("ul",null,[n("li",null,[n("a",Yo,[s("🔴 68 - 文本左右对齐"),e(t)])])]),Zo,$o,nl,sl,n("ul",null,[n("li",null,[n("a",el,[s("🟢 69 - x 的平方根"),e(t)])])]),tl,al,ol,ll,n("ul",null,[n("li",null,[n("a",il,[s("🟢 70 - 爬楼梯"),e(t)])])]),cl,rl,dl,ul,n("ul",null,[n("li",null,[n("a",pl,[s("🟠 71 - 简化路径"),e(t)])])]),hl,_l,kl,ml,n("ul",null,[n("li",null,[n("a",bl,[s("🔴 72 - 编辑距离"),e(t)])])]),vl,gl,fl,yl,n("ul",null,[n("li",null,[n("a",xl,[s("🟠 73 - 矩阵置零"),e(t)])])]),wl,Nl,Ll,Il,n("ul",null,[n("li",null,[n("a",jl,[s("🟠 74 - 搜索二维矩阵"),e(t)])])]),ql,Al,Ql,Sl,n("ul",null,[n("li",null,[n("a",Dl,[s("🟠 75 - 颜色分类"),e(t)])])]),Tl,Hl,Cl,El,n("ul",null,[n("li",null,[n("a",Vl,[s("🔴 76 - 最小覆盖子串"),e(t)])])]),Kl,zl,Bl,Fl,n("ul",null,[n("li",null,[n("a",Pl,[s("🟠 77 - 组合"),e(t)])])]),Rl,Gl,Jl,Ml,n("ul",null,[n("li",null,[n("a",Ol,[s("🟠 78 - 子集"),e(t)])])]),Ul,Wl,Xl,Yl,n("ul",null,[n("li",null,[n("a",Zl,[s("🟠 79 - 单词搜索"),e(t)])])]),$l,ni,si,ei,n("ul",null,[n("li",null,[n("a",ti,[s("🟠 80 - 删除有序数组中的重复项 II"),e(t)])])]),ai,oi,li,ii,n("ul",null,[n("li",null,[n("a",ci,[s("🟠 81 - 搜索旋转排序数组 II"),e(t)])])]),ri,di,ui,pi,n("ul",null,[n("li",null,[n("a",hi,[s("🟠 82 - 删除排序链表中的重复元素 II"),e(t)])])]),_i,ki,mi,bi,n("ul",null,[n("li",null,[n("a",vi,[s("🟠 83 - 删除排序链表中的重复元素"),e(t)]),gi])]),fi,yi,xi,wi,n("ul",null,[n("li",null,[n("a",Ni,[s("🔴 84 - 柱状图中最大的矩形"),e(t)])])]),Li,Ii,ji,qi,n("ul",null,[n("li",null,[n("a",Ai,[s("🔴 85 - 最大矩形"),e(t)])])]),Qi,Si,Di,Ti,n("ul",null,[n("li",null,[n("a",Hi,[s("🟠 86 - 分隔链表"),e(t)]),Ci])]),n("details",Ei,[Vi,Ki,e(i,{id:"1671",data:[{id:"java"},{id:"swift"}]},{title0:a(({value:o,isActive:l})=>[s("java")]),title1:a(({value:o,isActive:l})=>[s("swift")]),tab0:a(({value:o,isActive:l})=>[zi]),tab1:a(({value:o,isActive:l})=>[Bi]),_:1})]),Fi,Pi,Ri,n("ul",null,[n("li",null,[n("a",Gi,[s("🔴 87 - 扰乱字符串"),e(t)])])]),Ji,Mi,Oi,Ui,n("ul",null,[n("li",null,[n("a",Wi,[s("🟢 88 - 合并两个有序数组"),e(t)])])]),Xi,Yi,Zi,$i,n("ul",null,[n("li",null,[n("a",nc,[s("🟠 89 - 格雷编码"),e(t)])])]),sc,ec,tc,ac,n("ul",null,[n("li",null,[n("a",oc,[s("🟠 90 - 子集 II"),e(t)])])]),lc,ic,cc,rc,n("ul",null,[n("li",null,[n("a",dc,[s("🟠 91 - 解码方法"),e(t)])])]),uc,pc,hc,_c,n("ul",null,[n("li",null,[n("a",kc,[s("🟠 92 - 反转链表 II"),e(t)]),mc])]),bc,vc,gc,fc,n("ul",null,[n("li",null,[n("a",yc,[s("🟠 93 - 复原 IP 地址"),e(t)])])]),xc,wc,Nc,Lc,n("ul",null,[n("li",null,[n("a",Ic,[s("🟢 94 - 二叉树的中序遍历"),e(t)])])]),jc,qc,Ac,Qc,n("ul",null,[n("li",null,[n("a",Sc,[s("🟠 95 - 不同的二叉搜索树 II"),e(t)])])]),Dc,Tc,Hc,Cc,n("ul",null,[n("li",null,[n("a",Ec,[s("🟠 96 - 不同的二叉搜索树"),e(t)])])]),Vc,Kc,zc,Bc,n("ul",null,[n("li",null,[n("a",Fc,[s("🟠 97 - 交错字符串"),e(t)])])]),Pc,Rc,Gc,Jc,n("ul",null,[n("li",null,[n("a",Mc,[s("🟠 98 - 验证二叉搜索树"),e(t)])])]),Oc,Uc,Wc,Xc,n("ul",null,[n("li",null,[n("a",Yc,[s("🟠 99 - 恢复二叉搜索树"),e(t)])])]),Zc,$c])}const or=d(_,[["render",nr],["__file","0x0000.html.vue"]]);export{or as default};
