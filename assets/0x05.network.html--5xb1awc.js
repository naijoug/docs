import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as d,c as a,a as c,f as o}from"./app-PKGOewPu.js";const h={},i=o('<h2 id="tcp" tabindex="-1"><a class="header-anchor" href="#tcp" aria-hidden="true">#</a> TCP</h2><h3 id="tcp-ip-五层模型" tabindex="-1"><a class="header-anchor" href="#tcp-ip-五层模型" aria-hidden="true">#</a> <code>TCP/IP</code> 五层模型</h3><ol><li>应用层 : <code>DNS</code>、<code>HTTP</code>、<code>HTTPS</code>、<code>RPC</code>、<code>P2P</code> (<code>DHCP</code>、<code>RTMP</code>、<code>GTP</code>) <blockquote><p><code>OSI</code> 七层模型中，将应用层细分为(应用层、表示层、会话层)</p></blockquote><ul><li>表示层 :</li><li>会话层 :</li></ul></li><li>传输层 : <code>TCP</code>、<code>UDP</code>、<code>QUIC</code></li><li>网络层 : (IP 层) <code>IP</code> (<code>ICMP</code>、<code>OSPF</code>、<code>BGP</code>、<code>IPSec</code>、<code>GRE</code>)</li><li>链路层 : (MAC 层) <code>ARP</code>、<code>VLAN</code>、<code>STP</code></li><li>物理层 : 网络跳线</li></ol><h3 id="tcp-vs-udp" tabindex="-1"><a class="header-anchor" href="#tcp-vs-udp" aria-hidden="true">#</a> <code>TCP</code> vs <code>UDP</code></h3><blockquote><p><code>TCP</code> 特点</p></blockquote><ul><li>可靠性 : 通过确认应答、超时重传等机制保证数据的可靠传输。</li><li>有序性 : 通过数据序号来保证数据有序，传输完成后通过排序来保证数据的正确性。</li><li>双全工 : 通信双方(服务端和客户端)都具备发送和接受数据的能力。(三次握手来保证)</li></ul><blockquote><p><code>UDP</code> 特点</p></blockquote><ul><li>不可靠 : 通信通信双方不需要建立连接，不能保证数据准确送达。</li><li>无序性 : 每次发送的数据包相互独立，没有特定的顺序。</li><li>速度快 : 由于数据包结构简单，保证的 <code>UDP</code> 传输速度优于 <code>TCP</code></li></ul><p>一些游戏、直播和需要低延迟实时性要求较高的应用，会使用 <code>UDP</code>。</p><blockquote><p><code>TCP</code> 的 <code>keepalive</code> 机制</p></blockquote><p><code>keepalive</code> 顾名思义是否还活着，是一种心跳检测机制。用于判断连接方是否还处于活动状态，以便断开已经失活连接释放资源。发送探测包后，如果处于活动状态，接收方会发送确认信号；如果处于失活状态，则会再连续再发送几次探测包如果均无响应则证明对方已断开连接，可以释放资源。</p><p>需要注意的一点是，这个 <code>keepalive</code> 机制的时长一般默认为 2 小时。所以，不能使用使用该机制来确认实时性较高的保活探测。</p><h3 id="全双工和半双工模式是什么" tabindex="-1"><a class="header-anchor" href="#全双工和半双工模式是什么" aria-hidden="true">#</a> 全双工和半双工模式是什么？</h3><h3 id="tcp-三次握手第三次丢失会怎么样" tabindex="-1"><a class="header-anchor" href="#tcp-三次握手第三次丢失会怎么样" aria-hidden="true">#</a> <code>TCP</code> 三次握手第三次丢失会怎么样?</h3><h3 id="为什么要四次挥手" tabindex="-1"><a class="header-anchor" href="#为什么要四次挥手" aria-hidden="true">#</a> 为什么要四次挥手?</h3><h3 id="访问一个网站的详细过程" tabindex="-1"><a class="header-anchor" href="#访问一个网站的详细过程" aria-hidden="true">#</a> 访问一个网站的详细过程?</h3><h3 id="解释下-tcp-的慢启动特性" tabindex="-1"><a class="header-anchor" href="#解释下-tcp-的慢启动特性" aria-hidden="true">#</a> 解释下 <code>TCP</code> 的慢启动特性?</h3><h3 id="什么情况下发送方的滑动窗口会后移" tabindex="-1"><a class="header-anchor" href="#什么情况下发送方的滑动窗口会后移" aria-hidden="true">#</a> 什么情况下发送方的滑动窗口会后移？</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>TCP</code> 发送方的滑动窗口 : 用来控制网络通信流量和确保信息可靠传输的一种机制。防止网络拥塞，确保在有限的网络带宽中，数据能够被高效、有序、可靠地传输。</p></blockquote><p>滑动窗口后移的两种情况</p><ul><li><p>当接收到确认(<code>ACK</code>)消息时</p><blockquote><p>当发送方接收到接收方发送的确认消息(<code>ACK</code>)，说明发送方发送的数据已经被接收方正确接收，此时发送方的滑动窗口的左边界会按照收到的确认信息进行移动。相应地，滑动窗口的右边界也会移动，使窗口大小保持不变。这样可以控制发送方继续发送未被确认的数据，或者发送新的数据。</p></blockquote></li><li><p>当窗口内数据全部被确认时</p><blockquote><p>如果滑动窗口中的所有数据都已经被接收方确认接收，那么滑动窗口会往右移动，来为新的数据腾出空间。</p></blockquote></li></ul></details><h3 id="❓mtu-了解吗" tabindex="-1"><a class="header-anchor" href="#❓mtu-了解吗" aria-hidden="true">#</a> ❓<code>MTU</code> 了解吗？</h3><details class="hint-container details"><summary>💡</summary><blockquote><p><code>MTU</code>(Max Transfer Unit)：最大传输单元，指的是网络中一种协议可以在不进行分片的情况下发送的最大数据包大小。</p></blockquote><p>在网络中，数据包的大小不能超过 <code>MTU</code> 大小，否则在发送过程中数据包会被分片。<code>MTU</code> 大小的设置取决于发送这些数据包的物理媒介或者网络协议。</p><blockquote><p>例如，在以太网中，<code>MTU</code> 的大小通常设置为 <code>1500</code> 字节。</p></blockquote><p>当数据包在网络中传输时，可能会经过不同的网络设备，这些设备可能有各自的 <code>MTU</code> 大小。为了避免数据包被分片，或者减少数据包的分片次数，路由器和其他网络设备可能采用最小 <code>MTU</code>（所有设备中 <code>MTU</code> 最小的值）进行发送。</p><ul><li>过大的 <code>MTU</code>：会导致数据包在传输过程中过于庞大，增大网络负担和延迟。</li><li>过小的 <code>MTU</code>：会使得数据包过小，分片过多，影响网络效率。</li></ul><blockquote><p>例如：<code>POST</code> 请求增加 <code>Content-Length</code> 参数后，数据传输过大时可能导致 <code>Broken pipe</code> 报错，调整 <code>MTU</code> 值可以解决这个问题。</p></blockquote></details><h3 id="如果手机应用与服务器通过-tcp-连接-这个时候手机切换为飞行模式-服务器可以短时间内知道到手机离线状态吗" tabindex="-1"><a class="header-anchor" href="#如果手机应用与服务器通过-tcp-连接-这个时候手机切换为飞行模式-服务器可以短时间内知道到手机离线状态吗" aria-hidden="true">#</a> 如果手机应用与服务器通过 <code>TCP</code> 连接，这个时候手机切换为飞行模式，服务器可以短时间内知道到手机离线状态吗？</h3><details class="hint-container details"><summary>💡</summary><p>服务器通过 <code>TCP</code> 短时间内是不能知晓手机的离线状态的。因为 <code>TCP</code> 主要是为了保证数据的可靠传输，通信双方是通过数据交换来了解对方状态。而 <code>TCP</code> 并没有设计心跳检测机制，所有就没有实时检测对方是否离线的能力。</p></details><h3 id="在高宽带、高丢包的情况下-怎么保证-tcp-的性能" tabindex="-1"><a class="header-anchor" href="#在高宽带、高丢包的情况下-怎么保证-tcp-的性能" aria-hidden="true">#</a> 在高宽带、高丢包的情况下，怎么保证 <code>TCP</code> 的性能？</h3><h3 id="有人认为-tcp-一定比-udp-更快-你怎么认为" tabindex="-1"><a class="header-anchor" href="#有人认为-tcp-一定比-udp-更快-你怎么认为" aria-hidden="true">#</a> 有人认为 <code>TCP</code> 一定比 <code>UDP</code> 更快，你怎么认为？</h3><h3 id="为什么视频会议用-udp" tabindex="-1"><a class="header-anchor" href="#为什么视频会议用-udp" aria-hidden="true">#</a> 为什么视频会议用 <code>UDP</code>？</h3><h3 id="用-udp-实现音视频-有什么方法可以保证通话质量" tabindex="-1"><a class="header-anchor" href="#用-udp-实现音视频-有什么方法可以保证通话质量" aria-hidden="true">#</a> 用 <code>UDP</code> 实现音视频，有什么方法可以保证通话质量？</h3><h3 id="如果用-tcp-实现音视频-需要建立几次连接" tabindex="-1"><a class="header-anchor" href="#如果用-tcp-实现音视频-需要建立几次连接" aria-hidden="true">#</a> 如果用 <code>TCP</code> 实现音视频，需要建立几次连接？</h3><h3 id="在整个视频面试的过程中-可能会用到哪些协议-都在哪几层" tabindex="-1"><a class="header-anchor" href="#在整个视频面试的过程中-可能会用到哪些协议-都在哪几层" aria-hidden="true">#</a> 在整个视频面试的过程中，可能会用到哪些协议，都在哪几层？</h3><hr><h2 id="http" tabindex="-1"><a class="header-anchor" href="#http" aria-hidden="true">#</a> <code>HTTP</code></h2><h3 id="为什么说-http-是无状态的" tabindex="-1"><a class="header-anchor" href="#为什么说-http-是无状态的" aria-hidden="true">#</a> 为什么说 <code>HTTP</code> 是无状态的？</h3><h3 id="三次握手可以携带数据吗" tabindex="-1"><a class="header-anchor" href="#三次握手可以携带数据吗" aria-hidden="true">#</a> 三次握手可以携带数据吗？</h3><h3 id="http-vs-https" tabindex="-1"><a class="header-anchor" href="#http-vs-https" aria-hidden="true">#</a> <code>HTTP</code> vs <code>HTTPS</code></h3><p><code>HTTP</code>: 是基于 <code>TCP/IP</code> 通信协议的一种数据传输协议。 <code>HTTPS</code> : <code>= HTTP + SSL</code>，在 <code>HTTP</code> 协议的基础加上了加密处理。</p><h3 id="❓http-中-get、post-区别" tabindex="-1"><a class="header-anchor" href="#❓http-中-get、post-区别" aria-hidden="true">#</a> ❓<code>HTTP</code> 中 <code>GET</code>、<code>POST</code> 区别</h3><h3 id="http-中的-post-请求的-body-体使用-form-urlencoded-和-multipart-form-data-的区别" tabindex="-1"><a class="header-anchor" href="#http-中的-post-请求的-body-体使用-form-urlencoded-和-multipart-form-data-的区别" aria-hidden="true">#</a> <code>HTTP</code> 中的 <code>POST</code> 请求的 <code>body</code> 体使用 <code>form-urlencoded</code> 和 <code>multipart/form-data</code> 的区别？</h3><h3 id="post-请求参数能放在-url-中吗" tabindex="-1"><a class="header-anchor" href="#post-请求参数能放在-url-中吗" aria-hidden="true">#</a> <code>POST</code> 请求参数能放在 <code>URL</code> 中吗？</h3><h3 id="get-请求参数一定是放在-url-中的吗" tabindex="-1"><a class="header-anchor" href="#get-请求参数一定是放在-url-中的吗" aria-hidden="true">#</a> <code>GET</code> 请求参数一定是放在 <code>URL</code> 中的吗？</h3><h3 id="如何用-http-实现长连接" tabindex="-1"><a class="header-anchor" href="#如何用-http-实现长连接" aria-hidden="true">#</a> 如何用 <code>HTTP</code> 实现长连接？</h3><h3 id="http2-0-针对同一个域名的多个请求-会建立多少个-tcp-连接" tabindex="-1"><a class="header-anchor" href="#http2-0-针对同一个域名的多个请求-会建立多少个-tcp-连接" aria-hidden="true">#</a> <code>HTTP2.0</code> 针对同一个域名的多个请求，会建立多少个 <code>TCP</code> 连接？</h3><h3 id="❓http-各个版本的区别" tabindex="-1"><a class="header-anchor" href="#❓http-各个版本的区别" aria-hidden="true">#</a> ❓<code>HTTP</code> 各个版本的区别</h3><details class="hint-container details"><summary>💡</summary><ul><li><code>HTTP</code> 1.0 : 最早期版本，每次请求都会重新创建 <code>TCP</code> 的连接的创建和释放，造成极大的资源消耗。属于“非持续性连接”。</li><li><code>HTTP</code> 1.1 : 改善了 1.0 版本的问题，修正为“持续性连接”。一次 <code>TCP</code> 连接可以发送多个请求和回复。引入 <code>pipeline</code> (管道)机制，可以同时发送多个请求，但是响应会按照请求队列的先后顺序进行，被称为“队头阻塞”问题。</li><li><code>HTTP</code> 2.0 : 优化了传输数据格式(1.x 文本 -&gt; 二进制)，减少了解析复杂度和提升传输速度。通过多路复用机制，解决了 1.0 “队头阻塞” 的问题，一次连接可以同时进行多个请求和响应。头信息压缩处理，减少数据体积。添加了服务器推送功能。</li><li><code>HTTP</code> 3.0 : 开发中... <code>TCP</code> -&gt; <code>QUIC</code></li></ul></details><h3 id="https-比起-http-有什么缺陷" tabindex="-1"><a class="header-anchor" href="#https-比起-http-有什么缺陷" aria-hidden="true">#</a> <code>HTTPS</code> 比起 <code>HTTP</code> 有什么缺陷？</h3><h3 id="ssl-证书除了压缩加密-还有什么别的用处" tabindex="-1"><a class="header-anchor" href="#ssl-证书除了压缩加密-还有什么别的用处" aria-hidden="true">#</a> <code>SSL</code> 证书除了压缩加密，还有什么别的用处？</h3><h3 id="http-断点续传涉及到哪些字段-怎么确保分片全部传输完后-文件的完整性和无篡改" tabindex="-1"><a class="header-anchor" href="#http-断点续传涉及到哪些字段-怎么确保分片全部传输完后-文件的完整性和无篡改" aria-hidden="true">#</a> <code>HTTP</code> 断点续传涉及到哪些字段？怎么确保分片全部传输完后，文件的完整性和无篡改？</h3><h3 id="如何设计一个-https-抓包" tabindex="-1"><a class="header-anchor" href="#如何设计一个-https-抓包" aria-hidden="true">#</a> 如何设计一个 <code>HTTPS</code> 抓包？</h3><h3 id="说说为什么要设计-304-这个状态码" tabindex="-1"><a class="header-anchor" href="#说说为什么要设计-304-这个状态码" aria-hidden="true">#</a> 说说为什么要设计 304 这个状态码？</h3><details class="hint-container details"><summary>详情</summary><p>HTTP 304状态码也被称作&quot;Not Modified&quot;，即“未被修改”。当客户端发送一个带有 If-Modified-Since 或 If-None-Match 头的条件请求时，服务器可以使用这个状态码来告知客户端，自从上次获取资源以来，资源没有任何改变，所以客户端可以继续使用它的本地拷贝。</p><p>设计304状态码的主要原因有两个：</p><ol><li><p>提高效率：如果资源自上次获取以来没有发生改变，那么重新发送该资源显然是一种浪费，特别是对于大型资源（如图像、视频、大型CSS或JavaScript文件）而言。304状态码让服务器有可能仅仅通过发送一个小的HTTP头来满足请求，这显著减少了数据量，节省了带宽，提高了响应速度。</p></li><li><p>减少服务器负载：对于很多动态生成的资源（比如基于数据库的网页内容），每次请求都生成和发送新资源可能会给服务器带来很大的计算负担，通过发送一个304状态，服务器可以避开这个负担。</p></li></ol><p>综上所述，304状态码为了提高Web性能，优化用户体验，减少服务器负载而设计。</p></details><h3 id="http-状态码-2xx-3xx-4xx-5xx分别代表什么" tabindex="-1"><a class="header-anchor" href="#http-状态码-2xx-3xx-4xx-5xx分别代表什么" aria-hidden="true">#</a> HTTP 状态码，2XX，3XX，4XX，5XX分别代表什么？</h3><details class="hint-container details"><summary>详情</summary><p>HTTP状态码是服务器在处理客户端请求时对该请求的响应状态进行标识的一种方式。下面是关于2XX, 3XX, 4XX, 5XX的简单解释：</p><ol><li><p>2XX（成功）- 表示成功处理了请求的状态码。如：</p><ul><li>200 OK，表示请求成功。</li><li>201 Created，表示已创建成功。</li><li>204 No Content，表示处理成功，但无需返回内容。</li></ul></li><li><p>3XX（重定向）- 表示需要客户端进行额外操作的状态码。如：</p><ul><li>301 Moved Permanently，表示资源已被永久移动。</li><li>302 Found，表示资源临时移动。</li><li>304 Not Modified，表示资源未更改(缓存)。</li></ul></li><li><p>4XX（客户端错误） - 表示客户端请求有错误的状态码。如：</p><ul><li>400 Bad Request，表示请求格式错误。</li><li>401 Unauthorized，表示请求未被授权。</li><li>404 Not Found，表示请求的资源不存在。</li></ul></li><li><p>5XX（服务器错误） - 表示服务器在处理请求时发生错误的状态码。如：</p><ul><li>500 Internal Server Error，表示服务器内部错误。</li><li>502 Bad Gateway，表示网关错误。</li><li>503 Service Unavailable，表示服务器当前无法处理请求。</li></ul></li></ol><p>这些状态码为客户端和服务器之间的通信提供了一种简洁、标准化的方式来表示请求的处理结果。</p></details><h3 id="在北京-http-请求服务器响应快-可能离服务器距离近-而在上海访问就非常慢-会是什么原因-如果用户投诉-怎么分析这个问题" tabindex="-1"><a class="header-anchor" href="#在北京-http-请求服务器响应快-可能离服务器距离近-而在上海访问就非常慢-会是什么原因-如果用户投诉-怎么分析这个问题" aria-hidden="true">#</a> 在北京 <code>HTTP</code> 请求服务器响应快，可能离服务器距离近；而在上海访问就非常慢，会是什么原因？如果用户投诉，怎么分析这个问题？</h3><details class="hint-container details"><summary>详情</summary><p>当在某个地点访问服务器比其他地点慢时，可能的原因有很多，可能是网络带宽问题，也可能是路由问题，甚至可能是硬件问题。如果用户进行投诉，可以按照以下步骤分析：</p><ol><li><p>网络状况检测：首先可以进行一些基础的网络性能测试，比如 Ping 和 Traceroute，用来检测数据包到达服务器所需的时间以及经过的节点。Ping 可以查看网络延迟，Traceroute 可以看到数据包到达服务器所经过的所有路由节点。如果发现某一跳的延迟特别高，可能就是出问题的地方。</p></li><li><p>CDN 是否使用：如果服务器使用了内容分发网络 (CDN)，检查 CDN 是否在有问题的地方正常工作。CDN 运营商通常会在全国各地设立节点，如果某个地方的节点出现问题，可能会导致该地区的访问速度变慢。</p></li><li><p>带宽查看：查看服务器的带宽使用情况，如果带宽使用过高，可能会导致访问速度变慢。</p></li><li><p>服务器性能查看：分析服务器性能指标，如CPU使用率、内存使用情况、I/O等，如果服务器负载过高，可能会影响服务的响应时间。</p></li><li><p>投诉用户所在网络环境分析：了解投诉用户的网络环境，如网络运营商，网络类型（光纤、ADSL、4G等），或者在其他网络环境下访问情况，以排除是用户本身网络原因导致的问题。</p></li><li><p>应用层面的检查：除了硬件和网络，还要检查应用层面，比如你的服务器是不是出现了错误、是否有大量的请求等。</p></li></ol><p>最后，如果问题还是无法定位，或者是跨越多个网络运营商的问题，则需要与网络服务提供商进行沟通，他们可能能提供更多的信息或者解决方案。</p></details><hr><h2 id="dns" tabindex="-1"><a class="header-anchor" href="#dns" aria-hidden="true">#</a> DNS</h2><h3 id="为什么能通过一个-url-就能请求到对应的资源" tabindex="-1"><a class="header-anchor" href="#为什么能通过一个-url-就能请求到对应的资源" aria-hidden="true">#</a> 为什么能通过一个 <code>URL</code> 就能请求到对应的资源？</h3><h3 id="dns-是什么" tabindex="-1"><a class="header-anchor" href="#dns-是什么" aria-hidden="true">#</a> <code>DNS</code> 是什么？</h3><h3 id="dns-解析过程" tabindex="-1"><a class="header-anchor" href="#dns-解析过程" aria-hidden="true">#</a> <code>DNS</code> 解析过程？</h3><h3 id="dns-为什么用-udp-为什么不用-tcp" tabindex="-1"><a class="header-anchor" href="#dns-为什么用-udp-为什么不用-tcp" aria-hidden="true">#</a> <code>DNS</code> 为什么用 <code>UDP</code>，为什么不用 <code>TCP</code>？</h3><hr><h2 id="socket" tabindex="-1"><a class="header-anchor" href="#socket" aria-hidden="true">#</a> Socket</h2><h3 id="❓socket-了解吗" tabindex="-1"><a class="header-anchor" href="#❓socket-了解吗" aria-hidden="true">#</a> ❓<code>Socket</code> 了解吗？</h3><hr><h2 id="ip" tabindex="-1"><a class="header-anchor" href="#ip" aria-hidden="true">#</a> IP</h2><h3 id="除了好记以外-为什么要用域名访问服务器-直接用-ip-不行吗" tabindex="-1"><a class="header-anchor" href="#除了好记以外-为什么要用域名访问服务器-直接用-ip-不行吗" aria-hidden="true">#</a> 除了好记以外，为什么要用域名访问服务器，直接用 <code>IP</code> 不行吗？</h3><h3 id="判断一个字符串是不是-ipv6-地址" tabindex="-1"><a class="header-anchor" href="#判断一个字符串是不是-ipv6-地址" aria-hidden="true">#</a> 判断一个字符串是不是 <code>IPv6</code> 地址？</h3><hr><h2 id="抓包" tabindex="-1"><a class="header-anchor" href="#抓包" aria-hidden="true">#</a> 抓包</h2><h3 id="charles-抓包软件的原理" tabindex="-1"><a class="header-anchor" href="#charles-抓包软件的原理" aria-hidden="true">#</a> <code>Charles</code> 抓包软件的原理</h3><details class="hint-container details"><summary>💡</summary><p>可以将它理解成中间人攻击。客户端将 <code>Charles</code> 作为代理服务器(中间人)。客户端所有请求都会先发送给 <code>Charles</code>，<code>Charles</code> 再将客户端的请求转发给服务器。<code>Charles</code> 收到服务器响应之后，再将从服务器收到的回复内容转发给客户端。这样请求和响应数据都被 <code>Charles</code> 记录下来，再通过界面展示即可。</p><p>对于 <code>HTTP</code> 相对来说比较简单，直接进行接收和转发即可。而 <code>HTTPS</code> 中涉及 <code>CA</code> 认证，所以客户端需要进行的操作信任 <code>Charles</code> 的证书，这样通过 <code>Charles</code> 发送给客户端的公钥就可以通过这个证书校验成功，从而完成通信。</p></details><h3 id="不使用-charles-4g-网络如何抓包" tabindex="-1"><a class="header-anchor" href="#不使用-charles-4g-网络如何抓包" aria-hidden="true">#</a> 不使用 <code>Charles</code>，<code>4G</code> 网络如何抓包？</h3><h3 id="为什么-wireshark-不能直接抓取-ssl-的原始数据" tabindex="-1"><a class="header-anchor" href="#为什么-wireshark-不能直接抓取-ssl-的原始数据" aria-hidden="true">#</a> 为什么 <code>Wireshark</code> 不能直接抓取 <code>SSL</code> 的原始数据？</h3><h3 id="抓包工具抓取-https-的原理" tabindex="-1"><a class="header-anchor" href="#抓包工具抓取-https-的原理" aria-hidden="true">#</a> 抓包工具抓取 <code>HTTPS</code> 的原理？</h3><hr><h2 id="其它知识点" tabindex="-1"><a class="header-anchor" href="#其它知识点" aria-hidden="true">#</a> 其它知识点</h2><h3 id="ping-是什么协议" tabindex="-1"><a class="header-anchor" href="#ping-是什么协议" aria-hidden="true">#</a> <code>Ping</code> 是什么协议？</h3><h3 id="打开浏览器-输入网址到看到网站首页都经历那些过程-你觉得最耗时是哪里-怎么优化" tabindex="-1"><a class="header-anchor" href="#打开浏览器-输入网址到看到网站首页都经历那些过程-你觉得最耗时是哪里-怎么优化" aria-hidden="true">#</a> 打开浏览器，输入网址到看到网站首页都经历那些过程？你觉得最耗时是哪里，怎么优化？</h3><h3 id="❓cookie-vs-session" tabindex="-1"><a class="header-anchor" href="#❓cookie-vs-session" aria-hidden="true">#</a> ❓<code>Cookie</code> vs <code>Session</code></h3><h3 id="网络模型了解么-有哪几种-说说你的看法" tabindex="-1"><a class="header-anchor" href="#网络模型了解么-有哪几种-说说你的看法" aria-hidden="true">#</a> 网络模型了解么？有哪几种？说说你的看法？</h3><h3 id="流量控制和拥塞避免的区别" tabindex="-1"><a class="header-anchor" href="#流量控制和拥塞避免的区别" aria-hidden="true">#</a> 流量控制和拥塞避免的区别？</h3><h3 id="使用-ssh-连接云服务器-整个网络通信过程" tabindex="-1"><a class="header-anchor" href="#使用-ssh-连接云服务器-整个网络通信过程" aria-hidden="true">#</a> 使用 <code>ssh</code> 连接云服务器，整个网络通信过程？</h3><h3 id="如果发现微信和-qq-都可以正常使用-但是浏览器网页打不开-可能是什么原因-有什么排查的办法" tabindex="-1"><a class="header-anchor" href="#如果发现微信和-qq-都可以正常使用-但是浏览器网页打不开-可能是什么原因-有什么排查的办法" aria-hidden="true">#</a> 如果发现微信和 QQ 都可以正常使用，但是浏览器网页打不开，可能是什么原因，有什么排查的办法？</h3>',82);function r(t,l){return d(),a("div",null,[c(" more "),i])}const p=e(h,[["render",r],["__file","0x05.network.html.vue"]]);export{p as default};
